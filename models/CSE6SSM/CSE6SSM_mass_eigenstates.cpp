// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at Wed 3 Jun 2015 23:53:01

/**
 * @file CSE6SSM_mass_eigenstates.cpp
 * @brief implementation of the CSE6SSM mass eigenstates
 *
 * Contains the definition of the CSE6SSM mass eigenstates class methods
 * which calculate the pole masses and mixings from the DRbar
 * parameters.
 *
 * This file was generated at Wed 3 Jun 2015 23:53:01 with FlexibleSUSY
 * 1.1.0 (git commit: v1.1.0) and SARAH 4.5.6 .
 */

#include "CSE6SSM_mass_eigenstates.hpp"
#include "eigen_utils.hpp"
#include "wrappers.hpp"
#include "linalg2.hpp"
#include "numerics2.hpp"
#include "logger.hpp"
#include "error.hpp"
#include "config.h"
#include "pv.hpp"
#include "functors.hpp"

#include "sfermions.hpp"
#include "nmssm_twoloophiggs.h"

#include <cmath>
#include <iostream>
#include <algorithm>

#ifdef ENABLE_THREADS
#include <thread>
#endif

namespace flexiblesusy {

using namespace CSE6SSM_info;

#define PHYSICAL(parameter) physical.parameter

#define HIGGS_2LOOP_CORRECTION_AT_AS     two_loop_corrections.higgs_at_as
#define HIGGS_2LOOP_CORRECTION_AB_AS     two_loop_corrections.higgs_ab_as
#define HIGGS_2LOOP_CORRECTION_AT_AT     two_loop_corrections.higgs_at_at
#define HIGGS_2LOOP_CORRECTION_ATAU_ATAU two_loop_corrections.higgs_atau_atau
#define TOP_2LOOP_CORRECTION_QCD         two_loop_corrections.top_qcd

#ifdef ENABLE_THREADS
   std::mutex CSE6SSM_mass_eigenstates::mtx_fortran;
   #define LOCK_MUTEX() mtx_fortran.lock()
   #define UNLOCK_MUTEX() mtx_fortran.unlock()
#else
   #define LOCK_MUTEX()
   #define UNLOCK_MUTEX()
#endif

CSE6SSM_mass_eigenstates::CSE6SSM_mass_eigenstates()
   : CSE6SSM_soft_parameters()
   , number_of_mass_iterations(20)
   , pole_mass_loop_order(2)
   , diagonalization_precision(1.0e-3)
   , calculate_sm_pole_masses(false)
   , force_output(false)
   , physical()
   , drbar()
   , two_loop_corrections()
   , problems(CSE6SSM_info::particle_names)
#ifdef ENABLE_THREADS
   , thread_exception()
#endif
   , MVG(0), MGlu(0), MFv(Eigen::Array<double,3,1>::Zero()), MChaP(0), MVP(0),
      MVZ(0), MVZp(0), MSd(Eigen::Array<double,6,1>::Zero()), MSv(Eigen::Array<
      double,3,1>::Zero()), MSu(Eigen::Array<double,6,1>::Zero()), MSe(
      Eigen::Array<double,6,1>::Zero()), MSDX(Eigen::Array<double,6,1>::Zero()),
      Mhh(Eigen::Array<double,5,1>::Zero()), MAh(Eigen::Array<double,5,1>::Zero())
      , MHpm(Eigen::Array<double,2,1>::Zero()), MChi(Eigen::Array<double,8,1>
      ::Zero()), MCha(Eigen::Array<double,2,1>::Zero()), MFe(Eigen::Array<double,3
      ,1>::Zero()), MFd(Eigen::Array<double,3,1>::Zero()), MFu(Eigen::Array<double
      ,3,1>::Zero()), MFDX(Eigen::Array<double,3,1>::Zero()), MSHI0(Eigen::Array<
      double,7,1>::Zero()), MSHIPM(Eigen::Array<double,4,1>::Zero()), MChaI(
      Eigen::Array<double,2,1>::Zero()), MChiI(Eigen::Array<double,7,1>::Zero()),
      MSHp0(Eigen::Array<double,2,1>::Zero()), MSHpp(Eigen::Array<double,2,1>
      ::Zero()), MChiP(Eigen::Array<double,2,1>::Zero()), MVWm(0)

   , ZD(Eigen::Matrix<double,6,6>::Zero()), ZV(Eigen::Matrix<double,3,3>::Zero(
      )), ZU(Eigen::Matrix<double,6,6>::Zero()), ZE(Eigen::Matrix<double,6,6>
      ::Zero()), ZDX(Eigen::Matrix<double,6,6>::Zero()), ZH(Eigen::Matrix<double,5
      ,5>::Zero()), ZA(Eigen::Matrix<double,5,5>::Zero()), ZP(Eigen::Matrix<double
      ,2,2>::Zero()), ZN(Eigen::Matrix<std::complex<double>,8,8>::Zero()), UM(
      Eigen::Matrix<std::complex<double>,2,2>::Zero()), UP(Eigen::Matrix<
      std::complex<double>,2,2>::Zero()), ZEL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZER(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), ZUL(Eigen::Matrix<std::complex<double>,3
      ,3>::Zero()), ZUR(Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXL(
      Eigen::Matrix<std::complex<double>,3,3>::Zero()), ZDXR(Eigen::Matrix<
      std::complex<double>,3,3>::Zero()), UHI0(Eigen::Matrix<double,7,7>::Zero()),
      UHIPM(Eigen::Matrix<double,4,4>::Zero()), ZMI(Eigen::Matrix<std::complex<
      double>,2,2>::Zero()), ZPI(Eigen::Matrix<std::complex<double>,2,2>::Zero()),
      ZNI(Eigen::Matrix<std::complex<double>,7,7>::Zero()), UHp0(Eigen::Matrix<
      double,2,2>::Zero()), UHpp(Eigen::Matrix<double,2,2>::Zero()), ZNp(
      Eigen::Matrix<std::complex<double>,2,2>::Zero())

   , PhaseGlu(1,0)

{
}

CSE6SSM_mass_eigenstates::~CSE6SSM_mass_eigenstates()
{
}

void CSE6SSM_mass_eigenstates::do_calculate_sm_pole_masses(bool flag)
{
   calculate_sm_pole_masses = flag;
}

bool CSE6SSM_mass_eigenstates::do_calculate_sm_pole_masses() const
{
   return calculate_sm_pole_masses;
}

void CSE6SSM_mass_eigenstates::do_force_output(bool flag)
{
   force_output = flag;
}

bool CSE6SSM_mass_eigenstates::do_force_output() const
{
   return force_output;
}

void CSE6SSM_mass_eigenstates::set_two_loop_corrections(const Two_loop_corrections& two_loop_corrections_)
{
   two_loop_corrections = two_loop_corrections_;
}

void CSE6SSM_mass_eigenstates::set_number_of_mass_iterations(std::size_t iterations)
{
   number_of_mass_iterations = iterations;
}

void CSE6SSM_mass_eigenstates::set_diagonalization_precision(double precision)
{
   diagonalization_precision = precision;
}

double CSE6SSM_mass_eigenstates::get_diagonalization_precision() const
{
   return diagonalization_precision;
}

void CSE6SSM_mass_eigenstates::set_pole_mass_loop_order(unsigned loop_order)
{
   pole_mass_loop_order = loop_order;
}

const CSE6SSM_physical& CSE6SSM_mass_eigenstates::get_physical() const
{
   return physical;
}

CSE6SSM_physical& CSE6SSM_mass_eigenstates::get_physical()
{
   return physical;
}

void CSE6SSM_mass_eigenstates::set_physical(const CSE6SSM_physical& physical_)
{
   physical = physical_;
}

const CSE6SSM_physical& CSE6SSM_mass_eigenstates::get_drbar_masses() const
{
   return drbar;
}

CSE6SSM_physical& CSE6SSM_mass_eigenstates::get_drbar_masses()
{
   return drbar;
}

const Problems<CSE6SSM_info::NUMBER_OF_PARTICLES>& CSE6SSM_mass_eigenstates::get_problems() const
{
   return problems;
}

Problems<CSE6SSM_info::NUMBER_OF_PARTICLES>& CSE6SSM_mass_eigenstates::get_problems()
{
   return problems;
}

int CSE6SSM_mass_eigenstates::solve_ewsb_tree_level_via_soft_higgs_masses()
{
   int error = 0;

   const double TanBeta = vu / vd;

   const double new_mHd2 = Re(0.7071067811865476 * vs * TanBeta * TLambdax
      - 0.5 * vphi * vsb * TanBeta * Sigmax * Lambdax - 0.075 * Sqr(vd) * Sqr(g1)
      - 0.1125 * Sqr(vd) * Sqr(g1p) - 0.125 * Sqr(vd) * Sqr(g2) - 0.5 * AbsSqr(Lambdax)
      * Sqr(vs) + 0.0375 * QS * Sqr(g1p) * Sqr(vs) - 0.0375 * QS * Sqr(g1p) * Sqr(vsb)
      - 0.5 * AbsSqr(Lambdax) * Sqr(vu) + 0.075 * Sqr(g1) * Sqr(vu) - 0.075 * Sqr(g1p)
      * Sqr(vu) + 0.125 * Sqr(g2) * Sqr(vu));

   const double oneOverTanBeta = 1.0 / TanBeta;

   const double new_mHu2 = Re(0.7071067811865476 * oneOverTanBeta * vs * TLambdax
      - 0.5 * oneOverTanBeta * vphi * vsb * Sigmax * Lambdax - 0.075 * Sqr(vu) *
      Sqr(g1) - 0.05 * Sqr(vu) * Sqr(g1p) - 0.125 * Sqr(vu) * Sqr(g2) - 0.5 *
      AbsSqr(Lambdax) * Sqr(vd) + 0.075 * Sqr(g1) * Sqr(vd) - 0.075 * Sqr(g1p) *
      Sqr(vd) + 0.125 * Sqr(g2) * Sqr(vd) - 0.5 * AbsSqr(Lambdax) * Sqr(vs) +
      0.025 * QS * Sqr(g1p) * Sqr(vs) - 0.025 * QS * Sqr(g1p) * Sqr(vsb));

   const double TanTheta = vsb / vs;

   const double new_ms2 = Re(0.7071067811865476 * MuPhi * vphi * TanTheta * Sigmax
      + 0.7071067811865476 * vd * vu * TLambdax / vs + 0.7071067811865476 * vphi
      * TanTheta * TSigmax + Sigmax * XiF * TanTheta - 0.0125 * Sqr(vs) * Sqr(g1p)
      * Sqr(QS) - 0.5 * AbsSqr(Lambdax) * Sqr(vd) + 0.0375 * QS * Sqr(g1p) * Sqr(vd)
      - 0.5 * AbsSqr(Sigmax) * Sqr(vphi) + 0.5 * TanTheta * Sigmax * KappaPr *
      Sqr(vphi) - 0.5 * AbsSqr(Sigmax) * Sqr(vsb) + 0.0125 * Sqr(g1p) * Sqr(QS) *
      Sqr(vsb) - 0.5 * AbsSqr(Lambdax) * Sqr(vu) + 0.025 * QS * Sqr(g1p) * Sqr(vu));

   const double oneOverTanTheta = 1.0 / TanTheta;

   const double new_msbar2 = Re(0.7071067811865476 * MuPhi * vphi * oneOverTanTheta
      * Sigmax + 0.7071067811865476 * vphi * oneOverTanTheta * TSigmax - 0.5 * vd
      * vphi * vu * Sigmax * Lambdax / vsb + oneOverTanTheta * Sigmax * XiF - 0.0125
      * Sqr(vsb) *Sqr(g1p) * Sqr(QS) - 0.0375 * QS * Sqr(g1p) * Sqr(vd) - 0.5 *
      AbsSqr(Sigmax) * Sqr(vphi) + 0.5 * oneOverTanTheta * Sigmax * KappaPr *
      Sqr(vphi) - 0.5 * AbsSqr(Sigmax) * Sqr(vs) + 0.0125 * Sqr(g1p) * Sqr(QS) *
      Sqr(vs) - 0.025 * QS * Sqr(g1p) * Sqr(vu));

   const double new_mphi2 = Re(-AbsSqr(MuPhi) - Sqr(vphi) * AbsSqr(KappaPr) - BMuPhi
      - 1.4142135623730951 * MuPhi * XiF / vphi + 0.7071067811865476 * MuPhi * vs
      * vsb * Sigmax / vphi - 1.4142135623730951 * LXiF / vphi + 0.7071067811865476
      * vs * vsb * TSigmax / vphi - 2.0 * XiF * KappaPr + vs * vsb * Sigmax * KappaPr
      - 0.5 * vd * vsb * vu * Sigmax * Lambdax / vphi - 2.121320343559643 * MuPhi *
      KappaPr * vphi - 0.7071067811865476 * TKappaPr * vphi - 0.5 * AbsSqr(Sigmax)
      * Sqr(vs) - 0.5 * AbsSqr(Sigmax) * Sqr(vsb));

   if (IsFinite(new_mHd2))
      mHd2 = new_mHd2;
   else
      error = 1;

   if (IsFinite(new_mHu2))
      mHu2 = new_mHu2;
   else
      error = 1;

   if (IsFinite(new_ms2))
      ms2 = new_ms2;
   else
      error = 1;

   if (IsFinite(new_msbar2))
      msbar2 = new_msbar2;
   else
      error = 1;

   if (IsFinite(new_mphi2))
      mphi2 = new_mphi2;
   else
      error = 1;


   return error;
}

const Eigen::Array<double,5,1> CSE6SSM_mass_eigenstates::get_ewsb_tree_level_soft_masses()
{
   const auto old_mHd2 = mHd2;
   const auto old_mHu2 = mHu2;
   const auto old_ms2 = ms2;
   const auto old_msbar2 = msbar2;
   const auto old_mphi2 = mphi2;

   solve_ewsb_tree_level_via_soft_higgs_masses();

   Eigen::Array<double,5,1> masses;

   masses << mHd2, mHu2, ms2, msbar2, mphi2;

   mHd2 = old_mHd2;
   mHu2 = old_mHu2;
   ms2 = old_ms2;
   msbar2 = old_msbar2;
   mphi2 = old_mphi2;

   return masses;
}

void CSE6SSM_mass_eigenstates::print(std::ostream& ostr) const
{
   CSE6SSM_soft_parameters::print(ostr);
   ostr << "----------------------------------------\n"
           "tree-level DRbar masses:\n"
           "----------------------------------------\n";
   ostr << "MVG = " << MVG << '\n';
   ostr << "MGlu = " << MGlu << '\n';
   ostr << "MFv = " << MFv.transpose() << '\n';
   ostr << "MChaP = " << MChaP << '\n';
   ostr << "MVP = " << MVP << '\n';
   ostr << "MVZ = " << MVZ << '\n';
   ostr << "MVZp = " << MVZp << '\n';
   ostr << "MSd = " << MSd.transpose() << '\n';
   ostr << "MSv = " << MSv.transpose() << '\n';
   ostr << "MSu = " << MSu.transpose() << '\n';
   ostr << "MSe = " << MSe.transpose() << '\n';
   ostr << "MSDX = " << MSDX.transpose() << '\n';
   ostr << "Mhh = " << Mhh.transpose() << '\n';
   ostr << "MAh = " << MAh.transpose() << '\n';
   ostr << "MHpm = " << MHpm.transpose() << '\n';
   ostr << "MChi = " << MChi.transpose() << '\n';
   ostr << "MCha = " << MCha.transpose() << '\n';
   ostr << "MFe = " << MFe.transpose() << '\n';
   ostr << "MFd = " << MFd.transpose() << '\n';
   ostr << "MFu = " << MFu.transpose() << '\n';
   ostr << "MFDX = " << MFDX.transpose() << '\n';
   ostr << "MSHI0 = " << MSHI0.transpose() << '\n';
   ostr << "MSHIPM = " << MSHIPM.transpose() << '\n';
   ostr << "MChaI = " << MChaI.transpose() << '\n';
   ostr << "MChiI = " << MChiI.transpose() << '\n';
   ostr << "MSHp0 = " << MSHp0.transpose() << '\n';
   ostr << "MSHpp = " << MSHpp.transpose() << '\n';
   ostr << "MChiP = " << MChiP.transpose() << '\n';
   ostr << "MVWm = " << MVWm << '\n';

   ostr << "----------------------------------------\n"
           "tree-level DRbar mixing matrices:\n"
           "----------------------------------------\n";
   ostr << "ZD = " << ZD << '\n';
   ostr << "ZV = " << ZV << '\n';
   ostr << "ZU = " << ZU << '\n';
   ostr << "ZE = " << ZE << '\n';
   ostr << "ZDX = " << ZDX << '\n';
   ostr << "ZH = " << ZH << '\n';
   ostr << "ZA = " << ZA << '\n';
   ostr << "ZP = " << ZP << '\n';
   ostr << "ZN = " << ZN << '\n';
   ostr << "UM = " << UM << '\n';
   ostr << "UP = " << UP << '\n';
   ostr << "ZEL = " << ZEL << '\n';
   ostr << "ZER = " << ZER << '\n';
   ostr << "ZDL = " << ZDL << '\n';
   ostr << "ZDR = " << ZDR << '\n';
   ostr << "ZUL = " << ZUL << '\n';
   ostr << "ZUR = " << ZUR << '\n';
   ostr << "ZDXL = " << ZDXL << '\n';
   ostr << "ZDXR = " << ZDXR << '\n';
   ostr << "UHI0 = " << UHI0 << '\n';
   ostr << "UHIPM = " << UHIPM << '\n';
   ostr << "ZMI = " << ZMI << '\n';
   ostr << "ZPI = " << ZPI << '\n';
   ostr << "ZNI = " << ZNI << '\n';
   ostr << "UHp0 = " << UHp0 << '\n';
   ostr << "UHpp = " << UHpp << '\n';
   ostr << "ZNp = " << ZNp << '\n';

   physical.print(ostr);
}

/**
 * wrapper routines for passarino Veltman functions
 */

double CSE6SSM_mass_eigenstates::A0(double m) const
{
   return passarino_veltman::ReA0(m*m, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::B0(double p, double m1, double m2) const
{
   return passarino_veltman::ReB0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::B1(double p, double m1, double m2) const
{
   return passarino_veltman::ReB1(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::B00(double p, double m1, double m2) const
{
   return passarino_veltman::ReB00(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::B22(double p, double m1, double m2) const
{
   return passarino_veltman::ReB22(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::H0(double p, double m1, double m2) const
{
   return passarino_veltman::ReH0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::F0(double p, double m1, double m2) const
{
   return passarino_veltman::ReF0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

double CSE6SSM_mass_eigenstates::G0(double p, double m1, double m2) const
{
   return passarino_veltman::ReG0(p*p, m1*m1, m2*m2, Sqr(get_scale()));
}

/**
 * routine which finds the DRbar mass eigenstates and mixings.
 */
void CSE6SSM_mass_eigenstates::calculate_DRbar_masses()
{
   const auto old_mHd2 = mHd2;
   const auto old_mHu2 = mHu2;
   const auto old_ms2 = ms2;
   const auto old_msbar2 = msbar2;
   const auto old_mphi2 = mphi2;

   solve_ewsb_tree_level_via_soft_higgs_masses();

   calculate_MVG();
   calculate_MVP();
   calculate_MVZ();
   calculate_MVZp();
   calculate_MVWm();
   calculate_MGlu();
   calculate_MFv();
   calculate_MChaP();
   calculate_MSd();
   calculate_MSv();
   calculate_MSu();
   calculate_MSe();
   calculate_MSDX();
   calculate_Mhh();
   calculate_MAh();
   calculate_MHpm();
   calculate_MChi();
   calculate_MCha();
   calculate_MFe();
   calculate_MFd();
   calculate_MFu();
   calculate_MFDX();
   calculate_MSHI0();
   calculate_MSHIPM();
   calculate_MChaI();
   calculate_MChiI();
   calculate_MSHp0();
   calculate_MSHpp();
   calculate_MChiP();

   mHd2 = old_mHd2;
   mHu2 = old_mHu2;
   ms2 = old_ms2;
   msbar2 = old_msbar2;
   mphi2 = old_mphi2;

}

/**
 * Backward compatibility routine which finds the DRbar mass
 * eigenstates and mixings.
 */
void CSE6SSM_mass_eigenstates::calculate_DRbar_parameters()
{
   calculate_DRbar_masses();
}

/**
 * routine which finds the pole mass eigenstates and mixings.
 */
void CSE6SSM_mass_eigenstates::calculate_pole_masses()
{
#ifdef ENABLE_THREADS
   thread_exception = 0;

   std::thread thread_MAh(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MAh_pole));
   std::thread thread_MCha(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MCha_pole));
   std::thread thread_MChaI(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MChaI_pole));
   std::thread thread_MChaP(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MChaP_pole));
   std::thread thread_MChi(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MChi_pole));
   std::thread thread_MChiI(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MChiI_pole));
   std::thread thread_MChiP(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MChiP_pole));
   std::thread thread_MFDX(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MFDX_pole));
   std::thread thread_MGlu(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MGlu_pole));
   std::thread thread_Mhh(Thread(this, &CSE6SSM_mass_eigenstates::calculate_Mhh_pole));
   std::thread thread_MHpm(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MHpm_pole));
   std::thread thread_MSd(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSd_pole));
   std::thread thread_MSDX(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSDX_pole));
   std::thread thread_MSe(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSe_pole));
   std::thread thread_MSHI0(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSHI0_pole));
   std::thread thread_MSHIPM(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSHIPM_pole));
   std::thread thread_MSHp0(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSHp0_pole));
   std::thread thread_MSHpp(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSHpp_pole));
   std::thread thread_MSu(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSu_pole));
   std::thread thread_MSv(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MSv_pole));
   std::thread thread_MVZp(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MVZp_pole));

   if (calculate_sm_pole_masses) {
      std::thread thread_MVG(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MVG_pole));
      std::thread thread_MFv(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MFv_pole));
      std::thread thread_MVP(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MVP_pole));
      std::thread thread_MVZ(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MVZ_pole));
      std::thread thread_MFe(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MFe_pole));
      std::thread thread_MFd(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MFd_pole));
      std::thread thread_MFu(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MFu_pole));
      std::thread thread_MVWm(Thread(this, &CSE6SSM_mass_eigenstates::calculate_MVWm_pole));
      thread_MVG.join();
      thread_MFv.join();
      thread_MVP.join();
      thread_MVZ.join();
      thread_MFe.join();
      thread_MFd.join();
      thread_MFu.join();
      thread_MVWm.join();
   }

   thread_MAh.join();
   thread_MCha.join();
   thread_MChaI.join();
   thread_MChaP.join();
   thread_MChi.join();
   thread_MChiI.join();
   thread_MChiP.join();
   thread_MFDX.join();
   thread_MGlu.join();
   thread_Mhh.join();
   thread_MHpm.join();
   thread_MSd.join();
   thread_MSDX.join();
   thread_MSe.join();
   thread_MSHI0.join();
   thread_MSHIPM.join();
   thread_MSHp0.join();
   thread_MSHpp.join();
   thread_MSu.join();
   thread_MSv.join();
   thread_MVZp.join();


   if (thread_exception != 0)
      std::rethrow_exception(thread_exception);
#else
   calculate_MAh_pole();
   calculate_MCha_pole();
   calculate_MChaI_pole();
   calculate_MChaP_pole();
   calculate_MChi_pole();
   calculate_MChiI_pole();
   calculate_MChiP_pole();
   calculate_MFDX_pole();
   calculate_MGlu_pole();
   calculate_Mhh_pole();
   calculate_MHpm_pole();
   calculate_MSd_pole();
   calculate_MSDX_pole();
   calculate_MSe_pole();
   calculate_MSHI0_pole();
   calculate_MSHIPM_pole();
   calculate_MSHp0_pole();
   calculate_MSHpp_pole();
   calculate_MSu_pole();
   calculate_MSv_pole();
   calculate_MVZp_pole();

   if (calculate_sm_pole_masses) {
      calculate_MVG_pole();
      calculate_MFv_pole();
      calculate_MVP_pole();
      calculate_MVZ_pole();
      calculate_MFe_pole();
      calculate_MFd_pole();
      calculate_MFu_pole();
      calculate_MVWm_pole();
   }

#endif
}

void CSE6SSM_mass_eigenstates::copy_DRbar_masses_to_pole_masses()
{
   PHYSICAL(MVG) = MVG;
   PHYSICAL(MGlu) = MGlu;
   PHYSICAL(MFv) = MFv;
   PHYSICAL(MChaP) = MChaP;
   PHYSICAL(MVP) = MVP;
   PHYSICAL(MVZ) = MVZ;
   PHYSICAL(MVZp) = MVZp;
   PHYSICAL(MSd) = MSd;
   PHYSICAL(ZD) = ZD;
   PHYSICAL(MSv) = MSv;
   PHYSICAL(ZV) = ZV;
   PHYSICAL(MSu) = MSu;
   PHYSICAL(ZU) = ZU;
   PHYSICAL(MSe) = MSe;
   PHYSICAL(ZE) = ZE;
   PHYSICAL(MSDX) = MSDX;
   PHYSICAL(ZDX) = ZDX;
   PHYSICAL(Mhh) = Mhh;
   PHYSICAL(ZH) = ZH;
   PHYSICAL(MAh) = MAh;
   PHYSICAL(ZA) = ZA;
   PHYSICAL(MHpm) = MHpm;
   PHYSICAL(ZP) = ZP;
   PHYSICAL(MChi) = MChi;
   PHYSICAL(ZN) = ZN;
   PHYSICAL(MCha) = MCha;
   PHYSICAL(UM) = UM;
   PHYSICAL(UP) = UP;
   PHYSICAL(MFe) = MFe;
   PHYSICAL(ZEL) = ZEL;
   PHYSICAL(ZER) = ZER;
   PHYSICAL(MFd) = MFd;
   PHYSICAL(ZDL) = ZDL;
   PHYSICAL(ZDR) = ZDR;
   PHYSICAL(MFu) = MFu;
   PHYSICAL(ZUL) = ZUL;
   PHYSICAL(ZUR) = ZUR;
   PHYSICAL(MFDX) = MFDX;
   PHYSICAL(ZDXL) = ZDXL;
   PHYSICAL(ZDXR) = ZDXR;
   PHYSICAL(MSHI0) = MSHI0;
   PHYSICAL(UHI0) = UHI0;
   PHYSICAL(MSHIPM) = MSHIPM;
   PHYSICAL(UHIPM) = UHIPM;
   PHYSICAL(MChaI) = MChaI;
   PHYSICAL(ZMI) = ZMI;
   PHYSICAL(ZPI) = ZPI;
   PHYSICAL(MChiI) = MChiI;
   PHYSICAL(ZNI) = ZNI;
   PHYSICAL(MSHp0) = MSHp0;
   PHYSICAL(UHp0) = UHp0;
   PHYSICAL(MSHpp) = MSHpp;
   PHYSICAL(UHpp) = UHpp;
   PHYSICAL(MChiP) = MChiP;
   PHYSICAL(ZNp) = ZNp;
   PHYSICAL(MVWm) = MVWm;

}

/**
 * reorders DRbar masses so that goldstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CSE6SSM_mass_eigenstates::reorder_DRbar_masses()
{
   move_goldstone_to(0, MVZ, MAh, ZA);
   move_goldstone_to(1, MVZp, MAh, ZA);
   move_goldstone_to(0, MVWm, MHpm, ZP);

   drbar.MAh = MAh;
   drbar.ZA = ZA;
   drbar.MHpm = MHpm;
   drbar.ZP = ZP;

}

/**
 * reorders pole masses so that goldstones are placed at the index
 * specified in the model files definition of the associated
 * gauge boson (see Z-boson definition in default particles.m file
 * in the Models directory of your SARAH distribution for example)
 */
void CSE6SSM_mass_eigenstates::reorder_pole_masses()
{
   move_goldstone_to(0, MVZ, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(1, MVZp, PHYSICAL(MAh), PHYSICAL(ZA));
   move_goldstone_to(0, MVWm, PHYSICAL(MHpm), PHYSICAL(ZP));

}

void CSE6SSM_mass_eigenstates::clear_DRbar_parameters()
{
   MVG = 0.;
   MGlu = 0.;
   MFv = Eigen::Matrix<double,3,1>::Zero();
   MChaP = 0.;
   MVP = 0.;
   MVZ = 0.;
   MVZp = 0.;
   MSd = Eigen::Matrix<double,6,1>::Zero();
   ZD = Eigen::Matrix<double,6,6>::Zero();
   MSv = Eigen::Matrix<double,3,1>::Zero();
   ZV = Eigen::Matrix<double,3,3>::Zero();
   MSu = Eigen::Matrix<double,6,1>::Zero();
   ZU = Eigen::Matrix<double,6,6>::Zero();
   MSe = Eigen::Matrix<double,6,1>::Zero();
   ZE = Eigen::Matrix<double,6,6>::Zero();
   MSDX = Eigen::Matrix<double,6,1>::Zero();
   ZDX = Eigen::Matrix<double,6,6>::Zero();
   Mhh = Eigen::Matrix<double,5,1>::Zero();
   ZH = Eigen::Matrix<double,5,5>::Zero();
   MAh = Eigen::Matrix<double,5,1>::Zero();
   ZA = Eigen::Matrix<double,5,5>::Zero();
   MHpm = Eigen::Matrix<double,2,1>::Zero();
   ZP = Eigen::Matrix<double,2,2>::Zero();
   MChi = Eigen::Matrix<double,8,1>::Zero();
   ZN = Eigen::Matrix<std::complex<double>,8,8>::Zero();
   MCha = Eigen::Matrix<double,2,1>::Zero();
   UM = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   UP = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MFe = Eigen::Matrix<double,3,1>::Zero();
   ZEL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZER = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFd = Eigen::Matrix<double,3,1>::Zero();
   ZDL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFu = Eigen::Matrix<double,3,1>::Zero();
   ZUL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZUR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MFDX = Eigen::Matrix<double,3,1>::Zero();
   ZDXL = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   ZDXR = Eigen::Matrix<std::complex<double>,3,3>::Zero();
   MSHI0 = Eigen::Matrix<double,7,1>::Zero();
   UHI0 = Eigen::Matrix<double,7,7>::Zero();
   MSHIPM = Eigen::Matrix<double,4,1>::Zero();
   UHIPM = Eigen::Matrix<double,4,4>::Zero();
   MChaI = Eigen::Matrix<double,2,1>::Zero();
   ZMI = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   ZPI = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MChiI = Eigen::Matrix<double,7,1>::Zero();
   ZNI = Eigen::Matrix<std::complex<double>,7,7>::Zero();
   MSHp0 = Eigen::Matrix<double,2,1>::Zero();
   UHp0 = Eigen::Matrix<double,2,2>::Zero();
   MSHpp = Eigen::Matrix<double,2,1>::Zero();
   UHpp = Eigen::Matrix<double,2,2>::Zero();
   MChiP = Eigen::Matrix<double,2,1>::Zero();
   ZNp = Eigen::Matrix<std::complex<double>,2,2>::Zero();
   MVWm = 0.;

   PhaseGlu = std::complex<double>(1.,0.);

   drbar.clear();

}

void CSE6SSM_mass_eigenstates::clear()
{
   CSE6SSM_soft_parameters::clear();
   clear_DRbar_parameters();
   physical.clear();
   problems.clear();
}

Eigen::Array<double,1,1> CSE6SSM_mass_eigenstates::get_MChargedHiggs() const
{
   Eigen::Array<double,1,1> MHpm_ChargedHiggs;
   Eigen::Array<double,1,1> MHpm_goldstone;

   MHpm_goldstone(0) = MVWm;

   remove_if_equal(MHpm, MHpm_goldstone, MHpm_ChargedHiggs);

   return MHpm_ChargedHiggs;
}

Eigen::Array<double,3,1> CSE6SSM_mass_eigenstates::get_MPseudoscalarHiggs() const
{
   Eigen::Array<double,3,1> MAh_PseudoscalarHiggs;
   Eigen::Array<double,2,1> MAh_goldstone;

   MAh_goldstone(0) = MVZ;
   MAh_goldstone(1) = MVZp;

   remove_if_equal(MAh, MAh_goldstone, MAh_PseudoscalarHiggs);

   return MAh_PseudoscalarHiggs;
}


double CSE6SSM_mass_eigenstates::get_mass_matrix_VG() const
{
   const double mass_matrix_VG = Re(0);

   return mass_matrix_VG;
}

void CSE6SSM_mass_eigenstates::calculate_MVG()
{
   const auto mass_matrix_VG = get_mass_matrix_VG();
   MVG = calculate_singlet_mass(mass_matrix_VG);
   drbar.MVG = MVG;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_Glu() const
{
   const double mass_matrix_Glu = Re(MassG);

   return mass_matrix_Glu;
}

void CSE6SSM_mass_eigenstates::calculate_MGlu()
{
   const auto mass_matrix_Glu = get_mass_matrix_Glu();
   MGlu = calculate_singlet_mass(mass_matrix_Glu, PhaseGlu);
   drbar.MGlu = MGlu;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_Fv() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fv;

   mass_matrix_Fv(0,0) = 0;
   mass_matrix_Fv(0,1) = 0;
   mass_matrix_Fv(0,2) = 0;
   mass_matrix_Fv(1,1) = 0;
   mass_matrix_Fv(1,2) = 0;
   mass_matrix_Fv(2,2) = 0;

   Symmetrize(mass_matrix_Fv);

   return mass_matrix_Fv;
}

void CSE6SSM_mass_eigenstates::calculate_MFv()
{
   MFv.setConstant(0);
   drbar.MFv = MFv;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_ChaP() const
{
   const double mass_matrix_ChaP = Re(MuPr - 0.7071067811865475*vphi*
      SigmaL);

   return mass_matrix_ChaP;
}

void CSE6SSM_mass_eigenstates::calculate_MChaP()
{
   const auto mass_matrix_ChaP = get_mass_matrix_ChaP();
   MChaP = calculate_singlet_mass(mass_matrix_ChaP);
   drbar.MChaP = MChaP;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_VP() const
{
   const double mass_matrix_VP = Re(0);

   return mass_matrix_VP;
}

void CSE6SSM_mass_eigenstates::calculate_MVP()
{
   const auto mass_matrix_VP = get_mass_matrix_VP();
   MVP = calculate_singlet_mass(mass_matrix_VP);
   drbar.MVP = MVP;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_VZ() const
{
   const double mass_matrix_VZ = Re(0.25*(0.9797958971132712*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())*Sqr(vu) + 0.31622776601683794*g1p
      *g2*Cos(ThetaW())*Sin(2*ThetaWp())*(-3*Sqr(vd) + 2*Sqr(vu)) +
      0.7745966692414834*g1*Sin(ThetaW())*(2*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*(Sqr(vd) + Sqr(vu))*Sqr(Cos(ThetaWp(
      ))) + Sqr(g2)*(Sqr(vd) + Sqr(vu))*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + 0.31622776601683794*g1p*(-2.32379000772445*g1*Sin(ThetaW())*Sin(2*
      ThetaWp())*Sqr(vd) + 0.31622776601683794*g1p*(9*Sqr(vd) + Sqr(QS)*(Sqr(vs
      ) + Sqr(vsb)) + 4*Sqr(vu))*Sqr(Sin(ThetaWp())))));

   return mass_matrix_VZ;
}

void CSE6SSM_mass_eigenstates::calculate_MVZ()
{
   const auto mass_matrix_VZ = get_mass_matrix_VZ();
   MVZ = calculate_singlet_mass(mass_matrix_VZ);

   if (MVZ < 0.)
      problems.flag_tachyon(CSE6SSM_info::VZ);

   MVZ = AbsSqrt(MVZ);
   drbar.MVZ = MVZ;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_VZp() const
{
   const double mass_matrix_VZp = Re(0.25*((g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())*(0.6324555320336759*
      g1p*Cos(ThetaWp())*(3*Sqr(vd) - 2*Sqr(vu)) + (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())*(Sqr(vd) + Sqr(vu)))
      + 0.1*Sqr(g1p)*(9*Sqr(vd) + Sqr(QS)*(Sqr(vs) + Sqr(vsb)) + 4*Sqr(vu))*Sqr
      (Cos(ThetaWp()))));

   return mass_matrix_VZp;
}

void CSE6SSM_mass_eigenstates::calculate_MVZp()
{
   const auto mass_matrix_VZp = get_mass_matrix_VZp();
   MVZp = calculate_singlet_mass(mass_matrix_VZp);

   if (MVZp < 0.)
      problems.flag_tachyon(CSE6SSM_info::VZp);

   MVZp = AbsSqrt(MVZp);
   drbar.MVZp = MVZp;
}

Eigen::Matrix<double,6,6> CSE6SSM_mass_eigenstates::get_mass_matrix_Sd() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Sd;

   mass_matrix_Sd(0,0) = mq2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(0,1) = mq2(0,1);
   mass_matrix_Sd(0,2) = mq2(0,2);
   mass_matrix_Sd(0,3) = 0.7071067811865475*vd*Conj(TYd(0,0)) - 0.5*vs*vu
      *Conj(Yd(0,0))*Lambdax;
   mass_matrix_Sd(0,4) = 0;
   mass_matrix_Sd(0,5) = 0;
   mass_matrix_Sd(1,1) = mq2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(1,2) = mq2(1,2);
   mass_matrix_Sd(1,3) = 0;
   mass_matrix_Sd(1,4) = 0.7071067811865475*vd*Conj(TYd(1,1)) - 0.5*vs*vu
      *Conj(Yd(1,1))*Lambdax;
   mass_matrix_Sd(1,5) = 0;
   mass_matrix_Sd(2,2) = mq2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.025*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.025*Sqr(g1)*
      Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Sd(2,3) = 0;
   mass_matrix_Sd(2,4) = 0;
   mass_matrix_Sd(2,5) = 0.7071067811865475*vd*Conj(TYd(2,2)) - 0.5*vs*vu
      *Conj(Yd(2,2))*Lambdax;
   mass_matrix_Sd(3,3) = md2(0,0) + 0.5*AbsSqr(Yd(0,0))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;
   mass_matrix_Sd(3,4) = md2(0,1);
   mass_matrix_Sd(3,5) = md2(0,2);
   mass_matrix_Sd(4,4) = md2(1,1) + 0.5*AbsSqr(Yd(1,1))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;
   mass_matrix_Sd(4,5) = md2(1,2);
   mass_matrix_Sd(5,5) = md2(2,2) + 0.5*AbsSqr(Yd(2,2))*Sqr(vd) - 0.05*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu)
      ;

   Hermitianize(mass_matrix_Sd);

   return mass_matrix_Sd;
}

void CSE6SSM_mass_eigenstates::calculate_MSd()
{
   const auto mass_matrix_Sd(get_mass_matrix_Sd());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Sd, MSd, ZD, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Sd, eigenvalue_error > diagonalization_precision
      * Abs(MSd(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Sd, MSd, ZD);
#endif

   if (MSd.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Sd);

   MSd = AbsSqrt(MSd);
   drbar.MSd = MSd;
   drbar.ZD = ZD;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_Sv() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Sv;

   mass_matrix_Sv(0,0) = ml2(0,0) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);
   mass_matrix_Sv(0,1) = ml2(0,1);
   mass_matrix_Sv(0,2) = ml2(0,2);
   mass_matrix_Sv(1,1) = ml2(1,1) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);
   mass_matrix_Sv(1,2) = ml2(1,2);
   mass_matrix_Sv(2,2) = ml2(2,2) + 0.075*Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p
      )*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125
      *Sqr(g2)*Sqr(vu);

   Hermitianize(mass_matrix_Sv);

   return mass_matrix_Sv;
}

void CSE6SSM_mass_eigenstates::calculate_MSv()
{
   const auto mass_matrix_Sv(get_mass_matrix_Sv());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Sv, MSv, ZV, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Sv, eigenvalue_error > diagonalization_precision
      * Abs(MSv(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Sv, MSv, ZV);
#endif

   if (MSv.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Sv);

   MSv = AbsSqrt(MSv);
   drbar.MSv = MSv;
   drbar.ZV = ZV;
}

Eigen::Matrix<double,6,6> CSE6SSM_mass_eigenstates::get_mass_matrix_Su() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Su;

   mass_matrix_Su(0,0) = mq2(0,0) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(0,0))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(0,1) = mq2(0,1);
   mass_matrix_Su(0,2) = mq2(0,2);
   mass_matrix_Su(0,3) = 0.7071067811865475*vu*Conj(TYu(0,0)) - 0.5*vd*vs
      *Conj(Yu(0,0))*Lambdax;
   mass_matrix_Su(0,4) = 0;
   mass_matrix_Su(0,5) = 0;
   mass_matrix_Su(1,1) = mq2(1,1) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(1,1))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(1,2) = mq2(1,2);
   mass_matrix_Su(1,3) = 0;
   mass_matrix_Su(1,4) = 0.7071067811865475*vu*Conj(TYu(1,1)) - 0.5*vd*vs
      *Conj(Yu(1,1))*Lambdax;
   mass_matrix_Su(1,5) = 0;
   mass_matrix_Su(2,2) = mq2(2,2) - 0.025*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(
      g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Yu(2,2))*Sqr(vu) + 0.025*Sqr(g1)
      *Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Su(2,3) = 0;
   mass_matrix_Su(2,4) = 0;
   mass_matrix_Su(2,5) = 0.7071067811865475*vu*Conj(TYu(2,2)) - 0.5*vd*vs
      *Conj(Yu(2,2))*Lambdax;
   mass_matrix_Su(3,3) = mu2(0,0) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(0,0))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);
   mass_matrix_Su(3,4) = mu2(0,1);
   mass_matrix_Su(3,5) = mu2(0,2);
   mass_matrix_Su(4,4) = mu2(1,1) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(1,1))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);
   mass_matrix_Su(4,5) = mu2(1,2);
   mass_matrix_Su(5,5) = mu2(2,2) + 0.1*Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)
      *Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) - 0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.5
      *AbsSqr(Yu(2,2))*Sqr(vu) - 0.1*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(vu);

   Hermitianize(mass_matrix_Su);

   return mass_matrix_Su;
}

void CSE6SSM_mass_eigenstates::calculate_MSu()
{
   const auto mass_matrix_Su(get_mass_matrix_Su());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Su, MSu, ZU, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Su, eigenvalue_error > diagonalization_precision
      * Abs(MSu(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Su, MSu, ZU);
#endif

   if (MSu.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Su);

   MSu = AbsSqrt(MSu);
   drbar.MSu = MSu;
   drbar.ZU = ZU;
}

Eigen::Matrix<double,6,6> CSE6SSM_mass_eigenstates::get_mass_matrix_Se() const
{
   Eigen::Matrix<double,6,6> mass_matrix_Se;

   mass_matrix_Se(0,0) = ml2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(0,1) = ml2(0,1);
   mass_matrix_Se(0,2) = ml2(0,2);
   mass_matrix_Se(0,3) = 0.7071067811865475*vd*Conj(TYe(0,0)) - 0.5*vs*vu
      *Conj(Ye(0,0))*Lambdax;
   mass_matrix_Se(0,4) = 0;
   mass_matrix_Se(0,5) = 0;
   mass_matrix_Se(1,1) = ml2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(1,2) = ml2(1,2);
   mass_matrix_Se(1,3) = 0;
   mass_matrix_Se(1,4) = 0.7071067811865475*vd*Conj(TYe(1,1)) - 0.5*vs*vu
      *Conj(Ye(1,1))*Lambdax;
   mass_matrix_Se(1,5) = 0;
   mass_matrix_Se(2,2) = ml2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) + 0.075*
      Sqr(g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.025*
      QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu)
      - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Se(2,3) = 0;
   mass_matrix_Se(2,4) = 0;
   mass_matrix_Se(2,5) = 0.7071067811865475*vd*Conj(TYe(2,2)) - 0.5*vs*vu
      *Conj(Ye(2,2))*Lambdax;
   mass_matrix_Se(3,3) = me2(0,0) + 0.5*AbsSqr(Ye(0,0))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_Se(3,4) = me2(0,1);
   mass_matrix_Se(3,5) = me2(0,2);
   mass_matrix_Se(4,4) = me2(1,1) + 0.5*AbsSqr(Ye(1,1))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_Se(4,5) = me2(1,2);
   mass_matrix_Se(5,5) = me2(2,2) + 0.5*AbsSqr(Ye(2,2))*Sqr(vd) - 0.15*
      Sqr(g1)*Sqr(vd) - 0.0375*Sqr(g1p)*Sqr(vd) + 0.0125*QS*Sqr(g1p)*Sqr(vs) -
      0.0125*QS*Sqr(g1p)*Sqr(vsb) + 0.15*Sqr(g1)*Sqr(vu) - 0.025*Sqr(g1p)*Sqr(
      vu);

   Hermitianize(mass_matrix_Se);

   return mass_matrix_Se;
}

void CSE6SSM_mass_eigenstates::calculate_MSe()
{
   const auto mass_matrix_Se(get_mass_matrix_Se());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Se, MSe, ZE, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Se, eigenvalue_error > diagonalization_precision
      * Abs(MSe(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Se, MSe, ZE);
#endif

   if (MSe.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Se);

   MSe = AbsSqrt(MSe);
   drbar.MSe = MSe;
   drbar.ZE = ZE;
}

Eigen::Matrix<double,6,6> CSE6SSM_mass_eigenstates::get_mass_matrix_SDX() const
{
   Eigen::Matrix<double,6,6> mass_matrix_SDX;

   mass_matrix_SDX(0,0) = mDx2(0,0) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(0,1) = 0;
   mass_matrix_SDX(0,2) = 0;
   mass_matrix_SDX(0,3) = 0.7071067811865475*vs*Conj(TKappa(0,0)) - 0.5*
      vd*vu*Conj(Kappa(0,0))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(0,0))*Sigmax;
   mass_matrix_SDX(0,4) = 0;
   mass_matrix_SDX(0,5) = 0;
   mass_matrix_SDX(1,1) = mDx2(1,1) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(1,2) = 0;
   mass_matrix_SDX(1,3) = 0;
   mass_matrix_SDX(1,4) = 0.7071067811865475*vs*Conj(TKappa(1,1)) - 0.5*
      vd*vu*Conj(Kappa(1,1))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(1,1))*Sigmax;
   mass_matrix_SDX(1,5) = 0;
   mass_matrix_SDX(2,2) = mDx2(2,2) + 0.05*Sqr(g1)*Sqr(vd) + 0.075*Sqr(
      g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs)
      + 0.025*QS*Sqr(g1p)*Sqr(vsb) - 0.05*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(
      vu);
   mass_matrix_SDX(2,3) = 0;
   mass_matrix_SDX(2,4) = 0;
   mass_matrix_SDX(2,5) = 0.7071067811865475*vs*Conj(TKappa(2,2)) - 0.5*
      vd*vu*Conj(Kappa(2,2))*Lambdax - 0.5*vphi*vsb*Conj(Kappa(2,2))*Sigmax;
   mass_matrix_SDX(3,3) = mDxbar2(0,0) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(0,0))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);
   mass_matrix_SDX(3,4) = 0;
   mass_matrix_SDX(3,5) = 0;
   mass_matrix_SDX(4,4) = mDxbar2(1,1) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(1,1))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);
   mass_matrix_SDX(4,5) = 0;
   mass_matrix_SDX(5,5) = mDxbar2(2,2) - 0.05*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Kappa(2,2))*Sqr(vs) - 0.0375*QS*Sqr(g1p)*
      Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.05*Sqr(g1)*Sqr(vu) + 0.075*Sqr(
      g1p)*Sqr(vu);

   Hermitianize(mass_matrix_SDX);

   return mass_matrix_SDX;
}

void CSE6SSM_mass_eigenstates::calculate_MSDX()
{
   const auto mass_matrix_SDX(get_mass_matrix_SDX());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SDX, MSDX, ZDX, eigenvalue_error)
      ;
   problems.flag_bad_mass(CSE6SSM_info::SDX, eigenvalue_error > diagonalization_precision
      * Abs(MSDX(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SDX, MSDX, ZDX);
#endif

   if (MSDX.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::SDX);

   MSDX = AbsSqrt(MSDX);
   drbar.MSDX = MSDX;
   drbar.ZDX = ZDX;
}

Eigen::Matrix<double,5,5> CSE6SSM_mass_eigenstates::get_mass_matrix_hh() const
{
   Eigen::Matrix<double,5,5> mass_matrix_hh;

   mass_matrix_hh(0,0) = mHd2 + 0.225*Sqr(g1)*Sqr(vd) + 0.3375*Sqr(g1p)*
      Sqr(vd) + 0.375*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Lambdax)*Sqr
      (vu) - 0.075*Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr
      (vu);
   mass_matrix_hh(0,1) = vd*vu*AbsSqr(Lambdax) - 0.35355339059327373*vs*
      Conj(TLambdax) + 0.25*vphi*vsb*Conj(Sigmax)*Lambdax + 0.25*vphi*vsb*Conj(
      Lambdax)*Sigmax - 0.15*vd*vu*Sqr(g1) + 0.15*vd*vu*Sqr(g1p) - 0.25*vd*vu*
      Sqr(g2) - 0.35355339059327373*vs*TLambdax;
   mass_matrix_hh(0,2) = vd*vs*AbsSqr(Lambdax) - 0.35355339059327373*vu*
      Conj(TLambdax) - 0.075*QS*vd*vs*Sqr(g1p) - 0.35355339059327373*vu*
      TLambdax;
   mass_matrix_hh(0,3) = 0.25*vphi*vu*Conj(Sigmax)*Lambdax + 0.25*vphi*vu
      *Conj(Lambdax)*Sigmax + 0.075*QS*vd*vsb*Sqr(g1p);
   mass_matrix_hh(0,4) = 0.25*vsb*vu*Conj(Sigmax)*Lambdax + 0.25*vsb*vu*
      Conj(Lambdax)*Sigmax;
   mass_matrix_hh(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr
      (Lambdax)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb
      ) + 0.225*Sqr(g1)*Sqr(vu) + 0.15*Sqr(g1p)*Sqr(vu) + 0.375*Sqr(g2)*Sqr(vu)
      ;
   mass_matrix_hh(1,2) = vs*vu*AbsSqr(Lambdax) - 0.35355339059327373*vd*
      Conj(TLambdax) - 0.05*QS*vs*vu*Sqr(g1p) - 0.35355339059327373*vd*TLambdax
      ;
   mass_matrix_hh(1,3) = 0.25*vd*vphi*Conj(Sigmax)*Lambdax + 0.25*vd*vphi
      *Conj(Lambdax)*Sigmax + 0.05*QS*vsb*vu*Sqr(g1p);
   mass_matrix_hh(1,4) = 0.25*vd*vsb*Conj(Sigmax)*Lambdax + 0.25*vd*vsb*
      Conj(Lambdax)*Sigmax;
   mass_matrix_hh(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.0375*QS*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Sigmax)*Sqr(vphi) + 0.0375*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) - 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb)
      + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.025*QS*Sqr(g1p)*Sqr(vu);
   mass_matrix_hh(2,3) = vs*vsb*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vphi*Conj(Sigmax) - 0.35355339059327373*vphi*Conj(TSigmax) - 0.5*
      Conj(Sigmax)*XiF - 0.35355339059327373*vphi*Conj(MuPhi)*Sigmax - 0.5*Conj
      (XiF)*Sigmax - 0.025*vs*vsb*Sqr(g1p)*Sqr(QS) - 0.25*Conj(Sigmax)*KappaPr*
      Sqr(vphi) - 0.25*Conj(KappaPr)*Sigmax*Sqr(vphi) - 0.35355339059327373*
      vphi*TSigmax;
   mass_matrix_hh(2,4) = vphi*vs*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vsb*Conj(Sigmax) - 0.35355339059327373*vsb*Conj(TSigmax) - 0.5*vphi
      *vsb*Conj(Sigmax)*KappaPr - 0.35355339059327373*vsb*Conj(MuPhi)*Sigmax -
      0.5*vphi*vsb*Conj(KappaPr)*Sigmax - 0.35355339059327373*vsb*TSigmax;
   mass_matrix_hh(3,3) = msbar2 + 0.0375*QS*Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr
      (Sigmax)*Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) - 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.0375*Sqr(g1p)*Sqr(QS)*Sqr(vsb) + 0.025*QS*Sqr(g1p)*Sqr(vu);
   mass_matrix_hh(3,4) = vphi*vsb*AbsSqr(Sigmax) - 0.35355339059327373*
      MuPhi*vs*Conj(Sigmax) - 0.35355339059327373*vs*Conj(TSigmax) - 0.5*vphi*
      vs*Conj(Sigmax)*KappaPr + 0.25*vd*vu*Conj(Sigmax)*Lambdax -
      0.35355339059327373*vs*Conj(MuPhi)*Sigmax - 0.5*vphi*vs*Conj(KappaPr)*
      Sigmax + 0.25*vd*vu*Conj(Lambdax)*Sigmax - 0.35355339059327373*vs*TSigmax
      ;
   mass_matrix_hh(4,4) = mphi2 + AbsSqr(MuPhi) + 0.5*BMuPhi + 0.5*Conj(
      BMuPhi) + 2.1213203435596424*MuPhi*vphi*Conj(KappaPr) +
      0.7071067811865475*vphi*Conj(TKappaPr) + 2.1213203435596424*vphi*Conj(
      MuPhi)*KappaPr + Conj(XiF)*KappaPr - 0.5*vs*vsb*Conj(Sigmax)*KappaPr +
      Conj(KappaPr)*XiF - 0.5*vs*vsb*Conj(KappaPr)*Sigmax + 3*AbsSqr(KappaPr)*
      Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) +
      0.7071067811865475*vphi*TKappaPr;

   Symmetrize(mass_matrix_hh);

   return mass_matrix_hh;
}

// rotated CP-even Higgs mass matrix in the basis of arXiv:1410.6288 [hep-ph]
Eigen::Matrix<double,5,5> CSE6SSM_mass_eigenstates::get_rotated_mass_matrix_hh() const
{
   const double v = Sqrt(Sqr(vd) + Sqr(vu));
   const double s = Sqrt(Sqr(vs) + Sqr(vsb));
   const double TanBeta = vu / vd;
   const double CosBeta = Cos(ArcTan(TanBeta));
   const double SinBeta = Sin(ArcTan(TanBeta));
   const double CosTwoBeta = Sqr(CosBeta) - Sqr(SinBeta);
   const double SinTwoBeta = 2.0 * SinBeta * CosBeta;
   const double TanTheta = vsb / vs;
   const double CosTheta = Cos(ArcTan(TanTheta));
   const double SinTheta = Sin(ArcTan(TanTheta));
   const double CosTwoTheta = Sqr(CosTheta) - Sqr(SinTheta);
   const double SinTwoTheta = 2.0 * SinTheta * CosTheta;
   const double gbar = Sqrt(Sqr(g2) + 0.6 * Sqr(g1));

   Eigen::Matrix<double,5,5> mass_matrix_hh;

   mass_matrix_hh(0,0) = 0.025 * Sqr(g1p) * Sqr(QS) * Sqr(s) - 0.5 *
      Sqr(Sigmax) * Sqr(s) * Sqr(SinTwoTheta)
      + Sqrt(2.0) * TSigmax * vphi * SinTwoTheta + SinTwoTheta *
      (KappaPr * Sigmax * Sqr(vphi) + Sqrt(2.0) * Sigmax * MuPhi
      * vphi + 2.0 * Sigmax * XiF) + 0.5 * TLambdax * Sqr(v) * CosTheta
      * SinTwoBeta / (Sqrt(2.0) * s) - 0.25 * Lambdax * Sigmax * vphi
      * Sqr(v) * SinTheta * SinTwoBeta / s;
   mass_matrix_hh(0,1) = 0.5 * Sqr(Sigmax) * Sqr(s) * SinTwoTheta *
      CosTwoTheta - Sqrt(2.0) * TSigmax * vphi * CosTwoTheta
      - CosTwoTheta * (KappaPr * Sigmax * Sqr(vphi) + Sqrt(2.0) *
      Sigmax * MuPhi * vphi + 2.0 * Sigmax * XiF) + 0.5 * TLambdax
      * Sqr(v) * SinTheta * SinTwoBeta / (Sqrt(2.0) * s) + 0.25 *
      Lambdax * Sigmax * vphi * Sqr(v) * CosTheta * SinTwoBeta / s;
   mass_matrix_hh(0,2) = Sqr(Sigmax) * vphi * s * CosTwoTheta
      - 0.25 * Lambdax * Sigmax * Sqr(v) * SinTheta * SinTwoBeta;
   mass_matrix_hh(0,3) = 0.0125 * Sqr(g1p) * QS * s * v * SinTwoBeta
      - TLambdax * v * CosTheta * CosTwoBeta / Sqrt(2.0) - 0.5 * Lambdax
      * Sigmax * vphi * v * SinTheta * CosTwoBeta;
   mass_matrix_hh(0,4) = 0.025 * Sqr(g1p) * QS * (-3.0 * Sqr(CosBeta)
      - 2.0 * Sqr(SinBeta)) * s * v - TLambdax * v * CosTheta * SinTwoBeta
      / Sqrt(2.0) + Sqr(Lambdax) * v * s * Sqr(CosTheta) - 0.5 * Lambdax
      * Sigmax * vphi * v * SinTheta * SinTwoBeta;
   mass_matrix_hh(1,1) = 0.5 * Sqr(Sigmax) * Sqr(s) * Sqr(SinTwoTheta)
      + Sqrt(2.0) * TSigmax * vphi * Sqr(CosTwoTheta) / SinTwoTheta
      + Sqr(CosTwoTheta) * (KappaPr * Sigmax * Sqr(vphi) + Sqrt(2.0) *
      Sigmax * MuPhi * vphi + 2.0 * Sigmax * XiF) / SinTwoTheta + 0.5 *
      TLambdax * Sqr(v) * Sqr(SinTheta) * SinTwoBeta / (Sqrt(2.0) *
      s * CosTheta) - 0.25 * Lambdax * Sigmax * vphi * Sqr(v) *
      Sqr(CosTheta) * SinTwoBeta / (s * SinTheta);
   mass_matrix_hh(1,2) = - TSigmax * s / Sqrt(2.0) + Sqr(Sigmax) * vphi
      * s * SinTwoTheta - Sigmax * s * (KappaPr * vphi + MuPhi / Sqrt(2.0))
      + 0.25 * Lambdax * Sigmax * Sqr(v) * CosTheta * SinTwoBeta;
   mass_matrix_hh(1,3) = CosTwoBeta * (0.5 * Lambdax * Sigmax * vphi * v
      * CosTheta - TLambdax * v * SinTheta / Sqrt(2.0));
   mass_matrix_hh(1,4) = 0.5 * Sqr(Lambdax) * s * v * SinTwoTheta +
      SinTwoBeta * (0.5 * Lambdax * Sigmax * vphi * v * CosTheta -
      TLambdax * v * SinTheta / Sqrt(2.0));
   mass_matrix_hh(2,2) = 0.5 * TSigmax * Sqr(s) * SinTwoTheta /
      (Sqrt(2.0) * vphi) - Sqrt(2.0) * LXiF / vphi + TKappaPr * vphi
      / Sqrt(2.0) + MuPhi * (0.5 * Sigmax * Sqr(s) * SinTwoTheta /
      (Sqrt(2.0) * vphi) + 3.0 * KappaPr * vphi / Sqrt(2.0) -
      Sqrt(2.0) * XiF / vphi) + 2.0 * Sqr(KappaPr) * Sqr(vphi)
      - 0.25 * Lambdax * Sigmax * s * Sqr(v) * SinTheta * SinTwoBeta /
      vphi;
   mass_matrix_hh(2,3) = 0.5 * Lambdax * Sigmax * s * v * SinTheta *
      CosTwoBeta;
   mass_matrix_hh(2,4) = 0.5 * Lambdax * Sigmax * s * v * SinTheta *
      SinTwoBeta;
   mass_matrix_hh(3,3) = Sqrt(2.0) * s * (TLambdax * CosTheta -
      Lambdax * Sigmax * vphi * SinTheta / Sqrt(2.0)) / SinTwoBeta
      + Sqr(v) * Sqr(SinTwoBeta) * (0.25 * Sqr(gbar) - 0.5 *
      Sqr(Lambdax)) + 0.00625 * Sqr(g1p) * Sqr(v) * Sqr(SinTwoBeta);
   mass_matrix_hh(3,4) = Sqr(v) * SinTwoBeta * CosTwoBeta *
      (0.5 * Sqr(Lambdax) - 0.25 * Sqr(gbar)) + 0.0125 * Sqr(g1p)
      * Sqr(v) * (-3.0 * Sqr(CosBeta) - 2.0 * Sqr(SinBeta)) *
      SinTwoBeta;
   mass_matrix_hh(4,4) = 0.5 * Sqr(Lambdax) * Sqr(v) * Sqr(SinTwoBeta)
      + 0.25 * Sqr(gbar) * Sqr(v) * Sqr(CosTwoBeta) + 0.025 * Sqr(g1p)
      * Sqr(v) * Sqr(-3.0 * Sqr(CosBeta) - 2.0 * Sqr(SinBeta));

   Symmetrize(mass_matrix_hh);

   return mass_matrix_hh;
}

void CSE6SSM_mass_eigenstates::calculate_Mhh()
{
   const auto mass_matrix_hh(get_mass_matrix_hh());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_hh, Mhh, ZH, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::hh, eigenvalue_error > diagonalization_precision
      * Abs(Mhh(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_hh, Mhh, ZH);
#endif

   if (Mhh.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::hh);

   Mhh = AbsSqrt(Mhh);
   drbar.Mhh = Mhh;
   drbar.ZH = ZH;
}

Eigen::Matrix<double,5,5> CSE6SSM_mass_eigenstates::get_mass_matrix_Ah() const
{
   Eigen::Matrix<double,5,5> mass_matrix_Ah;

   mass_matrix_Ah(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*Sqr(g1p)*
      Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*AbsSqr(Lambdax)*Sqr
      (vu) - 0.075*Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr
      (vu) + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(
      Cos(ThetaWp())) + 0.225*Sqr(g1p)*Sqr(vd)*Sqr(Cos(ThetaWp())) + 0.25*Sqr(
      g2)*Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)
      *Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 0.3872983346207417*g1*g2*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(vd)*Sqr(Sin(ThetaWp())) + 0.225*Sqr(g1p)*Sqr(
      vd)*Sqr(Sin(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vd)*Sqr(Cos(ThetaW()))*Sqr(Sin
      (ThetaWp())) + 0.15*Sqr(g1)*Sqr(vd)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      );
   mass_matrix_Ah(0,1) = 0.35355339059327373*vs*Conj(TLambdax) - 0.25*
      vphi*vsb*Conj(Sigmax)*Lambdax - 0.25*vphi*vsb*Conj(Lambdax)*Sigmax -
      0.3872983346207417*g1*g2*vd*vu*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) + 0.15*vd*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.25*vd*vu*Sqr(g2
      )*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 0.15*vd*vu*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW())) - 0.3872983346207417*g1*g2*vd*vu*Cos(
      ThetaW())*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + 0.15*vd*vu*Sqr(g1p)*Sqr(Sin
      (ThetaWp())) - 0.25*vd*vu*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))
      - 0.15*vd*vu*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) +
      0.35355339059327373*vs*TLambdax;
   mass_matrix_Ah(0,2) = 0.35355339059327373*vu*Conj(TLambdax) - 0.075*QS
      *vd*vs*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.075*QS*vd*vs*Sqr(g1p)*Sqr(Sin(
      ThetaWp())) + 0.35355339059327373*vu*TLambdax;
   mass_matrix_Ah(0,3) = 0.25*vphi*vu*Conj(Sigmax)*Lambdax + 0.25*vphi*vu
      *Conj(Lambdax)*Sigmax + 0.075*QS*vd*vsb*Sqr(g1p)*Sqr(Cos(ThetaWp())) +
      0.075*QS*vd*vsb*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(0,4) = 0.25*vsb*vu*Conj(Sigmax)*Lambdax + 0.25*vsb*vu*
      Conj(Lambdax)*Sigmax;
   mass_matrix_Ah(1,1) = mHu2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.075*Sqr(
      g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr
      (Lambdax)*Sqr(vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb
      ) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu)
      + 0.3872983346207417*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(vu)*Sqr(Cos(
      ThetaWp())) + 0.1*Sqr(g1p)*Sqr(vu)*Sqr(Cos(ThetaWp())) + 0.25*Sqr(g2)*Sqr
      (vu)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 0.3872983346207417*g1*g2*Cos(ThetaW(
      ))*Sin(ThetaW())*Sqr(vu)*Sqr(Sin(ThetaWp())) + 0.1*Sqr(g1p)*Sqr(vu)*Sqr(
      Sin(ThetaWp())) + 0.25*Sqr(g2)*Sqr(vu)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp
      ())) + 0.15*Sqr(g1)*Sqr(vu)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(1,2) = 0.35355339059327373*vd*Conj(TLambdax) - 0.05*QS*
      vs*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) - 0.05*QS*vs*vu*Sqr(g1p)*Sqr(Sin(
      ThetaWp())) + 0.35355339059327373*vd*TLambdax;
   mass_matrix_Ah(1,3) = 0.25*vd*vphi*Conj(Sigmax)*Lambdax + 0.25*vd*vphi
      *Conj(Lambdax)*Sigmax + 0.05*QS*vsb*vu*Sqr(g1p)*Sqr(Cos(ThetaWp())) +
      0.05*QS*vsb*vu*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(1,4) = 0.25*vd*vsb*Conj(Sigmax)*Lambdax + 0.25*vd*vsb*
      Conj(Lambdax)*Sigmax;
   mass_matrix_Ah(2,2) = ms2 + 0.5*AbsSqr(Lambdax)*Sqr(vd) - 0.0375*QS*
      Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr(Sigmax)*Sqr(vphi) + 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) - 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb)
      + 0.5*AbsSqr(Lambdax)*Sqr(vu) - 0.025*QS*Sqr(g1p)*Sqr(vu) + 0.025*Sqr(
      g1p)*Sqr(QS)*Sqr(vs)*Sqr(Cos(ThetaWp())) + 0.025*Sqr(g1p)*Sqr(QS)*Sqr(vs)
      *Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(2,3) = 0.35355339059327373*MuPhi*vphi*Conj(Sigmax) +
      0.35355339059327373*vphi*Conj(TSigmax) + 0.5*Conj(Sigmax)*XiF +
      0.35355339059327373*vphi*Conj(MuPhi)*Sigmax + 0.5*Conj(XiF)*Sigmax + 0.25
      *Conj(Sigmax)*KappaPr*Sqr(vphi) + 0.25*Conj(KappaPr)*Sigmax*Sqr(vphi) -
      0.025*vs*vsb*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) - 0.025*vs*vsb*Sqr(g1p)
      *Sqr(QS)*Sqr(Sin(ThetaWp())) + 0.35355339059327373*vphi*TSigmax;
   mass_matrix_Ah(2,4) = -0.35355339059327373*MuPhi*vsb*Conj(Sigmax) +
      0.35355339059327373*vsb*Conj(TSigmax) - 0.5*vphi*vsb*Conj(Sigmax)*KappaPr
      - 0.35355339059327373*vsb*Conj(MuPhi)*Sigmax - 0.5*vphi*vsb*Conj(KappaPr
      )*Sigmax + 0.35355339059327373*vsb*TSigmax;
   mass_matrix_Ah(3,3) = msbar2 + 0.0375*QS*Sqr(g1p)*Sqr(vd) + 0.5*AbsSqr
      (Sigmax)*Sqr(vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) - 0.0125*Sqr(g1p)*Sqr(QS)
      *Sqr(vs) + 0.0125*Sqr(g1p)*Sqr(QS)*Sqr(vsb) + 0.025*QS*Sqr(g1p)*Sqr(vu) +
      0.025*Sqr(g1p)*Sqr(QS)*Sqr(vsb)*Sqr(Cos(ThetaWp())) + 0.025*Sqr(g1p)*Sqr
      (QS)*Sqr(vsb)*Sqr(Sin(ThetaWp()));
   mass_matrix_Ah(3,4) = -0.35355339059327373*MuPhi*vs*Conj(Sigmax) +
      0.35355339059327373*vs*Conj(TSigmax) - 0.5*vphi*vs*Conj(Sigmax)*KappaPr -
      0.25*vd*vu*Conj(Sigmax)*Lambdax - 0.35355339059327373*vs*Conj(MuPhi)*
      Sigmax - 0.5*vphi*vs*Conj(KappaPr)*Sigmax - 0.25*vd*vu*Conj(Lambdax)*
      Sigmax + 0.35355339059327373*vs*TSigmax;
   mass_matrix_Ah(4,4) = mphi2 + AbsSqr(MuPhi) - 0.5*BMuPhi - 0.5*Conj(
      BMuPhi) + 0.7071067811865475*MuPhi*vphi*Conj(KappaPr) -
      0.7071067811865475*vphi*Conj(TKappaPr) + 0.7071067811865475*vphi*Conj(
      MuPhi)*KappaPr - Conj(XiF)*KappaPr + 0.5*vs*vsb*Conj(Sigmax)*KappaPr -
      Conj(KappaPr)*XiF + 0.5*vs*vsb*Conj(KappaPr)*Sigmax + AbsSqr(KappaPr)*Sqr
      (vphi) + 0.5*AbsSqr(Sigmax)*Sqr(vs) + 0.5*AbsSqr(Sigmax)*Sqr(vsb) -
      0.7071067811865475*vphi*TKappaPr;

   Symmetrize(mass_matrix_Ah);

   return mass_matrix_Ah;
}

void CSE6SSM_mass_eigenstates::calculate_MAh()
{
   const auto mass_matrix_Ah(get_mass_matrix_Ah());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Ah, MAh, ZA, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Ah, eigenvalue_error > diagonalization_precision
      * Abs(MAh(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Ah, MAh, ZA);
#endif

   if (MAh.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Ah);

   MAh = AbsSqrt(MAh);
   drbar.MAh = MAh;
   drbar.ZA = ZA;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_Hpm() const
{
   Eigen::Matrix<double,2,2> mass_matrix_Hpm;

   mass_matrix_Hpm(0,0) = mHd2 + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*Sqr(g1p)*
      Sqr(vd) + 0.375*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.0375*QS
      *Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) +
      0.075*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_Hpm(0,1) = -0.5*vd*vu*AbsSqr(Lambdax) + 0.7071067811865475
      *vs*Conj(TLambdax) - 0.5*vphi*vsb*Conj(Lambdax)*Sigmax;
   mass_matrix_Hpm(1,1) = mHu2 - 0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)*
      Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambdax)*Sqr(vs) - 0.025*QS*
      Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) +
      0.05*Sqr(g1p)*Sqr(vu) + 0.375*Sqr(g2)*Sqr(vu);

   Hermitianize(mass_matrix_Hpm);

   return mass_matrix_Hpm;
}

void CSE6SSM_mass_eigenstates::calculate_MHpm()
{
   const auto mass_matrix_Hpm(get_mass_matrix_Hpm());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_Hpm, MHpm, ZP, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Hpm, eigenvalue_error > diagonalization_precision
      * Abs(MHpm(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_Hpm, MHpm, ZP);
#endif

   if (MHpm.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::Hpm);

   MHpm = AbsSqrt(MHpm);
   drbar.MHpm = MHpm;
   drbar.ZP = ZP;
}

Eigen::Matrix<double,8,8> CSE6SSM_mass_eigenstates::get_mass_matrix_Chi() const
{
   Eigen::Matrix<double,8,8> mass_matrix_Chi;

   mass_matrix_Chi(0,0) = MassB;
   mass_matrix_Chi(0,1) = 0;
   mass_matrix_Chi(0,2) = -0.3872983346207417*g1*vd;
   mass_matrix_Chi(0,3) = 0.3872983346207417*g1*vu;
   mass_matrix_Chi(0,4) = 0;
   mass_matrix_Chi(0,5) = 0;
   mass_matrix_Chi(0,6) = 0;
   mass_matrix_Chi(0,7) = 0;
   mass_matrix_Chi(1,1) = MassWB;
   mass_matrix_Chi(1,2) = 0.5*g2*vd;
   mass_matrix_Chi(1,3) = -0.5*g2*vu;
   mass_matrix_Chi(1,4) = 0;
   mass_matrix_Chi(1,5) = 0;
   mass_matrix_Chi(1,6) = 0;
   mass_matrix_Chi(1,7) = 0;
   mass_matrix_Chi(2,2) = 0;
   mass_matrix_Chi(2,3) = -0.7071067811865475*vs*Lambdax;
   mass_matrix_Chi(2,4) = -0.7071067811865475*vu*Lambdax;
   mass_matrix_Chi(2,5) = 0;
   mass_matrix_Chi(2,6) = 0;
   mass_matrix_Chi(2,7) = -0.4743416490252569*g1p*vd;
   mass_matrix_Chi(3,3) = 0;
   mass_matrix_Chi(3,4) = -0.7071067811865475*vd*Lambdax;
   mass_matrix_Chi(3,5) = 0;
   mass_matrix_Chi(3,6) = 0;
   mass_matrix_Chi(3,7) = -0.31622776601683794*g1p*vu;
   mass_matrix_Chi(4,4) = 0;
   mass_matrix_Chi(4,5) = -0.7071067811865475*vphi*Sigmax;
   mass_matrix_Chi(4,6) = -0.7071067811865475*vsb*Sigmax;
   mass_matrix_Chi(4,7) = 0.15811388300841897*g1p*QS*vs;
   mass_matrix_Chi(5,5) = 0;
   mass_matrix_Chi(5,6) = -0.7071067811865475*vs*Sigmax;
   mass_matrix_Chi(5,7) = -0.15811388300841897*g1p*QS*vsb;
   mass_matrix_Chi(6,6) = MuPhi + 1.4142135623730951*vphi*KappaPr;
   mass_matrix_Chi(6,7) = 0;
   mass_matrix_Chi(7,7) = MassBp;

   Symmetrize(mass_matrix_Chi);

   return mass_matrix_Chi;
}

void CSE6SSM_mass_eigenstates::calculate_MChi()
{
   const auto mass_matrix_Chi(get_mass_matrix_Chi());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_Chi, MChi, ZN, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Chi, eigenvalue_error > diagonalization_precision
      * Abs(MChi(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_Chi, MChi, ZN);
#endif

   drbar.MChi = MChi;
   drbar.ZN = ZN;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_Cha() const
{
   Eigen::Matrix<double,2,2> mass_matrix_Cha;

   mass_matrix_Cha(0,0) = MassWB;
   mass_matrix_Cha(0,1) = 0.7071067811865475*g2*vu;
   mass_matrix_Cha(1,0) = 0.7071067811865475*g2*vd;
   mass_matrix_Cha(1,1) = 0.7071067811865475*vs*Lambdax;

   return mass_matrix_Cha;
}

void CSE6SSM_mass_eigenstates::calculate_MCha()
{
   const auto mass_matrix_Cha(get_mass_matrix_Cha());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Cha, MCha, UM, UP, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Cha, eigenvalue_error > diagonalization_precision
      * Abs(MCha(0)));
#else
   fs_svd(mass_matrix_Cha, MCha, UM, UP);
#endif

   drbar.MCha = MCha;
   drbar.UM = UM;
   drbar.UP = UP;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_Fe() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fe;

   mass_matrix_Fe(0,0) = 0.7071067811865475*vd*Ye(0,0);
   mass_matrix_Fe(0,1) = 0;
   mass_matrix_Fe(0,2) = 0;
   mass_matrix_Fe(1,1) = 0.7071067811865475*vd*Ye(1,1);
   mass_matrix_Fe(1,2) = 0;
   mass_matrix_Fe(2,2) = 0.7071067811865475*vd*Ye(2,2);

   Symmetrize(mass_matrix_Fe);

   return mass_matrix_Fe;
}

void CSE6SSM_mass_eigenstates::calculate_MFe()
{
   const auto mass_matrix_Fe(get_mass_matrix_Fe());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fe, MFe, ZEL, ZER, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Fe, eigenvalue_error > diagonalization_precision
      * Abs(MFe(0)));
#else
   fs_svd(mass_matrix_Fe, MFe, ZEL, ZER);
#endif

   drbar.MFe = MFe;
   drbar.ZEL = ZEL;
   drbar.ZER = ZER;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_Fd() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fd;

   mass_matrix_Fd(0,0) = 0.7071067811865475*vd*Yd(0,0);
   mass_matrix_Fd(0,1) = 0;
   mass_matrix_Fd(0,2) = 0;
   mass_matrix_Fd(1,1) = 0.7071067811865475*vd*Yd(1,1);
   mass_matrix_Fd(1,2) = 0;
   mass_matrix_Fd(2,2) = 0.7071067811865475*vd*Yd(2,2);

   Symmetrize(mass_matrix_Fd);

   return mass_matrix_Fd;
}

void CSE6SSM_mass_eigenstates::calculate_MFd()
{
   const auto mass_matrix_Fd(get_mass_matrix_Fd());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fd, MFd, ZDL, ZDR, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Fd, eigenvalue_error > diagonalization_precision
      * Abs(MFd(0)));
#else
   fs_svd(mass_matrix_Fd, MFd, ZDL, ZDR);
#endif

   drbar.MFd = MFd;
   drbar.ZDL = ZDL;
   drbar.ZDR = ZDR;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_Fu() const
{
   Eigen::Matrix<double,3,3> mass_matrix_Fu;

   mass_matrix_Fu(0,0) = 0.7071067811865475*vu*Yu(0,0);
   mass_matrix_Fu(0,1) = 0;
   mass_matrix_Fu(0,2) = 0;
   mass_matrix_Fu(1,1) = 0.7071067811865475*vu*Yu(1,1);
   mass_matrix_Fu(1,2) = 0;
   mass_matrix_Fu(2,2) = 0.7071067811865475*vu*Yu(2,2);

   Symmetrize(mass_matrix_Fu);

   return mass_matrix_Fu;
}

void CSE6SSM_mass_eigenstates::calculate_MFu()
{
   const auto mass_matrix_Fu(get_mass_matrix_Fu());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_Fu, MFu, ZUL, ZUR, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::Fu, eigenvalue_error > diagonalization_precision
      * Abs(MFu(0)));
#else
   fs_svd(mass_matrix_Fu, MFu, ZUL, ZUR);
#endif

   drbar.MFu = MFu;
   drbar.ZUL = ZUL;
   drbar.ZUR = ZUR;
}

Eigen::Matrix<double,3,3> CSE6SSM_mass_eigenstates::get_mass_matrix_FDX() const
{
   Eigen::Matrix<double,3,3> mass_matrix_FDX;

   mass_matrix_FDX(0,0) = 0.7071067811865475*vs*Kappa(0,0);
   mass_matrix_FDX(0,1) = 0;
   mass_matrix_FDX(0,2) = 0;
   mass_matrix_FDX(1,1) = 0.7071067811865475*vs*Kappa(1,1);
   mass_matrix_FDX(1,2) = 0;
   mass_matrix_FDX(2,2) = 0.7071067811865475*vs*Kappa(2,2);

   Symmetrize(mass_matrix_FDX);

   return mass_matrix_FDX;
}

void CSE6SSM_mass_eigenstates::calculate_MFDX()
{
   const auto mass_matrix_FDX(get_mass_matrix_FDX());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_FDX, MFDX, ZDXL, ZDXR, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::FDX, eigenvalue_error > diagonalization_precision
      * Abs(MFDX(0)));
#else
   fs_svd(mass_matrix_FDX, MFDX, ZDXL, ZDXR);
#endif
   drbar.MFDX = MFDX;
   drbar.ZDXL = ZDXL;
   drbar.ZDXR = ZDXR;
}

Eigen::Matrix<double,7,7> CSE6SSM_mass_eigenstates::get_mass_matrix_SHI0() const
{
   Eigen::Matrix<double,7,7> mass_matrix_SHI0;

   mass_matrix_SHI0(0,0) = mH1I2(0,0) + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(
      vs) - 0.0375*QS*Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*(
      AbsSqr(fu(0,0)) + AbsSqr(fu(1,0)) + AbsSqr(fu(2,0)))*Sqr(vu) - 0.075*Sqr(
      g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHI0(0,1) = mH1I2(0,1) + 0.5*(Conj(fu(0,0))*fu(0,1) + Conj
      (fu(1,0))*fu(1,1) + Conj(fu(2,0))*fu(2,1))*Sqr(vu);
   mass_matrix_SHI0(0,2) = -0.7071067811865475*vs*Conj(TLambda12(0,0)) +
      0.5*vd*vu*Conj(Lambda12(0,0))*Lambdax + 0.5*vphi*vsb*Conj(Lambda12(0,0))*
      Sigmax;
   mass_matrix_SHI0(0,3) = 0;
   mass_matrix_SHI0(0,4) = -0.5*vd*vs*Conj(Lambda12(0,0))*fd(0,0);
   mass_matrix_SHI0(0,5) = -0.5*vd*vs*Conj(Lambda12(0,0))*fd(1,0);
   mass_matrix_SHI0(0,6) = -0.5*vd*vs*Conj(Lambda12(0,0))*fd(2,0);
   mass_matrix_SHI0(1,1) = mH1I2(1,1) + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(
      vs) - 0.0375*QS*Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) + 0.5*(
      AbsSqr(fu(0,1)) + AbsSqr(fu(1,1)) + AbsSqr(fu(2,1)))*Sqr(vu) - 0.075*Sqr(
      g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHI0(1,2) = 0;
   mass_matrix_SHI0(1,3) = -0.7071067811865475*vs*Conj(TLambda12(1,1)) +
      0.5*vd*vu*Conj(Lambda12(1,1))*Lambdax + 0.5*vphi*vsb*Conj(Lambda12(1,1))*
      Sigmax;
   mass_matrix_SHI0(1,4) = -0.5*vd*vs*Conj(Lambda12(1,1))*fd(0,1);
   mass_matrix_SHI0(1,5) = -0.5*vd*vs*Conj(Lambda12(1,1))*fd(1,1);
   mass_matrix_SHI0(1,6) = -0.5*vd*vs*Conj(Lambda12(1,1))*fd(2,1);
   mass_matrix_SHI0(2,2) = mH2I2(0,0) + 0.5*(AbsSqr(fd(0,0)) + AbsSqr(fd(
      1,0)) + AbsSqr(fd(2,0)))*Sqr(vd) - 0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)
      *Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*
      Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHI0(2,3) = mH2I2(1,0) + 0.5*(Conj(fd(0,1))*fd(0,0) + Conj
      (fd(1,1))*fd(1,0) + Conj(fd(2,1))*fd(2,0))*Sqr(vd);
   mass_matrix_SHI0(2,4) = -0.5*vs*vu*Conj(Lambdax)*fd(0,0) +
      0.7071067811865475*vd*Tfd(0,0);
   mass_matrix_SHI0(2,5) = -0.5*vs*vu*Conj(Lambdax)*fd(1,0) +
      0.7071067811865475*vd*Tfd(1,0);
   mass_matrix_SHI0(2,6) = -0.5*vs*vu*Conj(Lambdax)*fd(2,0) +
      0.7071067811865475*vd*Tfd(2,0);
   mass_matrix_SHI0(3,3) = mH2I2(1,1) + 0.5*(AbsSqr(fd(0,1)) + AbsSqr(fd(
      1,1)) + AbsSqr(fd(2,1)))*Sqr(vd) - 0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)
      *Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(vs) -
      0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(g1)*
      Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHI0(3,4) = -0.5*vs*vu*Conj(Lambdax)*fd(0,1) +
      0.7071067811865475*vd*Tfd(0,1);
   mass_matrix_SHI0(3,5) = -0.5*vs*vu*Conj(Lambdax)*fd(1,1) +
      0.7071067811865475*vd*Tfd(1,1);
   mass_matrix_SHI0(3,6) = -0.5*vs*vu*Conj(Lambdax)*fd(2,1) +
      0.7071067811865475*vd*Tfd(2,1);
   mass_matrix_SHI0(4,4) = mSI2(0,0) + 0.5*(AbsSqr(fd(0,0)) + AbsSqr(fd(0
      ,1)))*Sqr(vd) - 0.1875*Sqr(g1p)*Sqr(vd) + 0.0625*QS*Sqr(g1p)*Sqr(vs) -
      0.0625*QS*Sqr(g1p)*Sqr(vsb) + 0.5*(AbsSqr(fu(0,0)) + AbsSqr(fu(0,1)))*Sqr
      (vu) - 0.125*Sqr(g1p)*Sqr(vu);
   mass_matrix_SHI0(4,5) = mSI2(0,1) + 0.5*(Conj(fd(0,0))*fd(1,0) + Conj(
      fd(0,1))*fd(1,1))*Sqr(vd) + 0.5*(Conj(fu(0,0))*fu(1,0) + Conj(fu(0,1))*fu
      (1,1))*Sqr(vu);
   mass_matrix_SHI0(4,6) = mSI2(0,2) + 0.5*(Conj(fd(0,0))*fd(2,0) + Conj(
      fd(0,1))*fd(2,1))*Sqr(vd) + 0.5*(Conj(fu(0,0))*fu(2,0) + Conj(fu(0,1))*fu
      (2,1))*Sqr(vu);
   mass_matrix_SHI0(5,5) = mSI2(1,1) + 0.5*(AbsSqr(fd(1,0)) + AbsSqr(fd(1
      ,1)))*Sqr(vd) - 0.1875*Sqr(g1p)*Sqr(vd) + 0.0625*QS*Sqr(g1p)*Sqr(vs) -
      0.0625*QS*Sqr(g1p)*Sqr(vsb) + 0.5*(AbsSqr(fu(1,0)) + AbsSqr(fu(1,1)))*Sqr
      (vu) - 0.125*Sqr(g1p)*Sqr(vu);
   mass_matrix_SHI0(5,6) = mSI2(1,2) + 0.5*(Conj(fd(1,0))*fd(2,0) + Conj(
      fd(1,1))*fd(2,1))*Sqr(vd) + 0.5*(Conj(fu(1,0))*fu(2,0) + Conj(fu(1,1))*fu
      (2,1))*Sqr(vu);
   mass_matrix_SHI0(6,6) = mSI2(2,2) + 0.5*(AbsSqr(fd(2,0)) + AbsSqr(fd(2
      ,1)))*Sqr(vd) - 0.1875*Sqr(g1p)*Sqr(vd) + 0.0625*QS*Sqr(g1p)*Sqr(vs) -
      0.0625*QS*Sqr(g1p)*Sqr(vsb) + 0.5*(AbsSqr(fu(2,0)) + AbsSqr(fu(2,1)))*Sqr
      (vu) - 0.125*Sqr(g1p)*Sqr(vu);

   Hermitianize(mass_matrix_SHI0);

   return mass_matrix_SHI0;
}

void CSE6SSM_mass_eigenstates::calculate_MSHI0()
{
   const auto mass_matrix_SHI0(get_mass_matrix_SHI0());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHI0, MSHI0, UHI0,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::SHI0, eigenvalue_error >
      diagonalization_precision * Abs(MSHI0(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHI0, MSHI0, UHI0);
#endif

   if (MSHI0.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::SHI0);

   MSHI0 = AbsSqrt(MSHI0);

   drbar.MSHI0 = MSHI0;
   drbar.UHI0 = UHI0;
}

Eigen::Matrix<double,4,4> CSE6SSM_mass_eigenstates::get_mass_matrix_SHIPM() const
{
   Eigen::Matrix<double,4,4> mass_matrix_SHIPM;

   mass_matrix_SHIPM(0,0) = mH1I2(0,0) + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(
      vs) - 0.0375*QS*Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) - 0.075*
      Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHIPM(0,1) = mH1I2(0,1);
   mass_matrix_SHIPM(0,2) = 0.7071067811865475*vs*Conj(TLambda12(0,0)) -
      0.5*vd*vu*Conj(Lambda12(0,0))*Lambdax - 0.5*vphi*vsb*Conj(Lambda12(0,0))*
      Sigmax;
   mass_matrix_SHIPM(0,3) = 0;
   mass_matrix_SHIPM(1,1) = mH1I2(1,1) + 0.075*Sqr(g1)*Sqr(vd) + 0.1125*
      Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(
      vs) - 0.0375*QS*Sqr(g1p)*Sqr(vs) + 0.0375*QS*Sqr(g1p)*Sqr(vsb) - 0.075*
      Sqr(g1)*Sqr(vu) + 0.075*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHIPM(1,2) = 0;
   mass_matrix_SHIPM(1,3) = 0.7071067811865475*vs*Conj(TLambda12(1,1)) -
      0.5*vd*vu*Conj(Lambda12(1,1))*Lambdax - 0.5*vphi*vsb*Conj(Lambda12(1,1))*
      Sigmax;
   mass_matrix_SHIPM(2,2) = mH2I2(0,0) - 0.075*Sqr(g1)*Sqr(vd) + 0.075*
      Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(0,0))*Sqr(
      vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(
      g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);
   mass_matrix_SHIPM(2,3) = mH2I2(1,0);
   mass_matrix_SHIPM(3,3) = mH2I2(1,1) - 0.075*Sqr(g1)*Sqr(vd) + 0.075*
      Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*AbsSqr(Lambda12(1,1))*Sqr(
      vs) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(g1p)*Sqr(vsb) + 0.075*Sqr(
      g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*Sqr(vu);

   Hermitianize(mass_matrix_SHIPM);

   return mass_matrix_SHIPM;
}

void CSE6SSM_mass_eigenstates::calculate_MSHIPM()
{
   const auto mass_matrix_SHIPM(get_mass_matrix_SHIPM());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHIPM, MSHIPM, UHIPM,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::SHIPM, eigenvalue_error >
      diagonalization_precision * Abs(MSHIPM(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHIPM, MSHIPM, UHIPM);
#endif

   if (MSHIPM.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::SHIPM);

   MSHIPM = AbsSqrt(MSHIPM);

   drbar.MSHIPM = MSHIPM;
   drbar.UHIPM = UHIPM;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_ChaI() const
{
   Eigen::Matrix<double,2,2> mass_matrix_ChaI;

   mass_matrix_ChaI(0,0) = 0.7071067811865475*vs*Lambda12(0,0);
   mass_matrix_ChaI(0,1) = 0;
   mass_matrix_ChaI(1,1) = 0.7071067811865475*vs*Lambda12(1,1);

   Symmetrize(mass_matrix_ChaI);

   return mass_matrix_ChaI;
}

void CSE6SSM_mass_eigenstates::calculate_MChaI()
{
   const auto mass_matrix_ChaI(get_mass_matrix_ChaI());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_svd(mass_matrix_ChaI, MChaI, ZMI, ZPI, eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::ChaI, eigenvalue_error >
      diagonalization_precision * Abs(MChaI(0)));
#else
   fs_svd(mass_matrix_ChaI, MChaI, ZMI, ZPI);
#endif

   drbar.MChaI = MChaI;
   drbar.ZMI = ZMI;
   drbar.ZPI = ZPI;
}

Eigen::Matrix<double,7,7> CSE6SSM_mass_eigenstates::get_mass_matrix_ChiI() const
{
   Eigen::Matrix<double,7,7> mass_matrix_ChiI;

   mass_matrix_ChiI(0,0) = 0;
   mass_matrix_ChiI(0,1) = 0;
   mass_matrix_ChiI(0,2) = -0.7071067811865475*vs*Lambda12(0,0);
   mass_matrix_ChiI(0,3) = 0;
   mass_matrix_ChiI(0,4) = 0.7071067811865475*vu*fu(0,0);
   mass_matrix_ChiI(0,5) = 0.7071067811865475*vu*fu(1,0);
   mass_matrix_ChiI(0,6) = 0.7071067811865475*vu*fu(2,0);
   mass_matrix_ChiI(1,1) = 0;
   mass_matrix_ChiI(1,2) = 0;
   mass_matrix_ChiI(1,3) = -0.7071067811865475*vs*Lambda12(1,1);
   mass_matrix_ChiI(1,4) = 0.7071067811865475*vu*fu(0,1);
   mass_matrix_ChiI(1,5) = 0.7071067811865475*vu*fu(1,1);
   mass_matrix_ChiI(1,6) = 0.7071067811865475*vu*fu(2,1);
   mass_matrix_ChiI(2,2) = 0;
   mass_matrix_ChiI(2,3) = 0;
   mass_matrix_ChiI(2,4) = 0.7071067811865475*vd*fd(0,0);
   mass_matrix_ChiI(2,5) = 0.7071067811865475*vd*fd(1,0);
   mass_matrix_ChiI(2,6) = 0.7071067811865475*vd*fd(2,0);
   mass_matrix_ChiI(3,3) = 0;
   mass_matrix_ChiI(3,4) = 0.7071067811865475*vd*fd(0,1);
   mass_matrix_ChiI(3,5) = 0.7071067811865475*vd*fd(1,1);
   mass_matrix_ChiI(3,6) = 0.7071067811865475*vd*fd(2,1);
   mass_matrix_ChiI(4,4) = 0;
   mass_matrix_ChiI(4,5) = 0;
   mass_matrix_ChiI(4,6) = 0;
   mass_matrix_ChiI(5,5) = 0;
   mass_matrix_ChiI(5,6) = 0;
   mass_matrix_ChiI(6,6) = 0;

   Symmetrize(mass_matrix_ChiI);

   return mass_matrix_ChiI;
}

void CSE6SSM_mass_eigenstates::calculate_MChiI()
{
   const auto mass_matrix_ChiI(get_mass_matrix_ChiI());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_ChiI, MChiI, ZNI,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::ChiI, eigenvalue_error >
      diagonalization_precision * Abs(MChiI(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_ChiI, MChiI, ZNI);
#endif

   drbar.MChiI = MChiI;
   drbar.ZNI = ZNI;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_SHp0() const
{
   Eigen::Matrix<double,2,2> mass_matrix_SHp0;

   mass_matrix_SHp0(0,0) = mHp2 + AbsSqr(MuPr) - 0.7071067811865475*vphi*
      Conj(SigmaL)*MuPr - 0.7071067811865475*vphi*Conj(MuPr)*SigmaL + 0.075*Sqr
      (g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) + 0.5*
      AbsSqr(SigmaL)*Sqr(vphi) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*
      Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) - 0.125*Sqr(g2)*
      Sqr(vu);
   mass_matrix_SHp0(0,1) = -Conj(BMuPr) + 0.7071067811865475*MuPhi*vphi*
      Conj(SigmaL) + 0.7071067811865475*vphi*Conj(TSigmaL) + Conj(SigmaL)*XiF -
      0.5*vs*vsb*Conj(SigmaL)*Sigmax + 0.5*Conj(SigmaL)*KappaPr*Sqr(vphi);
   mass_matrix_SHp0(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.7071067811865475*
      vphi*Conj(SigmaL)*MuPr - 0.7071067811865475*vphi*Conj(MuPr)*SigmaL -
      0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) +
      0.5*AbsSqr(SigmaL)*Sqr(vphi) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(
      g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr
      (g2)*Sqr(vu);

   Hermitianize(mass_matrix_SHp0);

   return mass_matrix_SHp0;
}

void CSE6SSM_mass_eigenstates::calculate_MSHp0()
{
   const auto mass_matrix_SHp0(get_mass_matrix_SHp0());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHp0, MSHp0, UHp0,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::SHp0, eigenvalue_error >
      diagonalization_precision * Abs(MSHp0(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHp0, MSHp0, UHp0);
#endif

   if (MSHp0.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::SHp0);

   MSHp0 = AbsSqrt(MSHp0);

   drbar.MSHp0 = MSHp0;
   drbar.UHp0 = UHp0;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_SHpp() const
{
   Eigen::Matrix<double,2,2> mass_matrix_SHpp;

   mass_matrix_SHpp(0,0) = mHp2 + AbsSqr(MuPr) - 0.7071067811865475*vphi*
      Conj(SigmaL)*MuPr - 0.7071067811865475*vphi*Conj(MuPr)*SigmaL + 0.075*Sqr
      (g1)*Sqr(vd) - 0.075*Sqr(g1p)*Sqr(vd) - 0.125*Sqr(g2)*Sqr(vd) + 0.5*
      AbsSqr(SigmaL)*Sqr(vphi) + 0.025*QS*Sqr(g1p)*Sqr(vs) - 0.025*QS*Sqr(g1p)*
      Sqr(vsb) - 0.075*Sqr(g1)*Sqr(vu) - 0.05*Sqr(g1p)*Sqr(vu) + 0.125*Sqr(g2)*
      Sqr(vu);
   mass_matrix_SHpp(0,1) = Conj(BMuPr) - 0.7071067811865475*MuPhi*vphi*
      Conj(SigmaL) - 0.7071067811865475*vphi*Conj(TSigmaL) - Conj(SigmaL)*XiF +
      0.5*vs*vsb*Conj(SigmaL)*Sigmax - 0.5*Conj(SigmaL)*KappaPr*Sqr(vphi);
   mass_matrix_SHpp(1,1) = mHpbar2 + AbsSqr(MuPr) - 0.7071067811865475*
      vphi*Conj(SigmaL)*MuPr - 0.7071067811865475*vphi*Conj(MuPr)*SigmaL -
      0.075*Sqr(g1)*Sqr(vd) + 0.075*Sqr(g1p)*Sqr(vd) + 0.125*Sqr(g2)*Sqr(vd) +
      0.5*AbsSqr(SigmaL)*Sqr(vphi) - 0.025*QS*Sqr(g1p)*Sqr(vs) + 0.025*QS*Sqr(
      g1p)*Sqr(vsb) + 0.075*Sqr(g1)*Sqr(vu) + 0.05*Sqr(g1p)*Sqr(vu) - 0.125*Sqr
      (g2)*Sqr(vu);

   Hermitianize(mass_matrix_SHpp);

   return mass_matrix_SHpp;
}

void CSE6SSM_mass_eigenstates::calculate_MSHpp()
{
   const auto mass_matrix_SHpp(get_mass_matrix_SHpp());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_hermitian(mass_matrix_SHpp, MSHpp, UHpp,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::SHpp, eigenvalue_error >
      diagonalization_precision * Abs(MSHpp(0)));
#else
   fs_diagonalize_hermitian(mass_matrix_SHpp, MSHpp, UHpp);
#endif

   if (MSHpp.minCoeff() < 0.)
      problems.flag_tachyon(CSE6SSM_info::SHpp);

   MSHpp = AbsSqrt(MSHpp);

   drbar.MSHpp = MSHpp;
   drbar.UHpp = UHpp;
}

Eigen::Matrix<double,2,2> CSE6SSM_mass_eigenstates::get_mass_matrix_ChiP() const
{
   Eigen::Matrix<double,2,2> mass_matrix_ChiP;

   mass_matrix_ChiP(0,0) = 0;
   mass_matrix_ChiP(0,1) = -MuPr + 0.7071067811865475*vphi*SigmaL;
   mass_matrix_ChiP(1,1) = 0;

   Symmetrize(mass_matrix_ChiP);

   return mass_matrix_ChiP;
}

void CSE6SSM_mass_eigenstates::calculate_MChiP()
{
   const auto mass_matrix_ChiP(get_mass_matrix_ChiP());

#ifdef CHECK_EIGENVALUE_ERROR
   double eigenvalue_error;
   fs_diagonalize_symmetric(mass_matrix_ChiP, MChiP, ZNp,
      eigenvalue_error);
   problems.flag_bad_mass(CSE6SSM_info::ChiP, eigenvalue_error >
      diagonalization_precision * Abs(MChiP(0)));
#else
   fs_diagonalize_symmetric(mass_matrix_ChiP, MChiP, ZNp);
#endif

   drbar.MChiP = MChiP;
   drbar.ZNp = ZNp;
}

double CSE6SSM_mass_eigenstates::get_mass_matrix_VWm() const
{
   const double mass_matrix_VWm = Re(0.25*Sqr(g2)*(Sqr(vd) + Sqr(vu)));

   return mass_matrix_VWm;
}

void CSE6SSM_mass_eigenstates::calculate_MVWm()
{
   const auto mass_matrix_VWm = get_mass_matrix_VWm();
   MVWm = calculate_singlet_mass(mass_matrix_VWm);

   if (MVWm < 0.)
      problems.flag_tachyon(CSE6SSM_info::VWm);

   MVWm = AbsSqrt(MVWm);

   drbar.MVWm = MVWm;
}


double CSE6SSM_mass_eigenstates::get_ewsb_eq_hh_1() const
{
   const double TanBeta = vu / vd;

   double result = Re(mHd2 - 0.35355339059327373 * vs * TanBeta * Conj(TLambdax)
      + 0.25 * vphi * vsb * TanBeta * Conj(Sigmax) * Lambdax + 0.25 * vphi * vsb
      * TanBeta * Conj(Lambdax) * Sigmax + 0.075 * Sqr(vd) * Sqr(g1) + 0.1125 *
      Sqr(vd) * Sqr(g1p) + 0.125 * Sqr(vd) * Sqr(g2) + 0.5 * AbsSqr(Lambdax) *
      Sqr(vs) - 0.0375 * QS * Sqr(g1p) * Sqr(vs) + 0.0375 * QS * Sqr(g1p) *
      Sqr(vsb) + 0.5 * AbsSqr(Lambdax) * Sqr(vu) - 0.075 * Sqr(g1) * Sqr(vu)
      + 0.075 * Sqr(g1p) * Sqr(vu) - 0.125 * Sqr(g2) * Sqr(vu) -
      0.35355339059327373 * vs * TanBeta * TLambdax);

   return result;
}

double CSE6SSM_mass_eigenstates::get_ewsb_eq_hh_2() const
{
   const double oneOverTanBeta = vd / vu;

   double result = Re(mHu2 - 0.35355339059327373 * oneOverTanBeta * vs *
      Conj(TLambdax) + 0.25 * oneOverTanBeta * vphi * vsb * Conj(Sigmax)
      * Lambdax + 0.25 * oneOverTanBeta * vphi * vsb * Conj(Lambdax) * Sigmax
      + 0.075 * Sqr(vu) * Sqr(g1) + 0.05 * Sqr(vu) * Sqr(g1p) + 0.125 * Sqr(vu)
      * Sqr(g2) + 0.5 * AbsSqr(Lambdax) * Sqr(vd) - 0.075 * Sqr(g1) * Sqr(vd)
      + 0.075 * Sqr(g1p) * Sqr(vd) - 0.125 * Sqr(g2) * Sqr(vd) + 0.5 *
      AbsSqr(Lambdax) * Sqr(vs) - 0.025 * QS * Sqr(g1p) * Sqr(vs) + 0.025 *
      QS * Sqr(g1p) * Sqr(vsb) - 0.35355339059327373 * oneOverTanBeta * vs
      * TLambdax);

   return result;
}

double CSE6SSM_mass_eigenstates::get_ewsb_eq_hh_3() const
{
   const double TanTheta = vsb / vs;

   double result = Re(ms2 - 0.35355339059327373 * MuPhi * vphi * TanTheta
      * Conj(Sigmax) - 0.35355339059327373 * vd * vu * Conj(TLambdax) / vs -
      0.35355339059327373 * vphi * TanTheta * Conj(TSigmax) - 0.5 * TanTheta
      * Conj(Sigmax) * XiF - 0.35355339059327373 * vphi * TanTheta * Conj
      (MuPhi) * Sigmax - 0.5 * TanTheta * Conj(XiF) * Sigmax + 0.0125 * Sqr(vs)
      *Sqr(g1p) * Sqr(QS) + 0.5 * AbsSqr(Lambdax) * Sqr(vd) - 0.0375 * QS *
      Sqr(g1p) * Sqr(vd) + 0.5 * AbsSqr(Sigmax) * Sqr(vphi) - 0.25 * TanTheta
      * Conj(Sigmax) * KappaPr * Sqr(vphi) - 0.25 * TanTheta * Conj(KappaPr)
      * Sigmax * Sqr(vphi) + 0.5 * AbsSqr(Sigmax) * Sqr(vsb) - 0.0125 * Sqr(g1p)
      * Sqr(QS) * Sqr(vsb) + 0.5 * AbsSqr(Lambdax) * Sqr(vu) - 0.025 * QS *
      Sqr(g1p) * Sqr(vu) - 0.35355339059327373 * vd * vu * TLambdax / vs -
      0.35355339059327373 * vphi * TanTheta * TSigmax);

   return result;
}

double CSE6SSM_mass_eigenstates::get_ewsb_eq_hh_4() const
{
   const double oneOverTanTheta = vs / vsb;

   double result = Re(msbar2 - 0.35355339059327373 * MuPhi * vphi *
      oneOverTanTheta * Conj(Sigmax) - 0.35355339059327373 * vphi *
      oneOverTanTheta * Conj(TSigmax) + 0.25 * vd * vphi * vu * Conj(
      Sigmax) * Lambdax / vsb - 0.5 * oneOverTanTheta * Conj(Sigmax) * XiF -
      0.35355339059327373 * vphi * oneOverTanTheta * Conj(MuPhi) * Sigmax +
      0.25 * vd * vphi * vu * Conj(Lambdax) * Sigmax / vsb - 0.5 *
      oneOverTanTheta * Conj(XiF) * Sigmax + 0.0125 * Sqr(vsb) * Sqr(g1p) *
      Sqr(QS) + 0.0375 * QS * Sqr(g1p) * Sqr(vd) + 0.5 * AbsSqr(Sigmax) *
      Sqr(vphi) - 0.25 * oneOverTanTheta * Conj(Sigmax) * KappaPr * Sqr(
      vphi) - 0.25 * oneOverTanTheta * Conj(KappaPr) * Sigmax * Sqr(vphi) +
      0.5 * AbsSqr(Sigmax) * Sqr(vs) - 0.0125 * Sqr(g1p) * Sqr(QS) * Sqr(vs)
      + 0.025 * QS * Sqr(g1p) * Sqr(vu) - 0.35355339059327373 * vphi *
      oneOverTanTheta * TSigmax);

   return result;
}

double CSE6SSM_mass_eigenstates::get_ewsb_eq_hh_5() const
{
   double result = Re(mphi2 + AbsSqr(MuPhi) + Sqr(vphi) * AbsSqr(
      KappaPr) + 0.5 * BMuPhi + 0.5 * Conj(BMuPhi) + 0.7071067811865475 *
      MuPhi * Conj(XiF) / vphi - 0.35355339059327373 * MuPhi * vs * vsb *
      Conj(Sigmax) / vphi + 0.7071067811865475 * Conj(LXiF) / vphi -
      0.35355339059327373 * vs * vsb * Conj(TSigmax) /vphi + Conj(XiF) *
      KappaPr - 0.5 * vs * vsb * Conj(Sigmax) * KappaPr + 0.25 * vd * vsb
      * vu * Conj(Sigmax) * Lambdax / vphi + 0.7071067811865475 * Conj(MuPhi)
      * XiF / vphi + Conj(KappaPr) * XiF - 0.35355339059327373 * vs * vsb *
      Conj(MuPhi) * Sigmax / vphi - 0.5 * vs * vsb * Conj(KappaPr) * Sigmax
      + 0.25 * vd * vsb * vu * Conj(Lambdax) * Sigmax / vphi +
      0.7071067811865475 * LXiF / vphi + 1.0606601717798212 * MuPhi *
      Conj(KappaPr) * vphi + 0.35355339059327373 * Conj(TKappaPr) * vphi +
      1.0606601717798212 * Conj(MuPhi) * KappaPr * vphi + 0.5 *
      AbsSqr(Sigmax) * Sqr(vs) + 0.5 * AbsSqr(Sigmax) * Sqr(vsb) +
      0.35355339059327373 * vphi * TKappaPr - 0.35355339059327373 * vs *
      vsb * TSigmax / vphi);

   return result;
}

double CSE6SSM_mass_eigenstates::get_tadpole_eq_hh_1(unsigned ewsb_loop_order) const
{
   double tadpole = get_ewsb_eq_hh_1();

   if (ewsb_loop_order > 0) {
      tadpole -= Re(tadpole_hh(0)) / vd;

      if (ewsb_loop_order > 1) {
         double two_loop_tadpole[3];
         tadpole_hh_2loop(two_loop_tadpole);
         tadpole -= two_loop_tadpole[0] / vd;
      }
   }

   return tadpole;
}

double CSE6SSM_mass_eigenstates::get_tadpole_eq_hh_2(unsigned ewsb_loop_order) const
{
   double tadpole = get_ewsb_eq_hh_2();

   if (ewsb_loop_order > 0) {
      tadpole -= Re(tadpole_hh(1)) / vu;

      if (ewsb_loop_order > 1) {
         double two_loop_tadpole[3];
         tadpole_hh_2loop(two_loop_tadpole);
         tadpole -= two_loop_tadpole[1] / vu;
      }
   }

   return tadpole;
}

double CSE6SSM_mass_eigenstates::get_tadpole_eq_hh_3(unsigned ewsb_loop_order) const
{
   double tadpole = get_ewsb_eq_hh_3();

   if (ewsb_loop_order > 0) {
      tadpole -= Re(tadpole_hh(2)) / vs;

      if (ewsb_loop_order > 1) {
         double two_loop_tadpole[3];
         tadpole_hh_2loop(two_loop_tadpole);
         tadpole -= two_loop_tadpole[2] / vs;
      }
   }

   return tadpole;
}

double CSE6SSM_mass_eigenstates::get_tadpole_eq_hh_4(unsigned ewsb_loop_order) const
{
   double tadpole = get_ewsb_eq_hh_4();

   if (ewsb_loop_order > 0) {
      tadpole -= Re(tadpole_hh(3)) / vsb;

      if (ewsb_loop_order > 1) {

      }
   }

   return tadpole;
}

double CSE6SSM_mass_eigenstates::get_tadpole_eq_hh_5(unsigned ewsb_loop_order) const
{
   double tadpole = get_ewsb_eq_hh_5();

   if (ewsb_loop_order > 0) {
      tadpole -= Re(tadpole_hh(4)) / vphi;

      if (ewsb_loop_order > 1) {

      }
   }

   return tadpole;
}


std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_0;
   std::complex<double> tmp_1;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_0 += tmp_1;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_0;
   std::complex<double> tmp_2;
   std::complex<double> tmp_3;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2 += tmp_3;
   result += (-0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_2;
   std::complex<double> tmp_4;
   std::complex<double> tmp_5;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_4 += tmp_5;
   result += (0.2*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_4;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6;
   std::complex<double> tmp_7;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_6 += tmp_7;
   result += (0.2*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_6;
   std::complex<double> tmp_8;
   std::complex<double> tmp_9;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_9 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_8 += tmp_9;
   result += (0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_8;
   std::complex<double> tmp_10;
   std::complex<double> tmp_11;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_11 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_10 += tmp_11;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_10;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSdconjUSdconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_12;
   std::complex<double> tmp_13;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_13 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_12 += tmp_13;
   result += (0.1*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_12;
   std::complex<double> tmp_14;
   std::complex<double> tmp_15;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_15 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_14 += tmp_15;
   result += (0.15*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_14;
   std::complex<double> tmp_16;
   std::complex<double> tmp_17;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_17 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_16 += tmp_17;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_16;
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,0);
   }
   std::complex<double> tmp_18;
   std::complex<double> tmp_19;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_19 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_18 += tmp_19;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_18;
   std::complex<double> tmp_20;
   std::complex<double> tmp_21;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_21 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_20 += tmp_21;
   result += (0.1*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_20;
   if (gO1 < 3) {
      result += -0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_22;
   std::complex<double> tmp_23;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_23 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_22 += tmp_23;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_22;
   std::complex<double> tmp_24;
   std::complex<double> tmp_25;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_25 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_24 += tmp_25;
   result += (-0.1*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_24;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   if (gO1 < 3 && gO2 < 3) {
      std::complex<double> tmp_26;
      std::complex<double> tmp_27;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_27 += Conj(gD(gO2,j1))*gD(gO1,j1);
      }
      tmp_26 += tmp_27;
      result += (-(Conj(UHp0(gI2,0))*UHp0(gI1,0))) * tmp_26;
   }
   std::complex<double> tmp_28;
   std::complex<double> tmp_29;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_29 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_28 += tmp_29;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_28;
   std::complex<double> tmp_30;
   std::complex<double> tmp_31;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_31 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_30 += tmp_31;
   result += (0.1*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_30;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_32;
   std::complex<double> tmp_33;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_33 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_32 += tmp_33;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_32;
   std::complex<double> tmp_34;
   std::complex<double> tmp_35;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_35 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_34 += tmp_35;
   result += (-0.1*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_34;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_36;
   std::complex<double> tmp_37;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_37 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_36 += tmp_37;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_36;
   std::complex<double> tmp_38;
   std::complex<double> tmp_39;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_39 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_38 += tmp_39;
   result += (0.1*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_38;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdconjSHp0SDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_40;
   std::complex<double> tmp_41;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_42;
      std::complex<double> tmp_43;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_43 += Conj(gD(j1,j2))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
      }
      tmp_42 += tmp_43;
      tmp_41 += (Conj(ZDX(gI2,3 + j2))) * tmp_42;
   }
   tmp_40 += tmp_41;
   result += (0.7071067811865475*vd*UHp0(gI1,0)) * tmp_40;
   if (gO2 < 3) {
      std::complex<double> tmp_44;
      std::complex<double> tmp_45;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_45 += Conj(gD(gO2,j1))*Conj(ZDX(gI2,j1))*Kappa(j1,j1);
      }
      tmp_44 += tmp_45;
      result += (0.7071067811865475*vs*UHp0(gI1,0)) * tmp_44;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_46;
      std::complex<double> tmp_47;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_47 += Conj(ZDX(gI2,3 + j2))*Conj(TgD(gO2,j2));
      }
      tmp_46 += tmp_47;
      result += (UHp0(gI1,0)) * tmp_46;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_48;
      std::complex<double> tmp_49;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_49 += Conj(gD(gO2,j2))*Conj(ZDX(gI2,3 + j2));
      }
      tmp_48 += tmp_49;
      result += (-(MuPr*UHp0(gI1,1))) * tmp_48;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_50;
      std::complex<double> tmp_51;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_51 += Conj(gD(gO2,j2))*Conj(ZDX(gI2,3 + j2));
      }
      tmp_50 += tmp_51;
      result += (0.7071067811865475*vphi*SigmaL*UHp0(gI1,1)) * tmp_50;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_52;
   std::complex<double> tmp_53;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_53 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_52 += tmp_53;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_52;
   std::complex<double> tmp_54;
   std::complex<double> tmp_55;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_55 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_54 += tmp_55;
   result += (-0.1*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_54;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(
         g1p);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdFDXChiPPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_56;
      std::complex<double> tmp_57;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_57 += Conj(gD(gO2,j2))*ZDXR(gI1,j2);
      }
      tmp_56 += tmp_57;
      result += (ZNp(gI2,0)) * tmp_56;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSdFDXChiPPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdFuChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yu(gO2,gO2))*UP(gI2,1)*ZUR(gI1,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdFuChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_58;
   std::complex<double> tmp_59;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_59 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_58 += tmp_59;
   result += (Conj(UM(gI2,1))) * tmp_58;
   if (gO1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*Conj(ZUL(gI1,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdFdChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_60;
   std::complex<double> tmp_61;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_61 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_60 += tmp_61;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_60;
   if (gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*ZDR(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_62;
   std::complex<double> tmp_63;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_63 += KroneckerDelta(gO2,3 + j1)*ZDR(gI1,j1);
   }
   tmp_62 += tmp_63;
   result += (-0.4472135954999579*g1p*ZN(gI2,7)) * tmp_62;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdFdChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_64;
   std::complex<double> tmp_65;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_65 += Conj(ZDL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yd(j1,j1);
   }
   tmp_64 += tmp_65;
   result += (-Conj(ZN(gI2,2))) * tmp_64;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZDL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_66;
   std::complex<double> tmp_68;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_68 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_66 += tmp_68;
   std::complex<double> tmp_67;
   std::complex<double> tmp_69;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_69 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_67 += tmp_69;
   result += (0.05*Sqr(g1)) * tmp_66 * tmp_67;
   std::complex<double> tmp_70;
   std::complex<double> tmp_72;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_72 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_70 += tmp_72;
   std::complex<double> tmp_71;
   std::complex<double> tmp_73;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_73 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_71 += tmp_73;
   result += (0.075*Sqr(g1p)) * tmp_70 * tmp_71;
   std::complex<double> tmp_74;
   std::complex<double> tmp_76;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_76 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_74 += tmp_76;
   std::complex<double> tmp_75;
   std::complex<double> tmp_77;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_77 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_75 += tmp_77;
   result += (-0.05*Sqr(g1)) * tmp_74 * tmp_75;
   std::complex<double> tmp_78;
   std::complex<double> tmp_80;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_80 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_78 += tmp_80;
   std::complex<double> tmp_79;
   std::complex<double> tmp_81;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_81 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_79 += tmp_81;
   result += (0.05*Sqr(g1p)) * tmp_78 * tmp_79;
   std::complex<double> tmp_82;
   std::complex<double> tmp_84;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_84 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_82 += tmp_84;
   std::complex<double> tmp_83;
   std::complex<double> tmp_85;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_85 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_83 += tmp_85;
   result += (0.05*Sqr(g1)) * tmp_82 * tmp_83;
   std::complex<double> tmp_86;
   std::complex<double> tmp_88;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_88 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_86 += tmp_88;
   std::complex<double> tmp_87;
   std::complex<double> tmp_89;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_89 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_87 += tmp_89;
   result += (0.075*Sqr(g1p)) * tmp_86 * tmp_87;
   std::complex<double> tmp_90;
   std::complex<double> tmp_92;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_92 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_90 += tmp_92;
   std::complex<double> tmp_91;
   std::complex<double> tmp_93;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_93 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_91 += tmp_93;
   result += (-0.05*Sqr(g1)) * tmp_90 * tmp_91;
   std::complex<double> tmp_94;
   std::complex<double> tmp_96;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_96 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_94 += tmp_96;
   std::complex<double> tmp_95;
   std::complex<double> tmp_97;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_97 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_95 += tmp_97;
   result += (0.05*Sqr(g1p)) * tmp_94 * tmp_95;
   if (gO1 < 3) {
      std::complex<double> tmp_98;
      std::complex<double> tmp_99;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_99 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_98 += tmp_99;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_98;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_100;
      std::complex<double> tmp_101;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_101 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_100 += tmp_101;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_100;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_102;
      std::complex<double> tmp_103;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_103 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_102 += tmp_103;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_102;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_104;
      std::complex<double> tmp_105;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_105 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_104 += tmp_105;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_104;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_106;
      std::complex<double> tmp_107;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_107 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_106 += tmp_107;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_106;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_108;
      std::complex<double> tmp_109;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_109 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_108 += tmp_109;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_108;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_110;
      std::complex<double> tmp_111;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_111 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_110 += tmp_111;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_110;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_112;
      std::complex<double> tmp_113;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_113 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_112 += tmp_113;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_112;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_114;
      std::complex<double> tmp_115;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_115 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_114 += tmp_115;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_114;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_116;
      std::complex<double> tmp_117;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_117 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_116 += tmp_117;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_116;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_118;
      std::complex<double> tmp_119;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_119 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_118 += tmp_119;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_118;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_120;
      std::complex<double> tmp_121;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_121 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_120 += tmp_121;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_120;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_122;
   std::complex<double> tmp_123;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_123 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_122 += tmp_123;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_122;
   std::complex<double> tmp_124;
   std::complex<double> tmp_125;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_125 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_124 += tmp_125;
   result += (0.15*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_124;
   std::complex<double> tmp_126;
   std::complex<double> tmp_127;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_127 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_126 += tmp_127;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_126;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_128;
   std::complex<double> tmp_129;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_129 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_128 += tmp_129;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_128;
   std::complex<double> tmp_130;
   std::complex<double> tmp_131;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_131 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_130 += tmp_131;
   result += (0.1*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_130;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_132;
   std::complex<double> tmp_133;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_133 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_132 += tmp_133;
   result += (-0.05*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_132;
   if (gO1 < 3) {
      result += -0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,
         2);
   }
   std::complex<double> tmp_134;
   std::complex<double> tmp_135;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_135 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_134 += tmp_135;
   result += (0.05*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_134;
   if (gO1 < 3) {
      result += 0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_136;
   std::complex<double> tmp_137;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_137 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_136 += tmp_137;
   result += (0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_136;
   std::complex<double> tmp_138;
   std::complex<double> tmp_139;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_139 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_138 += tmp_139;
   result += (0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_138;
   std::complex<double> tmp_140;
   std::complex<double> tmp_141;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_141 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_140 += tmp_141;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_140;
   std::complex<double> tmp_142;
   std::complex<double> tmp_143;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_143 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_142 += tmp_143;
   result += (0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_142;
   std::complex<double> tmp_144;
   std::complex<double> tmp_145;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_145 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_144 += tmp_145;
   result += (-0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_144;
   std::complex<double> tmp_146;
   std::complex<double> tmp_147;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_147 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_146 += tmp_147;
   result += (0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_146;
   std::complex<double> tmp_148;
   std::complex<double> tmp_149;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_149 += AbsSqr(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_148 += tmp_149;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_148;
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1
         ,gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yd(gO2,gO2))*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_150;
   std::complex<double> tmp_152;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_152 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_150 += tmp_152;
   std::complex<double> tmp_151;
   std::complex<double> tmp_153;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_153 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_151 += tmp_153;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_150 * tmp_151;
   std::complex<double> tmp_154;
   std::complex<double> tmp_156;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_156 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_154 += tmp_156;
   std::complex<double> tmp_155;
   std::complex<double> tmp_157;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_157 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_155 += tmp_157;
   result += (-0.05*Sqr(g1p)) * tmp_154 * tmp_155;
   std::complex<double> tmp_158;
   std::complex<double> tmp_160;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_160 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
   }
   tmp_158 += tmp_160;
   std::complex<double> tmp_159;
   std::complex<double> tmp_161;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_161 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_159 += tmp_161;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_158 * tmp_159;
   std::complex<double> tmp_162;
   std::complex<double> tmp_164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_164 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_162 += tmp_164;
   std::complex<double> tmp_163;
   std::complex<double> tmp_165;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_165 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_163 += tmp_165;
   result += (-0.05*Sqr(g1)) * tmp_162 * tmp_163;
   std::complex<double> tmp_166;
   std::complex<double> tmp_168;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_168 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_166 += tmp_168;
   std::complex<double> tmp_167;
   std::complex<double> tmp_169;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_169 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_167 += tmp_169;
   result += (-0.075*Sqr(g1p)) * tmp_166 * tmp_167;
   std::complex<double> tmp_170;
   std::complex<double> tmp_172;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_172 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_170 += tmp_172;
   std::complex<double> tmp_171;
   std::complex<double> tmp_173;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_173 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_171 += tmp_173;
   result += (-0.1*Sqr(g1)) * tmp_170 * tmp_171;
   std::complex<double> tmp_174;
   std::complex<double> tmp_176;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_176 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_174 += tmp_176;
   std::complex<double> tmp_175;
   std::complex<double> tmp_177;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_177 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_175 += tmp_177;
   result += (-0.15*Sqr(g1p)) * tmp_174 * tmp_175;
   std::complex<double> tmp_178;
   std::complex<double> tmp_180;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_180 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_178 += tmp_180;
   std::complex<double> tmp_179;
   std::complex<double> tmp_181;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_181 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_179 += tmp_181;
   result += (-0.05*Sqr(g1)) * tmp_178 * tmp_179;
   std::complex<double> tmp_182;
   std::complex<double> tmp_184;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_184 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_182 += tmp_184;
   std::complex<double> tmp_183;
   std::complex<double> tmp_185;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_185 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_183 += tmp_185;
   result += (-0.075*Sqr(g1p)) * tmp_182 * tmp_183;
   std::complex<double> tmp_186;
   std::complex<double> tmp_188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_188 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_186 += tmp_188;
   std::complex<double> tmp_187;
   std::complex<double> tmp_189;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_189 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_187 += tmp_189;
   result += (-1) * tmp_186 * tmp_187;
   std::complex<double> tmp_190;
   std::complex<double> tmp_192;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_192 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_190 += tmp_192;
   std::complex<double> tmp_191;
   std::complex<double> tmp_193;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_193 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_191 += tmp_193;
   result += (-0.1*Sqr(g1)) * tmp_190 * tmp_191;
   std::complex<double> tmp_194;
   std::complex<double> tmp_196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_196 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_194 += tmp_196;
   std::complex<double> tmp_195;
   std::complex<double> tmp_197;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_197 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_195 += tmp_197;
   result += (-0.15*Sqr(g1p)) * tmp_194 * tmp_195;
   std::complex<double> tmp_198;
   std::complex<double> tmp_200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_200 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_198 += tmp_200;
   std::complex<double> tmp_199;
   std::complex<double> tmp_201;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_201 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_199 += tmp_201;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_198 * tmp_199;
   std::complex<double> tmp_202;
   std::complex<double> tmp_204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_204 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_202 += tmp_204;
   std::complex<double> tmp_203;
   std::complex<double> tmp_205;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_205 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_203 += tmp_205;
   result += (-0.05*Sqr(g1p)) * tmp_202 * tmp_203;
   std::complex<double> tmp_206;
   std::complex<double> tmp_208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_208 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_206 += tmp_208;
   std::complex<double> tmp_207;
   std::complex<double> tmp_209;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_209 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
   }
   tmp_207 += tmp_209;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_206 * tmp_207;
   if (gO1 < 3) {
      std::complex<double> tmp_210;
      std::complex<double> tmp_211;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_211 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_210 += tmp_211;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_210;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_212;
      std::complex<double> tmp_213;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_213 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_212 += tmp_213;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_212;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_214;
      std::complex<double> tmp_215;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_215 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_214 += tmp_215;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_214;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_216;
      std::complex<double> tmp_217;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_217 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_216 += tmp_217;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_216;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_218;
      std::complex<double> tmp_219;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_219 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_218 += tmp_219;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_218;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_220;
      std::complex<double> tmp_221;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_221 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_220 += tmp_221;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_220;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_222;
      std::complex<double> tmp_223;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_223 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_222 += tmp_223;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_222;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_224;
      std::complex<double> tmp_225;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_225 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_224 += tmp_225;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_224;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_226;
      std::complex<double> tmp_227;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_227 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_226 += tmp_227;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_226;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_228;
      std::complex<double> tmp_229;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_229 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_228 += tmp_229;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_228;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_230;
      std::complex<double> tmp_231;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_231 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_230 += tmp_231;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_230;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_232;
      std::complex<double> tmp_233;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_233 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_232 += tmp_233;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)) * tmp_232;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_234;
      std::complex<double> tmp_235;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_235 += KroneckerDelta(gO1,3 + j1)*ZD(gI1,3 + j1);
      }
      tmp_234 += tmp_235;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_234;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_236;
      std::complex<double> tmp_237;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_237 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_236 += tmp_237;
      result += (-3*Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) * tmp_236
         ;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_238;
      std::complex<double> tmp_239;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_239 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_238 += tmp_239;
      result += (-0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)) * tmp_238;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_240;
      std::complex<double> tmp_241;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_241 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_240 += tmp_241;
      result += (-0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)) * tmp_240;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_242;
      std::complex<double> tmp_243;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_243 += KroneckerDelta(gO1,3 + j2)*ZD(gI1,3 + j2);
      }
      tmp_242 += tmp_243;
      result += (0.6666666666666666*Conj(ZD(gI2,gO2))*Sqr(g3)) * tmp_242;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_244;
      std::complex<double> tmp_245;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_245 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_244 += tmp_245;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1)) * tmp_244;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_246;
      std::complex<double> tmp_247;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_247 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_246 += tmp_247;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_246;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_248;
      std::complex<double> tmp_249;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_249 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_248 += tmp_249;
      result += (-0.025*Sqr(g1p)*ZD(gI1,gO1)) * tmp_248;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_250;
      std::complex<double> tmp_251;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_251 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_250 += tmp_251;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_250;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_252;
      std::complex<double> tmp_253;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_253 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_252 += tmp_253;
      result += (-0.016666666666666666*Sqr(g1)*ZD(gI1,gO1)) * tmp_252;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_254;
      std::complex<double> tmp_255;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_255 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_254 += tmp_255;
      result += (-0.025*Sqr(g1p)*ZD(gI1,gO1)) * tmp_254;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_256;
      std::complex<double> tmp_257;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_257 += Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_256 += tmp_257;
      result += (0.6666666666666666*Sqr(g3)*ZD(gI1,gO1)) * tmp_256;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZD(gI2,gO2))*Sqr(g1)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZD(gI2,gO2))*Sqr(g1p)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZD(gI2,gO2))*Sqr(g3)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_258;
   std::complex<double> tmp_260;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_260 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_258 += tmp_260;
   std::complex<double> tmp_259;
   std::complex<double> tmp_261;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_261 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_259 += tmp_261;
   result += (0.1*Sqr(g1)) * tmp_258 * tmp_259;
   std::complex<double> tmp_262;
   std::complex<double> tmp_264;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_264 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_262 += tmp_264;
   std::complex<double> tmp_263;
   std::complex<double> tmp_265;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_265 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_263 += tmp_265;
   result += (0.15*Sqr(g1p)) * tmp_262 * tmp_263;
   std::complex<double> tmp_266;
   std::complex<double> tmp_268;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_268 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_266 += tmp_268;
   std::complex<double> tmp_267;
   std::complex<double> tmp_269;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_269 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_267 += tmp_269;
   result += (-0.1*Sqr(g1)) * tmp_266 * tmp_267;
   std::complex<double> tmp_270;
   std::complex<double> tmp_272;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_272 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_270 += tmp_272;
   std::complex<double> tmp_271;
   std::complex<double> tmp_273;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_273 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_271 += tmp_273;
   result += (0.225*Sqr(g1p)) * tmp_270 * tmp_271;
   std::complex<double> tmp_274;
   std::complex<double> tmp_276;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_276 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_274 += tmp_276;
   std::complex<double> tmp_275;
   std::complex<double> tmp_277;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_277 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_275 += tmp_277;
   result += (0.1*Sqr(g1)) * tmp_274 * tmp_275;
   std::complex<double> tmp_278;
   std::complex<double> tmp_280;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_280 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_278 += tmp_280;
   std::complex<double> tmp_279;
   std::complex<double> tmp_281;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_281 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_279 += tmp_281;
   result += (0.15*Sqr(g1p)) * tmp_278 * tmp_279;
   std::complex<double> tmp_282;
   std::complex<double> tmp_284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_284 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_282 += tmp_284;
   std::complex<double> tmp_283;
   std::complex<double> tmp_285;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_285 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_283 += tmp_285;
   result += (-0.1*Sqr(g1)) * tmp_282 * tmp_283;
   std::complex<double> tmp_286;
   std::complex<double> tmp_288;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_288 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_286 += tmp_288;
   std::complex<double> tmp_287;
   std::complex<double> tmp_289;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_289 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_287 += tmp_289;
   result += (0.225*Sqr(g1p)) * tmp_286 * tmp_287;
   if (gO1 < 3) {
      std::complex<double> tmp_290;
      std::complex<double> tmp_291;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_291 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_290 += tmp_291;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_290;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_292;
      std::complex<double> tmp_293;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_293 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_292 += tmp_293;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_292;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_294;
      std::complex<double> tmp_295;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_295 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_294 += tmp_295;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_294;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_296;
      std::complex<double> tmp_297;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_297 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_296 += tmp_297;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_296;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_298;
      std::complex<double> tmp_299;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_299 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_298 += tmp_299;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_298;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_300;
      std::complex<double> tmp_301;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_301 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_300 += tmp_301;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_300;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_302;
      std::complex<double> tmp_303;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_303 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_302 += tmp_303;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_302;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_304;
      std::complex<double> tmp_305;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_305 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_304 += tmp_305;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_304;
   }
   if (gO1 < 3 && gO2 < 3) {
      std::complex<double> tmp_306;
      std::complex<double> tmp_308;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_308 += gD(gO1,j2)*ZDX(gI1,3 + j2);
      }
      tmp_306 += tmp_308;
      std::complex<double> tmp_307;
      std::complex<double> tmp_309;
      for (unsigned j4 = 0; j4 < 3; ++j4) {
         tmp_309 += Conj(gD(gO2,j4))*Conj(ZDX(gI2,3 + j4));
      }
      tmp_307 += tmp_309;
      result += (-1) * tmp_306 * tmp_307;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_310;
   std::complex<double> tmp_312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_312 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_310 += tmp_312;
   std::complex<double> tmp_311;
   std::complex<double> tmp_313;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_313 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_311 += tmp_313;
   result += (0.05*Sqr(g1)) * tmp_310 * tmp_311;
   std::complex<double> tmp_314;
   std::complex<double> tmp_316;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_316 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_314 += tmp_316;
   std::complex<double> tmp_315;
   std::complex<double> tmp_317;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_317 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_315 += tmp_317;
   result += (-0.05*Sqr(g1p)) * tmp_314 * tmp_315;
   std::complex<double> tmp_318;
   std::complex<double> tmp_320;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_320 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_318 += tmp_320;
   std::complex<double> tmp_319;
   std::complex<double> tmp_321;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_321 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_319 += tmp_321;
   result += (-0.1*Sqr(g1)) * tmp_318 * tmp_319;
   std::complex<double> tmp_322;
   std::complex<double> tmp_324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_324 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_322 += tmp_324;
   std::complex<double> tmp_323;
   std::complex<double> tmp_325;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_325 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_323 += tmp_325;
   result += (-0.025*Sqr(g1p)) * tmp_322 * tmp_323;
   std::complex<double> tmp_326;
   std::complex<double> tmp_328;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_328 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_326 += tmp_328;
   std::complex<double> tmp_327;
   std::complex<double> tmp_329;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_329 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_327 += tmp_329;
   result += (0.05*Sqr(g1)) * tmp_326 * tmp_327;
   std::complex<double> tmp_330;
   std::complex<double> tmp_332;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_332 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_330 += tmp_332;
   std::complex<double> tmp_331;
   std::complex<double> tmp_333;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_333 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_331 += tmp_333;
   result += (-0.05*Sqr(g1p)) * tmp_330 * tmp_331;
   std::complex<double> tmp_334;
   std::complex<double> tmp_336;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_336 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_334 += tmp_336;
   std::complex<double> tmp_335;
   std::complex<double> tmp_337;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_337 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_335 += tmp_337;
   result += (-0.1*Sqr(g1)) * tmp_334 * tmp_335;
   std::complex<double> tmp_338;
   std::complex<double> tmp_340;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_340 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_338 += tmp_340;
   std::complex<double> tmp_339;
   std::complex<double> tmp_341;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_341 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_339 += tmp_341;
   result += (-0.025*Sqr(g1p)) * tmp_338 * tmp_339;
   if (gO1 < 3) {
      std::complex<double> tmp_342;
      std::complex<double> tmp_343;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_343 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_342 += tmp_343;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_342;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_344;
      std::complex<double> tmp_345;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_345 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_344 += tmp_345;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_344;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_346;
      std::complex<double> tmp_347;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_347 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_346 += tmp_347;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_346;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_348;
      std::complex<double> tmp_349;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_349 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_348 += tmp_349;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_348;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_350;
      std::complex<double> tmp_351;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_351 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_350 += tmp_351;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_350;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_352;
      std::complex<double> tmp_353;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_353 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_352 += tmp_353;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_352;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_354;
      std::complex<double> tmp_355;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_355 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_354 += tmp_355;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_354;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_356;
      std::complex<double> tmp_357;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_357 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_356 += tmp_357;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_356;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_358;
      std::complex<double> tmp_359;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_359 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_358 += tmp_359;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_358;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_360;
      std::complex<double> tmp_361;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_361 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_360 += tmp_361;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_360;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_362;
      std::complex<double> tmp_363;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_363 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_362 += tmp_363;
      result += (-(Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) * tmp_362
         ;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_364;
      std::complex<double> tmp_365;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_365 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_364 += tmp_365;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1))) * tmp_364;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_366;
   std::complex<double> tmp_368;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_368 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_366 += tmp_368;
   std::complex<double> tmp_367;
   std::complex<double> tmp_369;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_369 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_367 += tmp_369;
   result += (-0.05*Sqr(g1)) * tmp_366 * tmp_367;
   std::complex<double> tmp_370;
   std::complex<double> tmp_372;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_372 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_370 += tmp_372;
   std::complex<double> tmp_371;
   std::complex<double> tmp_373;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_373 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_371 += tmp_373;
   result += (-0.075*Sqr(g1p)) * tmp_370 * tmp_371;
   std::complex<double> tmp_374;
   std::complex<double> tmp_376;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_376 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_374 += tmp_376;
   std::complex<double> tmp_375;
   std::complex<double> tmp_377;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_377 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_375 += tmp_377;
   result += (0.2*Sqr(g1)) * tmp_374 * tmp_375;
   std::complex<double> tmp_378;
   std::complex<double> tmp_380;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_380 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_378 += tmp_380;
   std::complex<double> tmp_379;
   std::complex<double> tmp_381;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_381 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_379 += tmp_381;
   result += (-0.075*Sqr(g1p)) * tmp_378 * tmp_379;
   std::complex<double> tmp_382;
   std::complex<double> tmp_384;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_384 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_382 += tmp_384;
   std::complex<double> tmp_383;
   std::complex<double> tmp_385;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_385 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_383 += tmp_385;
   result += (-0.05*Sqr(g1)) * tmp_382 * tmp_383;
   std::complex<double> tmp_386;
   std::complex<double> tmp_388;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_388 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_386 += tmp_388;
   std::complex<double> tmp_387;
   std::complex<double> tmp_389;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_389 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_387 += tmp_389;
   result += (-0.075*Sqr(g1p)) * tmp_386 * tmp_387;
   std::complex<double> tmp_390;
   std::complex<double> tmp_392;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_392 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_390 += tmp_392;
   std::complex<double> tmp_391;
   std::complex<double> tmp_393;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_393 += Conj(Yd(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_391 += tmp_393;
   result += (-1) * tmp_390 * tmp_391;
   std::complex<double> tmp_394;
   std::complex<double> tmp_396;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_396 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_394 += tmp_396;
   std::complex<double> tmp_395;
   std::complex<double> tmp_397;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_397 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_395 += tmp_397;
   result += (0.2*Sqr(g1)) * tmp_394 * tmp_395;
   std::complex<double> tmp_398;
   std::complex<double> tmp_400;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_400 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_398 += tmp_400;
   std::complex<double> tmp_399;
   std::complex<double> tmp_401;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_401 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_399 += tmp_401;
   result += (-0.075*Sqr(g1p)) * tmp_398 * tmp_399;
   if (gO1 < 3) {
      std::complex<double> tmp_402;
      std::complex<double> tmp_403;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_403 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_402 += tmp_403;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_402;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_404;
      std::complex<double> tmp_405;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_405 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_404 += tmp_405;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_404;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_406;
      std::complex<double> tmp_407;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_407 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_406 += tmp_407;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_406;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_408;
      std::complex<double> tmp_409;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_409 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_408 += tmp_409;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_408;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_410;
      std::complex<double> tmp_411;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_411 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_410 += tmp_411;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_410;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_412;
      std::complex<double> tmp_413;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_413 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_412 += tmp_413;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_412;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_414;
      std::complex<double> tmp_415;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_415 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_414 += tmp_415;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_414;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_416;
      std::complex<double> tmp_417;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_417 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_416 += tmp_417;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_416;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_418;
      std::complex<double> tmp_419;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_419 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_418 += tmp_419;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_418;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_420;
      std::complex<double> tmp_421;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_421 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_420 += tmp_421;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_420;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdSuHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_422;
   std::complex<double> tmp_423;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_423 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_422 += tmp_423;
   result += (0.7071067811865475*vs*Conj(Lambdax)*Conj(ZP(gI2,1))) * tmp_422;
   std::complex<double> tmp_424;
   std::complex<double> tmp_425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_425 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_424 += tmp_425;
   result += (Conj(ZP(gI2,0))) * tmp_424;
   std::complex<double> tmp_426;
   std::complex<double> tmp_427;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_427 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_426 += tmp_427;
   result += (0.7071067811865475*vu*Conj(ZP(gI2,0))) * tmp_426;
   std::complex<double> tmp_428;
   std::complex<double> tmp_429;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_429 += Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yd(j2,j2);
   }
   tmp_428 += tmp_429;
   result += (0.7071067811865475*vd*Conj(ZP(gI2,1))) * tmp_428;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZP(gI2,0))*Conj(ZU(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZP(gI2,1))*Conj(ZU(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yu(gO2,gO2))*Conj(ZP(gI2,0))*Conj
         (ZU(gI1,3 + gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += Conj(ZP(gI2,1))*Conj(ZU(gI1,3 + gO2))*Conj(TYu(gO2,gO2));
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZP(gI2,0))*
         Conj(ZU(gI1,gO2));
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZP(gI2,1))*
         Conj(ZU(gI1,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdSdAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_430;
   std::complex<double> tmp_431;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_431 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_430 += tmp_431;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) * tmp_430
      ;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZD(gI1,3 +
         gO2))*Conj(TYd(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_432;
   std::complex<double> tmp_433;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_433 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_432 += tmp_433;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_432;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_434;
   std::complex<double> tmp_435;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_435 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_434 += tmp_435;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_434;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdSdhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_436;
   std::complex<double> tmp_437;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_437 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_436 += tmp_437;
   result += (0.1*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_436;
   std::complex<double> tmp_438;
   std::complex<double> tmp_439;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_439 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_438 += tmp_439;
   result += (0.15*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_438;
   std::complex<double> tmp_440;
   std::complex<double> tmp_441;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_441 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_440 += tmp_441;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_440;
   std::complex<double> tmp_442;
   std::complex<double> tmp_443;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_443 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_442 += tmp_443;
   result += (0.1*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_442;
   std::complex<double> tmp_444;
   std::complex<double> tmp_445;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_445 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_444 += tmp_445;
   result += (-0.05*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_444;
   std::complex<double> tmp_446;
   std::complex<double> tmp_447;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_447 += Conj(ZD(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_446 += tmp_447;
   result += (0.05*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_446;
   std::complex<double> tmp_448;
   std::complex<double> tmp_449;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_449 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_448 += tmp_449;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_448;
   std::complex<double> tmp_450;
   std::complex<double> tmp_451;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_451 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yd(j1,j1);
   }
   tmp_450 += tmp_451;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_450;
   std::complex<double> tmp_452;
   std::complex<double> tmp_453;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_453 += Conj(ZD(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYd(j1,j1);
   }
   tmp_452 += tmp_453;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_452;
   std::complex<double> tmp_454;
   std::complex<double> tmp_455;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_455 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI1,3 + j2))*KroneckerDelta(gO2,3
         + j2);
   }
   tmp_454 += tmp_455;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_454;
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,1
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.025*QS*vs*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Yd(gO2,gO2))*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.025*QS*vsb*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZD(gI1,3 + gO2))*Conj(ZH(gI2,0))*
         Conj(TYd(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI1,gO2))*Conj(ZH(gI2,0)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSdconjUSdconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_456;
   std::complex<double> tmp_458;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_458 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_456 += tmp_458;
   std::complex<double> tmp_457;
   std::complex<double> tmp_459;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_459 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_457 += tmp_459;
   result += (0.05*Sqr(g1)) * tmp_456 * tmp_457;
   std::complex<double> tmp_460;
   std::complex<double> tmp_462;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_462 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_460 += tmp_462;
   std::complex<double> tmp_461;
   std::complex<double> tmp_463;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_463 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_461 += tmp_463;
   result += (0.075*Sqr(g1p)) * tmp_460 * tmp_461;
   std::complex<double> tmp_464;
   std::complex<double> tmp_466;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_466 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_464 += tmp_466;
   std::complex<double> tmp_465;
   std::complex<double> tmp_467;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_467 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_465 += tmp_467;
   result += (-0.05*Sqr(g1)) * tmp_464 * tmp_465;
   std::complex<double> tmp_468;
   std::complex<double> tmp_470;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_470 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_468 += tmp_470;
   std::complex<double> tmp_469;
   std::complex<double> tmp_471;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_471 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_469 += tmp_471;
   result += (0.05*Sqr(g1p)) * tmp_468 * tmp_469;
   std::complex<double> tmp_472;
   std::complex<double> tmp_474;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_474 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_472 += tmp_474;
   std::complex<double> tmp_473;
   std::complex<double> tmp_475;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_475 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_473 += tmp_475;
   result += (0.05*Sqr(g1)) * tmp_472 * tmp_473;
   std::complex<double> tmp_476;
   std::complex<double> tmp_478;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_478 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_476 += tmp_478;
   std::complex<double> tmp_477;
   std::complex<double> tmp_479;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_479 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_477 += tmp_479;
   result += (0.075*Sqr(g1p)) * tmp_476 * tmp_477;
   std::complex<double> tmp_480;
   std::complex<double> tmp_482;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_482 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_480 += tmp_482;
   std::complex<double> tmp_481;
   std::complex<double> tmp_483;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_483 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_481 += tmp_483;
   result += (-0.05*Sqr(g1)) * tmp_480 * tmp_481;
   std::complex<double> tmp_484;
   std::complex<double> tmp_486;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_486 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_484 += tmp_486;
   std::complex<double> tmp_485;
   std::complex<double> tmp_487;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_487 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_485 += tmp_487;
   result += (0.05*Sqr(g1p)) * tmp_484 * tmp_485;
   std::complex<double> tmp_488;
   std::complex<double> tmp_490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_490 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_488 += tmp_490;
   std::complex<double> tmp_489;
   std::complex<double> tmp_491;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_491 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_489 += tmp_491;
   result += (-0.125*Sqr(g1p)) * tmp_488 * tmp_489;
   std::complex<double> tmp_492;
   std::complex<double> tmp_494;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_494 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_492 += tmp_494;
   std::complex<double> tmp_493;
   std::complex<double> tmp_495;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_495 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_493 += tmp_495;
   result += (-0.125*Sqr(g1p)) * tmp_492 * tmp_493;
   if (gO1 < 3) {
      std::complex<double> tmp_496;
      std::complex<double> tmp_497;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_497 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_496 += tmp_497;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_496;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_498;
      std::complex<double> tmp_499;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_499 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_498 += tmp_499;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_498;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_500;
      std::complex<double> tmp_501;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_501 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_500 += tmp_501;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_500;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_502;
      std::complex<double> tmp_503;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_503 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_502 += tmp_503;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_502;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_504;
      std::complex<double> tmp_505;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_505 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_504 += tmp_505;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_504;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_506;
      std::complex<double> tmp_507;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_507 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_506 += tmp_507;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_506;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_508;
      std::complex<double> tmp_509;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_509 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_508 += tmp_509;
      result += (-0.0625*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_508;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_510;
      std::complex<double> tmp_511;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_511 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_510 += tmp_511;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_510;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_512;
      std::complex<double> tmp_513;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_513 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_512 += tmp_513;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_512;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_514;
      std::complex<double> tmp_515;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_515 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_514 += tmp_515;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_514;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_516;
      std::complex<double> tmp_517;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_517 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_516 += tmp_517;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_516;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_518;
      std::complex<double> tmp_519;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_519 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_518 += tmp_519;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_518;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_520;
      std::complex<double> tmp_521;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_521 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_520 += tmp_521;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_520;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_522;
      std::complex<double> tmp_523;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_523 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_522 += tmp_523;
      result += (-0.0625*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_522;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_524;
      std::complex<double> tmp_525;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_526;
         std::complex<double> tmp_527;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_527 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
         }
         tmp_526 += tmp_527;
         tmp_525 += (UHI0(gI1,2 + j2)) * tmp_526;
      }
      tmp_524 += tmp_525;
      result += (-(Conj(Yd(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) * tmp_524
         ;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_528;
      std::complex<double> tmp_529;
      for (unsigned j3 = 0; j3 < 2; ++j3) {
         std::complex<double> tmp_530;
         std::complex<double> tmp_531;
         for (unsigned j2 = 0; j2 < 3; ++j2) {
            tmp_531 += Conj(fd(j2,j3))*UHI0(gI1,4 + j2);
         }
         tmp_530 += tmp_531;
         tmp_529 += (Conj(UHI0(gI2,2 + j3))) * tmp_530;
      }
      tmp_528 += tmp_529;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Yd(gO1,gO1))) * tmp_528;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdGluFdPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_532;
   std::complex<double> tmp_533;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_533 += KroneckerDelta(gO2,3 + j1)*ZDR(gI2,j1);
   }
   tmp_532 += tmp_533;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_532;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdGluFdPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDL(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdVGSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdVPSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_534;
   std::complex<double> tmp_535;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_535 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_534 += tmp_535;
   result += (-0.2581988897471611*g1*Cos(ThetaW())) * tmp_534;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdVZSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_536;
   std::complex<double> tmp_537;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_537 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_536 += tmp_537;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_536;
   std::complex<double> tmp_538;
   std::complex<double> tmp_539;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_539 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_538 += tmp_539;
   result += (-0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_538;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZD(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdVZpSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_540;
   std::complex<double> tmp_541;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_541 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_540 += tmp_541;
   result += (-0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_540;
   std::complex<double> tmp_542;
   std::complex<double> tmp_543;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_543 += Conj(ZD(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_542 += tmp_543;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_542;
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZD(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZD(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZD(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSdVWmSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(3.1622776601683795*g1p*g2*Cos(ThetaW()
      )*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) +
      3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gO1,gO2)*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSvconjUSvconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,0);
   result += 0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,0);
   result += 0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,0);
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,0));
   }
   result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1);
   result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,1);
   result += -0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*
      (Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*KroneckerDelta(gO1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) - 5*Sqr(g2))*
      (Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvbarChaFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Ye(gO2,gO2))*UM(gI1,1)*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvbarChaFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZEL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvconjHpmSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZE(gI2,3 + gO2))*Conj(TYe(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI2,gO2))*
         ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZE(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1);
   result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p);
   result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2);
   if (gI1 < 3 && gI2 < 3) {
      result += -0.15*Conj(ZV(gI2,gO2))*Sqr(g1)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.1*Conj(ZV(gI2,gO2))*Sqr(g1p)*ZV(gI1,gO1);
   }
   if (gI1 < 3 && gI2 < 3) {
      result += -0.25*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvSvhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.15*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g1);
   }
   if (gI1 < 3) {
      result += 0.15*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += -0.25*vd*Conj(ZH(gI2,0))*Conj(ZV(gI1,gO2))*Sqr(g2);
   }
   if (gI1 < 3) {
      result += 0.15*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g1);
   }
   if (gI1 < 3) {
      result += 0.1*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += 0.25*vu*Conj(ZH(gI2,1))*Conj(ZV(gI1,gO2))*Sqr(g2);
   }
   if (gI1 < 3) {
      result += -0.05*QS*vs*Conj(ZH(gI2,2))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }
   if (gI1 < 3) {
      result += 0.05*QS*vsb*Conj(ZH(gI2,3))*Conj(ZV(gI1,gO2))*Sqr(g1p);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSvFvChiPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvFvChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*KroneckerDelta(gI1,gO1
         );
   }
   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*KroneckerDelta(gI1,
         gO1);
   }
   if (gI1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZN(gI2,7))*KroneckerDelta(gI1,
         gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_544;
   std::complex<double> tmp_545;
   std::complex<double> tmp_546;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_546 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_545 += tmp_546;
   tmp_544 += (std::complex<double>(0,-0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_545;
   std::complex<double> tmp_547;
   std::complex<double> tmp_548;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_548 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_547 += tmp_548;
   tmp_544 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_547;
   std::complex<double> tmp_549;
   std::complex<double> tmp_550;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_550 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_549 += tmp_550;
   tmp_544 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_549;
   std::complex<double> tmp_551;
   std::complex<double> tmp_552;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_552 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_551 += tmp_552;
   tmp_544 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_551;
   std::complex<double> tmp_553;
   std::complex<double> tmp_554;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_554 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_553 += tmp_554;
   tmp_544 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_553;
   std::complex<double> tmp_555;
   std::complex<double> tmp_556;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_556 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_555 += tmp_556;
   tmp_544 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_555;
   result += (std::complex<double>(0,-1)) * tmp_544;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*((-3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))
      *ZA(gI1,0)*ZA(gI2,0) + (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2
      ,1) + QS*Sqr(g1p)*(-(ZA(gI1,2)*ZA(gI2,2)) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gO1,gO2)*(QS*(-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2))
      ) + Conj(ZH(gI1,3))*Conj(ZH(gI2,3)))*Sqr(g1p) + Conj(ZH(gI1,0))*Conj(ZH(gI2,
      0))*(-3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*
      (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_557;
   std::complex<double> tmp_558;
   std::complex<double> tmp_559;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_559 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_558 += tmp_559;
   tmp_557 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_558;
   std::complex<double> tmp_560;
   std::complex<double> tmp_561;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_561 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_560 += tmp_561;
   tmp_557 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_560;
   std::complex<double> tmp_562;
   std::complex<double> tmp_563;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_563 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_562 += tmp_563;
   tmp_557 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_562;
   std::complex<double> tmp_564;
   std::complex<double> tmp_565;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_565 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_564 += tmp_565;
   tmp_557 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_564;
   std::complex<double> tmp_566;
   std::complex<double> tmp_567;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_567 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_566 += tmp_567;
   tmp_557 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_566;
   result += (std::complex<double>(0,-1)) * tmp_557;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_568;
   std::complex<double> tmp_569;
   std::complex<double> tmp_570;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_570 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_569 += tmp_570;
   tmp_568 += (std::complex<double>(0,-0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_569;
   std::complex<double> tmp_571;
   std::complex<double> tmp_572;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_572 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_571 += tmp_572;
   tmp_568 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_571;
   std::complex<double> tmp_573;
   std::complex<double> tmp_574;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_574 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_573 += tmp_574;
   tmp_568 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_573;
   std::complex<double> tmp_575;
   std::complex<double> tmp_576;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_576 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_575 += tmp_576;
   tmp_568 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_575;
   result += (std::complex<double>(0,-1)) * tmp_568;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_577;
   std::complex<double> tmp_578;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_578 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_577 += tmp_578;
   result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_577;
   std::complex<double> tmp_579;
   std::complex<double> tmp_580;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_580 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_579 += tmp_580;
   result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_579;
   std::complex<double> tmp_581;
   std::complex<double> tmp_582;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_582 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_581 += tmp_582;
   result += (0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_581;
   std::complex<double> tmp_583;
   std::complex<double> tmp_584;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_584 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_583 += tmp_584;
   result += (0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_583;
   std::complex<double> tmp_585;
   std::complex<double> tmp_586;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_586 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_585 += tmp_586;
   result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_585;
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_587;
   std::complex<double> tmp_588;
   std::complex<double> tmp_589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_589 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_588 += tmp_589;
   tmp_587 += (std::complex<double>(0,0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_588;
   std::complex<double> tmp_590;
   std::complex<double> tmp_591;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_591 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_590 += tmp_591;
   tmp_587 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_590;
   std::complex<double> tmp_592;
   std::complex<double> tmp_593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_593 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_592 += tmp_593;
   tmp_587 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_592;
   std::complex<double> tmp_594;
   std::complex<double> tmp_595;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_595 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_594 += tmp_595;
   tmp_587 += (std::complex<double>(0,-0.2)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_594;
   std::complex<double> tmp_596;
   std::complex<double> tmp_597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_597 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_596 += tmp_597;
   tmp_587 += (std::complex<double>(0,-0.05)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_596;
   result += (std::complex<double>(0,-1)) * tmp_587;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSvconjUSvconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_598;
   std::complex<double> tmp_599;
   std::complex<double> tmp_600;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_600 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_599 += tmp_600;
   tmp_598 += (std::complex<double>(0,-0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_599;
   std::complex<double> tmp_601;
   std::complex<double> tmp_602;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_602 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_601 += tmp_602;
   tmp_598 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_601;
   std::complex<double> tmp_603;
   std::complex<double> tmp_604;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_604 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_603 += tmp_604;
   tmp_598 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_603;
   std::complex<double> tmp_605;
   std::complex<double> tmp_606;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_606 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_605 += tmp_606;
   tmp_598 += (std::complex<double>(0,0.15)*KroneckerDelta(gO1,gO2)*Sqr(g1)) *
      tmp_605;
   std::complex<double> tmp_607;
   std::complex<double> tmp_608;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_608 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_607 += tmp_608;
   tmp_598 += (std::complex<double>(0,0.1)*KroneckerDelta(gO1,gO2)*Sqr(g1p)) *
      tmp_607;
   std::complex<double> tmp_609;
   std::complex<double> tmp_610;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_610 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_609 += tmp_610;
   tmp_598 += (std::complex<double>(0,0.25)*KroneckerDelta(gO1,gO2)*Sqr(g2)) *
      tmp_609;
   std::complex<double> tmp_611;
   std::complex<double> tmp_612;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_612 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_611 += tmp_612;
   tmp_598 += (std::complex<double>(0,-0.25)*KroneckerDelta(gO1,gO2)*Sqr(g1p))
      * tmp_611;
   result += (std::complex<double>(0,-1)) * tmp_598;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvVZSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZV(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvVZpSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZV(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZV(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZV(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSvconjVWmSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_613;
   std::complex<double> tmp_614;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_614 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_613 += tmp_614;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))
      ) * tmp_613;
   std::complex<double> tmp_615;
   std::complex<double> tmp_616;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_616 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_615 += tmp_616;
   result += (0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_615;
   std::complex<double> tmp_617;
   std::complex<double> tmp_618;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_618 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_617 += tmp_618;
   result += (0.05*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_617;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += 0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_619;
   std::complex<double> tmp_620;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_620 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_619 += tmp_620;
   result += (0.05*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_619;
   std::complex<double> tmp_621;
   std::complex<double> tmp_622;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_622 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_621 += tmp_622;
   result += (-0.32659863237109044*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_621;
   std::complex<double> tmp_623;
   std::complex<double> tmp_624;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_624 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_623 += tmp_624;
   result += (0.5333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))
      ) * tmp_623;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.31622776601683794*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.08164965809277262*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.2581988897471611*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.03333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSuconjUSuconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_625;
   std::complex<double> tmp_626;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_626 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_625 += tmp_626;
   result += (-0.2*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_625;
   std::complex<double> tmp_627;
   std::complex<double> tmp_628;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_628 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_627 += tmp_628;
   result += (0.075*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_627;
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yd(gO1,gO1))*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2
         )*ZP(gI1,0));
   }
   std::complex<double> tmp_629;
   std::complex<double> tmp_630;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_630 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_629 += tmp_630;
   result += (0.2*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_629;
   std::complex<double> tmp_631;
   std::complex<double> tmp_632;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_632 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_631 += tmp_632;
   result += (0.05*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_631;
   std::complex<double> tmp_633;
   std::complex<double> tmp_634;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_634 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_633 += tmp_634;
   result += (-(Conj(ZP(gI2,1))*ZP(gI1,1))) * tmp_633;
   if (gO1 < 3) {
      result += -0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_635;
   std::complex<double> tmp_636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_636 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_635 += tmp_636;
   result += (-0.2*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_635;
   std::complex<double> tmp_637;
   std::complex<double> tmp_638;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_638 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_637 += tmp_638;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_637;
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,0);
   }
   std::complex<double> tmp_639;
   std::complex<double> tmp_640;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_640 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_639 += tmp_640;
   result += (0.2*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_639;
   std::complex<double> tmp_641;
   std::complex<double> tmp_642;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_642 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_641 += tmp_642;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_641;
   if (gO1 < 3) {
      result += -0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_643;
   std::complex<double> tmp_644;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_644 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_643 += tmp_644;
   result += (-0.2*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_643;
   std::complex<double> tmp_645;
   std::complex<double> tmp_646;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_646 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_645 += tmp_646;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_645;
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,0);
   }
   if (gO1 < 3 && gO2 < 3) {
      std::complex<double> tmp_647;
      std::complex<double> tmp_648;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_648 += Conj(gD(gO2,j1))*gD(gO1,j1);
      }
      tmp_647 += tmp_648;
      result += (-(Conj(UHpp(gI2,0))*UHpp(gI1,0))) * tmp_647;
   }
   std::complex<double> tmp_649;
   std::complex<double> tmp_650;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_650 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_649 += tmp_650;
   result += (0.2*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_649;
   std::complex<double> tmp_651;
   std::complex<double> tmp_652;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_652 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_651 += tmp_652;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_651;
   if (gO1 < 3) {
      result += -0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSubarChaFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(Yd(gO2,gO2))*UM(gI1,1)*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSubarChaFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_653;
   std::complex<double> tmp_654;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_654 += Conj(ZDL(gI2,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_653 += tmp_654;
   result += (Conj(UP(gI1,1))) * tmp_653;
   if (gO1 < 3) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuconjHpmSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_655;
   std::complex<double> tmp_656;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_656 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_655 += tmp_656;
   result += (0.7071067811865475*vs*Conj(Lambdax)*ZP(gI1,0)) * tmp_655;
   std::complex<double> tmp_657;
   std::complex<double> tmp_658;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_658 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_657 += tmp_658;
   result += (0.7071067811865475*vu*ZP(gI1,0)) * tmp_657;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += Conj(ZD(gI2,3 + gO2))*Conj(TYd(gO2,gO2))*ZP(gI1,0);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Yd(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,0);
   }
   std::complex<double> tmp_659;
   std::complex<double> tmp_660;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_660 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_659 += tmp_660;
   result += (ZP(gI1,1)) * tmp_659;
   std::complex<double> tmp_661;
   std::complex<double> tmp_662;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_662 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*KroneckerDelta(gO2,3 +
         j2)*Yu(j2,j2);
   }
   tmp_661 += tmp_662;
   result += (0.7071067811865475*vd*ZP(gI1,1)) * tmp_661;
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZD(gI2,gO2))*Sqr(g2)*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vs*Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2)
         )*Lambdax*ZP(gI1,1);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vu*AbsSqr(Yu(gO2,gO2))*Conj(ZD(gI2,gO2))*
         ZP(gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuconjSHppSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_663;
   std::complex<double> tmp_664;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_665;
      std::complex<double> tmp_666;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_666 += Conj(gD(j1,j2))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
      }
      tmp_665 += tmp_666;
      tmp_664 += (Conj(ZDX(gI2,3 + j2))) * tmp_665;
   }
   tmp_663 += tmp_664;
   result += (-0.7071067811865475*vu*UHpp(gI1,0)) * tmp_663;
   if (gO2 < 3) {
      std::complex<double> tmp_667;
      std::complex<double> tmp_668;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_668 += Conj(gD(gO2,j1))*Conj(ZDX(gI2,j1))*Kappa(j1,j1);
      }
      tmp_667 += tmp_668;
      result += (-0.7071067811865475*vs*UHpp(gI1,0)) * tmp_667;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_669;
      std::complex<double> tmp_670;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_670 += Conj(ZDX(gI2,3 + j2))*Conj(TgD(gO2,j2));
      }
      tmp_669 += tmp_670;
      result += (-UHpp(gI1,0)) * tmp_669;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_671;
      std::complex<double> tmp_672;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_672 += Conj(gD(gO2,j2))*Conj(ZDX(gI2,3 + j2));
      }
      tmp_671 += tmp_672;
      result += (-(MuPr*UHpp(gI1,1))) * tmp_671;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_673;
      std::complex<double> tmp_674;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_674 += Conj(gD(gO2,j2))*Conj(ZDX(gI2,3 + j2));
      }
      tmp_673 += tmp_674;
      result += (0.7071067811865475*vphi*SigmaL*UHpp(gI1,1)) * tmp_673;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_675;
   std::complex<double> tmp_676;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_676 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_675 += tmp_676;
   result += (-0.2*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_675;
   std::complex<double> tmp_677;
   std::complex<double> tmp_678;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_678 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_677 += tmp_678;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_677;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(
         g1p);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2
         );
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuFuChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_679;
   std::complex<double> tmp_680;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_680 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_679 += tmp_680;
   result += (0.7302967433402214*g1*ZN(gI2,0)) * tmp_679;
   std::complex<double> tmp_681;
   std::complex<double> tmp_682;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_682 += KroneckerDelta(gO2,3 + j1)*ZUR(gI1,j1);
   }
   tmp_681 += tmp_682;
   result += (-0.22360679774997896*g1p*ZN(gI2,7)) * tmp_681;
   if (gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*ZN(gI2,3)*ZUR(gI1,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuFuChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_683;
   std::complex<double> tmp_684;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_684 += Conj(ZUL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Yu(j1,j1);
   }
   tmp_683 += tmp_684;
   result += (-Conj(ZN(gI2,3))) * tmp_683;
   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZN(gI2,0))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*Conj(ZUL(gI1,gO1));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZN(gI2,7))*Conj(ZUL(gI1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_685;
   std::complex<double> tmp_687;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_687 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_685 += tmp_687;
   std::complex<double> tmp_686;
   std::complex<double> tmp_688;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_688 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_686 += tmp_688;
   result += (-0.1*Sqr(g1)) * tmp_685 * tmp_686;
   std::complex<double> tmp_689;
   std::complex<double> tmp_691;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_691 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_689 += tmp_691;
   std::complex<double> tmp_690;
   std::complex<double> tmp_692;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_692 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_690 += tmp_692;
   result += (0.0375*Sqr(g1p)) * tmp_689 * tmp_690;
   std::complex<double> tmp_693;
   std::complex<double> tmp_695;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_695 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_693 += tmp_695;
   std::complex<double> tmp_694;
   std::complex<double> tmp_696;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_696 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_694 += tmp_696;
   result += (0.1*Sqr(g1)) * tmp_693 * tmp_694;
   std::complex<double> tmp_697;
   std::complex<double> tmp_699;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_699 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_697 += tmp_699;
   std::complex<double> tmp_698;
   std::complex<double> tmp_700;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_700 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_698 += tmp_700;
   result += (0.025*Sqr(g1p)) * tmp_697 * tmp_698;
   std::complex<double> tmp_701;
   std::complex<double> tmp_703;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_703 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_701 += tmp_703;
   std::complex<double> tmp_702;
   std::complex<double> tmp_704;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_704 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_702 += tmp_704;
   result += (-0.1*Sqr(g1)) * tmp_701 * tmp_702;
   std::complex<double> tmp_705;
   std::complex<double> tmp_707;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_707 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_705 += tmp_707;
   std::complex<double> tmp_706;
   std::complex<double> tmp_708;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_708 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_706 += tmp_708;
   result += (0.0375*Sqr(g1p)) * tmp_705 * tmp_706;
   std::complex<double> tmp_709;
   std::complex<double> tmp_711;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_711 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_709 += tmp_711;
   std::complex<double> tmp_710;
   std::complex<double> tmp_712;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_712 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_710 += tmp_712;
   result += (0.1*Sqr(g1)) * tmp_709 * tmp_710;
   std::complex<double> tmp_713;
   std::complex<double> tmp_715;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_715 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_713 += tmp_715;
   std::complex<double> tmp_714;
   std::complex<double> tmp_716;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_716 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_714 += tmp_716;
   result += (0.025*Sqr(g1p)) * tmp_713 * tmp_714;
   if (gO1 < 3) {
      std::complex<double> tmp_717;
      std::complex<double> tmp_718;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_718 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_717 += tmp_718;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_717;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_719;
      std::complex<double> tmp_720;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_720 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_719 += tmp_720;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_719;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_721;
      std::complex<double> tmp_722;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_722 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_721 += tmp_722;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_721;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_723;
      std::complex<double> tmp_724;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_724 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_723 += tmp_724;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_723;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_725;
      std::complex<double> tmp_726;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_726 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_725 += tmp_726;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_725;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_727;
      std::complex<double> tmp_728;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_728 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_727 += tmp_728;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_727;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_729;
      std::complex<double> tmp_730;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_730 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_729 += tmp_730;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_729;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_731;
      std::complex<double> tmp_732;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_732 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_731 += tmp_732;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_731;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_733;
      std::complex<double> tmp_734;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_734 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_733 += tmp_734;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_733;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_735;
      std::complex<double> tmp_736;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_736 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_735 += tmp_736;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_735;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_737;
      std::complex<double> tmp_738;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_738 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_737 += tmp_738;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_737;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_739;
      std::complex<double> tmp_740;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_740 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_739 += tmp_740;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_739;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_741;
   std::complex<double> tmp_742;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_742 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_741 += tmp_742;
   result += (-0.2*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_741;
   std::complex<double> tmp_743;
   std::complex<double> tmp_744;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_744 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_743 += tmp_744;
   result += (0.075*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_743;
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,0);
   }
   std::complex<double> tmp_745;
   std::complex<double> tmp_746;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_746 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_745 += tmp_746;
   result += (0.2*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_745;
   std::complex<double> tmp_747;
   std::complex<double> tmp_748;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_748 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_747 += tmp_748;
   result += (0.05*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_747;
   std::complex<double> tmp_749;
   std::complex<double> tmp_750;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_750 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_749 += tmp_750;
   result += (-(ZA(gI1,1)*ZA(gI2,1))) * tmp_749;
   if (gO1 < 3) {
      result += -0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,1));
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,0)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)*
         ZA(gI1,0)*ZA(gI2,2);
   }
   std::complex<double> tmp_751;
   std::complex<double> tmp_752;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_752 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_751 += tmp_752;
   result += (-0.025*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_751;
   if (gO1 < 3) {
      result += -0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,
         2);
   }
   std::complex<double> tmp_753;
   std::complex<double> tmp_754;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_754 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_753 += tmp_754;
   result += (0.025*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_753;
   if (gO1 < 3) {
      result += 0.025*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result += -0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,gO2)*
      Sqr(g1p);
   result += 0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,gO2)*
      Sqr(g1p);
   std::complex<double> tmp_755;
   std::complex<double> tmp_756;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_756 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_755 += tmp_756;
   result += (-0.2*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_755;
   std::complex<double> tmp_757;
   std::complex<double> tmp_758;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_758 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_757 += tmp_758;
   result += (0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_757;
   std::complex<double> tmp_759;
   std::complex<double> tmp_760;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_760 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_759 += tmp_760;
   result += (0.2*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_759;
   std::complex<double> tmp_761;
   std::complex<double> tmp_762;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_762 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_761 += tmp_762;
   result += (0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_761;
   std::complex<double> tmp_763;
   std::complex<double> tmp_764;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_764 += AbsSqr(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*KroneckerDelta
         (gO2,3 + j2);
   }
   tmp_763 += tmp_764;
   result += (-(Conj(ZH(gI1,1))*Conj(ZH(gI2,1)))) * tmp_763;
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Yu(gO2,gO2))*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Yu(gO1,gO1))*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
         KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_765;
   std::complex<double> tmp_767;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_767 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_765 += tmp_767;
   std::complex<double> tmp_766;
   std::complex<double> tmp_768;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_768 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_766 += tmp_768;
   result += (0.1*Sqr(g1)) * tmp_765 * tmp_766;
   std::complex<double> tmp_769;
   std::complex<double> tmp_771;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_771 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_769 += tmp_771;
   std::complex<double> tmp_770;
   std::complex<double> tmp_772;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_772 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_770 += tmp_772;
   result += (-0.0375*Sqr(g1p)) * tmp_769 * tmp_770;
   std::complex<double> tmp_773;
   std::complex<double> tmp_775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_775 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_773 += tmp_775;
   std::complex<double> tmp_774;
   std::complex<double> tmp_776;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_776 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_774 += tmp_776;
   result += (0.2*Sqr(g1)) * tmp_773 * tmp_774;
   std::complex<double> tmp_777;
   std::complex<double> tmp_779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_779 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_777 += tmp_779;
   std::complex<double> tmp_778;
   std::complex<double> tmp_780;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_780 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_778 += tmp_780;
   result += (-0.075*Sqr(g1p)) * tmp_777 * tmp_778;
   std::complex<double> tmp_781;
   std::complex<double> tmp_783;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_783 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_781 += tmp_783;
   std::complex<double> tmp_782;
   std::complex<double> tmp_784;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_784 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_782 += tmp_784;
   result += (0.1*Sqr(g1)) * tmp_781 * tmp_782;
   std::complex<double> tmp_785;
   std::complex<double> tmp_787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_787 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_785 += tmp_787;
   std::complex<double> tmp_786;
   std::complex<double> tmp_788;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_788 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_786 += tmp_788;
   result += (-0.0375*Sqr(g1p)) * tmp_785 * tmp_786;
   std::complex<double> tmp_789;
   std::complex<double> tmp_791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_791 += Conj(ZD(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_789 += tmp_791;
   std::complex<double> tmp_790;
   std::complex<double> tmp_792;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_792 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZD(gI1,j2);
   }
   tmp_790 += tmp_792;
   result += (-1) * tmp_789 * tmp_790;
   std::complex<double> tmp_793;
   std::complex<double> tmp_795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_795 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_793 += tmp_795;
   std::complex<double> tmp_794;
   std::complex<double> tmp_796;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_796 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_794 += tmp_796;
   result += (0.2*Sqr(g1)) * tmp_793 * tmp_794;
   std::complex<double> tmp_797;
   std::complex<double> tmp_799;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_799 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_797 += tmp_799;
   std::complex<double> tmp_798;
   std::complex<double> tmp_800;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_800 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_798 += tmp_800;
   result += (-0.075*Sqr(g1p)) * tmp_797 * tmp_798;
   if (gO1 < 3) {
      std::complex<double> tmp_801;
      std::complex<double> tmp_802;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_802 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_801 += tmp_802;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_801;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_803;
      std::complex<double> tmp_804;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_804 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_803 += tmp_804;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_803;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_805;
      std::complex<double> tmp_806;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_806 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_805 += tmp_806;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_805;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_807;
      std::complex<double> tmp_808;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_808 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_807 += tmp_808;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_807;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_809;
      std::complex<double> tmp_810;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_810 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_809 += tmp_810;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_809;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_811;
      std::complex<double> tmp_812;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_812 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_811 += tmp_812;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_811;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_813;
      std::complex<double> tmp_814;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_814 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_813 += tmp_814;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_813;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_815;
      std::complex<double> tmp_816;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_816 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_815 += tmp_816;
      result += (0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_815;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_817;
      std::complex<double> tmp_818;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_818 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_817 += tmp_818;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_817;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_819;
      std::complex<double> tmp_820;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_820 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_819 += tmp_820;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_819;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZD(gI2,gO2))*Sqr(g2)*ZD(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yd(gO2,gO2))*Conj(ZD(gI2,3 + gO2))*Yd(gO1,gO1)*ZD(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_821;
   std::complex<double> tmp_823;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_823 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_821 += tmp_823;
   std::complex<double> tmp_822;
   std::complex<double> tmp_824;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_824 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_822 += tmp_824;
   result += (-0.2*Sqr(g1)) * tmp_821 * tmp_822;
   std::complex<double> tmp_825;
   std::complex<double> tmp_827;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_827 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_825 += tmp_827;
   std::complex<double> tmp_826;
   std::complex<double> tmp_828;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_828 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_826 += tmp_828;
   result += (0.075*Sqr(g1p)) * tmp_825 * tmp_826;
   std::complex<double> tmp_829;
   std::complex<double> tmp_831;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_831 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_829 += tmp_831;
   std::complex<double> tmp_830;
   std::complex<double> tmp_832;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_832 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_830 += tmp_832;
   result += (0.2*Sqr(g1)) * tmp_829 * tmp_830;
   std::complex<double> tmp_833;
   std::complex<double> tmp_835;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_835 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_833 += tmp_835;
   std::complex<double> tmp_834;
   std::complex<double> tmp_836;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_836 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_834 += tmp_836;
   result += (0.1125*Sqr(g1p)) * tmp_833 * tmp_834;
   std::complex<double> tmp_837;
   std::complex<double> tmp_839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_839 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_837 += tmp_839;
   std::complex<double> tmp_838;
   std::complex<double> tmp_840;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_840 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_838 += tmp_840;
   result += (-0.2*Sqr(g1)) * tmp_837 * tmp_838;
   std::complex<double> tmp_841;
   std::complex<double> tmp_843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_843 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_841 += tmp_843;
   std::complex<double> tmp_842;
   std::complex<double> tmp_844;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_844 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_842 += tmp_844;
   result += (0.075*Sqr(g1p)) * tmp_841 * tmp_842;
   std::complex<double> tmp_845;
   std::complex<double> tmp_847;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_847 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_845 += tmp_847;
   std::complex<double> tmp_846;
   std::complex<double> tmp_848;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_848 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_846 += tmp_848;
   result += (0.2*Sqr(g1)) * tmp_845 * tmp_846;
   std::complex<double> tmp_849;
   std::complex<double> tmp_851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_851 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_849 += tmp_851;
   std::complex<double> tmp_850;
   std::complex<double> tmp_852;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_852 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_850 += tmp_852;
   result += (0.1125*Sqr(g1p)) * tmp_849 * tmp_850;
   if (gO1 < 3) {
      std::complex<double> tmp_853;
      std::complex<double> tmp_854;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_854 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_853 += tmp_854;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_853;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_855;
      std::complex<double> tmp_856;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_856 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_855 += tmp_856;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_855;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_857;
      std::complex<double> tmp_858;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_858 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_857 += tmp_858;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_857;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_859;
      std::complex<double> tmp_860;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_860 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_859 += tmp_860;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_859;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_861;
      std::complex<double> tmp_862;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_862 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_861 += tmp_862;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_861;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_863;
      std::complex<double> tmp_864;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_864 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_863 += tmp_864;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_863;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_865;
      std::complex<double> tmp_866;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_866 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_865 += tmp_866;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_865;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_867;
      std::complex<double> tmp_868;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_868 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_867 += tmp_868;
      result += (0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_867;
   }
   if (gO1 < 3 && gO2 < 3) {
      std::complex<double> tmp_869;
      std::complex<double> tmp_871;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_871 += gD(gO1,j2)*ZDX(gI1,3 + j2);
      }
      tmp_869 += tmp_871;
      std::complex<double> tmp_870;
      std::complex<double> tmp_872;
      for (unsigned j4 = 0; j4 < 3; ++j4) {
         tmp_872 += Conj(gD(gO2,j4))*Conj(ZDX(gI2,3 + j4));
      }
      tmp_870 += tmp_872;
      result += (-1) * tmp_869 * tmp_870;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_873;
   std::complex<double> tmp_875;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_875 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_873 += tmp_875;
   std::complex<double> tmp_874;
   std::complex<double> tmp_876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_876 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_874 += tmp_876;
   result += (-0.1*Sqr(g1)) * tmp_873 * tmp_874;
   std::complex<double> tmp_877;
   std::complex<double> tmp_879;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_879 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_877 += tmp_879;
   std::complex<double> tmp_878;
   std::complex<double> tmp_880;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_880 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_878 += tmp_880;
   result += (-0.025*Sqr(g1p)) * tmp_877 * tmp_878;
   std::complex<double> tmp_881;
   std::complex<double> tmp_883;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_883 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_881 += tmp_883;
   std::complex<double> tmp_882;
   std::complex<double> tmp_884;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_884 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_882 += tmp_884;
   result += (0.2*Sqr(g1)) * tmp_881 * tmp_882;
   std::complex<double> tmp_885;
   std::complex<double> tmp_887;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_887 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_885 += tmp_887;
   std::complex<double> tmp_886;
   std::complex<double> tmp_888;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_888 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_886 += tmp_888;
   result += (-0.0125*Sqr(g1p)) * tmp_885 * tmp_886;
   std::complex<double> tmp_889;
   std::complex<double> tmp_891;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_891 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_889 += tmp_891;
   std::complex<double> tmp_890;
   std::complex<double> tmp_892;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_892 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_890 += tmp_892;
   result += (-0.1*Sqr(g1)) * tmp_889 * tmp_890;
   std::complex<double> tmp_893;
   std::complex<double> tmp_895;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_895 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_893 += tmp_895;
   std::complex<double> tmp_894;
   std::complex<double> tmp_896;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_896 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_894 += tmp_896;
   result += (-0.025*Sqr(g1p)) * tmp_893 * tmp_894;
   std::complex<double> tmp_897;
   std::complex<double> tmp_899;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_899 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_897 += tmp_899;
   std::complex<double> tmp_898;
   std::complex<double> tmp_900;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_900 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_898 += tmp_900;
   result += (0.2*Sqr(g1)) * tmp_897 * tmp_898;
   std::complex<double> tmp_901;
   std::complex<double> tmp_903;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_903 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_901 += tmp_903;
   std::complex<double> tmp_902;
   std::complex<double> tmp_904;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_904 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_902 += tmp_904;
   result += (-0.0125*Sqr(g1p)) * tmp_901 * tmp_902;
   if (gO1 < 3) {
      std::complex<double> tmp_905;
      std::complex<double> tmp_906;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_906 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_905 += tmp_906;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_905;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_907;
      std::complex<double> tmp_908;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_908 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_907 += tmp_908;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_907;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_909;
      std::complex<double> tmp_910;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_910 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_909 += tmp_910;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_909;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_911;
      std::complex<double> tmp_912;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_912 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_911 += tmp_912;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_911;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_913;
      std::complex<double> tmp_914;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_914 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_913 += tmp_914;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_913;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_915;
      std::complex<double> tmp_916;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_916 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_915 += tmp_916;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_915;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_917;
      std::complex<double> tmp_918;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_918 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_917 += tmp_918;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_917;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_919;
      std::complex<double> tmp_920;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_920 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_919 += tmp_920;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_919;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_921;
      std::complex<double> tmp_922;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_922 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_921 += tmp_922;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_921;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_923;
      std::complex<double> tmp_924;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_924 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_923 += tmp_924;
      result += (-0.0125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_923;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_925;
   std::complex<double> tmp_927;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_927 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_925 += tmp_927;
   std::complex<double> tmp_926;
   std::complex<double> tmp_928;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_928 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_926 += tmp_928;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_925 * tmp_926;
   std::complex<double> tmp_929;
   std::complex<double> tmp_931;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_931 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_929 += tmp_931;
   std::complex<double> tmp_930;
   std::complex<double> tmp_932;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_932 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_930 += tmp_932;
   result += (-0.0125*Sqr(g1p)) * tmp_929 * tmp_930;
   std::complex<double> tmp_933;
   std::complex<double> tmp_935;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_935 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
   }
   tmp_933 += tmp_935;
   std::complex<double> tmp_934;
   std::complex<double> tmp_936;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_936 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_934 += tmp_936;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_933 * tmp_934;
   std::complex<double> tmp_937;
   std::complex<double> tmp_939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_939 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_937 += tmp_939;
   std::complex<double> tmp_938;
   std::complex<double> tmp_940;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_940 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_938 += tmp_940;
   result += (0.1*Sqr(g1)) * tmp_937 * tmp_938;
   std::complex<double> tmp_941;
   std::complex<double> tmp_943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_943 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_941 += tmp_943;
   std::complex<double> tmp_942;
   std::complex<double> tmp_944;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_944 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_942 += tmp_944;
   result += (-0.0375*Sqr(g1p)) * tmp_941 * tmp_942;
   std::complex<double> tmp_945;
   std::complex<double> tmp_947;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_947 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_945 += tmp_947;
   std::complex<double> tmp_946;
   std::complex<double> tmp_948;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_948 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_946 += tmp_948;
   result += (-0.4*Sqr(g1)) * tmp_945 * tmp_946;
   std::complex<double> tmp_949;
   std::complex<double> tmp_951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_951 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_949 += tmp_951;
   std::complex<double> tmp_950;
   std::complex<double> tmp_952;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_952 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_950 += tmp_952;
   result += (-0.0375*Sqr(g1p)) * tmp_949 * tmp_950;
   std::complex<double> tmp_953;
   std::complex<double> tmp_955;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_955 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_953 += tmp_955;
   std::complex<double> tmp_954;
   std::complex<double> tmp_956;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_956 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_954 += tmp_956;
   result += (0.1*Sqr(g1)) * tmp_953 * tmp_954;
   std::complex<double> tmp_957;
   std::complex<double> tmp_959;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_959 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_957 += tmp_959;
   std::complex<double> tmp_958;
   std::complex<double> tmp_960;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_960 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_958 += tmp_960;
   result += (-0.0375*Sqr(g1p)) * tmp_957 * tmp_958;
   std::complex<double> tmp_961;
   std::complex<double> tmp_963;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_963 += Conj(ZU(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_961 += tmp_963;
   std::complex<double> tmp_962;
   std::complex<double> tmp_964;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_964 += Conj(Yu(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZU(gI1,j2);
   }
   tmp_962 += tmp_964;
   result += (-1) * tmp_961 * tmp_962;
   std::complex<double> tmp_965;
   std::complex<double> tmp_967;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_967 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_965 += tmp_967;
   std::complex<double> tmp_966;
   std::complex<double> tmp_968;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_968 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_966 += tmp_968;
   result += (-0.4*Sqr(g1)) * tmp_965 * tmp_966;
   std::complex<double> tmp_969;
   std::complex<double> tmp_971;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_971 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_969 += tmp_971;
   std::complex<double> tmp_970;
   std::complex<double> tmp_972;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_972 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_970 += tmp_972;
   result += (-0.0375*Sqr(g1p)) * tmp_969 * tmp_970;
   std::complex<double> tmp_973;
   std::complex<double> tmp_975;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_975 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_973 += tmp_975;
   std::complex<double> tmp_974;
   std::complex<double> tmp_976;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_976 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_974 += tmp_976;
   result += (-0.13333333333333333*Sqr(g1)) * tmp_973 * tmp_974;
   std::complex<double> tmp_977;
   std::complex<double> tmp_979;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_979 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_977 += tmp_979;
   std::complex<double> tmp_978;
   std::complex<double> tmp_980;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_980 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_978 += tmp_980;
   result += (-0.0125*Sqr(g1p)) * tmp_977 * tmp_978;
   std::complex<double> tmp_981;
   std::complex<double> tmp_983;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_983 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_981 += tmp_983;
   std::complex<double> tmp_982;
   std::complex<double> tmp_984;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_984 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
   }
   tmp_982 += tmp_984;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_981 * tmp_982;
   if (gO1 < 3) {
      std::complex<double> tmp_985;
      std::complex<double> tmp_986;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_986 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_985 += tmp_986;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_985;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_987;
      std::complex<double> tmp_988;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_988 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_987 += tmp_988;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_987;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_989;
      std::complex<double> tmp_990;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_990 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_989 += tmp_990;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_989;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_991;
      std::complex<double> tmp_992;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_992 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_991 += tmp_992;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_991;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_993;
      std::complex<double> tmp_994;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_994 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_993 += tmp_994;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_993;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_995;
      std::complex<double> tmp_996;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_996 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_995 += tmp_996;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_995;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_997;
      std::complex<double> tmp_998;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_998 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_997 += tmp_998;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_997;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_999;
      std::complex<double> tmp_1000;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1000 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_999 += tmp_1000;
      result += (-0.375*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_999;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1001;
      std::complex<double> tmp_1002;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1002 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1001 += tmp_1002;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1001;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1003;
      std::complex<double> tmp_1004;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1004 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1003 += tmp_1004;
      result += (-0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1003;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1005;
      std::complex<double> tmp_1006;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1006 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_1005 += tmp_1006;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_1005;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1007;
      std::complex<double> tmp_1008;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1008 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_1007 += tmp_1008;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(g1p)) * tmp_1007;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1009;
      std::complex<double> tmp_1010;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1010 += KroneckerDelta(gO1,3 + j1)*ZU(gI1,3 + j1);
      }
      tmp_1009 += tmp_1010;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_1009;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1011;
      std::complex<double> tmp_1012;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1012 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
      }
      tmp_1011 += tmp_1012;
      result += (-3*Conj(Yu(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_1011;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1013;
      std::complex<double> tmp_1014;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1014 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1013 += tmp_1014;
      result += (0.03333333333333333*Conj(ZU(gI2,gO2))*Sqr(g1)) * tmp_1013;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1015;
      std::complex<double> tmp_1016;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1016 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1015 += tmp_1016;
      result += (-0.0125*Conj(ZU(gI2,gO2))*Sqr(g1p)) * tmp_1015;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1017;
      std::complex<double> tmp_1018;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1018 += KroneckerDelta(gO1,3 + j2)*ZU(gI1,3 + j2);
      }
      tmp_1017 += tmp_1018;
      result += (0.6666666666666666*Conj(ZU(gI2,gO2))*Sqr(g3)) * tmp_1017;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1019;
      std::complex<double> tmp_1020;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1020 += Conj(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,j2);
      }
      tmp_1019 += tmp_1020;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Yu(gO1,gO1)) * tmp_1019;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1021;
      std::complex<double> tmp_1022;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1022 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1021 += tmp_1022;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_1021;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1023;
      std::complex<double> tmp_1024;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1024 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1023 += tmp_1024;
      result += (-0.0125*Sqr(g1p)*ZU(gI1,gO1)) * tmp_1023;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1025;
      std::complex<double> tmp_1026;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1026 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1025 += tmp_1026;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_1025;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1027;
      std::complex<double> tmp_1028;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1028 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1027 += tmp_1028;
      result += (0.03333333333333333*Sqr(g1)*ZU(gI1,gO1)) * tmp_1027;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1029;
      std::complex<double> tmp_1030;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1030 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1029 += tmp_1030;
      result += (-0.0125*Sqr(g1p)*ZU(gI1,gO1)) * tmp_1029;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1031;
      std::complex<double> tmp_1032;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1032 += Conj(ZU(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1031 += tmp_1032;
      result += (0.6666666666666666*Sqr(g3)*ZU(gI1,gO1)) * tmp_1031;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.016666666666666666*Conj(ZU(gI2,gO2))*Sqr(g1)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.025*Conj(ZU(gI2,gO2))*Sqr(g1p)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZU(gI2,gO2))*Sqr(g2)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZU(gI2,gO2))*Sqr(g3)*ZU(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Yu(gO2,gO2))*Conj(ZU(gI2,3 + gO2))*Yu(gO1,gO1)*ZU(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuSuAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1033;
   std::complex<double> tmp_1034;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1034 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1033 += tmp_1034;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_1033;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_1035;
   std::complex<double> tmp_1036;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1036 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_1035 += tmp_1036;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_1035;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZU(gI1,3 +
         gO2))*Conj(TYu(gO2,gO2))*ZA(gI2,1);
   }
   std::complex<double> tmp_1037;
   std::complex<double> tmp_1038;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1038 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1037 += tmp_1038;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_1037;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(Yu(gO2,gO2))*Conj(ZU(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuSuhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1039;
   std::complex<double> tmp_1040;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1040 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1039 += tmp_1040;
   result += (-0.2*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1039;
   std::complex<double> tmp_1041;
   std::complex<double> tmp_1042;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1042 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1041 += tmp_1042;
   result += (0.075*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1041;
   std::complex<double> tmp_1043;
   std::complex<double> tmp_1044;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1044 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1043 += tmp_1044;
   result += (0.2*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1043;
   std::complex<double> tmp_1045;
   std::complex<double> tmp_1046;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1046 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1045 += tmp_1046;
   result += (0.05*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1045;
   std::complex<double> tmp_1047;
   std::complex<double> tmp_1048;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1048 += Conj(ZU(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1047 += tmp_1048;
   result += (-0.025*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1047;
   std::complex<double> tmp_1049;
   std::complex<double> tmp_1050;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1050 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1049 += tmp_1050;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_1049;
   std::complex<double> tmp_1051;
   std::complex<double> tmp_1052;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1052 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Yu(j1,j1);
   }
   tmp_1051 += tmp_1052;
   result += (0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_1051;
   std::complex<double> tmp_1053;
   std::complex<double> tmp_1054;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1054 += Conj(ZU(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYu(j1,j1);
   }
   tmp_1053 += tmp_1054;
   result += (-0.7071067811865475*Conj(ZH(gI2,1))) * tmp_1053;
   std::complex<double> tmp_1055;
   std::complex<double> tmp_1056;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1056 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))*KroneckerDelta(gO2,
         3 + j2);
   }
   tmp_1055 += tmp_1056;
   result += (-(vu*Conj(ZH(gI2,1)))) * tmp_1055;
   if (gI1 < 6) {
      result += 0.025*QS*vsb*Conj(ZH(gI2,3))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.05*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.075*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vd*Conj(ZH(gI2,0))*Conj(ZU(gI1,gO2))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.05*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.05*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vu*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.025*QS*vs*Conj(ZH(gI2,2))*Conj(ZU(gI1,gO2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Yu(gO2,gO2))*Conj(ZH(gI2,0))*Conj(ZU(gI1,3 + gO2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(Yu(gO2,gO2))*Conj(ZH(gI2,2))*Conj(ZU(gI1,3 + gO2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI2,1))*Conj(ZU(gI1,3 + gO2))*
         Conj(TYu(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vu*AbsSqr(Yu(gO2,gO2))*Conj(ZH(gI2,1))*Conj(ZU(gI1,gO2)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSuconjUSuconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1057;
   std::complex<double> tmp_1059;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1059 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1057 += tmp_1059;
   std::complex<double> tmp_1058;
   std::complex<double> tmp_1060;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1060 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1058 += tmp_1060;
   result += (-0.1*Sqr(g1)) * tmp_1057 * tmp_1058;
   std::complex<double> tmp_1061;
   std::complex<double> tmp_1063;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1063 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1061 += tmp_1063;
   std::complex<double> tmp_1062;
   std::complex<double> tmp_1064;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1064 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1062 += tmp_1064;
   result += (0.0375*Sqr(g1p)) * tmp_1061 * tmp_1062;
   std::complex<double> tmp_1065;
   std::complex<double> tmp_1067;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1067 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1065 += tmp_1067;
   std::complex<double> tmp_1066;
   std::complex<double> tmp_1068;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1068 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1066 += tmp_1068;
   result += (0.1*Sqr(g1)) * tmp_1065 * tmp_1066;
   std::complex<double> tmp_1069;
   std::complex<double> tmp_1071;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1071 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1069 += tmp_1071;
   std::complex<double> tmp_1070;
   std::complex<double> tmp_1072;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1072 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1070 += tmp_1072;
   result += (0.025*Sqr(g1p)) * tmp_1069 * tmp_1070;
   std::complex<double> tmp_1073;
   std::complex<double> tmp_1075;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1075 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1073 += tmp_1075;
   std::complex<double> tmp_1074;
   std::complex<double> tmp_1076;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1076 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1074 += tmp_1076;
   result += (-0.1*Sqr(g1)) * tmp_1073 * tmp_1074;
   std::complex<double> tmp_1077;
   std::complex<double> tmp_1079;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1079 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1077 += tmp_1079;
   std::complex<double> tmp_1078;
   std::complex<double> tmp_1080;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1080 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1078 += tmp_1080;
   result += (0.0375*Sqr(g1p)) * tmp_1077 * tmp_1078;
   std::complex<double> tmp_1081;
   std::complex<double> tmp_1083;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1083 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1081 += tmp_1083;
   std::complex<double> tmp_1082;
   std::complex<double> tmp_1084;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1084 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1082 += tmp_1084;
   result += (0.1*Sqr(g1)) * tmp_1081 * tmp_1082;
   std::complex<double> tmp_1085;
   std::complex<double> tmp_1087;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1087 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1085 += tmp_1087;
   std::complex<double> tmp_1086;
   std::complex<double> tmp_1088;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1088 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1086 += tmp_1088;
   result += (0.025*Sqr(g1p)) * tmp_1085 * tmp_1086;
   std::complex<double> tmp_1089;
   std::complex<double> tmp_1091;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1091 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_1089 += tmp_1091;
   std::complex<double> tmp_1090;
   std::complex<double> tmp_1092;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1092 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1090 += tmp_1092;
   result += (-0.0625*Sqr(g1p)) * tmp_1089 * tmp_1090;
   std::complex<double> tmp_1093;
   std::complex<double> tmp_1095;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1095 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1093 += tmp_1095;
   std::complex<double> tmp_1094;
   std::complex<double> tmp_1096;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1096 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_1094 += tmp_1096;
   result += (-0.0625*Sqr(g1p)) * tmp_1093 * tmp_1094;
   if (gO1 < 3) {
      std::complex<double> tmp_1097;
      std::complex<double> tmp_1098;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1098 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1097 += tmp_1098;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1097;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1099;
      std::complex<double> tmp_1100;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1100 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1099 += tmp_1100;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1099;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1101;
      std::complex<double> tmp_1102;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1102 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1101 += tmp_1102;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1101;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1103;
      std::complex<double> tmp_1104;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1104 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1103 += tmp_1104;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1103;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1105;
      std::complex<double> tmp_1106;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1106 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1105 += tmp_1106;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1105;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1107;
      std::complex<double> tmp_1108;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1108 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1107 += tmp_1108;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1107;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1109;
      std::complex<double> tmp_1110;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1110 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_1109 += tmp_1110;
      result += (-0.0625*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1109;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1111;
      std::complex<double> tmp_1112;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1112 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1111 += tmp_1112;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1111;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1113;
      std::complex<double> tmp_1114;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1114 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1113 += tmp_1114;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1113;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1115;
      std::complex<double> tmp_1116;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1116 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1115 += tmp_1116;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1115;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1117;
      std::complex<double> tmp_1118;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1118 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1117 += tmp_1118;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1117;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1119;
      std::complex<double> tmp_1120;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1120 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1119 += tmp_1120;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1119;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1121;
      std::complex<double> tmp_1122;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1122 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1121 += tmp_1122;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1121;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1123;
      std::complex<double> tmp_1124;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1124 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_1123 += tmp_1124;
      result += (-0.0625*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1123;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSubarChaPFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_1125;
      std::complex<double> tmp_1126;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1126 += Conj(gD(gO2,j2))*ZDXR(gI2,j2);
      }
      tmp_1125 += tmp_1126;
      result += (-1) * tmp_1125;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSubarChaPFDXPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuGluFuPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1127;
   std::complex<double> tmp_1128;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1128 += KroneckerDelta(gO2,3 + j1)*ZUR(gI2,j1);
   }
   tmp_1127 += tmp_1128;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_1127;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuGluFuPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuconjVWmSd(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuVGSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZU(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuVPSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1129;
   std::complex<double> tmp_1130;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1130 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1129 += tmp_1130;
   result += (0.5163977794943222*g1*Cos(ThetaW())) * tmp_1129;
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuVZSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1131;
   std::complex<double> tmp_1132;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1132 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1131 += tmp_1132;
   result += (-0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1131;
   std::complex<double> tmp_1133;
   std::complex<double> tmp_1134;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1134 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1133 += tmp_1134;
   result += (-0.15811388300841897*g1p*Sin(ThetaWp())) * tmp_1133;
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZU(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSuVZpSu(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1135;
   std::complex<double> tmp_1136;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1136 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1135 += tmp_1136;
   result += (-0.15811388300841897*g1p*Cos(ThetaWp())) * tmp_1135;
   std::complex<double> tmp_1137;
   std::complex<double> tmp_1138;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1138 += Conj(ZU(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1137 += tmp_1138;
   result += (0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1137;
   if (gO2 < 3) {
      result += 0.15811388300841897*g1p*Conj(ZU(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZU(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZU(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1139;
   std::complex<double> tmp_1140;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1140 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1139 += tmp_1140;
   result += (1.2*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_1139;
   std::complex<double> tmp_1141;
   std::complex<double> tmp_1142;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1142 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1141 += tmp_1142;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1141;
   std::complex<double> tmp_1143;
   std::complex<double> tmp_1144;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1144 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1143 += tmp_1144;
   result += (0.05*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_1143;
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.4898979485566356*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1145;
   std::complex<double> tmp_1146;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1146 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1145 += tmp_1146;
   result += (0.05*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_1145;
   std::complex<double> tmp_1147;
   std::complex<double> tmp_1148;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1148 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1147 += tmp_1148;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1147;
   std::complex<double> tmp_1149;
   std::complex<double> tmp_1150;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1150 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1149 += tmp_1150;
   result += (1.2*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_1149;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += -0.4898979485566356*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSeconjUSeconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 3) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1151;
   std::complex<double> tmp_1152;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1152 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1151 += tmp_1152;
   result += (0.3*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_1151;
   std::complex<double> tmp_1153;
   std::complex<double> tmp_1154;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1154 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1153 += tmp_1154;
   result += (0.075*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_1153;
   std::complex<double> tmp_1155;
   std::complex<double> tmp_1156;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1156 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1155 += tmp_1156;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_1155;
   if (gO1 < 3) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,0);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,0);
   }
   std::complex<double> tmp_1157;
   std::complex<double> tmp_1158;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1158 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1157 += tmp_1158;
   result += (-0.3*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_1157;
   std::complex<double> tmp_1159;
   std::complex<double> tmp_1160;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1160 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1159 += tmp_1160;
   result += (0.05*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_1159;
   if (gO1 < 3) {
      result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1,
         1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1161;
   std::complex<double> tmp_1162;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1162 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1161 += tmp_1162;
   result += (0.3*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_1161;
   std::complex<double> tmp_1163;
   std::complex<double> tmp_1164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1164 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1163 += tmp_1164;
   result += (-0.05*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_1163;
   std::complex<double> tmp_1165;
   std::complex<double> tmp_1166;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_1167;
      std::complex<double> tmp_1168;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_1169;
         std::complex<double> tmp_1170;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_1170 += Conj(hE(j3,j1))*hE(j2,j1);
         }
         tmp_1169 += tmp_1170;
         tmp_1168 += (KroneckerDelta(gO2,3 + j2)) * tmp_1169;
      }
      tmp_1167 += tmp_1168;
      tmp_1166 += (KroneckerDelta(gO1,3 + j3)) * tmp_1167;
   }
   tmp_1165 += tmp_1166;
   result += (-(Conj(UHp0(gI2,0))*UHp0(gI1,0))) * tmp_1165;
   if (gO1 < 3) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,0);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_1171;
   std::complex<double> tmp_1172;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1172 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1171 += tmp_1172;
   result += (-0.3*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_1171;
   std::complex<double> tmp_1173;
   std::complex<double> tmp_1174;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1174 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1173 += tmp_1174;
   result += (0.05*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_1173;
   if (gO1 < 3) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1175;
   std::complex<double> tmp_1176;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1176 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1175 += tmp_1176;
   result += (0.3*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_1175;
   std::complex<double> tmp_1177;
   std::complex<double> tmp_1178;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1178 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1177 += tmp_1178;
   result += (-0.05*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_1177;
   std::complex<double> tmp_1179;
   std::complex<double> tmp_1180;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_1181;
      std::complex<double> tmp_1182;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_1183;
         std::complex<double> tmp_1184;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_1184 += Conj(hE(j3,j1))*hE(j2,j1);
         }
         tmp_1183 += tmp_1184;
         tmp_1182 += (KroneckerDelta(gO2,3 + j2)) * tmp_1183;
      }
      tmp_1181 += tmp_1182;
      tmp_1180 += (KroneckerDelta(gO1,3 + j3)) * tmp_1181;
   }
   tmp_1179 += tmp_1180;
   result += (-(Conj(UHpp(gI2,0))*UHpp(gI1,0))) * tmp_1179;
   if (gO1 < 3) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,0);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_1185;
   std::complex<double> tmp_1186;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1186 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1185 += tmp_1186;
   result += (-0.3*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_1185;
   std::complex<double> tmp_1187;
   std::complex<double> tmp_1188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1188 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1187 += tmp_1188;
   result += (0.05*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_1187;
   if (gO1 < 3) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSeChiPChaIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeChiPChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1189;
   std::complex<double> tmp_1190;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1191;
      std::complex<double> tmp_1192;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1192 += KroneckerDelta(gO1,3 + j1)*hE(j1,j2);
      }
      tmp_1191 += tmp_1192;
      tmp_1190 += (Conj(ZMI(gI2,j2))) * tmp_1191;
   }
   tmp_1189 += tmp_1190;
   result += (Conj(ZNp(gI1,0))) * tmp_1189;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeSHp0SHIPM(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1193;
   std::complex<double> tmp_1194;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1195;
      std::complex<double> tmp_1196;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1196 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1195 += tmp_1196;
      tmp_1194 += (Conj(UHIPM(gI2,j2))) * tmp_1195;
   }
   tmp_1193 += tmp_1194;
   result += (-(Conj(MuPr)*Conj(UHp0(gI1,1)))) * tmp_1193;
   std::complex<double> tmp_1197;
   std::complex<double> tmp_1198;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1199;
      std::complex<double> tmp_1200;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1200 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1199 += tmp_1200;
      tmp_1198 += (Conj(UHIPM(gI2,j2))) * tmp_1199;
   }
   tmp_1197 += tmp_1198;
   result += (0.7071067811865475*vphi*Conj(SigmaL)*Conj(UHp0(gI1,1))) *
      tmp_1197;
   std::complex<double> tmp_1201;
   std::complex<double> tmp_1202;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1203;
      std::complex<double> tmp_1204;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1204 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1203 += tmp_1204;
      tmp_1202 += (Conj(UHIPM(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_1203
         ;
   }
   tmp_1201 += tmp_1202;
   result += (0.7071067811865475*vs*Conj(UHp0(gI1,0))) * tmp_1201;
   std::complex<double> tmp_1205;
   std::complex<double> tmp_1206;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1207;
      std::complex<double> tmp_1208;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1208 += KroneckerDelta(gO2,3 + j1)*ThE(j1,j2);
      }
      tmp_1207 += tmp_1208;
      tmp_1206 += (Conj(UHIPM(gI2,j2))) * tmp_1207;
   }
   tmp_1205 += tmp_1206;
   result += (Conj(UHp0(gI1,0))) * tmp_1205;
   if (gO2 < 3) {
      std::complex<double> tmp_1209;
      std::complex<double> tmp_1210;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1210 += Conj(UHIPM(gI2,j1))*hE(gO2,j1);
      }
      tmp_1209 += tmp_1210;
      result += (0.7071067811865475*vd*Conj(UHp0(gI1,0))*Conj(Ye(gO2,gO2)))
         * tmp_1209;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeSHppSHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1211;
   std::complex<double> tmp_1212;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1213;
      std::complex<double> tmp_1214;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1214 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1213 += tmp_1214;
      tmp_1212 += (Conj(UHI0(gI2,j2))) * tmp_1213;
   }
   tmp_1211 += tmp_1212;
   result += (-(Conj(MuPr)*Conj(UHpp(gI1,1)))) * tmp_1211;
   std::complex<double> tmp_1215;
   std::complex<double> tmp_1216;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1217;
      std::complex<double> tmp_1218;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1218 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1217 += tmp_1218;
      tmp_1216 += (Conj(UHI0(gI2,j2))) * tmp_1217;
   }
   tmp_1215 += tmp_1216;
   result += (0.7071067811865475*vphi*Conj(SigmaL)*Conj(UHpp(gI1,1))) *
      tmp_1215;
   std::complex<double> tmp_1219;
   std::complex<double> tmp_1220;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1221;
      std::complex<double> tmp_1222;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1222 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1221 += tmp_1222;
      tmp_1220 += (Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_1221;
   }
   tmp_1219 += tmp_1220;
   result += (0.7071067811865475*vs*Conj(UHpp(gI1,0))) * tmp_1219;
   std::complex<double> tmp_1223;
   std::complex<double> tmp_1224;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1225;
      std::complex<double> tmp_1226;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1226 += KroneckerDelta(gO2,3 + j1)*ThE(j1,j2);
      }
      tmp_1225 += tmp_1226;
      tmp_1224 += (Conj(UHI0(gI2,j2))) * tmp_1225;
   }
   tmp_1223 += tmp_1224;
   result += (-Conj(UHpp(gI1,0))) * tmp_1223;
   if (gO2 < 3) {
      std::complex<double> tmp_1227;
      std::complex<double> tmp_1228;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1228 += Conj(UHI0(gI2,j1))*hE(gO2,j1);
      }
      tmp_1227 += tmp_1228;
      result += (-0.7071067811865475*vd*Conj(UHpp(gI1,0))*Conj(Ye(gO2,gO2)))
         * tmp_1227;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1229;
   std::complex<double> tmp_1230;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1230 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1229 += tmp_1230;
   result += (0.3*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_1229;
   std::complex<double> tmp_1231;
   std::complex<double> tmp_1232;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1232 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1231 += tmp_1232;
   result += (-0.05*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_1231;
   std::complex<double> tmp_1233;
   std::complex<double> tmp_1235;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1235 += Conj(ZV(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1233 += tmp_1235;
   std::complex<double> tmp_1234;
   std::complex<double> tmp_1236;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1236 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZV(gI1,j2);
   }
   tmp_1234 += tmp_1236;
   result += (-1) * tmp_1233 * tmp_1234;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p
         );
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.5*Conj(ZV(gI2,gO2))*Sqr(g2)*ZV(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeSvHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1237;
   std::complex<double> tmp_1238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1238 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1237 += tmp_1238;
   result += (0.7071067811865475*vs*Conj(Lambdax)*Conj(ZP(gI2,1))) * tmp_1237;
   std::complex<double> tmp_1239;
   std::complex<double> tmp_1240;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1240 += Conj(ZV(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1239 += tmp_1240;
   result += (Conj(ZP(gI2,0))) * tmp_1239;
   if (gO2 < 3) {
      result += -0.35355339059327373*vd*Conj(ZP(gI2,0))*Conj(ZV(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += -0.35355339059327373*vu*Conj(ZP(gI2,1))*Conj(ZV(gI1,gO2))*
         Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.7071067811865475*vd*AbsSqr(Ye(gO2,gO2))*Conj(ZP(gI2,0))*
         Conj(ZV(gI1,gO2));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSeFvChaPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeFvChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(UM(gI2,0))*KroneckerDelta(gI1,gO1));
   }
   if (gI1 < 3) {
      result += Conj(UM(gI2,1))*KroneckerDelta(3 + gI1,gO1)*Ye(gI1,gI1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeFeChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1241;
   std::complex<double> tmp_1242;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1242 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_1241 += tmp_1242;
   result += (-1.0954451150103321*g1*ZN(gI2,0)) * tmp_1241;
   if (gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*ZER(gI1,gO2)*ZN(gI2,2));
   }
   std::complex<double> tmp_1243;
   std::complex<double> tmp_1244;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1244 += KroneckerDelta(gO2,3 + j1)*ZER(gI1,j1);
   }
   tmp_1243 += tmp_1244;
   result += (-0.22360679774997896*g1p*ZN(gI2,7)) * tmp_1243;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeFeChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1245;
   std::complex<double> tmp_1246;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1246 += Conj(ZEL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Ye(j1,j1);
   }
   tmp_1245 += tmp_1246;
   result += (-Conj(ZN(gI2,2))) * tmp_1245;
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,1));
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZEL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1247;
   std::complex<double> tmp_1249;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1249 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1247 += tmp_1249;
   std::complex<double> tmp_1248;
   std::complex<double> tmp_1250;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1250 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_1248 += tmp_1250;
   result += (0.15*Sqr(g1)) * tmp_1247 * tmp_1248;
   std::complex<double> tmp_1251;
   std::complex<double> tmp_1253;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1253 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1251 += tmp_1253;
   std::complex<double> tmp_1252;
   std::complex<double> tmp_1254;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1254 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_1252 += tmp_1254;
   result += (0.0375*Sqr(g1p)) * tmp_1251 * tmp_1252;
   std::complex<double> tmp_1255;
   std::complex<double> tmp_1257;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1257 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1255 += tmp_1257;
   std::complex<double> tmp_1256;
   std::complex<double> tmp_1258;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1258 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_1256 += tmp_1258;
   result += (-0.15*Sqr(g1)) * tmp_1255 * tmp_1256;
   std::complex<double> tmp_1259;
   std::complex<double> tmp_1261;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1261 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1259 += tmp_1261;
   std::complex<double> tmp_1260;
   std::complex<double> tmp_1262;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1262 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_1260 += tmp_1262;
   result += (0.025*Sqr(g1p)) * tmp_1259 * tmp_1260;
   std::complex<double> tmp_1263;
   std::complex<double> tmp_1265;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1265 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_1263 += tmp_1265;
   std::complex<double> tmp_1264;
   std::complex<double> tmp_1266;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1266 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1264 += tmp_1266;
   result += (0.15*Sqr(g1)) * tmp_1263 * tmp_1264;
   std::complex<double> tmp_1267;
   std::complex<double> tmp_1269;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1269 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_1267 += tmp_1269;
   std::complex<double> tmp_1268;
   std::complex<double> tmp_1270;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1270 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1268 += tmp_1270;
   result += (0.0375*Sqr(g1p)) * tmp_1267 * tmp_1268;
   std::complex<double> tmp_1271;
   std::complex<double> tmp_1273;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1273 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_1271 += tmp_1273;
   std::complex<double> tmp_1272;
   std::complex<double> tmp_1274;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1274 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1272 += tmp_1274;
   result += (-0.15*Sqr(g1)) * tmp_1271 * tmp_1272;
   std::complex<double> tmp_1275;
   std::complex<double> tmp_1277;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1277 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_1275 += tmp_1277;
   std::complex<double> tmp_1276;
   std::complex<double> tmp_1278;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1278 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1276 += tmp_1278;
   result += (0.025*Sqr(g1p)) * tmp_1275 * tmp_1276;
   std::complex<double> tmp_1279;
   std::complex<double> tmp_1281;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1282;
      std::complex<double> tmp_1283;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1283 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1282 += tmp_1283;
      tmp_1281 += (Conj(UHIPM(gI2,j2))) * tmp_1282;
   }
   tmp_1279 += tmp_1281;
   std::complex<double> tmp_1280;
   std::complex<double> tmp_1284;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_1285;
      std::complex<double> tmp_1286;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_1286 += Conj(hE(j3,j4))*KroneckerDelta(gO1,3 + j3);
      }
      tmp_1285 += tmp_1286;
      tmp_1284 += (UHIPM(gI1,j4)) * tmp_1285;
   }
   tmp_1280 += tmp_1284;
   result += (-1) * tmp_1279 * tmp_1280;
   if (gO1 < 3) {
      std::complex<double> tmp_1287;
      std::complex<double> tmp_1288;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1288 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_1287 += tmp_1288;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1287;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1289;
      std::complex<double> tmp_1290;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1290 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_1289 += tmp_1290;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1289;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1291;
      std::complex<double> tmp_1292;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1292 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_1291 += tmp_1292;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1291;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1293;
      std::complex<double> tmp_1294;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1294 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_1293 += tmp_1294;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1293;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1295;
      std::complex<double> tmp_1296;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1296 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_1295 += tmp_1296;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1295;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1297;
      std::complex<double> tmp_1298;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1298 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_1297 += tmp_1298;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1297;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1299;
      std::complex<double> tmp_1300;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1300 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_1299 += tmp_1300;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1299;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1301;
      std::complex<double> tmp_1302;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1302 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_1301 += tmp_1302;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1301;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1303;
      std::complex<double> tmp_1304;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1304 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_1303 += tmp_1304;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1303;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1305;
      std::complex<double> tmp_1306;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1306 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_1305 += tmp_1306;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1305;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1307;
      std::complex<double> tmp_1308;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1308 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_1307 += tmp_1308;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1307;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1309;
      std::complex<double> tmp_1310;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1310 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_1309 += tmp_1310;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1309;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1311;
   std::complex<double> tmp_1312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1312 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1311 += tmp_1312;
   result += (0.3*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1311;
   std::complex<double> tmp_1313;
   std::complex<double> tmp_1314;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1314 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1313 += tmp_1314;
   result += (0.075*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1313;
   std::complex<double> tmp_1315;
   std::complex<double> tmp_1316;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1316 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1315 += tmp_1316;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_1315;
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,0));
   }
   std::complex<double> tmp_1317;
   std::complex<double> tmp_1318;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1318 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1317 += tmp_1318;
   result += (-0.3*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1317;
   std::complex<double> tmp_1319;
   std::complex<double> tmp_1320;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1320 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1319 += tmp_1320;
   result += (0.05*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1319;
   if (gO1 < 3) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,2)*ZA(gI2,1);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Lambdax*
         ZA(gI1,1)*ZA(gI2,2);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1)*
         ZA(gI1,1)*ZA(gI2,2);
   }
   std::complex<double> tmp_1321;
   std::complex<double> tmp_1322;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1322 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1321 += tmp_1322;
   result += (-0.025*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_1321;
   if (gO1 < 3) {
      result += -0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2
         );
   }
   std::complex<double> tmp_1323;
   std::complex<double> tmp_1324;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1324 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1323 += tmp_1324;
   result += (0.025*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_1323;
   if (gO1 < 3) {
      result += 0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)
         ;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSehhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1325;
   std::complex<double> tmp_1326;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1326 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1325 += tmp_1326;
   result += (0.3*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1325;
   std::complex<double> tmp_1327;
   std::complex<double> tmp_1328;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1328 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1327 += tmp_1328;
   result += (0.075*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1327;
   std::complex<double> tmp_1329;
   std::complex<double> tmp_1330;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1330 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1329 += tmp_1330;
   result += (-0.3*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1329;
   std::complex<double> tmp_1331;
   std::complex<double> tmp_1332;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1332 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1331 += tmp_1332;
   result += (0.05*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1331;
   std::complex<double> tmp_1333;
   std::complex<double> tmp_1334;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1334 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1333 += tmp_1334;
   result += (-0.025*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1333;
   std::complex<double> tmp_1335;
   std::complex<double> tmp_1336;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1336 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1335 += tmp_1336;
   result += (0.025*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1335;
   std::complex<double> tmp_1337;
   std::complex<double> tmp_1338;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1338 += AbsSqr(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1337 += tmp_1338;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_1337;
   if (gO1 < 3) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 3) {
      result += 0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)*
         Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 3) {
      result += -0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(Ye(gO2,gO2))*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Ye(gO1,gO1))*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*
         KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1339;
   std::complex<double> tmp_1341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1341 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1339 += tmp_1341;
   std::complex<double> tmp_1340;
   std::complex<double> tmp_1342;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1342 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1340 += tmp_1342;
   result += (-0.05*Sqr(g1)) * tmp_1339 * tmp_1340;
   std::complex<double> tmp_1343;
   std::complex<double> tmp_1345;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1345 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1343 += tmp_1345;
   std::complex<double> tmp_1344;
   std::complex<double> tmp_1346;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1346 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1344 += tmp_1346;
   result += (-0.0125*Sqr(g1p)) * tmp_1343 * tmp_1344;
   std::complex<double> tmp_1347;
   std::complex<double> tmp_1349;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1349 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1347 += tmp_1349;
   std::complex<double> tmp_1348;
   std::complex<double> tmp_1350;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1350 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1348 += tmp_1350;
   result += (-0.1*Sqr(g1)) * tmp_1347 * tmp_1348;
   std::complex<double> tmp_1351;
   std::complex<double> tmp_1353;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1353 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1351 += tmp_1353;
   std::complex<double> tmp_1352;
   std::complex<double> tmp_1354;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1354 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1352 += tmp_1354;
   result += (-0.025*Sqr(g1p)) * tmp_1351 * tmp_1352;
   std::complex<double> tmp_1355;
   std::complex<double> tmp_1357;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1357 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1355 += tmp_1357;
   std::complex<double> tmp_1356;
   std::complex<double> tmp_1358;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1358 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1356 += tmp_1358;
   result += (-0.05*Sqr(g1)) * tmp_1355 * tmp_1356;
   std::complex<double> tmp_1359;
   std::complex<double> tmp_1361;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1361 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1359 += tmp_1361;
   std::complex<double> tmp_1360;
   std::complex<double> tmp_1362;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1362 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1360 += tmp_1362;
   result += (-0.0125*Sqr(g1p)) * tmp_1359 * tmp_1360;
   std::complex<double> tmp_1363;
   std::complex<double> tmp_1365;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1365 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1363 += tmp_1365;
   std::complex<double> tmp_1364;
   std::complex<double> tmp_1366;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1366 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1364 += tmp_1366;
   result += (-0.1*Sqr(g1)) * tmp_1363 * tmp_1364;
   std::complex<double> tmp_1367;
   std::complex<double> tmp_1369;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1369 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1367 += tmp_1369;
   std::complex<double> tmp_1368;
   std::complex<double> tmp_1370;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1370 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1368 += tmp_1370;
   result += (-0.025*Sqr(g1p)) * tmp_1367 * tmp_1368;
   if (gO1 < 3) {
      std::complex<double> tmp_1371;
      std::complex<double> tmp_1372;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1372 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1371 += tmp_1372;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1371;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1373;
      std::complex<double> tmp_1374;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1374 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1373 += tmp_1374;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1373;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1375;
      std::complex<double> tmp_1376;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1376 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1375 += tmp_1376;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1375;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1377;
      std::complex<double> tmp_1378;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1378 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1377 += tmp_1378;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1377;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1379;
      std::complex<double> tmp_1380;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1380 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1379 += tmp_1380;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1379;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1381;
      std::complex<double> tmp_1382;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1382 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1381 += tmp_1382;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1381;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1383;
      std::complex<double> tmp_1384;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1384 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1383 += tmp_1384;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1383;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1385;
      std::complex<double> tmp_1386;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1386 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1385 += tmp_1386;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1385;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1387;
      std::complex<double> tmp_1388;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1388 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1387 += tmp_1388;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1387;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1389;
      std::complex<double> tmp_1390;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1390 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1389 += tmp_1390;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1389;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1391;
      std::complex<double> tmp_1392;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1392 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_1391 += tmp_1392;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1391;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1393;
      std::complex<double> tmp_1394;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1394 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,j2);
      }
      tmp_1393 += tmp_1394;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1393;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1395;
   std::complex<double> tmp_1397;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1397 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1395 += tmp_1397;
   std::complex<double> tmp_1396;
   std::complex<double> tmp_1398;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1398 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1396 += tmp_1398;
   result += (0.1*Sqr(g1)) * tmp_1395 * tmp_1396;
   std::complex<double> tmp_1399;
   std::complex<double> tmp_1401;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1401 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1399 += tmp_1401;
   std::complex<double> tmp_1400;
   std::complex<double> tmp_1402;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1402 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1400 += tmp_1402;
   result += (0.025*Sqr(g1p)) * tmp_1399 * tmp_1400;
   std::complex<double> tmp_1403;
   std::complex<double> tmp_1405;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1405 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1403 += tmp_1405;
   std::complex<double> tmp_1404;
   std::complex<double> tmp_1406;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1406 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1404 += tmp_1406;
   result += (-0.1*Sqr(g1)) * tmp_1403 * tmp_1404;
   std::complex<double> tmp_1407;
   std::complex<double> tmp_1409;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1409 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1407 += tmp_1409;
   std::complex<double> tmp_1408;
   std::complex<double> tmp_1410;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1410 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1408 += tmp_1410;
   result += (0.0375*Sqr(g1p)) * tmp_1407 * tmp_1408;
   std::complex<double> tmp_1411;
   std::complex<double> tmp_1413;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1413 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1411 += tmp_1413;
   std::complex<double> tmp_1412;
   std::complex<double> tmp_1414;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1414 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1412 += tmp_1414;
   result += (0.1*Sqr(g1)) * tmp_1411 * tmp_1412;
   std::complex<double> tmp_1415;
   std::complex<double> tmp_1417;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1417 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1415 += tmp_1417;
   std::complex<double> tmp_1416;
   std::complex<double> tmp_1418;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1418 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1416 += tmp_1418;
   result += (0.025*Sqr(g1p)) * tmp_1415 * tmp_1416;
   std::complex<double> tmp_1419;
   std::complex<double> tmp_1421;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1421 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1419 += tmp_1421;
   std::complex<double> tmp_1420;
   std::complex<double> tmp_1422;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1422 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1420 += tmp_1422;
   result += (-0.1*Sqr(g1)) * tmp_1419 * tmp_1420;
   std::complex<double> tmp_1423;
   std::complex<double> tmp_1425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1425 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1423 += tmp_1425;
   std::complex<double> tmp_1424;
   std::complex<double> tmp_1426;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1426 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1424 += tmp_1426;
   result += (0.0375*Sqr(g1p)) * tmp_1423 * tmp_1424;
   if (gO1 < 3) {
      std::complex<double> tmp_1427;
      std::complex<double> tmp_1428;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1428 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1427 += tmp_1428;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1427;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1429;
      std::complex<double> tmp_1430;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1430 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1429 += tmp_1430;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1429;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1431;
      std::complex<double> tmp_1432;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1432 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1431 += tmp_1432;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1431;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1433;
      std::complex<double> tmp_1434;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1434 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_1433 += tmp_1434;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1433;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1435;
      std::complex<double> tmp_1436;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1436 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1435 += tmp_1436;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1435;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1437;
      std::complex<double> tmp_1438;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1438 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_1437 += tmp_1438;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1437;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1439;
      std::complex<double> tmp_1440;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1440 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1439 += tmp_1440;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1439;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1441;
      std::complex<double> tmp_1442;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1442 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_1441 += tmp_1442;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1441;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1443;
   std::complex<double> tmp_1445;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1445 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1443 += tmp_1445;
   std::complex<double> tmp_1444;
   std::complex<double> tmp_1446;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1446 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1444 += tmp_1446;
   result += (-0.3*Sqr(g1)) * tmp_1443 * tmp_1444;
   std::complex<double> tmp_1447;
   std::complex<double> tmp_1449;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1449 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
   }
   tmp_1447 += tmp_1449;
   std::complex<double> tmp_1448;
   std::complex<double> tmp_1450;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1450 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1448 += tmp_1450;
   result += (-0.0125*Sqr(g1p)) * tmp_1447 * tmp_1448;
   std::complex<double> tmp_1451;
   std::complex<double> tmp_1453;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1453 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1451 += tmp_1453;
   std::complex<double> tmp_1452;
   std::complex<double> tmp_1454;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1454 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1452 += tmp_1454;
   result += (0.15*Sqr(g1)) * tmp_1451 * tmp_1452;
   std::complex<double> tmp_1455;
   std::complex<double> tmp_1457;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1457 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_1455 += tmp_1457;
   std::complex<double> tmp_1456;
   std::complex<double> tmp_1458;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1458 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1456 += tmp_1458;
   result += (-0.025*Sqr(g1p)) * tmp_1455 * tmp_1456;
   std::complex<double> tmp_1459;
   std::complex<double> tmp_1461;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1461 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1459 += tmp_1461;
   std::complex<double> tmp_1460;
   std::complex<double> tmp_1462;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1462 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1460 += tmp_1462;
   result += (-0.3*Sqr(g1)) * tmp_1459 * tmp_1460;
   std::complex<double> tmp_1463;
   std::complex<double> tmp_1465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1465 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_1463 += tmp_1465;
   std::complex<double> tmp_1464;
   std::complex<double> tmp_1466;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1466 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1464 += tmp_1466;
   result += (-0.0125*Sqr(g1p)) * tmp_1463 * tmp_1464;
   std::complex<double> tmp_1467;
   std::complex<double> tmp_1469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1469 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1467 += tmp_1469;
   std::complex<double> tmp_1468;
   std::complex<double> tmp_1470;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1470 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1468 += tmp_1470;
   result += (0.15*Sqr(g1)) * tmp_1467 * tmp_1468;
   std::complex<double> tmp_1471;
   std::complex<double> tmp_1473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1473 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1471 += tmp_1473;
   std::complex<double> tmp_1472;
   std::complex<double> tmp_1474;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1474 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_1472 += tmp_1474;
   result += (-0.025*Sqr(g1p)) * tmp_1471 * tmp_1472;
   std::complex<double> tmp_1475;
   std::complex<double> tmp_1477;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1477 += Conj(ZE(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1475 += tmp_1477;
   std::complex<double> tmp_1476;
   std::complex<double> tmp_1478;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1478 += Conj(Ye(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZE(gI1,j2);
   }
   tmp_1476 += tmp_1478;
   result += (-1) * tmp_1475 * tmp_1476;
   std::complex<double> tmp_1479;
   std::complex<double> tmp_1481;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1481 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1479 += tmp_1481;
   std::complex<double> tmp_1480;
   std::complex<double> tmp_1482;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1482 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1480 += tmp_1482;
   result += (-0.3*Sqr(g1)) * tmp_1479 * tmp_1480;
   std::complex<double> tmp_1483;
   std::complex<double> tmp_1485;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1485 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1483 += tmp_1485;
   std::complex<double> tmp_1484;
   std::complex<double> tmp_1486;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1486 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_1484 += tmp_1486;
   result += (-0.0125*Sqr(g1p)) * tmp_1483 * tmp_1484;
   std::complex<double> tmp_1487;
   std::complex<double> tmp_1489;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1489 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1487 += tmp_1489;
   std::complex<double> tmp_1488;
   std::complex<double> tmp_1490;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1490 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1488 += tmp_1490;
   result += (-0.3*Sqr(g1)) * tmp_1487 * tmp_1488;
   std::complex<double> tmp_1491;
   std::complex<double> tmp_1493;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1493 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1491 += tmp_1493;
   std::complex<double> tmp_1492;
   std::complex<double> tmp_1494;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1494 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
   }
   tmp_1492 += tmp_1494;
   result += (-0.0125*Sqr(g1p)) * tmp_1491 * tmp_1492;
   if (gO1 < 3) {
      std::complex<double> tmp_1495;
      std::complex<double> tmp_1496;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1496 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1495 += tmp_1496;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1495;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1497;
      std::complex<double> tmp_1498;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1498 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1497 += tmp_1498;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1497;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1499;
      std::complex<double> tmp_1500;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1500 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_1499 += tmp_1500;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1499;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1501;
      std::complex<double> tmp_1502;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1502 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1501 += tmp_1502;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1501;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1503;
      std::complex<double> tmp_1504;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1504 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_1503 += tmp_1504;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1503;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1505;
      std::complex<double> tmp_1506;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1506 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1505 += tmp_1506;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1505;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1507;
      std::complex<double> tmp_1508;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1508 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1507 += tmp_1508;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1507;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1509;
      std::complex<double> tmp_1510;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1510 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_1509 += tmp_1510;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1509;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1511;
      std::complex<double> tmp_1512;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1512 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1511 += tmp_1512;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1511;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1513;
      std::complex<double> tmp_1514;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1514 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_1513 += tmp_1514;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1513;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1515;
      std::complex<double> tmp_1516;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1516 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1515 += tmp_1516;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1515;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1517;
      std::complex<double> tmp_1518;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1518 += KroneckerDelta(gO1,3 + j1)*ZE(gI1,3 + j1);
      }
      tmp_1517 += tmp_1518;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(g1p)) * tmp_1517;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1519;
      std::complex<double> tmp_1520;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1520 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
      }
      tmp_1519 += tmp_1520;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1519;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1521;
      std::complex<double> tmp_1522;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1522 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1521 += tmp_1522;
      result += (0.15*Conj(ZE(gI2,gO2))*Sqr(g1)) * tmp_1521;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1523;
      std::complex<double> tmp_1524;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1524 += KroneckerDelta(gO1,3 + j2)*ZE(gI1,3 + j2);
      }
      tmp_1523 += tmp_1524;
      result += (-0.025*Conj(ZE(gI2,gO2))*Sqr(g1p)) * tmp_1523;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1525;
      std::complex<double> tmp_1526;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1526 += Conj(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,j2);
      }
      tmp_1525 += tmp_1526;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1525;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1527;
      std::complex<double> tmp_1528;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1528 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1527 += tmp_1528;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1527;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1529;
      std::complex<double> tmp_1530;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1530 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_1529 += tmp_1530;
      result += (-0.025*Sqr(g1p)*ZE(gI1,gO1)) * tmp_1529;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1531;
      std::complex<double> tmp_1532;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1532 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1531 += tmp_1532;
      result += (0.15*Sqr(g1)*ZE(gI1,gO1)) * tmp_1531;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1533;
      std::complex<double> tmp_1534;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1534 += Conj(ZE(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_1533 += tmp_1534;
      result += (-0.025*Sqr(g1p)*ZE(gI1,gO1)) * tmp_1533;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.15*Conj(ZE(gI2,gO2))*Sqr(g1)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZE(gI2,gO2))*Sqr(g1p)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.25*Conj(ZE(gI2,gO2))*Sqr(g2)*ZE(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(Ye(gO2,gO2))*Conj(ZE(gI2,3 + gO2))*Ye(gO1,gO1)*ZE(gI1
         ,3 + gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1535;
   std::complex<double> tmp_1537;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1537 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1535 += tmp_1537;
   std::complex<double> tmp_1536;
   std::complex<double> tmp_1538;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1538 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1536 += tmp_1538;
   result += (-0.05*Sqr(g1)) * tmp_1535 * tmp_1536;
   std::complex<double> tmp_1539;
   std::complex<double> tmp_1541;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1541 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_1539 += tmp_1541;
   std::complex<double> tmp_1540;
   std::complex<double> tmp_1542;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1542 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1540 += tmp_1542;
   result += (-0.0125*Sqr(g1p)) * tmp_1539 * tmp_1540;
   std::complex<double> tmp_1543;
   std::complex<double> tmp_1545;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1545 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1543 += tmp_1545;
   std::complex<double> tmp_1544;
   std::complex<double> tmp_1546;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1546 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1544 += tmp_1546;
   result += (0.2*Sqr(g1)) * tmp_1543 * tmp_1544;
   std::complex<double> tmp_1547;
   std::complex<double> tmp_1549;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1549 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_1547 += tmp_1549;
   std::complex<double> tmp_1548;
   std::complex<double> tmp_1550;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1550 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1548 += tmp_1550;
   result += (-0.0125*Sqr(g1p)) * tmp_1547 * tmp_1548;
   std::complex<double> tmp_1551;
   std::complex<double> tmp_1553;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1553 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1551 += tmp_1553;
   std::complex<double> tmp_1552;
   std::complex<double> tmp_1554;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1554 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1552 += tmp_1554;
   result += (-0.05*Sqr(g1)) * tmp_1551 * tmp_1552;
   std::complex<double> tmp_1555;
   std::complex<double> tmp_1557;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1557 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1555 += tmp_1557;
   std::complex<double> tmp_1556;
   std::complex<double> tmp_1558;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1558 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_1556 += tmp_1558;
   result += (-0.0125*Sqr(g1p)) * tmp_1555 * tmp_1556;
   std::complex<double> tmp_1559;
   std::complex<double> tmp_1561;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1561 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1559 += tmp_1561;
   std::complex<double> tmp_1560;
   std::complex<double> tmp_1562;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1562 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1560 += tmp_1562;
   result += (0.2*Sqr(g1)) * tmp_1559 * tmp_1560;
   std::complex<double> tmp_1563;
   std::complex<double> tmp_1565;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1565 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1563 += tmp_1565;
   std::complex<double> tmp_1564;
   std::complex<double> tmp_1566;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1566 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_1564 += tmp_1566;
   result += (-0.0125*Sqr(g1p)) * tmp_1563 * tmp_1564;
   if (gO1 < 3) {
      std::complex<double> tmp_1567;
      std::complex<double> tmp_1568;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1568 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1567 += tmp_1568;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1567;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1569;
      std::complex<double> tmp_1570;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1570 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1569 += tmp_1570;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1569;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1571;
      std::complex<double> tmp_1572;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1572 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_1571 += tmp_1572;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1571;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1573;
      std::complex<double> tmp_1574;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1574 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1573 += tmp_1574;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1573;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1575;
      std::complex<double> tmp_1576;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1576 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_1575 += tmp_1576;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1575;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1577;
      std::complex<double> tmp_1578;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1578 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1577 += tmp_1578;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1577;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1579;
      std::complex<double> tmp_1580;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1580 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1579 += tmp_1580;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1579;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1581;
      std::complex<double> tmp_1582;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1582 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_1581 += tmp_1582;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1581;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1583;
      std::complex<double> tmp_1584;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1584 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1583 += tmp_1584;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1583;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1585;
      std::complex<double> tmp_1586;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1586 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_1585 += tmp_1586;
      result += (-0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1585;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeSeAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1587;
   std::complex<double> tmp_1588;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1588 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1587 += tmp_1588;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_1587;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZE(gI1,3 +
         gO2))*Conj(TYe(gO2,gO2))*ZA(gI2,0);
   }
   std::complex<double> tmp_1589;
   std::complex<double> tmp_1590;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1590 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1589 += tmp_1590;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_1589;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_1591;
   std::complex<double> tmp_1592;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1592 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1591 += tmp_1592;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_1591;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1
         ,3 + gO2))*Lambdax*ZA(gI2,2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeSehh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1593;
   std::complex<double> tmp_1594;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1594 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1593 += tmp_1594;
   result += (0.3*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1593;
   std::complex<double> tmp_1595;
   std::complex<double> tmp_1596;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1596 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1595 += tmp_1596;
   result += (0.075*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1595;
   std::complex<double> tmp_1597;
   std::complex<double> tmp_1598;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1598 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1597 += tmp_1598;
   result += (-0.3*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1597;
   std::complex<double> tmp_1599;
   std::complex<double> tmp_1600;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1600 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1599 += tmp_1600;
   result += (0.05*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1599;
   std::complex<double> tmp_1601;
   std::complex<double> tmp_1602;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1602 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1601 += tmp_1602;
   result += (-0.025*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1601;
   std::complex<double> tmp_1603;
   std::complex<double> tmp_1604;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1604 += Conj(ZE(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1603 += tmp_1604;
   result += (0.025*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1603;
   std::complex<double> tmp_1605;
   std::complex<double> tmp_1606;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1606 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1605 += tmp_1606;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_1605;
   std::complex<double> tmp_1607;
   std::complex<double> tmp_1608;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1608 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Ye(j1,j1);
   }
   tmp_1607 += tmp_1608;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_1607;
   std::complex<double> tmp_1609;
   std::complex<double> tmp_1610;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1610 += Conj(ZE(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TYe(j1,j1);
   }
   tmp_1609 += tmp_1610;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_1609;
   std::complex<double> tmp_1611;
   std::complex<double> tmp_1612;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1612 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI1,3 + j2))*KroneckerDelta(gO2,
         3 + j2);
   }
   tmp_1611 += tmp_1612;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_1611;
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.15*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.25*vd*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.15*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.25*vu*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 3) {
      result += 0.5*vs*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,1
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += -0.05*QS*vs*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(Ye(gO2,gO2))*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,2
         ))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.05*QS*vsb*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZE(gI1,3 + gO2))*Conj(ZH(gI2,0))*
         Conj(TYe(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vd*AbsSqr(Ye(gO2,gO2))*Conj(ZE(gI1,gO2))*Conj(ZH(gI2,0)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSeconjUSeconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1613;
   std::complex<double> tmp_1615;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1615 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1613 += tmp_1615;
   std::complex<double> tmp_1614;
   std::complex<double> tmp_1616;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1616 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1614 += tmp_1616;
   result += (0.15*Sqr(g1)) * tmp_1613 * tmp_1614;
   std::complex<double> tmp_1617;
   std::complex<double> tmp_1619;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1619 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1617 += tmp_1619;
   std::complex<double> tmp_1618;
   std::complex<double> tmp_1620;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1620 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_1618 += tmp_1620;
   result += (0.0375*Sqr(g1p)) * tmp_1617 * tmp_1618;
   std::complex<double> tmp_1621;
   std::complex<double> tmp_1623;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1623 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1621 += tmp_1623;
   std::complex<double> tmp_1622;
   std::complex<double> tmp_1624;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1624 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1622 += tmp_1624;
   result += (-0.15*Sqr(g1)) * tmp_1621 * tmp_1622;
   std::complex<double> tmp_1625;
   std::complex<double> tmp_1627;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1627 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1625 += tmp_1627;
   std::complex<double> tmp_1626;
   std::complex<double> tmp_1628;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1628 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_1626 += tmp_1628;
   result += (0.025*Sqr(g1p)) * tmp_1625 * tmp_1626;
   std::complex<double> tmp_1629;
   std::complex<double> tmp_1631;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1631 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1629 += tmp_1631;
   std::complex<double> tmp_1630;
   std::complex<double> tmp_1632;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1632 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1630 += tmp_1632;
   result += (0.15*Sqr(g1)) * tmp_1629 * tmp_1630;
   std::complex<double> tmp_1633;
   std::complex<double> tmp_1635;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1635 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_1633 += tmp_1635;
   std::complex<double> tmp_1634;
   std::complex<double> tmp_1636;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1636 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1634 += tmp_1636;
   result += (0.0375*Sqr(g1p)) * tmp_1633 * tmp_1634;
   std::complex<double> tmp_1637;
   std::complex<double> tmp_1639;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1639 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1637 += tmp_1639;
   std::complex<double> tmp_1638;
   std::complex<double> tmp_1640;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1640 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1638 += tmp_1640;
   result += (-0.15*Sqr(g1)) * tmp_1637 * tmp_1638;
   std::complex<double> tmp_1641;
   std::complex<double> tmp_1643;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1643 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_1641 += tmp_1643;
   std::complex<double> tmp_1642;
   std::complex<double> tmp_1644;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1644 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1642 += tmp_1644;
   result += (0.025*Sqr(g1p)) * tmp_1641 * tmp_1642;
   std::complex<double> tmp_1645;
   std::complex<double> tmp_1647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1647 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_1645 += tmp_1647;
   std::complex<double> tmp_1646;
   std::complex<double> tmp_1648;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1648 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1646 += tmp_1648;
   result += (-0.0625*Sqr(g1p)) * tmp_1645 * tmp_1646;
   std::complex<double> tmp_1649;
   std::complex<double> tmp_1651;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1651 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1649 += tmp_1651;
   std::complex<double> tmp_1650;
   std::complex<double> tmp_1652;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1652 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_1650 += tmp_1652;
   result += (-0.0625*Sqr(g1p)) * tmp_1649 * tmp_1650;
   std::complex<double> tmp_1653;
   std::complex<double> tmp_1655;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1656;
      std::complex<double> tmp_1657;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1657 += KroneckerDelta(gO2,3 + j1)*hE(j1,j2);
      }
      tmp_1656 += tmp_1657;
      tmp_1655 += (Conj(UHI0(gI2,j2))) * tmp_1656;
   }
   tmp_1653 += tmp_1655;
   std::complex<double> tmp_1654;
   std::complex<double> tmp_1658;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_1659;
      std::complex<double> tmp_1660;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_1660 += Conj(hE(j3,j4))*KroneckerDelta(gO1,3 + j3);
      }
      tmp_1659 += tmp_1660;
      tmp_1658 += (UHI0(gI1,j4)) * tmp_1659;
   }
   tmp_1654 += tmp_1658;
   result += (-1) * tmp_1653 * tmp_1654;
   if (gO1 < 3) {
      std::complex<double> tmp_1661;
      std::complex<double> tmp_1662;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1662 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1661 += tmp_1662;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1661;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1663;
      std::complex<double> tmp_1664;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1664 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1663 += tmp_1664;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1663;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1665;
      std::complex<double> tmp_1666;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1666 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_1665 += tmp_1666;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1665;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1667;
      std::complex<double> tmp_1668;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1668 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1667 += tmp_1668;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1667;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1669;
      std::complex<double> tmp_1670;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1670 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1669 += tmp_1670;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1669;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1671;
      std::complex<double> tmp_1672;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1672 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_1671 += tmp_1672;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1671;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1673;
      std::complex<double> tmp_1674;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1674 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_1673 += tmp_1674;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1673;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1675;
      std::complex<double> tmp_1676;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1676 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1675 += tmp_1676;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1675;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1677;
      std::complex<double> tmp_1678;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1678 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1677 += tmp_1678;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1677;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1679;
      std::complex<double> tmp_1680;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1680 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_1679 += tmp_1680;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1679;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1681;
      std::complex<double> tmp_1682;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1682 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1681 += tmp_1682;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1681;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1683;
      std::complex<double> tmp_1684;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1684 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1683 += tmp_1684;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1683;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1685;
      std::complex<double> tmp_1686;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1686 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_1685 += tmp_1686;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_1685;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1687;
      std::complex<double> tmp_1688;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1688 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_1687 += tmp_1688;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1687;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1689;
      std::complex<double> tmp_1690;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_1691;
         std::complex<double> tmp_1692;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_1692 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
         }
         tmp_1691 += tmp_1692;
         tmp_1690 += (UHI0(gI1,2 + j2)) * tmp_1691;
      }
      tmp_1689 += tmp_1690;
      result += (-(Conj(Ye(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1689;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1693;
      std::complex<double> tmp_1694;
      for (unsigned j3 = 0; j3 < 2; ++j3) {
         std::complex<double> tmp_1695;
         std::complex<double> tmp_1696;
         for (unsigned j2 = 0; j2 < 3; ++j2) {
            tmp_1696 += Conj(fd(j2,j3))*UHI0(gI1,4 + j2);
         }
         tmp_1695 += tmp_1696;
         tmp_1694 += (Conj(UHI0(gI2,2 + j3))) * tmp_1695;
      }
      tmp_1693 += tmp_1694;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Ye(gO1,gO1))) * tmp_1693;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeconjSHI0SHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1697;
   std::complex<double> tmp_1698;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_1699;
      std::complex<double> tmp_1700;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_1701;
         std::complex<double> tmp_1702;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_1702 += Conj(fu(j3,j1))*hE(j2,j1);
         }
         tmp_1701 += tmp_1702;
         tmp_1700 += (KroneckerDelta(gO2,3 + j2)) * tmp_1701;
      }
      tmp_1699 += tmp_1700;
      tmp_1698 += (UHI0(gI1,4 + j3)) * tmp_1699;
   }
   tmp_1697 += tmp_1698;
   result += (-0.7071067811865475*vu*Conj(UHpp(gI2,0))) * tmp_1697;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSeChiIChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeChiIChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   std::complex<double> tmp_1703;
   std::complex<double> tmp_1704;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_1705;
      std::complex<double> tmp_1706;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1706 += KroneckerDelta(gO1,3 + j1)*hE(j1,j2);
      }
      tmp_1705 += tmp_1706;
      tmp_1704 += (Conj(ZNI(gI1,j2))) * tmp_1705;
   }
   tmp_1703 += tmp_1704;
   result += (-1) * tmp_1703;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeVWmSv(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7071067811865475*g2*Conj(ZV(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeVPSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1707;
   std::complex<double> tmp_1708;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1708 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1707 += tmp_1708;
   result += (-0.7745966692414834*g1*Cos(ThetaW())) * tmp_1707;
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaW());
   }
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeVZSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1709;
   std::complex<double> tmp_1710;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1710 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1709 += tmp_1710;
   result += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_1709;
   std::complex<double> tmp_1711;
   std::complex<double> tmp_1712;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1712 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1711 += tmp_1712;
   result += (-0.15811388300841897*g1p*Sin(ThetaWp())) * tmp_1711;
   if (gO2 < 3) {
      result += -0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZE(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSeVZpSe(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1713;
   std::complex<double> tmp_1714;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1714 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1713 += tmp_1714;
   result += (-0.15811388300841897*g1p*Cos(ThetaWp())) * tmp_1713;
   std::complex<double> tmp_1715;
   std::complex<double> tmp_1716;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1716 += Conj(ZE(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1715 += tmp_1716;
   result += (-0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_1715;
   if (gO2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZE(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += 0.5*g2*Conj(ZE(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZE(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1717;
   std::complex<double> tmp_1718;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1718 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1717 += tmp_1718;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())
      )) * tmp_1717;
   std::complex<double> tmp_1719;
   std::complex<double> tmp_1720;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1720 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1719 += tmp_1720;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1719;
   std::complex<double> tmp_1721;
   std::complex<double> tmp_1722;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1722 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1721 += tmp_1722;
   result += (0.45*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_1721;
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(
         ThetaWp()))*Sqr(Sin(ThetaW()));
   }
   if (gO1 < 3) {
      result += -0.32659863237109044*g1*g1p*Cos(ThetaWp())*KroneckerDelta(
         gO1,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1723;
   std::complex<double> tmp_1724;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1724 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1723 += tmp_1724;
   result += (0.45*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_1723;
   std::complex<double> tmp_1725;
   std::complex<double> tmp_1726;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1726 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1725 += tmp_1726;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_1725;
   std::complex<double> tmp_1727;
   std::complex<double> tmp_1728;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1728 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1727 += tmp_1728;
   result += (0.13333333333333333*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())
      )) * tmp_1727;
   if (gO1 < 3) {
      result += 0.2*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 3) {
      result += 0.32659863237109044*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 3) {
      result += 0.13333333333333333*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(
         ThetaW()))*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1729;
   std::complex<double> tmp_1730;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1730 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1729 += tmp_1730;
   result += (0.1*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_1729;
   std::complex<double> tmp_1731;
   std::complex<double> tmp_1732;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1732 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1731 += tmp_1732;
   result += (-0.225*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_1731;
   if (gO1 < 3) {
      result += -0.1*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         0);
   }
   if (gO1 < 3) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   std::complex<double> tmp_1733;
   std::complex<double> tmp_1734;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1734 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1733 += tmp_1734;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_1733;
   std::complex<double> tmp_1735;
   std::complex<double> tmp_1736;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1736 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1735 += tmp_1736;
   result += (-0.15*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_1735;
   if (gO1 < 3) {
      result += 0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,1
         );
   }
   if (gO1 < 3) {
      result += -0.1*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(gI1
         ,1);
   }
   if (gO2 < 3) {
      result += -(Conj(ZP(gI2,0))*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3
         + gO2)*Lambdax*ZP(gI1,1));
   }
   if (gO1 < 3) {
      result += -(Conj(Lambdax)*Conj(ZP(gI2,1))*KroneckerDelta(3 + gO1,gO2)*
         ZP(gI1,0)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1737;
   std::complex<double> tmp_1738;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1738 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1737 += tmp_1738;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_1737;
   std::complex<double> tmp_1739;
   std::complex<double> tmp_1740;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1740 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1739 += tmp_1740;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_1739;
   std::complex<double> tmp_1741;
   std::complex<double> tmp_1742;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_1743;
      std::complex<double> tmp_1744;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_1745;
         std::complex<double> tmp_1746;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_1746 += Conj(gD(j1,j3))*gD(j1,j2);
         }
         tmp_1745 += tmp_1746;
         tmp_1744 += (KroneckerDelta(gO2,3 + j2)) * tmp_1745;
      }
      tmp_1743 += tmp_1744;
      tmp_1742 += (KroneckerDelta(gO1,3 + j3)) * tmp_1743;
   }
   tmp_1741 += tmp_1742;
   result += (-(Conj(UHp0(gI2,0))*UHp0(gI1,0))) * tmp_1741;
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0(
         gI1,0);
   }
   std::complex<double> tmp_1747;
   std::complex<double> tmp_1748;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1748 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1747 += tmp_1748;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_1747;
   std::complex<double> tmp_1749;
   std::complex<double> tmp_1750;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1750 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1749 += tmp_1750;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_1749;
   if (gO1 < 3) {
      result += 0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1751;
   std::complex<double> tmp_1752;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1752 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1751 += tmp_1752;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_1751;
   std::complex<double> tmp_1753;
   std::complex<double> tmp_1754;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1754 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1753 += tmp_1754;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_1753;
   std::complex<double> tmp_1755;
   std::complex<double> tmp_1756;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_1757;
      std::complex<double> tmp_1758;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_1759;
         std::complex<double> tmp_1760;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_1760 += Conj(gD(j1,j3))*gD(j1,j2);
         }
         tmp_1759 += tmp_1760;
         tmp_1758 += (KroneckerDelta(gO2,3 + j2)) * tmp_1759;
      }
      tmp_1757 += tmp_1758;
      tmp_1756 += (KroneckerDelta(gO1,3 + j3)) * tmp_1757;
   }
   tmp_1755 += tmp_1756;
   result += (-(Conj(UHpp(gI2,0))*UHpp(gI1,0))) * tmp_1755;
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,0);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp(
         gI1,0);
   }
   std::complex<double> tmp_1761;
   std::complex<double> tmp_1762;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1762 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1761 += tmp_1762;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_1761;
   std::complex<double> tmp_1763;
   std::complex<double> tmp_1764;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1764 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1763 += tmp_1764;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_1763;
   if (gO1 < 3) {
      result += 0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXSHp0Sd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1765;
   std::complex<double> tmp_1766;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1767;
      std::complex<double> tmp_1768;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1768 += Conj(ZD(gI2,j1))*gD(j1,j2);
      }
      tmp_1767 += tmp_1768;
      tmp_1766 += (KroneckerDelta(gO2,3 + j2)) * tmp_1767;
   }
   tmp_1765 += tmp_1766;
   result += (-(Conj(MuPr)*Conj(UHp0(gI1,1)))) * tmp_1765;
   std::complex<double> tmp_1769;
   std::complex<double> tmp_1770;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1771;
      std::complex<double> tmp_1772;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1772 += Conj(ZD(gI2,j1))*gD(j1,j2);
      }
      tmp_1771 += tmp_1772;
      tmp_1770 += (KroneckerDelta(gO2,3 + j2)) * tmp_1771;
   }
   tmp_1769 += tmp_1770;
   result += (0.7071067811865475*vphi*Conj(SigmaL)*Conj(UHp0(gI1,1))) *
      tmp_1769;
   std::complex<double> tmp_1773;
   std::complex<double> tmp_1774;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1775;
      std::complex<double> tmp_1776;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1776 += KroneckerDelta(gO2,3 + j1)*gD(j2,j1);
      }
      tmp_1775 += tmp_1776;
      tmp_1774 += (Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))) * tmp_1775;
   }
   tmp_1773 += tmp_1774;
   result += (0.7071067811865475*vd*Conj(UHp0(gI1,0))) * tmp_1773;
   std::complex<double> tmp_1777;
   std::complex<double> tmp_1778;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1779;
      std::complex<double> tmp_1780;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1780 += Conj(ZD(gI2,j1))*TgD(j1,j2);
      }
      tmp_1779 += tmp_1780;
      tmp_1778 += (KroneckerDelta(gO2,3 + j2)) * tmp_1779;
   }
   tmp_1777 += tmp_1778;
   result += (Conj(UHp0(gI1,0))) * tmp_1777;
   if (gO2 < 3) {
      std::complex<double> tmp_1781;
      std::complex<double> tmp_1782;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1782 += Conj(ZD(gI2,j1))*gD(j1,gO2);
      }
      tmp_1781 += tmp_1782;
      result += (0.7071067811865475*vs*Conj(UHp0(gI1,0))*Conj(Kappa(gO2,gO2)
         )) * tmp_1781;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1783;
   std::complex<double> tmp_1784;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1784 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1783 += tmp_1784;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_1783;
   std::complex<double> tmp_1785;
   std::complex<double> tmp_1786;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1786 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1785 += tmp_1786;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_1785;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1)
         ;
   }
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p)
         ;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSDXFdChiPPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXFdChiPPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1787;
   std::complex<double> tmp_1788;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1789;
      std::complex<double> tmp_1790;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1790 += Conj(ZDL(gI1,j1))*gD(j1,j2);
      }
      tmp_1789 += tmp_1790;
      tmp_1788 += (KroneckerDelta(gO1,3 + j2)) * tmp_1789;
   }
   tmp_1787 += tmp_1788;
   result += (Conj(ZNp(gI2,0))) * tmp_1787;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXFDXChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1791;
   std::complex<double> tmp_1792;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1792 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1791 += tmp_1792;
   result += (-0.3651483716701107*g1*ZN(gI2,0)) * tmp_1791;
   if (gO2 < 3) {
      result += -(Conj(Kappa(gO2,gO2))*ZDXR(gI1,gO2)*ZN(gI2,4));
   }
   std::complex<double> tmp_1793;
   std::complex<double> tmp_1794;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1794 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI1,j1);
   }
   tmp_1793 += tmp_1794;
   result += (0.6708203932499369*g1p*ZN(gI2,7)) * tmp_1793;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXFDXChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1795;
   std::complex<double> tmp_1796;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1796 += Conj(ZDXL(gI1,j1))*KroneckerDelta(gO1,3 + j1)*Kappa(j1,j1)
         ;
   }
   tmp_1795 += tmp_1796;
   result += (-Conj(ZN(gI2,4))) * tmp_1795;
   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,0));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*g1p*Conj(ZDXL(gI1,gO1))*Conj(ZN(gI2,7));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSDXFuChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXFuChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   std::complex<double> tmp_1797;
   std::complex<double> tmp_1798;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1799;
      std::complex<double> tmp_1800;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1800 += Conj(ZUL(gI1,j1))*gD(j1,j2);
      }
      tmp_1799 += tmp_1800;
      tmp_1798 += (KroneckerDelta(gO1,3 + j2)) * tmp_1799;
   }
   tmp_1797 += tmp_1798;
   result += (-1) * tmp_1797;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1801;
   std::complex<double> tmp_1803;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1803 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1801 += tmp_1803;
   std::complex<double> tmp_1802;
   std::complex<double> tmp_1804;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1804 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_1802 += tmp_1804;
   result += (0.05*Sqr(g1)) * tmp_1801 * tmp_1802;
   std::complex<double> tmp_1805;
   std::complex<double> tmp_1807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1807 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1805 += tmp_1807;
   std::complex<double> tmp_1806;
   std::complex<double> tmp_1808;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1808 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_1806 += tmp_1808;
   result += (-0.1125*Sqr(g1p)) * tmp_1805 * tmp_1806;
   std::complex<double> tmp_1809;
   std::complex<double> tmp_1811;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1811 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1809 += tmp_1811;
   std::complex<double> tmp_1810;
   std::complex<double> tmp_1812;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1812 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_1810 += tmp_1812;
   result += (-0.05*Sqr(g1)) * tmp_1809 * tmp_1810;
   std::complex<double> tmp_1813;
   std::complex<double> tmp_1815;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1815 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1813 += tmp_1815;
   std::complex<double> tmp_1814;
   std::complex<double> tmp_1816;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_1816 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_1814 += tmp_1816;
   result += (-0.075*Sqr(g1p)) * tmp_1813 * tmp_1814;
   std::complex<double> tmp_1817;
   std::complex<double> tmp_1819;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1819 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_1817 += tmp_1819;
   std::complex<double> tmp_1818;
   std::complex<double> tmp_1820;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1820 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1818 += tmp_1820;
   result += (0.05*Sqr(g1)) * tmp_1817 * tmp_1818;
   std::complex<double> tmp_1821;
   std::complex<double> tmp_1823;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1823 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_1821 += tmp_1823;
   std::complex<double> tmp_1822;
   std::complex<double> tmp_1824;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1824 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1822 += tmp_1824;
   result += (-0.1125*Sqr(g1p)) * tmp_1821 * tmp_1822;
   std::complex<double> tmp_1825;
   std::complex<double> tmp_1827;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1827 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_1825 += tmp_1827;
   std::complex<double> tmp_1826;
   std::complex<double> tmp_1828;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1828 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1826 += tmp_1828;
   result += (-0.05*Sqr(g1)) * tmp_1825 * tmp_1826;
   std::complex<double> tmp_1829;
   std::complex<double> tmp_1831;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_1831 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_1829 += tmp_1831;
   std::complex<double> tmp_1830;
   std::complex<double> tmp_1832;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1832 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1830 += tmp_1832;
   result += (-0.075*Sqr(g1p)) * tmp_1829 * tmp_1830;
   if (gO1 < 3) {
      std::complex<double> tmp_1833;
      std::complex<double> tmp_1834;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1834 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_1833 += tmp_1834;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1833;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1835;
      std::complex<double> tmp_1836;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1836 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_1835 += tmp_1836;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1835;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1837;
      std::complex<double> tmp_1838;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1838 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_1837 += tmp_1838;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1837;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1839;
      std::complex<double> tmp_1840;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1840 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_1839 += tmp_1840;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1839;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1841;
      std::complex<double> tmp_1842;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1842 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_1841 += tmp_1842;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1841;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1843;
      std::complex<double> tmp_1844;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1844 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_1843 += tmp_1844;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1843;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1845;
      std::complex<double> tmp_1846;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1846 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_1845 += tmp_1846;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1845;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1847;
      std::complex<double> tmp_1848;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1848 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_1847 += tmp_1848;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1847;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_1849;
      std::complex<double> tmp_1850;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_1850 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1
            );
      }
      tmp_1849 += tmp_1850;
      result += (-(Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2))) *
         tmp_1849;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1851;
      std::complex<double> tmp_1852;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_1852 += Conj(UHIPM(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIPM(
            gI1,j2);
      }
      tmp_1851 += tmp_1852;
      result += (-(KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1))) * tmp_1851;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1853;
   std::complex<double> tmp_1854;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1854 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1853 += tmp_1854;
   result += (0.1*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1853;
   std::complex<double> tmp_1855;
   std::complex<double> tmp_1856;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1856 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1855 += tmp_1856;
   result += (-0.225*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_1855;
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_1857;
   std::complex<double> tmp_1858;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1858 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1857 += tmp_1858;
   result += (-0.1*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1857;
   std::complex<double> tmp_1859;
   std::complex<double> tmp_1860;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1860 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1859 += tmp_1860;
   result += (-0.15*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_1859;
   if (gO1 < 3) {
      result += 0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.1*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_1861;
   std::complex<double> tmp_1862;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1862 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1861 += tmp_1862;
   result += (0.075*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_1861;
   std::complex<double> tmp_1863;
   std::complex<double> tmp_1864;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1864 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1863 += tmp_1864;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_1863;
   if (gO1 < 3) {
      result += 0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)
         ;
   }
   std::complex<double> tmp_1865;
   std::complex<double> tmp_1866;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1866 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1865 += tmp_1866;
   result += (-0.075*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_1865;
   if (gO1 < 3) {
      result += -0.05*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3
         );
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Sigmax
         *ZA(gI1,4)*ZA(gI2,3);
   }
   if (gO2 < 3) {
      result += -0.5*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)*Sigmax
         *ZA(gI1,3)*ZA(gI2,4);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2)*
         ZA(gI2,2));
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,4)*ZA(
         gI2,3)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(3 + gO1,gO2)*ZA(gI1,3)*ZA(
         gI2,4)*Kappa(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1867;
   std::complex<double> tmp_1868;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1868 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1867 += tmp_1868;
   result += (0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_1867;
   std::complex<double> tmp_1869;
   std::complex<double> tmp_1870;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1870 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1869 += tmp_1870;
   result += (-0.225*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_1869;
   std::complex<double> tmp_1871;
   std::complex<double> tmp_1872;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1872 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1871 += tmp_1872;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_1871;
   std::complex<double> tmp_1873;
   std::complex<double> tmp_1874;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1874 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1873 += tmp_1874;
   result += (-0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_1873;
   std::complex<double> tmp_1875;
   std::complex<double> tmp_1876;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1876 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1875 += tmp_1876;
   result += (0.075*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_1875;
   std::complex<double> tmp_1877;
   std::complex<double> tmp_1878;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1878 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1877 += tmp_1878;
   result += (-0.075*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_1877;
   std::complex<double> tmp_1879;
   std::complex<double> tmp_1880;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1880 += AbsSqr(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*
         KroneckerDelta(gO2,3 + j2);
   }
   tmp_1879 += tmp_1880;
   result += (-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)))) * tmp_1879;
   if (gO1 < 3) {
      result += -0.1*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 3) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)*
         Sqr(g1);
   }
   if (gO1 < 3) {
      result += -0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1p);
   }
   if (gO1 < 3) {
      result += 0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 3) {
      result += -0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Sigmax;
   }
   if (gO2 < 3) {
      result += 0.5*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*Conj(Kappa(gO2,gO2))*
         KroneckerDelta(gO1,3 + gO2)*Sigmax;
   }
   if (gO1 < 3) {
      result += -(AbsSqr(Kappa(gO1,gO1))*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }
   if (gO1 < 3) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
         KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1881;
   std::complex<double> tmp_1883;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1883 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1881 += tmp_1883;
   std::complex<double> tmp_1882;
   std::complex<double> tmp_1884;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1884 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1882 += tmp_1884;
   result += (-0.05*Sqr(g1)) * tmp_1881 * tmp_1882;
   std::complex<double> tmp_1885;
   std::complex<double> tmp_1887;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1887 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_1885 += tmp_1887;
   std::complex<double> tmp_1886;
   std::complex<double> tmp_1888;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1888 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1886 += tmp_1888;
   result += (0.1125*Sqr(g1p)) * tmp_1885 * tmp_1886;
   std::complex<double> tmp_1889;
   std::complex<double> tmp_1891;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1891 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1889 += tmp_1891;
   std::complex<double> tmp_1890;
   std::complex<double> tmp_1892;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1892 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1890 += tmp_1892;
   result += (-0.1*Sqr(g1)) * tmp_1889 * tmp_1890;
   std::complex<double> tmp_1893;
   std::complex<double> tmp_1895;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1895 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_1893 += tmp_1895;
   std::complex<double> tmp_1894;
   std::complex<double> tmp_1896;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1896 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1894 += tmp_1896;
   result += (0.225*Sqr(g1p)) * tmp_1893 * tmp_1894;
   std::complex<double> tmp_1897;
   std::complex<double> tmp_1899;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1899 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1897 += tmp_1899;
   std::complex<double> tmp_1898;
   std::complex<double> tmp_1900;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1900 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1898 += tmp_1900;
   result += (-0.05*Sqr(g1)) * tmp_1897 * tmp_1898;
   std::complex<double> tmp_1901;
   std::complex<double> tmp_1903;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1903 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1901 += tmp_1903;
   std::complex<double> tmp_1902;
   std::complex<double> tmp_1904;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1904 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_1902 += tmp_1904;
   result += (0.1125*Sqr(g1p)) * tmp_1901 * tmp_1902;
   std::complex<double> tmp_1905;
   std::complex<double> tmp_1907;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1907 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1905 += tmp_1907;
   std::complex<double> tmp_1906;
   std::complex<double> tmp_1908;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1908 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1906 += tmp_1908;
   result += (-0.1*Sqr(g1)) * tmp_1905 * tmp_1906;
   std::complex<double> tmp_1909;
   std::complex<double> tmp_1911;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1911 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1909 += tmp_1911;
   std::complex<double> tmp_1910;
   std::complex<double> tmp_1912;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1912 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_1910 += tmp_1912;
   result += (0.225*Sqr(g1p)) * tmp_1909 * tmp_1910;
   std::complex<double> tmp_1913;
   std::complex<double> tmp_1915;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_1916;
      std::complex<double> tmp_1917;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1917 += Conj(ZD(gI2,j1))*gD(j1,j2);
      }
      tmp_1916 += tmp_1917;
      tmp_1915 += (KroneckerDelta(gO2,3 + j2)) * tmp_1916;
   }
   tmp_1913 += tmp_1915;
   std::complex<double> tmp_1914;
   std::complex<double> tmp_1918;
   for (unsigned j4 = 0; j4 < 3; ++j4) {
      std::complex<double> tmp_1919;
      std::complex<double> tmp_1920;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_1920 += Conj(gD(j3,j4))*ZD(gI1,j3);
      }
      tmp_1919 += tmp_1920;
      tmp_1918 += (KroneckerDelta(gO1,3 + j4)) * tmp_1919;
   }
   tmp_1914 += tmp_1918;
   result += (-1) * tmp_1913 * tmp_1914;
   if (gO1 < 3) {
      std::complex<double> tmp_1921;
      std::complex<double> tmp_1922;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1922 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1921 += tmp_1922;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1921;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1923;
      std::complex<double> tmp_1924;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1924 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_1923 += tmp_1924;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1923;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1925;
      std::complex<double> tmp_1926;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1926 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1925 += tmp_1926;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1925;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1927;
      std::complex<double> tmp_1928;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1928 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_1927 += tmp_1928;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1927;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1929;
      std::complex<double> tmp_1930;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1930 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1929 += tmp_1930;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1929;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1931;
      std::complex<double> tmp_1932;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1932 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_1931 += tmp_1932;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1931;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1933;
      std::complex<double> tmp_1934;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1934 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1933 += tmp_1934;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1933;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1935;
      std::complex<double> tmp_1936;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_1936 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_1935 += tmp_1936;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1935;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_1937;
   std::complex<double> tmp_1939;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1939 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1937 += tmp_1939;
   std::complex<double> tmp_1938;
   std::complex<double> tmp_1940;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1940 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1938 += tmp_1940;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1937 * tmp_1938;
   std::complex<double> tmp_1941;
   std::complex<double> tmp_1943;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1943 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1941 += tmp_1943;
   std::complex<double> tmp_1942;
   std::complex<double> tmp_1944;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1944 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1942 += tmp_1944;
   result += (-0.1125*Sqr(g1p)) * tmp_1941 * tmp_1942;
   std::complex<double> tmp_1945;
   std::complex<double> tmp_1947;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1947 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
   }
   tmp_1945 += tmp_1947;
   std::complex<double> tmp_1946;
   std::complex<double> tmp_1948;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1948 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1946 += tmp_1948;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1945 * tmp_1946;
   std::complex<double> tmp_1949;
   std::complex<double> tmp_1951;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1951 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1949 += tmp_1951;
   std::complex<double> tmp_1950;
   std::complex<double> tmp_1952;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1952 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1950 += tmp_1952;
   result += (0.1*Sqr(g1)) * tmp_1949 * tmp_1950;
   std::complex<double> tmp_1953;
   std::complex<double> tmp_1955;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1955 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_1953 += tmp_1955;
   std::complex<double> tmp_1954;
   std::complex<double> tmp_1956;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1956 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1954 += tmp_1956;
   result += (-0.225*Sqr(g1p)) * tmp_1953 * tmp_1954;
   std::complex<double> tmp_1957;
   std::complex<double> tmp_1959;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1959 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1957 += tmp_1959;
   std::complex<double> tmp_1958;
   std::complex<double> tmp_1960;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1960 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1958 += tmp_1960;
   result += (-0.1*Sqr(g1)) * tmp_1957 * tmp_1958;
   std::complex<double> tmp_1961;
   std::complex<double> tmp_1963;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1963 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_1961 += tmp_1963;
   std::complex<double> tmp_1962;
   std::complex<double> tmp_1964;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1964 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_1962 += tmp_1964;
   result += (-0.3375*Sqr(g1p)) * tmp_1961 * tmp_1962;
   std::complex<double> tmp_1965;
   std::complex<double> tmp_1967;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1967 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1965 += tmp_1967;
   std::complex<double> tmp_1966;
   std::complex<double> tmp_1968;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1968 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1966 += tmp_1968;
   result += (0.1*Sqr(g1)) * tmp_1965 * tmp_1966;
   std::complex<double> tmp_1969;
   std::complex<double> tmp_1971;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1971 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1969 += tmp_1971;
   std::complex<double> tmp_1970;
   std::complex<double> tmp_1972;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1972 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_1970 += tmp_1972;
   result += (-0.225*Sqr(g1p)) * tmp_1969 * tmp_1970;
   std::complex<double> tmp_1973;
   std::complex<double> tmp_1975;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1975 += Conj(ZDX(gI2,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_1973 += tmp_1975;
   std::complex<double> tmp_1974;
   std::complex<double> tmp_1976;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1976 += Conj(Kappa(j2,j2))*KroneckerDelta(gO1,3 + j2)*ZDX(gI1,j2);
   }
   tmp_1974 += tmp_1976;
   result += (-1) * tmp_1973 * tmp_1974;
   std::complex<double> tmp_1977;
   std::complex<double> tmp_1979;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1979 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1977 += tmp_1979;
   std::complex<double> tmp_1978;
   std::complex<double> tmp_1980;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1980 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1978 += tmp_1980;
   result += (-0.1*Sqr(g1)) * tmp_1977 * tmp_1978;
   std::complex<double> tmp_1981;
   std::complex<double> tmp_1983;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1983 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1981 += tmp_1983;
   std::complex<double> tmp_1982;
   std::complex<double> tmp_1984;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1984 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_1982 += tmp_1984;
   result += (-0.3375*Sqr(g1p)) * tmp_1981 * tmp_1982;
   std::complex<double> tmp_1985;
   std::complex<double> tmp_1987;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1987 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1985 += tmp_1987;
   std::complex<double> tmp_1986;
   std::complex<double> tmp_1988;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1988 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1986 += tmp_1988;
   result += (-0.03333333333333333*Sqr(g1)) * tmp_1985 * tmp_1986;
   std::complex<double> tmp_1989;
   std::complex<double> tmp_1991;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1991 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1989 += tmp_1991;
   std::complex<double> tmp_1990;
   std::complex<double> tmp_1992;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1992 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1990 += tmp_1992;
   result += (-0.1125*Sqr(g1p)) * tmp_1989 * tmp_1990;
   std::complex<double> tmp_1993;
   std::complex<double> tmp_1995;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_1995 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_1993 += tmp_1995;
   std::complex<double> tmp_1994;
   std::complex<double> tmp_1996;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_1996 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
   }
   tmp_1994 += tmp_1996;
   result += (-0.6666666666666666*Sqr(g3)) * tmp_1993 * tmp_1994;
   if (gO1 < 3) {
      std::complex<double> tmp_1997;
      std::complex<double> tmp_1998;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_1998 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1997 += tmp_1998;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_1997;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_1999;
      std::complex<double> tmp_2000;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2000 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_1999 += tmp_2000;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_1999;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2001;
      std::complex<double> tmp_2002;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2002 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_2001 += tmp_2002;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2001;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2003;
      std::complex<double> tmp_2004;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2004 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_2003 += tmp_2004;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2003;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2005;
      std::complex<double> tmp_2006;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2006 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_2005 += tmp_2006;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2005;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2007;
      std::complex<double> tmp_2008;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2008 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_2007 += tmp_2008;
      result += (-0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2007;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2009;
      std::complex<double> tmp_2010;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2010 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_2009 += tmp_2010;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2009;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2011;
      std::complex<double> tmp_2012;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2012 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_2011 += tmp_2012;
      result += (-0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2011;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2013;
      std::complex<double> tmp_2014;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2014 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_2013 += tmp_2014;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_2013;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2015;
      std::complex<double> tmp_2016;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2016 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_2015 += tmp_2016;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(g1p)) * tmp_2015;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2017;
      std::complex<double> tmp_2018;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2018 += KroneckerDelta(gO1,3 + j1)*ZDX(gI1,3 + j1);
      }
      tmp_2017 += tmp_2018;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_2017;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2019;
      std::complex<double> tmp_2020;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2020 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_2019 += tmp_2020;
      result += (-3*Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_2019;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2021;
      std::complex<double> tmp_2022;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2022 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_2021 += tmp_2022;
      result += (0.03333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g1)) * tmp_2021;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2023;
      std::complex<double> tmp_2024;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2024 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_2023 += tmp_2024;
      result += (-0.075*Conj(ZDX(gI2,gO2))*Sqr(g1p)) * tmp_2023;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2025;
      std::complex<double> tmp_2026;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2026 += KroneckerDelta(gO1,3 + j2)*ZDX(gI1,3 + j2);
      }
      tmp_2025 += tmp_2026;
      result += (0.6666666666666666*Conj(ZDX(gI2,gO2))*Sqr(g3)) * tmp_2025;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2027;
      std::complex<double> tmp_2028;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2028 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_2027 += tmp_2028;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_2027;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2029;
      std::complex<double> tmp_2030;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2030 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_2029 += tmp_2030;
      result += (-0.075*Sqr(g1p)*ZDX(gI1,gO1)) * tmp_2029;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2031;
      std::complex<double> tmp_2032;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2032 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
      }
      tmp_2031 += tmp_2032;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_2031;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2033;
      std::complex<double> tmp_2034;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2034 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_2033 += tmp_2034;
      result += (0.03333333333333333*Sqr(g1)*ZDX(gI1,gO1)) * tmp_2033;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2035;
      std::complex<double> tmp_2036;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2036 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_2035 += tmp_2036;
      result += (-0.075*Sqr(g1p)*ZDX(gI1,gO1)) * tmp_2035;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2037;
      std::complex<double> tmp_2038;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2038 += Conj(ZDX(gI2,3 + j2))*KroneckerDelta(gO2,3 + j2);
      }
      tmp_2037 += tmp_2038;
      result += (0.6666666666666666*Sqr(g3)*ZDX(gI1,gO1)) * tmp_2037;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.06666666666666667*Conj(ZDX(gI2,gO2))*Sqr(g1)*ZDX(gI1,gO1)
         ;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -0.1*Conj(ZDX(gI2,gO2))*Sqr(g1p)*ZDX(gI1,gO1);
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -1.3333333333333333*Conj(ZDX(gI2,gO2))*Sqr(g3)*ZDX(gI1,gO1);
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2039;
      std::complex<double> tmp_2040;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2040 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_2039 += tmp_2040;
      result += (-3*KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1)) * tmp_2039;
   }
   if (gO1 < 3 && gO2 < 3) {
      result += -(Conj(ZDX(gI2,3 + gO2))*Conj(Kappa(gO2,gO2))*ZDX(gI1,3 +
         gO1)*Kappa(gO1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2041;
   std::complex<double> tmp_2043;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2043 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2041 += tmp_2043;
   std::complex<double> tmp_2042;
   std::complex<double> tmp_2044;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2044 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2042 += tmp_2044;
   result += (0.05*Sqr(g1)) * tmp_2041 * tmp_2042;
   std::complex<double> tmp_2045;
   std::complex<double> tmp_2047;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2047 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2045 += tmp_2047;
   std::complex<double> tmp_2046;
   std::complex<double> tmp_2048;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2048 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2046 += tmp_2048;
   result += (0.075*Sqr(g1p)) * tmp_2045 * tmp_2046;
   std::complex<double> tmp_2049;
   std::complex<double> tmp_2051;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2051 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2049 += tmp_2051;
   std::complex<double> tmp_2050;
   std::complex<double> tmp_2052;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2052 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2050 += tmp_2052;
   result += (-0.1*Sqr(g1)) * tmp_2049 * tmp_2050;
   std::complex<double> tmp_2053;
   std::complex<double> tmp_2055;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2055 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2053 += tmp_2055;
   std::complex<double> tmp_2054;
   std::complex<double> tmp_2056;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2056 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2054 += tmp_2056;
   result += (0.0375*Sqr(g1p)) * tmp_2053 * tmp_2054;
   std::complex<double> tmp_2057;
   std::complex<double> tmp_2059;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2059 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2057 += tmp_2059;
   std::complex<double> tmp_2058;
   std::complex<double> tmp_2060;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2060 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2058 += tmp_2060;
   result += (0.05*Sqr(g1)) * tmp_2057 * tmp_2058;
   std::complex<double> tmp_2061;
   std::complex<double> tmp_2063;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2063 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2061 += tmp_2063;
   std::complex<double> tmp_2062;
   std::complex<double> tmp_2064;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2064 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2062 += tmp_2064;
   result += (0.075*Sqr(g1p)) * tmp_2061 * tmp_2062;
   std::complex<double> tmp_2065;
   std::complex<double> tmp_2067;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2067 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2065 += tmp_2067;
   std::complex<double> tmp_2066;
   std::complex<double> tmp_2068;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2068 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2066 += tmp_2068;
   result += (-0.1*Sqr(g1)) * tmp_2065 * tmp_2066;
   std::complex<double> tmp_2069;
   std::complex<double> tmp_2071;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2071 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2069 += tmp_2071;
   std::complex<double> tmp_2070;
   std::complex<double> tmp_2072;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2072 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2070 += tmp_2072;
   result += (0.0375*Sqr(g1p)) * tmp_2069 * tmp_2070;
   if (gO1 < 3) {
      std::complex<double> tmp_2073;
      std::complex<double> tmp_2074;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2074 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_2073 += tmp_2074;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2073;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2075;
      std::complex<double> tmp_2076;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2076 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_2075 += tmp_2076;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2075;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2077;
      std::complex<double> tmp_2078;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2078 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_2077 += tmp_2078;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2077;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2079;
      std::complex<double> tmp_2080;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2080 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_2079 += tmp_2080;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2079;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2081;
      std::complex<double> tmp_2082;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2082 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_2081 += tmp_2082;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2081;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2083;
      std::complex<double> tmp_2084;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2084 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_2083 += tmp_2084;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2083;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2085;
      std::complex<double> tmp_2086;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2086 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_2085 += tmp_2086;
      result += (0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2085;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2087;
      std::complex<double> tmp_2088;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2088 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_2087 += tmp_2088;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2087;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2089;
   std::complex<double> tmp_2091;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2091 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2089 += tmp_2091;
   std::complex<double> tmp_2090;
   std::complex<double> tmp_2092;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2092 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2090 += tmp_2092;
   result += (-0.05*Sqr(g1)) * tmp_2089 * tmp_2090;
   std::complex<double> tmp_2093;
   std::complex<double> tmp_2095;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2095 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2093 += tmp_2095;
   std::complex<double> tmp_2094;
   std::complex<double> tmp_2096;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2096 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2094 += tmp_2096;
   result += (0.1125*Sqr(g1p)) * tmp_2093 * tmp_2094;
   std::complex<double> tmp_2097;
   std::complex<double> tmp_2099;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2099 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2097 += tmp_2099;
   std::complex<double> tmp_2098;
   std::complex<double> tmp_2100;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2100 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2098 += tmp_2100;
   result += (0.2*Sqr(g1)) * tmp_2097 * tmp_2098;
   std::complex<double> tmp_2101;
   std::complex<double> tmp_2103;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2103 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2101 += tmp_2103;
   std::complex<double> tmp_2102;
   std::complex<double> tmp_2104;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2104 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2102 += tmp_2104;
   result += (0.1125*Sqr(g1p)) * tmp_2101 * tmp_2102;
   std::complex<double> tmp_2105;
   std::complex<double> tmp_2107;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2107 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2105 += tmp_2107;
   std::complex<double> tmp_2106;
   std::complex<double> tmp_2108;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2108 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2106 += tmp_2108;
   result += (-0.05*Sqr(g1)) * tmp_2105 * tmp_2106;
   std::complex<double> tmp_2109;
   std::complex<double> tmp_2111;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2111 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2109 += tmp_2111;
   std::complex<double> tmp_2110;
   std::complex<double> tmp_2112;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2112 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2110 += tmp_2112;
   result += (0.1125*Sqr(g1p)) * tmp_2109 * tmp_2110;
   std::complex<double> tmp_2113;
   std::complex<double> tmp_2115;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2115 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2113 += tmp_2115;
   std::complex<double> tmp_2114;
   std::complex<double> tmp_2116;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2116 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2114 += tmp_2116;
   result += (0.2*Sqr(g1)) * tmp_2113 * tmp_2114;
   std::complex<double> tmp_2117;
   std::complex<double> tmp_2119;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2119 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2117 += tmp_2119;
   std::complex<double> tmp_2118;
   std::complex<double> tmp_2120;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2120 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2118 += tmp_2120;
   result += (0.1125*Sqr(g1p)) * tmp_2117 * tmp_2118;
   std::complex<double> tmp_2121;
   std::complex<double> tmp_2123;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2124;
      std::complex<double> tmp_2125;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2125 += Conj(ZU(gI2,j1))*gD(j1,j2);
      }
      tmp_2124 += tmp_2125;
      tmp_2123 += (KroneckerDelta(gO2,3 + j2)) * tmp_2124;
   }
   tmp_2121 += tmp_2123;
   std::complex<double> tmp_2122;
   std::complex<double> tmp_2126;
   for (unsigned j4 = 0; j4 < 3; ++j4) {
      std::complex<double> tmp_2127;
      std::complex<double> tmp_2128;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_2128 += Conj(gD(j3,j4))*ZU(gI1,j3);
      }
      tmp_2127 += tmp_2128;
      tmp_2126 += (KroneckerDelta(gO1,3 + j4)) * tmp_2127;
   }
   tmp_2122 += tmp_2126;
   result += (-1) * tmp_2121 * tmp_2122;
   if (gO1 < 3) {
      std::complex<double> tmp_2129;
      std::complex<double> tmp_2130;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2130 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_2129 += tmp_2130;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2129;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2131;
      std::complex<double> tmp_2132;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2132 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_2131 += tmp_2132;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2131;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2133;
      std::complex<double> tmp_2134;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2134 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_2133 += tmp_2134;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2133;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2135;
      std::complex<double> tmp_2136;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2136 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_2135 += tmp_2136;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2135;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2137;
      std::complex<double> tmp_2138;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2138 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_2137 += tmp_2138;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2137;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2139;
      std::complex<double> tmp_2140;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2140 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_2139 += tmp_2140;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2139;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2141;
      std::complex<double> tmp_2142;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2142 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_2141 += tmp_2142;
      result += (-0.2*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2141;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2143;
      std::complex<double> tmp_2144;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2144 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_2143 += tmp_2144;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2143;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXSuSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2145;
   std::complex<double> tmp_2146;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2147;
      std::complex<double> tmp_2148;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2148 += Conj(ZU(gI1,j1))*gD(j1,j2);
      }
      tmp_2147 += tmp_2148;
      tmp_2146 += (KroneckerDelta(gO2,3 + j2)) * tmp_2147;
   }
   tmp_2145 += tmp_2146;
   result += (-(Conj(MuPr)*Conj(UHpp(gI2,1)))) * tmp_2145;
   std::complex<double> tmp_2149;
   std::complex<double> tmp_2150;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2151;
      std::complex<double> tmp_2152;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2152 += Conj(ZU(gI1,j1))*gD(j1,j2);
      }
      tmp_2151 += tmp_2152;
      tmp_2150 += (KroneckerDelta(gO2,3 + j2)) * tmp_2151;
   }
   tmp_2149 += tmp_2150;
   result += (0.7071067811865475*vphi*Conj(SigmaL)*Conj(UHpp(gI2,1))) *
      tmp_2149;
   std::complex<double> tmp_2153;
   std::complex<double> tmp_2154;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2155;
      std::complex<double> tmp_2156;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2156 += KroneckerDelta(gO2,3 + j1)*gD(j2,j1);
      }
      tmp_2155 += tmp_2156;
      tmp_2154 += (Conj(Yu(j2,j2))*Conj(ZU(gI1,3 + j2))) * tmp_2155;
   }
   tmp_2153 += tmp_2154;
   result += (-0.7071067811865475*vu*Conj(UHpp(gI2,0))) * tmp_2153;
   std::complex<double> tmp_2157;
   std::complex<double> tmp_2158;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2159;
      std::complex<double> tmp_2160;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2160 += Conj(ZU(gI1,j1))*TgD(j1,j2);
      }
      tmp_2159 += tmp_2160;
      tmp_2158 += (KroneckerDelta(gO2,3 + j2)) * tmp_2159;
   }
   tmp_2157 += tmp_2158;
   result += (-Conj(UHpp(gI2,0))) * tmp_2157;
   if (gO2 < 3) {
      std::complex<double> tmp_2161;
      std::complex<double> tmp_2162;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2162 += Conj(ZU(gI1,j1))*gD(j1,gO2);
      }
      tmp_2161 += tmp_2162;
      result += (-0.7071067811865475*vs*Conj(UHpp(gI2,0))*Conj(Kappa(gO2,gO2
         ))) * tmp_2161;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXSDXAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2163;
   std::complex<double> tmp_2164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2164 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2163 += tmp_2164;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_2163;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vu*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_2165;
   std::complex<double> tmp_2166;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2166 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2165 += tmp_2166;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_2165;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vd*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_2167;
   std::complex<double> tmp_2168;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2168 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_2167 += tmp_2168;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_2167;
   if (gO2 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZDX(gI1,3 +
         gO2))*Conj(TKappa(gO2,gO2))*ZA(gI2,2);
   }
   std::complex<double> tmp_2169;
   std::complex<double> tmp_2170;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2170 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2169 += tmp_2170;
   result += (std::complex<double>(0,-0.5)*vphi*Conj(Sigmax)*ZA(gI2,3)) *
      tmp_2169;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vphi*Conj(ZDX(gI1,3 + gO2))*Conj
         (Kappa(gO2,gO2))*Sigmax*ZA(gI2,3);
   }
   std::complex<double> tmp_2171;
   std::complex<double> tmp_2172;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2172 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2171 += tmp_2172;
   result += (std::complex<double>(0,-0.5)*vsb*Conj(Sigmax)*ZA(gI2,4)) *
      tmp_2171;
   if (gO2 < 3) {
      result += std::complex<double>(0,0.5)*vsb*Conj(ZDX(gI1,3 + gO2))*Conj(
         Kappa(gO2,gO2))*Sigmax*ZA(gI2,4);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXSDXhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2173;
   std::complex<double> tmp_2174;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2174 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2173 += tmp_2174;
   result += (0.1*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_2173;
   std::complex<double> tmp_2175;
   std::complex<double> tmp_2176;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2176 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2175 += tmp_2176;
   result += (-0.225*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_2175;
   std::complex<double> tmp_2177;
   std::complex<double> tmp_2178;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2178 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2177 += tmp_2178;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_2177;
   std::complex<double> tmp_2179;
   std::complex<double> tmp_2180;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2180 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2179 += tmp_2180;
   result += (-0.15*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_2179;
   std::complex<double> tmp_2181;
   std::complex<double> tmp_2182;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2182 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2181 += tmp_2182;
   result += (0.075*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_2181;
   std::complex<double> tmp_2183;
   std::complex<double> tmp_2184;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2184 += Conj(ZDX(gI1,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2183 += tmp_2184;
   result += (-0.075*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_2183;
   std::complex<double> tmp_2185;
   std::complex<double> tmp_2186;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2186 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2185 += tmp_2186;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_2185;
   std::complex<double> tmp_2187;
   std::complex<double> tmp_2188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2188 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2187 += tmp_2188;
   result += (0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_2187;
   std::complex<double> tmp_2189;
   std::complex<double> tmp_2190;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2190 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2189 += tmp_2190;
   result += (0.5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))) * tmp_2189;
   std::complex<double> tmp_2191;
   std::complex<double> tmp_2192;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2192 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*Kappa(j1,j1);
   }
   tmp_2191 += tmp_2192;
   result += (0.5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))) * tmp_2191;
   std::complex<double> tmp_2193;
   std::complex<double> tmp_2194;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2194 += Conj(ZDX(gI1,j1))*KroneckerDelta(gO2,3 + j1)*TKappa(j1,j1)
         ;
   }
   tmp_2193 += tmp_2194;
   result += (-0.7071067811865475*Conj(ZH(gI2,2))) * tmp_2193;
   std::complex<double> tmp_2195;
   std::complex<double> tmp_2196;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2196 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI1,3 + j2))*KroneckerDelta(
         gO2,3 + j2);
   }
   tmp_2195 += tmp_2196;
   result += (-(vs*Conj(ZH(gI2,2)))) * tmp_2195;
   if (gO2 < 3) {
      result += -0.1*vd*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += -0.15*vd*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.1*vu*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 3) {
      result += -0.1*vu*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.05*QS*vs*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += -0.05*QS*vsb*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 3) {
      result += 0.5*vu*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,0))*Conj(Kappa(gO2
         ,gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vd*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,1))*Conj(Kappa(gO2
         ,gO2))*Lambdax;
   }
   if (gO2 < 3) {
      result += 0.5*vphi*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,3))*Conj(Kappa(
         gO2,gO2))*Sigmax;
   }
   if (gO2 < 3) {
      result += 0.5*vsb*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,4))*Conj(Kappa(
         gO2,gO2))*Sigmax;
   }
   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDX(gI1,3 + gO2))*Conj(ZH(gI2,2))*
         Conj(TKappa(gO2,gO2));
   }
   if (gO2 < 3) {
      result += -(vs*AbsSqr(Kappa(gO2,gO2))*Conj(ZDX(gI1,gO2))*Conj(ZH(gI2,2
         )));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSDXconjUSDXconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2197;
   std::complex<double> tmp_2199;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2199 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2197 += tmp_2199;
   std::complex<double> tmp_2198;
   std::complex<double> tmp_2200;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2200 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2198 += tmp_2200;
   result += (0.05*Sqr(g1)) * tmp_2197 * tmp_2198;
   std::complex<double> tmp_2201;
   std::complex<double> tmp_2203;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2203 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2201 += tmp_2203;
   std::complex<double> tmp_2202;
   std::complex<double> tmp_2204;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2204 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2202 += tmp_2204;
   result += (-0.1125*Sqr(g1p)) * tmp_2201 * tmp_2202;
   std::complex<double> tmp_2205;
   std::complex<double> tmp_2207;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2207 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2205 += tmp_2207;
   std::complex<double> tmp_2206;
   std::complex<double> tmp_2208;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2208 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_2206 += tmp_2208;
   result += (-0.05*Sqr(g1)) * tmp_2205 * tmp_2206;
   std::complex<double> tmp_2209;
   std::complex<double> tmp_2211;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2211 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2209 += tmp_2211;
   std::complex<double> tmp_2210;
   std::complex<double> tmp_2212;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2212 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_2210 += tmp_2212;
   result += (-0.075*Sqr(g1p)) * tmp_2209 * tmp_2210;
   std::complex<double> tmp_2213;
   std::complex<double> tmp_2215;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2215 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2213 += tmp_2215;
   std::complex<double> tmp_2214;
   std::complex<double> tmp_2216;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2216 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2214 += tmp_2216;
   result += (0.05*Sqr(g1)) * tmp_2213 * tmp_2214;
   std::complex<double> tmp_2217;
   std::complex<double> tmp_2219;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2219 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2217 += tmp_2219;
   std::complex<double> tmp_2218;
   std::complex<double> tmp_2220;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2220 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2218 += tmp_2220;
   result += (-0.1125*Sqr(g1p)) * tmp_2217 * tmp_2218;
   std::complex<double> tmp_2221;
   std::complex<double> tmp_2223;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2223 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2221 += tmp_2223;
   std::complex<double> tmp_2222;
   std::complex<double> tmp_2224;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2224 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2222 += tmp_2224;
   result += (-0.05*Sqr(g1)) * tmp_2221 * tmp_2222;
   std::complex<double> tmp_2225;
   std::complex<double> tmp_2227;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2227 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2225 += tmp_2227;
   std::complex<double> tmp_2226;
   std::complex<double> tmp_2228;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2228 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2226 += tmp_2228;
   result += (-0.075*Sqr(g1p)) * tmp_2225 * tmp_2226;
   std::complex<double> tmp_2229;
   std::complex<double> tmp_2231;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2231 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2229 += tmp_2231;
   std::complex<double> tmp_2230;
   std::complex<double> tmp_2232;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2232 += KroneckerDelta(gO1,3 + j2)*KroneckerDelta(gO2,3 + j2);
   }
   tmp_2230 += tmp_2232;
   result += (0.1875*Sqr(g1p)) * tmp_2229 * tmp_2230;
   std::complex<double> tmp_2233;
   std::complex<double> tmp_2235;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2235 += KroneckerDelta(gO1,3 + j1)*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2233 += tmp_2235;
   std::complex<double> tmp_2234;
   std::complex<double> tmp_2236;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2236 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_2234 += tmp_2236;
   result += (0.1875*Sqr(g1p)) * tmp_2233 * tmp_2234;
   if (gO1 < 3) {
      std::complex<double> tmp_2237;
      std::complex<double> tmp_2238;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2238 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_2237 += tmp_2238;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2237;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2239;
      std::complex<double> tmp_2240;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2240 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_2239 += tmp_2240;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2239;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2241;
      std::complex<double> tmp_2242;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2242 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_2241 += tmp_2242;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2241;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2243;
      std::complex<double> tmp_2244;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2244 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_2243 += tmp_2244;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2243;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2245;
      std::complex<double> tmp_2246;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2246 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_2245 += tmp_2246;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2245;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2247;
      std::complex<double> tmp_2248;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_2248 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_2247 += tmp_2248;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2247;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2249;
      std::complex<double> tmp_2250;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_2250 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_2249 += tmp_2250;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2249;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2251;
      std::complex<double> tmp_2252;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_2252 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_2251 += tmp_2252;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_2251;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2253;
      std::complex<double> tmp_2254;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_2254 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_2253 += tmp_2254;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2253;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2255;
      std::complex<double> tmp_2256;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_2256 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_2255 += tmp_2256;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_2255;
   }
   if (gO2 < 3) {
      std::complex<double> tmp_2257;
      std::complex<double> tmp_2258;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2258 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_2257 += tmp_2258;
      result += (Conj(Kappa(gO2,gO2))*KroneckerDelta(gO1,3 + gO2)) *
         tmp_2257;
   }
   if (gO1 < 3) {
      std::complex<double> tmp_2259;
      std::complex<double> tmp_2260;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_2260 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_2259 += tmp_2260;
      result += (KroneckerDelta(3 + gO1,gO2)*Kappa(gO1,gO1)) * tmp_2259;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXGluFDXPR(unsigned gO2, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2261;
   std::complex<double> tmp_2262;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2262 += KroneckerDelta(gO2,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_2261 += tmp_2262;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_2261;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXGluFDXPL(unsigned gO1, unsigned , unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*PhaseGlu*Conj(ZDXL(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXVGSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += g3*Conj(ZDX(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXVPSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 6) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXVZSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2263;
   std::complex<double> tmp_2264;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2264 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2263 += tmp_2264;
   result += (0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_2263;
   std::complex<double> tmp_2265;
   std::complex<double> tmp_2266;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2266 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2265 += tmp_2266;
   result += (0.4743416490252569*g1p*Sin(ThetaWp())) * tmp_2265;
   if (gO2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Cos(ThetaWp())*Sin(
         ThetaW());
   }
   if (gO2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZDX(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSDXVZpSDX(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2267;
   std::complex<double> tmp_2268;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2268 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2267 += tmp_2268;
   result += (0.4743416490252569*g1p*Cos(ThetaWp())) * tmp_2267;
   std::complex<double> tmp_2269;
   std::complex<double> tmp_2270;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2270 += Conj(ZDX(gI2,3 + j1))*KroneckerDelta(gO2,3 + j1);
   }
   tmp_2269 += tmp_2270;
   result += (-0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_2269;
   if (gO2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZDX(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDX(gI2,gO2))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhVZVZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sqr(
      g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) + 2*vu*
      KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp
      ()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW
      ()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhVZpVZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sin(2
      *ThetaWp())*Sqr(g1p)*Sqr(QS) - vd*KroneckerDelta(0,gO2)*(-9*Sin(2*ThetaWp())
      *Sqr(g1p) + 20*Cos(ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*
      ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW
      ())*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(
      ThetaWp())) - 18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*
      KroneckerDelta(1,gO2)*(2*Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(
      g2)*Sqr(Cos(ThetaW())) + 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(
      ThetaWp())) - 3*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) -
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + 2*Cos(ThetaW())
      *(-7.745966692414834*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp())) - 3.1622776601683795*g1p*g2*
      Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhVZpVZp(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((vs*KroneckerDelta(2,gO2) + vsb*KroneckerDelta(3,gO2))*Sqr(
      g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*vu*KroneckerDelta(1,gO2)*(-2*Cos(
      ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) +
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(
      ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + vd*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjVWmVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = -0.25*(vd*KroneckerDelta(0,gO1) + vu*KroneckerDelta(1,gO1))*Sqr(g2)
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbargZgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*Sqr
      (g1p)*Sqr(QS)*Sqr(Sin(ThetaWp()))) - vd*KroneckerDelta(0,gO1)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) - 2*vu*
      KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp
      ()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW
      ()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))
      + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbargZpgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.0125*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*
      Sin(2*ThetaWp())*Sqr(g1p)*Sqr(QS)) + 2*vu*KroneckerDelta(1,gO1)*(
      -6.324555320336759*g1p*g2*Cos(ThetaW())*Cos(2*ThetaWp()) + 3.872983346207417
      *g1*g2*Sin(2*ThetaW())*Sin(2*ThetaWp()) - 2*Sin(2*ThetaWp())*Sqr(g1p) + 5*
      Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) - 4.898979485566356*g1*g1p*Sin(
      ThetaW())*Sqr(Cos(ThetaWp())) + 3*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())
      ) + 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) + vd*
      KroneckerDelta(0,gO1)*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos(ThetaWp())*Sin(
      ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*g1*g1p*Sin(ThetaW
      ())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(Sin(ThetaW())) -
      14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp())) + Cos(ThetaW())*
      (30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) - 18.973665961010276*g1p*g2*
      Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbargZpgZp(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*(-((vs*KroneckerDelta(2,gO1) + vsb*KroneckerDelta(3,gO1))*Sqr
      (g1p)*Sqr(QS)*Sqr(Cos(ThetaWp()))) - 2*vu*KroneckerDelta(1,gO1)*(-2*Cos(
      ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) +
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(
      ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) - vd*
      KroneckerDelta(0,gO1)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-14.696938456699067*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + Cos(ThetaW())*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*
      Sin(ThetaWp()) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp())))
      + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(
      ThetaWp()))) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*
      (7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())
      ) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      ))))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-2*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*
      Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(Conj(ZP(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZP(gI1,0) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*ZP(gI1,0) - 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4
      ,gO1)*Lambdax*ZP(gI1,1) - 20*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Lambdax*ZP(gI1,1) + KroneckerDelta(1,gO1)*(2*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,0) + 10*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZP(gI1,0) + 10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))
      *ZP(gI1,1)))) - 2*Conj(ZP(gI2,1))*(-10*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZP(gI1,0) - 10*Conj(Lambdax)*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 5*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + 20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZP(gI1,1) + 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1)*ZP(gI1,1) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p)*ZP(gI1,1) - QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,1) + QS*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) + 5*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g2)*ZP(gI1,1) +
      KroneckerDelta(0,gO2)*(5*KroneckerDelta(1,gO1)*(-2*AbsSqr(Lambdax) + Sqr(g2)
      )*ZP(gI1,0) + KroneckerDelta(0,gO1)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP
      (gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHp0(gI2,0))*(-20*AbsSqr(SigmaL)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*UHp0(gI1,0) - QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*UHp0(gI1,0) + QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*UHp0(gI1,0) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(
      g1) + 3*Sqr(g1p) - 5*Sqr(g2))*UHp0(gI1,0) + KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) + 10*
      Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*SigmaL*UHp0(gI1,1)
      + 10*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*SigmaL*UHp0(
      gI1,1) - 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*SigmaL
      *UHp0(gI1,1)) + Conj(UHp0(gI2,1))*((QS*(KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2) - KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) +
      5*Sqr(g2)))*UHp0(gI1,1) + 10*Conj(SigmaL)*(KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*UHp0(gI1,0) + KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*UHp0(gI1,0) - 2*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*(KappaPr*UHp0(gI1,0) + SigmaL*UHp0(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHpp(gI2,0))*(-20*AbsSqr(SigmaL)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*UHpp(gI1,0) - QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*UHpp(gI1,0) + QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*UHpp(gI1,0) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(
      g1) + 2*Sqr(g1p) - 5*Sqr(g2))*UHpp(gI1,0) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) - 10
      *Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*SigmaL*UHpp(gI1,1)
      - 10*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*SigmaL*UHpp(
      gI1,1) + 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*SigmaL
      *UHpp(gI1,1)) - Conj(UHpp(gI2,1))*((QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) -
      5*Sqr(g2)) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*
      Sqr(g1p) + 5*Sqr(g2)))*UHpp(gI1,1) + 10*Conj(SigmaL)*(KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*UHpp(gI1,0) + KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*UHpp(gI1,0) + 2*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*(-(KappaPr*UHpp(gI1,0)) + SigmaL*UHpp(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(Conj(ZP(gI2,0))*(40*vs*AbsSqr(Lambdax)*KroneckerDelta(2,
      gO2)*ZP(gI1,0) - 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*vsb
      *KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,0) - 20*vphi*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZP(gI1,1) - 20*vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax*ZP(gI1,1) + 28.284271247461902*KroneckerDelta(2,gO2)*
      TLambdax*ZP(gI1,1) + KroneckerDelta(1,gO2)*(2*vu*(-3*Sqr(g1) + 3*Sqr(g1p) +
      5*Sqr(g2))*ZP(gI1,0) + 10*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO2)*(vd*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))*ZP(gI1,0) +
      10*vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)))) - 2*Conj(ZP(gI2,1))*(
      14.142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2)*ZP(gI1,0) - 10*vphi*
      Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZP(gI1,0) - 10*vsb*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 20*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2)*ZP(gI1,1) - QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(
      gI1,1) + QS*vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) + KroneckerDelta(1,
      gO2)*(5*vd*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) + vu*(3*Sqr(g1) + 2*Sqr(
      g1p) + 5*Sqr(g2))*ZP(gI1,1)) + KroneckerDelta(0,gO2)*(5*vu*(-2*AbsSqr(
      Lambdax) + Sqr(g2))*ZP(gI1,0) + vd*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(
      gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSHp0SHp0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHp0(gI2,0))*(-20*vphi*AbsSqr(SigmaL)*KroneckerDelta(4,
      gO2)*UHp0(gI1,0) + 14.142135623730951*Conj(SigmaL)*KroneckerDelta(4,gO2)*
      MuPr*UHp0(gI1,0) + 14.142135623730951*Conj(MuPr)*KroneckerDelta(4,gO2)*
      SigmaL*UHp0(gI1,0) - QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*UHp0(gI1,0) + QS*
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*UHp0(gI1,0) + vd*KroneckerDelta(0,gO2)*(
      -3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))*UHp0(gI1,0) + vu*KroneckerDelta(1,gO2)*
      (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) + 10*vsb*Conj(Sigmax)*
      KroneckerDelta(2,gO2)*SigmaL*UHp0(gI1,1) + 10*vs*Conj(Sigmax)*KroneckerDelta
      (3,gO2)*SigmaL*UHp0(gI1,1) - 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4
      ,gO2)*SigmaL*UHp0(gI1,1) - 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*
      SigmaL*UHp0(gI1,1) - 14.142135623730951*KroneckerDelta(4,gO2)*TSigmaL*UHp0(
      gI1,1)) + Conj(UHp0(gI2,1))*(-14.142135623730951*Conj(TSigmaL)*
      KroneckerDelta(4,gO2)*UHp0(gI1,0) + (14.142135623730951*Conj(MuPr)*
      KroneckerDelta(4,gO2)*SigmaL + QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vsb
      *KroneckerDelta(3,gO2)*Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*
      Sqr(g1p) + 5*Sqr(g2)) - vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5
      *Sqr(g2)))*UHp0(gI1,1) + 10*Conj(SigmaL)*(vsb*KroneckerDelta(2,gO2)*Sigmax*
      UHp0(gI1,0) + vs*KroneckerDelta(3,gO2)*Sigmax*UHp0(gI1,0) - KroneckerDelta(4
      ,gO2)*((1.4142135623730951*MuPhi + 2*vphi*KappaPr)*UHp0(gI1,0) + (
      -1.4142135623730951*MuPr + 2*vphi*SigmaL)*UHp0(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSHppSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHpp(gI2,0))*(-20*vphi*AbsSqr(SigmaL)*KroneckerDelta(4,
      gO2)*UHpp(gI1,0) + 14.142135623730951*Conj(SigmaL)*KroneckerDelta(4,gO2)*
      MuPr*UHpp(gI1,0) + 14.142135623730951*Conj(MuPr)*KroneckerDelta(4,gO2)*
      SigmaL*UHpp(gI1,0) - QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*UHpp(gI1,0) + QS*
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*UHpp(gI1,0) + vu*KroneckerDelta(1,gO2)*(3
      *Sqr(g1) + 2*Sqr(g1p) - 5*Sqr(g2))*UHpp(gI1,0) + vd*KroneckerDelta(0,gO2)*(
      -3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) - 10*vsb*Conj(Sigmax)*
      KroneckerDelta(2,gO2)*SigmaL*UHpp(gI1,1) - 10*vs*Conj(Sigmax)*KroneckerDelta
      (3,gO2)*SigmaL*UHpp(gI1,1) + 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4
      ,gO2)*SigmaL*UHpp(gI1,1) + 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*
      SigmaL*UHpp(gI1,1) + 14.142135623730951*KroneckerDelta(4,gO2)*TSigmaL*UHpp(
      gI1,1)) + Conj(UHpp(gI2,1))*(14.142135623730951*Conj(TSigmaL)*KroneckerDelta
      (4,gO2)*UHpp(gI1,0) + (14.142135623730951*Conj(MuPr)*KroneckerDelta(4,gO2)*
      SigmaL + QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vsb*KroneckerDelta(3,gO2)
      *Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) +
      vu*KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2)))*UHpp(gI1,1)
      - 10*Conj(SigmaL)*(vsb*KroneckerDelta(2,gO2)*Sigmax*UHpp(gI1,0) + vs*
      KroneckerDelta(3,gO2)*Sigmax*UHpp(gI1,0) - KroneckerDelta(4,gO2)*((
      1.4142135623730951*MuPhi + 2*vphi*KappaPr)*UHpp(gI1,0) + (1.4142135623730951
      *MuPr - 2*vphi*SigmaL)*UHpp(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*KroneckerDelta(0,gO2)*UM(gI1,1)*UP(gI2,0) +
      (g2*KroneckerDelta(1,gO2)*UM(gI1,0) + Conj(Lambdax)*KroneckerDelta(2,gO2)*
      UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*Conj(UP(gI1,1))*
      KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*KroneckerDelta(0
      ,gO1) + Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarChaIChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2271;
   std::complex<double> tmp_2272;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2272 += Conj(Lambda12(j1,j1))*ZMI(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_2271 += tmp_2272;
   result += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2271;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarChaIChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2273;
   std::complex<double> tmp_2274;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2274 += Conj(ZMI(gI2,j1))*Conj(ZPI(gI1,j1))*Lambda12(j1,j1);
   }
   tmp_2273 += tmp_2274;
   result += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_2273;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiPChiPPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*Conj(SigmaL)*KroneckerDelta(4,gO2)*(ZNp(gI1,1)*
      ZNp(gI2,0) + ZNp(gI1,0)*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiPChiPPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(Conj(ZNp(gI1,1))*Conj(ZNp(gI2,0)) + Conj(ZNp(
      gI1,0))*Conj(ZNp(gI2,1)))*KroneckerDelta(4,gO1)*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p)
      - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSvSv(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(vs*KroneckerDelta(2,gO2)) + vsb
      *KroneckerDelta(3,gO2))*Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*
      Sqr(g1p) - 5*Sqr(g2)) + vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5
      *Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2275;
   std::complex<double> tmp_2276;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2276 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_2275 += tmp_2276;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2275;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2277;
   std::complex<double> tmp_2278;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2278 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_2277 += tmp_2278;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_2277;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2279;
   std::complex<double> tmp_2280;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2280 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_2279 += tmp_2280;
   result += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_2279;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2281;
   std::complex<double> tmp_2282;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2282 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_2281 += tmp_2282;
   result += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_2281;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2283;
   std::complex<double> tmp_2284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2284 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_2283 += tmp_2284;
   result += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_2283;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2285;
   std::complex<double> tmp_2286;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2286 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_2285 += tmp_2286;
   result += (-0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_2285;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2287;
   std::complex<double> tmp_2288;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2288 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_2287 += tmp_2288;
   result += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_2287;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2289;
   std::complex<double> tmp_2290;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2290 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_2289 += tmp_2290;
   result += (-0.7071067811865475*KroneckerDelta(1,gO1)) * tmp_2289;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2291;
   std::complex<double> tmp_2292;
   std::complex<double> tmp_2293;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2293 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2292 += tmp_2293;
   tmp_2291 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2292;
   std::complex<double> tmp_2294;
   std::complex<double> tmp_2295;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2295 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2294 += tmp_2295;
   tmp_2291 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2294;
   std::complex<double> tmp_2296;
   std::complex<double> tmp_2297;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2297 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2296 += tmp_2297;
   tmp_2291 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2296;
   std::complex<double> tmp_2298;
   std::complex<double> tmp_2299;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2299 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2298 += tmp_2299;
   tmp_2291 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2298;
   std::complex<double> tmp_2300;
   std::complex<double> tmp_2301;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2301 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2300 += tmp_2301;
   tmp_2291 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2300;
   std::complex<double> tmp_2302;
   std::complex<double> tmp_2303;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2303 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2302 += tmp_2303;
   tmp_2291 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2302;
   std::complex<double> tmp_2304;
   std::complex<double> tmp_2305;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2305 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2304 += tmp_2305;
   tmp_2291 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2304;
   std::complex<double> tmp_2306;
   std::complex<double> tmp_2307;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2307 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2306 += tmp_2307;
   tmp_2291 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2306;
   std::complex<double> tmp_2308;
   std::complex<double> tmp_2309;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2309 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2308 += tmp_2309;
   tmp_2291 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2308;
   std::complex<double> tmp_2310;
   std::complex<double> tmp_2311;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2311 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2310 += tmp_2311;
   tmp_2291 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2310;
   std::complex<double> tmp_2312;
   std::complex<double> tmp_2313;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2313 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2312 += tmp_2313;
   tmp_2291 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_2312;
   std::complex<double> tmp_2314;
   std::complex<double> tmp_2315;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2315 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2314 += tmp_2315;
   tmp_2291 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_2314;
   std::complex<double> tmp_2316;
   std::complex<double> tmp_2317;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2317 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2316 += tmp_2317;
   tmp_2291 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2316;
   std::complex<double> tmp_2318;
   std::complex<double> tmp_2319;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2319 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2318 += tmp_2319;
   tmp_2291 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2318;
   std::complex<double> tmp_2320;
   std::complex<double> tmp_2321;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2321 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2320 += tmp_2321;
   tmp_2291 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2320;
   std::complex<double> tmp_2322;
   std::complex<double> tmp_2323;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2323 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2322 += tmp_2323;
   tmp_2291 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2322;
   std::complex<double> tmp_2324;
   std::complex<double> tmp_2325;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2325 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2324 += tmp_2325;
   tmp_2291 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2324;
   std::complex<double> tmp_2326;
   std::complex<double> tmp_2327;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2327 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2326 += tmp_2327;
   tmp_2291 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2326;
   std::complex<double> tmp_2328;
   std::complex<double> tmp_2329;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2329 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2328 += tmp_2329;
   tmp_2291 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2328;
   std::complex<double> tmp_2330;
   std::complex<double> tmp_2331;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2331 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2330 += tmp_2331;
   tmp_2291 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2330;
   std::complex<double> tmp_2332;
   std::complex<double> tmp_2333;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2333 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2332 += tmp_2333;
   tmp_2291 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_2332;
   std::complex<double> tmp_2334;
   std::complex<double> tmp_2335;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2335 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2334 += tmp_2335;
   tmp_2291 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_2334;
   std::complex<double> tmp_2336;
   std::complex<double> tmp_2337;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2337 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2336 += tmp_2337;
   tmp_2291 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)) * tmp_2336;
   std::complex<double> tmp_2338;
   std::complex<double> tmp_2339;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2339 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2338 += tmp_2339;
   tmp_2291 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)) * tmp_2338;
   std::complex<double> tmp_2340;
   std::complex<double> tmp_2341;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2341 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_2340 += tmp_2341;
   tmp_2291 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2340;
   std::complex<double> tmp_2342;
   std::complex<double> tmp_2343;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2343 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,
         2 + j2);
   }
   tmp_2342 += tmp_2343;
   tmp_2291 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2342;
   result += (std::complex<double>(0,-1)) * tmp_2291;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSHIPMSHIPM(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2344;
   std::complex<double> tmp_2345;
   std::complex<double> tmp_2346;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2346 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2345 += tmp_2346;
   tmp_2344 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2345;
   std::complex<double> tmp_2347;
   std::complex<double> tmp_2348;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2348 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2347 += tmp_2348;
   tmp_2344 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(g1p
      )) * tmp_2347;
   std::complex<double> tmp_2349;
   std::complex<double> tmp_2350;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2350 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2349 += tmp_2350;
   tmp_2344 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2349;
   std::complex<double> tmp_2351;
   std::complex<double> tmp_2352;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2352 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2351 += tmp_2352;
   tmp_2344 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2351;
   std::complex<double> tmp_2353;
   std::complex<double> tmp_2354;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2354 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2353 += tmp_2354;
   tmp_2344 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1p)
      ) * tmp_2353;
   std::complex<double> tmp_2355;
   std::complex<double> tmp_2356;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2356 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2355 += tmp_2356;
   tmp_2344 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2355;
   std::complex<double> tmp_2357;
   std::complex<double> tmp_2358;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2358 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2357 += tmp_2358;
   tmp_2344 += (std::complex<double>(0,0.075)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2357;
   std::complex<double> tmp_2359;
   std::complex<double> tmp_2360;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2360 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_2359 += tmp_2360;
   tmp_2344 += (std::complex<double>(0,-0.075)*QS*vsb*KroneckerDelta(3,gO2)*Sqr
      (g1p)) * tmp_2359;
   std::complex<double> tmp_2361;
   std::complex<double> tmp_2362;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2362 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2361 += tmp_2362;
   tmp_2344 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2361;
   std::complex<double> tmp_2363;
   std::complex<double> tmp_2364;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2364 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2363 += tmp_2364;
   tmp_2344 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2363;
   std::complex<double> tmp_2365;
   std::complex<double> tmp_2366;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2366 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2365 += tmp_2366;
   tmp_2344 += (std::complex<double>(0,0.5)*vphi*KroneckerDelta(3,gO2)*Sigmax)
      * tmp_2365;
   std::complex<double> tmp_2367;
   std::complex<double> tmp_2368;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2368 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_2367 += tmp_2368;
   tmp_2344 += (std::complex<double>(0,0.5)*vsb*KroneckerDelta(4,gO2)*Sigmax) *
      tmp_2367;
   std::complex<double> tmp_2369;
   std::complex<double> tmp_2370;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2370 += Conj(UHIPM(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHIPM(gI1,
         j1);
   }
   tmp_2369 += tmp_2370;
   tmp_2344 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2369;
   std::complex<double> tmp_2371;
   std::complex<double> tmp_2372;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2372 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2371 += tmp_2372;
   tmp_2344 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2371;
   std::complex<double> tmp_2373;
   std::complex<double> tmp_2374;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2374 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2373 += tmp_2374;
   tmp_2344 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2373;
   std::complex<double> tmp_2375;
   std::complex<double> tmp_2376;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2376 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2375 += tmp_2376;
   tmp_2344 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2375;
   std::complex<double> tmp_2377;
   std::complex<double> tmp_2378;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2378 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2377 += tmp_2378;
   tmp_2344 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2377;
   std::complex<double> tmp_2379;
   std::complex<double> tmp_2380;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2380 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2379 += tmp_2380;
   tmp_2344 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2379;
   std::complex<double> tmp_2381;
   std::complex<double> tmp_2382;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2382 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2381 += tmp_2382;
   tmp_2344 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2381;
   std::complex<double> tmp_2383;
   std::complex<double> tmp_2384;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2384 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2383 += tmp_2384;
   tmp_2344 += (std::complex<double>(0,0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2383;
   std::complex<double> tmp_2385;
   std::complex<double> tmp_2386;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2386 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_2385 += tmp_2386;
   tmp_2344 += (std::complex<double>(0,-0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2385;
   std::complex<double> tmp_2387;
   std::complex<double> tmp_2388;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2388 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2387 += tmp_2388;
   tmp_2344 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2387;
   std::complex<double> tmp_2389;
   std::complex<double> tmp_2390;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2390 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2389 += tmp_2390;
   tmp_2344 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2389;
   std::complex<double> tmp_2391;
   std::complex<double> tmp_2392;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2392 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2391 += tmp_2392;
   tmp_2344 += (std::complex<double>(0,0.5)*vphi*Conj(Sigmax)*KroneckerDelta(3,
      gO2)) * tmp_2391;
   std::complex<double> tmp_2393;
   std::complex<double> tmp_2394;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2394 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2393 += tmp_2394;
   tmp_2344 += (std::complex<double>(0,0.5)*vsb*Conj(Sigmax)*KroneckerDelta(4,
      gO2)) * tmp_2393;
   std::complex<double> tmp_2395;
   std::complex<double> tmp_2396;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2396 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2395 += tmp_2396;
   tmp_2344 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2395;
   std::complex<double> tmp_2397;
   std::complex<double> tmp_2398;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2398 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_2397 += tmp_2398;
   tmp_2344 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2397
      ;
   std::complex<double> tmp_2399;
   std::complex<double> tmp_2400;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2400 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,
         2 + j2);
   }
   tmp_2399 += tmp_2400;
   tmp_2344 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2399
      ;
   result += (std::complex<double>(0,-1)) * tmp_2344;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*ZA(gI1,0)*ZA(gI2,0) + 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*
      Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) + 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*
      ZA(gI2,0) + 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,1)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,0) - 10*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,4)*
      ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,4)*ZA(gI2,0) + 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*
      ZA(gI2,1) + 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,0)*ZA(gI2,1) - 40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2*QS*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 10*Conj(Sigmax)*
      KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10
      *Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,1) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,1) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,2) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,2) -
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(
      gI2,2) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,2)*ZA(gI2,2) - 20*Conj(Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI1,3)*ZA(gI2,2) - 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*
      ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2) - 10*Conj(Sigmax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10
      *Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*
      ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax*ZA(gI1,1)*ZA(gI2,3) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*ZA(gI2,3) - 20*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,3) - 20
      *Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA
      (gI1,3)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4
      ,gO2)*ZA(gI1,3)*ZA(gI2,3) + KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(
      g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) + 20*Conj(Sigmax)*KroneckerDelta(2
      ,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,3) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*
      Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,1)*
      ZA(gI2,4) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,1)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20
      *Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,2)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,3)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2,4) - 80*AbsSqr(KappaPr)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 20*Conj(
      Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,4) - 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*KappaPr*ZA
      (gI1,4)*ZA(gI2,4) - 20*Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(3,
      gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,4) - 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) + 2*KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr
      (g2))*ZA(gI1,0)*ZA(gI2,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*
      ZA(gI2,1) - 20*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*
      ZA(gI2,2) - QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) - 5*(Conj(Sigmax)*Lambdax +
      Conj(Lambdax)*Sigmax)*(KroneckerDelta(4,gO2)*(ZA(gI1,3)*ZA(gI2,0) + ZA(gI1,0
      )*ZA(gI2,3)) + KroneckerDelta(3,gO2)*(ZA(gI1,4)*ZA(gI2,0) + ZA(gI1,0)*ZA(gI2
      ,4)) - KroneckerDelta(0,gO2)*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))) -
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p
      ) - 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2)
      - 3*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) +
      10*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(KroneckerDelta(4,gO2)*(ZA(
      gI1,3)*ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,3)) + KroneckerDelta(3,gO2)*(ZA(gI1,4)*
      ZA(gI2,1) + ZA(gI1,1)*ZA(gI2,4)) - KroneckerDelta(1,gO2)*(ZA(gI1,4)*ZA(gI2,3
      ) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 40*AbsSqr
      (Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr
      (Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta
      (3,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2
      ,gO2)*KroneckerDelta(3,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2) - 40*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta
      (4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(3
      ,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) - 40*AbsSqr(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2) - 40*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      3))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta
      (4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2) - 240*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,4))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) + 20*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(3,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta
      (4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta
      (4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,
      gO1)*KroneckerDelta(4,gO2)*KappaPr - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta
      (1,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta
      (3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO2)*KroneckerDelta(4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta
      (4,gO2)*Lambdax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,
      gO1)*KroneckerDelta(1,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,
      4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      2))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax + 3*QS*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p)
      - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1
      )*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) + 3*QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p) + 2*QS*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*
      Sqr(g1p) + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p) - 2*QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + 2*Conj(ZH(gI1,1))*(
      -20*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*KroneckerDelta(2,
      gO1) - 20*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2) - 5*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)
      *KroneckerDelta(3,gO1)*Lambdax - 5*Conj(Sigmax)*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Lambdax - 5*Conj(Sigmax)*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax - 5*Conj(Sigmax
      )*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Lambdax - 5*
      Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax - 5*Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*
      KroneckerDelta(3,gO2)*Sigmax - 5*Conj(Lambdax)*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 5*Conj(Lambdax)*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*Sigmax + QS*Conj(ZH(gI2
      ,2))*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p) + QS*Conj(ZH(gI2,2
      ))*KroneckerDelta(1,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*Conj(ZH(gI2,3))
      *KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p) - QS*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,0))*(-5*(
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2))*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) +
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1)
      - 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*(
      -20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))) + Conj(ZH(gI2,1))
      *(-20*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0
      ,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(
      g2)))) - Conj(ZH(gI1,0))*(40*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta(
      0,gO2)*KroneckerDelta(2,gO1) + 40*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2) + 10*Conj(Sigmax)*Conj(ZH(gI2,4)
      )*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Lambdax + 10*Conj(Sigmax)*Conj
      (ZH(gI2,4))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax + 10*Conj(
      Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax
      + 10*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2
      )*Lambdax + 10*Conj(Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Sigmax + 10*Conj(Lambdax)*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Sigmax + 10*Conj(Lambdax)*Conj(
      ZH(gI2,3))*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax + 10*Conj(
      Lambdax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2)*Sigmax
      - 3*QS*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p)
      - 3*QS*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)
      + 3*QS*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)
      + 3*QS*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)
      - 2*Conj(ZH(gI2,1))*(-5*(KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1) +
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2))*(Conj(Sigmax)*Lambdax + Conj(
      Lambdax)*Sigmax) + KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*(-20*AbsSqr(
      Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2))) + Conj(ZH(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr
      (g1p) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(20*AbsSqr(Lambdax) - 3*Sqr(g1)
      + 3*Sqr(g1p) - 5*Sqr(g2)) + 3*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(6
      *Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))) - 3*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,3
      ))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(
      QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*KroneckerDelta(3
      ,gO1)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,
      gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,2)
      )*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*
      Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - 3*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(
      gI2,0) + 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 14.142135623730951*
      Conj(TLambdax)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,0) + 10*vphi*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*vsb*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) + 10*vphi*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,0) + 10*vsb*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,0) -
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,1)*ZA(gI2,0) - 10*
      vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10*vu*
      Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,0) - 10*vu*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,0) - 10*vu*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,0) -
      14.142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(gI2,1)
      + 10*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) +
      10*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) + 10*
      vphi*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) + 10*vsb
      *Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) -
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,1) - 40*
      vs*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*vs*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2*QS*vsb*KroneckerDelta
      (3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 10*vd*Conj(Sigmax)*KroneckerDelta(4,
      gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10*vd*Conj(Lambdax)*KroneckerDelta(4,gO2)
      *Sigmax*ZA(gI1,3)*ZA(gI2,1) - 10*vd*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10*vd*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,1) - 40*vsb*AbsSqr(Sigmax)*KroneckerDelta(3,gO2)*ZA(
      gI1,2)*ZA(gI2,2) - 40*vphi*AbsSqr(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA
      (gI2,2) - vs*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(gI2,2) +
      vsb*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(gI2,2) -
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2
      ,2) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(
      gI2,2) - 20*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2
      ,2) - 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*
      ZA(gI2,2) - 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(
      gI2,2) - 14.142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,2
      ) + 14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA
      (gI2,2) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*
      ZA(gI2,2) + 20*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(
      gI2,2) + 20*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,
      2) + 14.142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*
      ZA(gI2,2) + 20*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(
      gI2,2) + 20*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,
      2) - 14.142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,2) -
      10*vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10*vu
      *Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - 10*vd*Conj
      (Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) - 10*vd*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,3) -
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2
      ,3) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(
      gI2,3) - 20*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2
      ,3) - 14.142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) - 20*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,3) - 14.142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,3
      ) - 40*vs*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2,3) - 40*vphi
      *AbsSqr(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,3) + vs*
      KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2
      ,3) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(
      gI2,3) + 20*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,3) + 20*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) +
      14.142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(
      gI2,3) + 20*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,3) + 20*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3) -
      14.142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,3) - 10*
      vu*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*vu*
      Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*vd*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) - 10*vd*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,4) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2
      ,4) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(
      gI2,4) + 20*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2
      ,4) + 20*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4)
      + 14.142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,4) + 20*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2
      ,4) + 20*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4)
      - 14.142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,4) +
      14.142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2
      ,4) - 14.142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(
      gI2,4) + 20*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2
      ,4) + 20*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) +
      14.142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(
      gI2,4) + 20*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,4) + 20*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) -
      14.142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,4) - 40*
      vs*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,4) - 40*vsb*AbsSqr(
      Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2,4) - 80*vphi*AbsSqr(KappaPr)*
      KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 28.284271247461902*MuPhi*Conj(
      KappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) + 28.284271247461902*Conj
      (TKappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,4) - 20*vsb*Conj(Sigmax)*
      KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 20*vs*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 28.284271247461902*Conj(
      MuPhi)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) - 20*vsb*Conj(
      KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) - 20*vs*Conj(
      KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) +
      28.284271247461902*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI1,4)*ZA(gI2,4) + 2*
      KroneckerDelta(1,gO2)*(-7.0710678118654755*Conj(TLambdax)*ZA(gI1,2)*ZA(gI2,0
      ) - 7.0710678118654755*TLambdax*ZA(gI1,2)*ZA(gI2,0) - 5*vphi*Conj(Sigmax)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) - 5*vphi*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,0
      ) - 5*vsb*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,0) - 5*vsb*Conj(Lambdax)*
      Sigmax*ZA(gI1,4)*ZA(gI2,0) - 3*vu*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1) - 2*vu*Sqr(g1p
      )*ZA(gI1,1)*ZA(gI2,1) - 5*vu*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1) - 20*vu*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*vu*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*vu*
      Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3) + 5*vd*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,3)
      + 5*vd*Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,3) + 5*vd*Conj(Sigmax)*Lambdax
      *ZA(gI1,3)*ZA(gI2,4) + 5*vd*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + ZA(
      gI1,0)*(vu*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI2
      ,0) - 5*(1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*
      TLambdax*ZA(gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(
      gI2,3) + vsb*ZA(gI2,4))))) - KroneckerDelta(0,gO2)*(vd*(6*Sqr(g1) + 9*Sqr(
      g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 14.142135623730951*Conj(TLambdax)*
      ZA(gI1,2)*ZA(gI2,1) + 14.142135623730951*TLambdax*ZA(gI1,2)*ZA(gI2,1) + 10*
      vphi*Conj(Sigmax)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + 10*vphi*Conj(Lambdax)*Sigmax
      *ZA(gI1,3)*ZA(gI2,1) + 10*vsb*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + 10*
      vsb*Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,1) + 40*vd*AbsSqr(Lambdax)*ZA(gI1,
      2)*ZA(gI2,2) - 3*QS*vd*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*vd*Sqr(g1p)*ZA(
      gI1,3)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*Lambdax*ZA(gI1,4)*ZA(gI2,3) - 10*vu*
      Conj(Lambdax)*Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*Lambdax*ZA(gI1
      ,3)*ZA(gI2,4) - 10*vu*Conj(Lambdax)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + 2*ZA(gI1,1)
      *(vd*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI2,1) + 5
      *(1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*TLambdax*
      ZA(gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) +
      vsb*ZA(gI2,4))))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + vphi*Conj(Sigmax)*Conj(ZH(gI1,1))*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) + vu*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) + vsb*Conj(Sigmax)*Conj(ZH(gI1,1))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) + vu*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) - 1.4142135623730951*Conj(ZH(gI1,2))
      *KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,0) - 1.4142135623730951*Conj(ZH(gI1,1
      ))*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,0) + vphi*Conj(Sigmax)*Conj(ZH(gI1,
      3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + vphi*Conj(Sigmax)*Conj(ZH(gI1,0
      ))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) + vd*Conj(Sigmax)*Conj(ZH(gI1,4))
      *KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) + vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) + vd*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) - 1.4142135623730951*Conj(ZH(gI1,2))
      *KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,1) - 1.4142135623730951*Conj(ZH(gI1,0
      ))*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,1) + 1.4142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*ZA(gI2,2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*ZA(gI2,2) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      ZA(gI2,2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(
      4,gO2)*ZA(gI2,2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)
      *KappaPr*ZA(gI2,2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,
      gO2)*KappaPr*ZA(gI2,2) + 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4
      ,gO2)*KappaPr*ZA(gI2,2) - 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 1.4142135623730951*Conj(MuPhi)*
      Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) - 2*vphi*Conj(KappaPr
      )*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) - 2*vsb*Conj(
      KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,2) -
      1.4142135623730951*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,2)
      - 1.4142135623730951*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,2
      ) - 1.4142135623730951*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,
      2) - 1.4142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2
      ,2) + 1.4142135623730951*Conj(TLambdax)*(Conj(ZH(gI1,2))*(KroneckerDelta(1,
      gO2)*ZA(gI2,0) + KroneckerDelta(0,gO2)*ZA(gI2,1)) + Conj(ZH(gI1,1))*(
      KroneckerDelta(2,gO2)*ZA(gI2,0) + KroneckerDelta(0,gO2)*ZA(gI2,2)) + Conj(ZH
      (gI1,0))*(KroneckerDelta(2,gO2)*ZA(gI2,1) + KroneckerDelta(1,gO2)*ZA(gI2,2))
      ) + 1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,
      gO2)*ZA(gI2,3) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(2,gO2)*ZA(gI2,3) + 1.4142135623730951*MuPhi*Conj(Sigmax)*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) + 1.4142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) + 2*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,3) + 2*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) + 2*vs*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) - vphi*
      Conj(Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - vu*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - vphi*
      Conj(Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) - vd*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) - vu*
      Conj(Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) - vd*
      Conj(Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*Sigmax*
      ZA(gI2,3) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,3) - 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2)
      )*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) - 1.4142135623730951*Conj(ZH(gI1,4)
      )*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,3) - 1.4142135623730951*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2,3) - 1.4142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*
      ZA(gI2,4) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(
      3,gO2)*ZA(gI2,4) - 2.8284271247461903*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 2.8284271247461903*Conj(TKappaPr)*Conj(ZH(
      gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3)
      )*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) - 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1
      ,2))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) - 2*vs*Conj(Sigmax)*Conj(ZH(gI1
      ,4))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) - 2*vsb*Conj(Sigmax)*Conj(ZH(
      gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) - 2*vs*Conj(Sigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) + 2.8284271247461903*Conj(
      MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4) - vsb*Conj(
      Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,4) - vu*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,4) - vsb*Conj(
      Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,4) - vd*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,4) - vu*Conj(
      Sigmax)*Conj(ZH(gI1,0))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) - vd*Conj(
      Sigmax)*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*Sigmax*
      ZA(gI2,4) + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,4) + 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)
      *Sigmax*ZA(gI2,4) + 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4)
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,3
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) + 2.8284271247461903*Conj(ZH(gI1,4
      ))*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI2,4) - 1.4142135623730951*Conj(ZH(gI1
      ,3))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,4) - 1.4142135623730951*Conj(ZH(
      gI1,2))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,4) + Conj(Lambdax)*Sigmax*(-(
      vphi*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*ZA(gI2,0)) - vsb*Conj(ZH(gI1,1))*
      KroneckerDelta(4,gO2)*ZA(gI2,0) - vphi*Conj(ZH(gI1,0))*KroneckerDelta(3,gO2)
      *ZA(gI2,1) - vsb*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*ZA(gI2,1) + vphi*Conj
      (ZH(gI1,1))*KroneckerDelta(0,gO2)*ZA(gI2,3) + vphi*Conj(ZH(gI1,0))*
      KroneckerDelta(1,gO2)*ZA(gI2,3) + vu*Conj(ZH(gI1,0))*KroneckerDelta(4,gO2)*
      ZA(gI2,3) + vd*Conj(ZH(gI1,1))*KroneckerDelta(4,gO2)*ZA(gI2,3) - Conj(ZH(gI1
      ,4))*(KroneckerDelta(3,gO2)*(vu*ZA(gI2,0) + vd*ZA(gI2,1)) + KroneckerDelta(1
      ,gO2)*(vsb*ZA(gI2,0) - vd*ZA(gI2,3)) + KroneckerDelta(0,gO2)*(vsb*ZA(gI2,1)
      - vu*ZA(gI2,3))) + vsb*Conj(ZH(gI1,1))*KroneckerDelta(0,gO2)*ZA(gI2,4) + vsb
      *Conj(ZH(gI1,0))*KroneckerDelta(1,gO2)*ZA(gI2,4) + vu*Conj(ZH(gI1,0))*
      KroneckerDelta(3,gO2)*ZA(gI2,4) + vd*Conj(ZH(gI1,1))*KroneckerDelta(3,gO2)*
      ZA(gI2,4) - Conj(ZH(gI1,3))*(KroneckerDelta(4,gO2)*(vu*ZA(gI2,0) + vd*ZA(gI2
      ,1)) + KroneckerDelta(1,gO2)*(vphi*ZA(gI2,0) - vd*ZA(gI2,4)) +
      KroneckerDelta(0,gO2)*(vphi*ZA(gI2,1) - vu*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
      KroneckerDelta(0,gO2) + 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,1))*KroneckerDelta(0,gO2) - 40*vd*AbsSqr(Lambdax)*Conj(ZH(gI1,2)
      )*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2) + 14.142135623730951*Conj(TLambdax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2) - 40*vs*AbsSqr(Lambdax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2) - 40*vu*AbsSqr(
      Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2) - 40*vd*
      AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(2,gO2) - 40*
      vu*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta(2,gO2) -
      40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)
      - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(2,
      gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(
      2,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta
      (2,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(2,gO2) + 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,
      2))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) + 14.142135623730951*MuPhi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) +
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))
      *KroneckerDelta(2,gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2
      ))*KroneckerDelta(3,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(3,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) + 14.142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) - 40*vs*
      AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2) - 40*
      vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2) +
      14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2) + 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,3
      ))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1
      ,4))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) + 14.142135623730951*MuPhi*
      Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) +
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))
      *KroneckerDelta(4,gO2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2
      ))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) + 14.142135623730951*Conj(TSigmax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vphi*AbsSqr(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vsb*
      AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - 40*vs
      *AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) - 40*
      vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) -
      240*vphi*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,
      gO2) - 84.8528137423857*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2) - 28.284271247461902*Conj(TKappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KappaPr + 20*vphi*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 20*vsb*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 20*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*
      KappaPr + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2)*KappaPr + 20*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,4))*KroneckerDelta(3,gO2)*KappaPr + 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))
      *Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*KappaPr + 20*vsb*Conj(Sigmax)*Conj(ZH
      (gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*KappaPr + 20*vphi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr + 20*vs*Conj
      (Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr + 20*
      vsb*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*
      KappaPr + 20*vs*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(
      4,gO2)*KappaPr - 84.8528137423857*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4)
      )*KroneckerDelta(4,gO2)*KappaPr - 10*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(
      ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax - 10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax - 10*vu*Conj(Sigmax
      )*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax - 10*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Lambdax -
      10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(
      1,gO2)*Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,0))*KroneckerDelta(3,gO2)*Lambdax - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - 10*vu*Conj(Sigmax)*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(4,gO2)*Lambdax - 10*vd*Conj(Sigmax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(4,gO2)*Lambdax - 10*vphi*Conj
      (Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Sigmax - 10*
      vsb*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*
      Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(
      0,gO2)*Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO2)*Sigmax - 10*vphi*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*Sigmax - 10*vsb*Conj(Lambdax)*Conj(ZH(gI1,4))
      *Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sigmax - 10*vd*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*Sigmax +
      14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(2,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax + 20*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(
      3,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*
      KroneckerDelta(3,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4)
      )*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax + 14.142135623730951
      *Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax +
      20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*
      Sigmax + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(
      3,gO2)*Sigmax - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*
      KroneckerDelta(4,gO2)*Sigmax - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,1))*KroneckerDelta(4,gO2)*Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 20*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*
      Sigmax + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 20*vsb*Conj(KappaPr)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 20*vs*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 3*QS*vs*Conj(
      ZH(gI1,2))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*vsb*Conj(ZH
      (gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*vd*Conj(ZH(gI1
      ,3))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*vs*Conj(ZH(gI1,2)
      )*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*vsb*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*Sqr(g1p) + 2*QS*vu*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*vu*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)*Sqr(g1p) + 2*QS*vu*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,1))*KroneckerDelta(2,gO2)*Sqr(g1p) - 3*QS*vd*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Sqr(g1p) - 2*QS*vu*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Sqr(g1p) - 3*vs*Conj(ZH(gI1,2))*Conj(
      ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,3))*Conj
      (ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS) + vsb*Conj(ZH(gI1,2))
      *Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,3))
      *Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) + vs*Conj(ZH(gI1,2))
      *Conj(ZH(gI2,3))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - 3*vsb*Conj(ZH(gI1,
      3))*Conj(ZH(gI2,3))*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) -
      28.284271247461902*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*
      TKappaPr + 14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*KroneckerDelta
      (0,gO2)*TLambdax + 14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)*TLambdax + 2*Conj(ZH(gI1,1))*(7.0710678118654755*Conj(
      TLambdax)*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2) - 20*vs*AbsSqr(Lambdax)*Conj
      (ZH(gI2,2))*KroneckerDelta(1,gO2) - 20*vu*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(2,gO2) - 5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(0
      ,gO2)*Lambdax - 5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*
      Lambdax - 5*vd*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax -
      5*vd*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax - 5*vphi*
      Conj(Lambdax)*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sigmax - 5*vsb*Conj(
      Lambdax)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Sigmax - 5*vd*Conj(Lambdax)*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax - 5*vd*Conj(Lambdax)*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Sigmax + QS*vs*Conj(ZH(gI2,2))*KroneckerDelta(
      1,gO2)*Sqr(g1p) - QS*vsb*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sqr(g1p) + QS
      *vu*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vu*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,1))*(-20*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2) + QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p) + vd*KroneckerDelta(0,gO2)*(-20*AbsSqr(
      Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - 3*vu*KroneckerDelta(1,gO2)*
      (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))) + 7.0710678118654755*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*TLambdax + Conj(ZH(gI2,0))*(vu*KroneckerDelta(0,gO2)*(
      -20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + vd*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2)) + 5*(1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) - vphi*
      Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax - vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax - Conj(Lambdax)*(vphi*KroneckerDelta(3,gO2) + vsb*
      KroneckerDelta(4,gO2))*Sigmax + 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax))) - Conj(ZH(gI1,0))*(40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2) - 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI2,2))*
      KroneckerDelta(1,gO2) + 40*vd*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*KroneckerDelta
      (2,gO2) + 10*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Lambdax
      + 10*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*Lambdax + 10*vu
      *Conj(Sigmax)*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax + 10*vu*Conj(
      Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax + 10*vphi*Conj(Lambdax
      )*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*Sigmax + 10*vsb*Conj(Lambdax)*Conj(
      ZH(gI2,4))*KroneckerDelta(1,gO2)*Sigmax + 10*vu*Conj(Lambdax)*Conj(ZH(gI2,4)
      )*KroneckerDelta(3,gO2)*Sigmax + 10*vu*Conj(Lambdax)*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax - 3*QS*vs*Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)
      *Sqr(g1p) + 3*QS*vsb*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*
      vd*Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*vd*Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p) + Conj(ZH(gI2,0))*(40*vs*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2) - 3*QS*vs*KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*vsb*
      KroneckerDelta(3,gO2)*Sqr(g1p) + 2*vu*KroneckerDelta(1,gO2)*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + 3*vd*KroneckerDelta(0,gO2)*
      (6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))) - 14.142135623730951*Conj(ZH(gI2,2))*
      KroneckerDelta(1,gO2)*TLambdax - 2*Conj(ZH(gI2,1))*(vu*KroneckerDelta(0,gO2)
      *(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + vd*
      KroneckerDelta(1,gO2)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(
      g2)) + 5*(1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) - vphi*
      Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax - vsb*Conj(Sigmax)*KroneckerDelta
      (4,gO2)*Lambdax - Conj(Lambdax)*(vphi*KroneckerDelta(3,gO2) + vsb*
      KroneckerDelta(4,gO2))*Sigmax + 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax))) + 14.142135623730951*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO2)*TSigmax + 14.142135623730951*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,4))*KroneckerDelta(2,gO2)*TSigmax + 14.142135623730951*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*TSigmax + 14.142135623730951*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*TSigmax + 14.142135623730951*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*TSigmax +
      14.142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*
      TSigmax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2401;
   std::complex<double> tmp_2402;
   std::complex<double> tmp_2403;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2403 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2402 += tmp_2403;
   tmp_2401 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2402;
   std::complex<double> tmp_2404;
   std::complex<double> tmp_2405;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2405 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2404 += tmp_2405;
   tmp_2401 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2404;
   std::complex<double> tmp_2406;
   std::complex<double> tmp_2407;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2407 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2406 += tmp_2407;
   tmp_2401 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2406;
   std::complex<double> tmp_2408;
   std::complex<double> tmp_2409;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2409 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2408 += tmp_2409;
   tmp_2401 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2408;
   std::complex<double> tmp_2410;
   std::complex<double> tmp_2411;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2411 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2410 += tmp_2411;
   tmp_2401 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2410;
   std::complex<double> tmp_2412;
   std::complex<double> tmp_2413;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2413 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2412 += tmp_2413;
   tmp_2401 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2412;
   std::complex<double> tmp_2414;
   std::complex<double> tmp_2415;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2415 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2414 += tmp_2415;
   tmp_2401 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2414;
   std::complex<double> tmp_2416;
   std::complex<double> tmp_2417;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2417 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2416 += tmp_2417;
   tmp_2401 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2416;
   std::complex<double> tmp_2418;
   std::complex<double> tmp_2419;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2419 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2418 += tmp_2419;
   tmp_2401 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2418;
   std::complex<double> tmp_2420;
   std::complex<double> tmp_2421;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2421 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2420 += tmp_2421;
   tmp_2401 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2420;
   std::complex<double> tmp_2422;
   std::complex<double> tmp_2423;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2423 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2422 += tmp_2423;
   tmp_2401 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2422;
   std::complex<double> tmp_2424;
   std::complex<double> tmp_2425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2425 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2424 += tmp_2425;
   tmp_2401 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2424;
   std::complex<double> tmp_2426;
   std::complex<double> tmp_2427;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2427 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2426 += tmp_2427;
   tmp_2401 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2426;
   std::complex<double> tmp_2428;
   std::complex<double> tmp_2429;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2429 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2428 += tmp_2429;
   tmp_2401 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2428;
   std::complex<double> tmp_2430;
   std::complex<double> tmp_2431;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2431 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2430 += tmp_2431;
   tmp_2401 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2430;
   std::complex<double> tmp_2432;
   std::complex<double> tmp_2433;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2433 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2432 += tmp_2433;
   tmp_2401 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2432;
   std::complex<double> tmp_2434;
   std::complex<double> tmp_2435;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2435 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2434 += tmp_2435;
   tmp_2401 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2434;
   std::complex<double> tmp_2436;
   std::complex<double> tmp_2437;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2437 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2436 += tmp_2437;
   tmp_2401 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2436;
   std::complex<double> tmp_2438;
   std::complex<double> tmp_2439;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2439 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2438 += tmp_2439;
   tmp_2401 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2438;
   std::complex<double> tmp_2440;
   std::complex<double> tmp_2441;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2441 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2440 += tmp_2441;
   tmp_2401 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2440;
   result += (std::complex<double>(0,-1)) * tmp_2401;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2442;
   std::complex<double> tmp_2443;
   std::complex<double> tmp_2444;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2444 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2443 += tmp_2444;
   tmp_2442 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2443;
   std::complex<double> tmp_2445;
   std::complex<double> tmp_2446;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2446 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2445 += tmp_2446;
   tmp_2442 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2445;
   std::complex<double> tmp_2447;
   std::complex<double> tmp_2448;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2448 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2447 += tmp_2448;
   tmp_2442 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2447;
   std::complex<double> tmp_2449;
   std::complex<double> tmp_2450;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2450 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2449 += tmp_2450;
   tmp_2442 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2449;
   std::complex<double> tmp_2451;
   std::complex<double> tmp_2452;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2452 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2451 += tmp_2452;
   tmp_2442 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2451;
   std::complex<double> tmp_2453;
   std::complex<double> tmp_2454;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2454 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2453 += tmp_2454;
   tmp_2442 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2453;
   std::complex<double> tmp_2455;
   std::complex<double> tmp_2456;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2456 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2455 += tmp_2456;
   tmp_2442 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2455;
   std::complex<double> tmp_2457;
   std::complex<double> tmp_2458;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2458 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2457 += tmp_2458;
   tmp_2442 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2457;
   std::complex<double> tmp_2459;
   std::complex<double> tmp_2460;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2460 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2459 += tmp_2460;
   tmp_2442 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_2459;
   std::complex<double> tmp_2461;
   std::complex<double> tmp_2462;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2462 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2461 += tmp_2462;
   tmp_2442 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_2461;
   std::complex<double> tmp_2463;
   std::complex<double> tmp_2464;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2464 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2463 += tmp_2464;
   tmp_2442 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2463;
   std::complex<double> tmp_2465;
   std::complex<double> tmp_2466;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2466 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2465 += tmp_2466;
   tmp_2442 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2465;
   std::complex<double> tmp_2467;
   std::complex<double> tmp_2468;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2468 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2467 += tmp_2468;
   tmp_2442 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2467;
   std::complex<double> tmp_2469;
   std::complex<double> tmp_2470;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2470 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2469 += tmp_2470;
   tmp_2442 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2469;
   std::complex<double> tmp_2471;
   std::complex<double> tmp_2472;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2472 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2471 += tmp_2472;
   tmp_2442 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2471;
   std::complex<double> tmp_2473;
   std::complex<double> tmp_2474;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2474 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2473 += tmp_2474;
   tmp_2442 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2473;
   std::complex<double> tmp_2475;
   std::complex<double> tmp_2476;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2476 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2475 += tmp_2476;
   tmp_2442 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_2475;
   std::complex<double> tmp_2477;
   std::complex<double> tmp_2478;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2478 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2477 += tmp_2478;
   tmp_2442 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_2477;
   std::complex<double> tmp_2479;
   std::complex<double> tmp_2480;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2480 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2479 += tmp_2480;
   tmp_2442 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)) * tmp_2479;
   std::complex<double> tmp_2481;
   std::complex<double> tmp_2482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2482 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2481 += tmp_2482;
   tmp_2442 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)) * tmp_2481;
   std::complex<double> tmp_2483;
   std::complex<double> tmp_2484;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2484 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2483 += tmp_2484;
   tmp_2442 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2483;
   std::complex<double> tmp_2485;
   std::complex<double> tmp_2486;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2486 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2485 += tmp_2486;
   tmp_2442 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2485;
   result += (std::complex<double>(0,-1)) * tmp_2442;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2487;
   std::complex<double> tmp_2488;
   std::complex<double> tmp_2489;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2489 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2488 += tmp_2489;
   tmp_2487 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2488;
   std::complex<double> tmp_2490;
   std::complex<double> tmp_2491;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2491 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2490 += tmp_2491;
   tmp_2487 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2490;
   std::complex<double> tmp_2492;
   std::complex<double> tmp_2493;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2493 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2492 += tmp_2493;
   tmp_2487 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2492;
   std::complex<double> tmp_2494;
   std::complex<double> tmp_2495;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2495 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2494 += tmp_2495;
   tmp_2487 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2494;
   std::complex<double> tmp_2496;
   std::complex<double> tmp_2497;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2497 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2496 += tmp_2497;
   tmp_2487 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2496;
   std::complex<double> tmp_2498;
   std::complex<double> tmp_2499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2499 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2498 += tmp_2499;
   tmp_2487 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2498;
   std::complex<double> tmp_2500;
   std::complex<double> tmp_2501;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2501 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2500 += tmp_2501;
   tmp_2487 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2500;
   std::complex<double> tmp_2502;
   std::complex<double> tmp_2503;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2503 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2502 += tmp_2503;
   tmp_2487 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2502;
   std::complex<double> tmp_2504;
   std::complex<double> tmp_2505;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2505 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2504 += tmp_2505;
   tmp_2487 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2504;
   std::complex<double> tmp_2506;
   std::complex<double> tmp_2507;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2507 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2506 += tmp_2507;
   tmp_2487 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2506;
   std::complex<double> tmp_2508;
   std::complex<double> tmp_2509;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2509 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2508 += tmp_2509;
   tmp_2487 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2508;
   std::complex<double> tmp_2510;
   std::complex<double> tmp_2511;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2511 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2510 += tmp_2511;
   tmp_2487 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2510;
   std::complex<double> tmp_2512;
   std::complex<double> tmp_2513;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2513 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2512 += tmp_2513;
   tmp_2487 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2512;
   std::complex<double> tmp_2514;
   std::complex<double> tmp_2515;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2515 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2514 += tmp_2515;
   tmp_2487 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2514;
   std::complex<double> tmp_2516;
   std::complex<double> tmp_2517;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2517 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2516 += tmp_2517;
   tmp_2487 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2516;
   std::complex<double> tmp_2518;
   std::complex<double> tmp_2519;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2519 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2518 += tmp_2519;
   tmp_2487 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2518;
   std::complex<double> tmp_2520;
   std::complex<double> tmp_2521;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2521 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2520 += tmp_2521;
   tmp_2487 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2520;
   std::complex<double> tmp_2522;
   std::complex<double> tmp_2523;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2523 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2522 += tmp_2523;
   tmp_2487 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2522;
   std::complex<double> tmp_2524;
   std::complex<double> tmp_2525;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2525 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2524 += tmp_2525;
   tmp_2487 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2524;
   std::complex<double> tmp_2526;
   std::complex<double> tmp_2527;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2527 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2526 += tmp_2527;
   tmp_2487 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2526;
   result += (std::complex<double>(0,-1)) * tmp_2487;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2528;
   tmp_2528 += std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_2528 += std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   std::complex<double> tmp_2529;
   std::complex<double> tmp_2530;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2530 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2529 += tmp_2530;
   tmp_2528 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2529;
   std::complex<double> tmp_2531;
   std::complex<double> tmp_2532;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2532 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2531 += tmp_2532;
   tmp_2528 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2531;
   std::complex<double> tmp_2533;
   std::complex<double> tmp_2534;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2534 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2533 += tmp_2534;
   tmp_2528 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2533;
   std::complex<double> tmp_2535;
   std::complex<double> tmp_2536;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2536 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2535 += tmp_2536;
   tmp_2528 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2535;
   std::complex<double> tmp_2537;
   std::complex<double> tmp_2538;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2538 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2537 += tmp_2538;
   tmp_2528 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2537;
   std::complex<double> tmp_2539;
   std::complex<double> tmp_2540;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2540 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2539 += tmp_2540;
   tmp_2528 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2539;
   std::complex<double> tmp_2541;
   std::complex<double> tmp_2542;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2542 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2541 += tmp_2542;
   tmp_2528 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2541;
   std::complex<double> tmp_2543;
   std::complex<double> tmp_2544;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2544 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2543 += tmp_2544;
   tmp_2528 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2543;
   std::complex<double> tmp_2545;
   std::complex<double> tmp_2546;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2546 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2545 += tmp_2546;
   tmp_2528 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2545;
   std::complex<double> tmp_2547;
   std::complex<double> tmp_2548;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2548 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2547 += tmp_2548;
   tmp_2528 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2547;
   std::complex<double> tmp_2549;
   std::complex<double> tmp_2550;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2550 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2549 += tmp_2550;
   tmp_2528 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2549;
   std::complex<double> tmp_2551;
   std::complex<double> tmp_2552;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2552 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2551 += tmp_2552;
   tmp_2528 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2551;
   std::complex<double> tmp_2553;
   std::complex<double> tmp_2554;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2554 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2553 += tmp_2554;
   tmp_2528 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2553;
   std::complex<double> tmp_2555;
   std::complex<double> tmp_2556;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2556 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2555 += tmp_2556;
   tmp_2528 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2555;
   std::complex<double> tmp_2557;
   std::complex<double> tmp_2558;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2558 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2557 += tmp_2558;
   tmp_2528 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2557;
   std::complex<double> tmp_2559;
   std::complex<double> tmp_2560;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2560 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2559 += tmp_2560;
   tmp_2528 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2559;
   result += (std::complex<double>(0,-1)) * tmp_2528;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2561;
   std::complex<double> tmp_2562;
   std::complex<double> tmp_2563;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2563 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2562 += tmp_2563;
   tmp_2561 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2562;
   std::complex<double> tmp_2564;
   std::complex<double> tmp_2565;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2565 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2564 += tmp_2565;
   tmp_2561 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2564;
   std::complex<double> tmp_2566;
   std::complex<double> tmp_2567;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2567 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2566 += tmp_2567;
   tmp_2561 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2566;
   std::complex<double> tmp_2568;
   std::complex<double> tmp_2569;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2569 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2568 += tmp_2569;
   tmp_2561 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2568;
   std::complex<double> tmp_2570;
   std::complex<double> tmp_2571;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2571 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2570 += tmp_2571;
   tmp_2561 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2570;
   std::complex<double> tmp_2572;
   std::complex<double> tmp_2573;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2573 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2572 += tmp_2573;
   tmp_2561 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2572;
   std::complex<double> tmp_2574;
   std::complex<double> tmp_2575;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2575 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2574 += tmp_2575;
   tmp_2561 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2574;
   std::complex<double> tmp_2576;
   std::complex<double> tmp_2577;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2577 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_2576 += tmp_2577;
   tmp_2561 += (std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2576;
   std::complex<double> tmp_2578;
   std::complex<double> tmp_2579;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2579 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2578 += tmp_2579;
   tmp_2561 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2578;
   std::complex<double> tmp_2580;
   std::complex<double> tmp_2581;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2581 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_2580 += tmp_2581;
   tmp_2561 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2580;
   std::complex<double> tmp_2582;
   std::complex<double> tmp_2583;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2583 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_2582 += tmp_2583;
   tmp_2561 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2582;
   std::complex<double> tmp_2584;
   std::complex<double> tmp_2585;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2585 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2584 += tmp_2585;
   tmp_2561 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2584;
   std::complex<double> tmp_2586;
   std::complex<double> tmp_2587;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2587 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2586 += tmp_2587;
   tmp_2561 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p))
      * tmp_2586;
   std::complex<double> tmp_2588;
   std::complex<double> tmp_2589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2589 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2588 += tmp_2589;
   tmp_2561 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2588;
   std::complex<double> tmp_2590;
   std::complex<double> tmp_2591;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2591 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2590 += tmp_2591;
   tmp_2561 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2590;
   std::complex<double> tmp_2592;
   std::complex<double> tmp_2593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2593 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2592 += tmp_2593;
   tmp_2561 += (std::complex<double>(0,-0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2592;
   std::complex<double> tmp_2594;
   std::complex<double> tmp_2595;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2595 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_2594 += tmp_2595;
   tmp_2561 += (std::complex<double>(0,0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2594;
   std::complex<double> tmp_2596;
   std::complex<double> tmp_2597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2597 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2596 += tmp_2597;
   tmp_2561 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2596;
   std::complex<double> tmp_2598;
   std::complex<double> tmp_2599;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2599 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_2598 += tmp_2599;
   tmp_2561 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2598;
   std::complex<double> tmp_2600;
   std::complex<double> tmp_2601;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2601 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_2600 += tmp_2601;
   tmp_2561 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2600;
   std::complex<double> tmp_2602;
   std::complex<double> tmp_2603;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2603 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_2602 += tmp_2603;
   tmp_2561 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2602
      ;
   std::complex<double> tmp_2604;
   std::complex<double> tmp_2605;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2605 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_2604 += tmp_2605;
   tmp_2561 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2604
      ;
   result += (std::complex<double>(0,-1)) * tmp_2561;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2606;
   std::complex<double> tmp_2607;
   std::complex<double> tmp_2608;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2608 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2607 += tmp_2608;
   tmp_2606 += (std::complex<double>(0,-0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2607;
   std::complex<double> tmp_2609;
   std::complex<double> tmp_2610;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2610 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2609 += tmp_2610;
   tmp_2606 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2609;
   std::complex<double> tmp_2611;
   std::complex<double> tmp_2612;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2612 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2611 += tmp_2612;
   tmp_2606 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_2611;
   std::complex<double> tmp_2613;
   std::complex<double> tmp_2614;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2614 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2613 += tmp_2614;
   tmp_2606 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2613;
   std::complex<double> tmp_2615;
   std::complex<double> tmp_2616;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2616 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2615 += tmp_2616;
   tmp_2606 += (std::complex<double>(0,0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2615;
   std::complex<double> tmp_2617;
   std::complex<double> tmp_2618;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2618 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_2617 += tmp_2618;
   tmp_2606 += (std::complex<double>(0,-0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2617;
   std::complex<double> tmp_2619;
   std::complex<double> tmp_2620;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2620 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2619 += tmp_2620;
   tmp_2606 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2619;
   std::complex<double> tmp_2621;
   std::complex<double> tmp_2622;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2622 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2621 += tmp_2622;
   tmp_2606 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2621;
   std::complex<double> tmp_2623;
   std::complex<double> tmp_2624;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2624 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2623 += tmp_2624;
   tmp_2606 += (std::complex<double>(0,0.5)*vphi*KroneckerDelta(3,gO2)*Sigmax)
      * tmp_2623;
   std::complex<double> tmp_2625;
   std::complex<double> tmp_2626;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2626 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2625 += tmp_2626;
   tmp_2606 += (std::complex<double>(0,0.5)*vsb*KroneckerDelta(4,gO2)*Sigmax) *
      tmp_2625;
   std::complex<double> tmp_2627;
   std::complex<double> tmp_2628;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2628 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_2627 += tmp_2628;
   tmp_2606 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2627;
   std::complex<double> tmp_2629;
   std::complex<double> tmp_2630;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2630 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2629 += tmp_2630;
   tmp_2606 += (std::complex<double>(0,0.1)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2629;
   std::complex<double> tmp_2631;
   std::complex<double> tmp_2632;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2632 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2631 += tmp_2632;
   tmp_2606 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(g1p
      )) * tmp_2631;
   std::complex<double> tmp_2633;
   std::complex<double> tmp_2634;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2634 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2633 += tmp_2634;
   tmp_2606 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2633;
   std::complex<double> tmp_2635;
   std::complex<double> tmp_2636;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2636 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2635 += tmp_2636;
   tmp_2606 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1p)
      ) * tmp_2635;
   std::complex<double> tmp_2637;
   std::complex<double> tmp_2638;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2638 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2637 += tmp_2638;
   tmp_2606 += (std::complex<double>(0,0.075)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2637;
   std::complex<double> tmp_2639;
   std::complex<double> tmp_2640;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2640 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_2639 += tmp_2640;
   tmp_2606 += (std::complex<double>(0,-0.075)*QS*vsb*KroneckerDelta(3,gO2)*Sqr
      (g1p)) * tmp_2639;
   std::complex<double> tmp_2641;
   std::complex<double> tmp_2642;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2642 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2641 += tmp_2642;
   tmp_2606 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2641;
   std::complex<double> tmp_2643;
   std::complex<double> tmp_2644;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2644 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2643 += tmp_2644;
   tmp_2606 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2643;
   std::complex<double> tmp_2645;
   std::complex<double> tmp_2646;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2646 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2645 += tmp_2646;
   tmp_2606 += (std::complex<double>(0,0.5)*vphi*Conj(Sigmax)*KroneckerDelta(3,
      gO2)) * tmp_2645;
   std::complex<double> tmp_2647;
   std::complex<double> tmp_2648;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2648 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_2647 += tmp_2648;
   tmp_2606 += (std::complex<double>(0,0.5)*vsb*Conj(Sigmax)*KroneckerDelta(4,
      gO2)) * tmp_2647;
   std::complex<double> tmp_2649;
   std::complex<double> tmp_2650;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2650 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_2649 += tmp_2650;
   tmp_2606 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2649;
   std::complex<double> tmp_2651;
   std::complex<double> tmp_2652;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2652 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_2651 += tmp_2652;
   tmp_2606 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2651
      ;
   std::complex<double> tmp_2653;
   std::complex<double> tmp_2654;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2654 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_2653 += tmp_2654;
   tmp_2606 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2653
      ;
   result += (std::complex<double>(0,-1)) * tmp_2606;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2655;
   std::complex<double> tmp_2656;
   std::complex<double> tmp_2657;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2657 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2656 += tmp_2657;
   tmp_2655 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2656;
   std::complex<double> tmp_2658;
   std::complex<double> tmp_2659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2659 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2658 += tmp_2659;
   tmp_2655 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p))
      * tmp_2658;
   std::complex<double> tmp_2660;
   std::complex<double> tmp_2661;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2661 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2660 += tmp_2661;
   tmp_2655 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2660;
   std::complex<double> tmp_2662;
   std::complex<double> tmp_2663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2663 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2662 += tmp_2663;
   tmp_2655 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2662;
   std::complex<double> tmp_2664;
   std::complex<double> tmp_2665;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2665 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2664 += tmp_2665;
   tmp_2655 += (std::complex<double>(0,0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2664;
   std::complex<double> tmp_2666;
   std::complex<double> tmp_2667;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2667 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2666 += tmp_2667;
   tmp_2655 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2666;
   std::complex<double> tmp_2668;
   std::complex<double> tmp_2669;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2669 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2668 += tmp_2669;
   tmp_2655 += (std::complex<double>(0,-0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2668;
   std::complex<double> tmp_2670;
   std::complex<double> tmp_2671;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2671 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_2670 += tmp_2671;
   tmp_2655 += (std::complex<double>(0,0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2670;
   std::complex<double> tmp_2672;
   std::complex<double> tmp_2673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2673 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2672 += tmp_2673;
   tmp_2655 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2672;
   std::complex<double> tmp_2674;
   std::complex<double> tmp_2675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2675 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_2674 += tmp_2675;
   tmp_2655 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2674;
   std::complex<double> tmp_2676;
   std::complex<double> tmp_2677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2677 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_2676 += tmp_2677;
   tmp_2655 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2676;
   std::complex<double> tmp_2678;
   std::complex<double> tmp_2679;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2679 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2678 += tmp_2679;
   tmp_2655 += (std::complex<double>(0,0.3)*vd*KroneckerDelta(0,gO2)*Sqr(g1)) *
      tmp_2678;
   std::complex<double> tmp_2680;
   std::complex<double> tmp_2681;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2681 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2680 += tmp_2681;
   tmp_2655 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2680;
   std::complex<double> tmp_2682;
   std::complex<double> tmp_2683;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2683 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2682 += tmp_2683;
   tmp_2655 += (std::complex<double>(0,-0.3)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2682;
   std::complex<double> tmp_2684;
   std::complex<double> tmp_2685;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2685 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2684 += tmp_2685;
   tmp_2655 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2684;
   std::complex<double> tmp_2686;
   std::complex<double> tmp_2687;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2687 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2686 += tmp_2687;
   tmp_2655 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2686;
   std::complex<double> tmp_2688;
   std::complex<double> tmp_2689;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2689 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_2688 += tmp_2689;
   tmp_2655 += (std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2688;
   std::complex<double> tmp_2690;
   std::complex<double> tmp_2691;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2691 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2690 += tmp_2691;
   tmp_2655 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2690;
   std::complex<double> tmp_2692;
   std::complex<double> tmp_2693;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2693 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_2692 += tmp_2693;
   tmp_2655 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2692;
   std::complex<double> tmp_2694;
   std::complex<double> tmp_2695;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2695 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_2694 += tmp_2695;
   tmp_2655 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2694;
   std::complex<double> tmp_2696;
   std::complex<double> tmp_2697;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2697 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_2696 += tmp_2697;
   tmp_2655 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2696
      ;
   std::complex<double> tmp_2698;
   std::complex<double> tmp_2699;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2699 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_2698 += tmp_2699;
   tmp_2655 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2698
      ;
   result += (std::complex<double>(0,-1)) * tmp_2655;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2700;
   tmp_2700 += std::complex<double>(0,0.025)*QS*vsb*KroneckerDelta(3,gO2)*
      KroneckerDelta(gI1,gI2)*Sqr(g1p);
   std::complex<double> tmp_2701;
   std::complex<double> tmp_2702;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2702 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2701 += tmp_2702;
   tmp_2700 += (std::complex<double>(0,0.05)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2701;
   std::complex<double> tmp_2703;
   std::complex<double> tmp_2704;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2704 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2703 += tmp_2704;
   tmp_2700 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2703;
   std::complex<double> tmp_2705;
   std::complex<double> tmp_2706;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2706 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2705 += tmp_2706;
   tmp_2700 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2705;
   std::complex<double> tmp_2707;
   std::complex<double> tmp_2708;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2708 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2707 += tmp_2708;
   tmp_2700 += (std::complex<double>(0,-0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2707;
   std::complex<double> tmp_2709;
   std::complex<double> tmp_2710;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2710 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2709 += tmp_2710;
   tmp_2700 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2709;
   std::complex<double> tmp_2711;
   std::complex<double> tmp_2712;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2712 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2711 += tmp_2712;
   tmp_2700 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2711;
   std::complex<double> tmp_2713;
   std::complex<double> tmp_2714;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2714 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_2713 += tmp_2714;
   tmp_2700 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2713;
   std::complex<double> tmp_2715;
   std::complex<double> tmp_2716;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2716 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2715 += tmp_2716;
   tmp_2700 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(0,gO2)*Lambdax) *
      tmp_2715;
   std::complex<double> tmp_2717;
   std::complex<double> tmp_2718;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2718 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_2717 += tmp_2718;
   tmp_2700 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2717;
   std::complex<double> tmp_2719;
   std::complex<double> tmp_2720;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2720 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_2719 += tmp_2720;
   tmp_2700 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_2719;
   std::complex<double> tmp_2721;
   std::complex<double> tmp_2722;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2722 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2721 += tmp_2722;
   tmp_2700 += (std::complex<double>(0,-0.2)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2721;
   std::complex<double> tmp_2723;
   std::complex<double> tmp_2724;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2724 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2723 += tmp_2724;
   tmp_2700 += (std::complex<double>(0,0.075)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2723;
   std::complex<double> tmp_2725;
   std::complex<double> tmp_2726;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2726 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2725 += tmp_2726;
   tmp_2700 += (std::complex<double>(0,0.2)*vu*KroneckerDelta(1,gO2)*Sqr(g1)) *
      tmp_2725;
   std::complex<double> tmp_2727;
   std::complex<double> tmp_2728;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2728 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2727 += tmp_2728;
   tmp_2700 += (std::complex<double>(0,0.05)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2727;
   std::complex<double> tmp_2729;
   std::complex<double> tmp_2730;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2730 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_2729 += tmp_2730;
   tmp_2700 += (std::complex<double>(0,-0.025)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2729;
   std::complex<double> tmp_2731;
   std::complex<double> tmp_2732;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2732 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2731 += tmp_2732;
   tmp_2700 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2731;
   std::complex<double> tmp_2733;
   std::complex<double> tmp_2734;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2734 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_2733 += tmp_2734;
   tmp_2700 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2733;
   std::complex<double> tmp_2735;
   std::complex<double> tmp_2736;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2736 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_2735 += tmp_2736;
   tmp_2700 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_2735;
   std::complex<double> tmp_2737;
   std::complex<double> tmp_2738;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2738 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_2737 += tmp_2738;
   tmp_2700 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2737
      ;
   std::complex<double> tmp_2739;
   std::complex<double> tmp_2740;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_2740 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_2739 += tmp_2740;
   tmp_2700 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2739
      ;
   result += (std::complex<double>(0,-1)) * tmp_2700;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhUhhconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2741;
   std::complex<double> tmp_2742;
   std::complex<double> tmp_2743;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2743 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2742 += tmp_2743;
   tmp_2741 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2742;
   std::complex<double> tmp_2744;
   std::complex<double> tmp_2745;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2745 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2744 += tmp_2745;
   tmp_2741 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2744;
   std::complex<double> tmp_2746;
   std::complex<double> tmp_2747;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2747 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2746 += tmp_2747;
   tmp_2741 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2746;
   std::complex<double> tmp_2748;
   std::complex<double> tmp_2749;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2749 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2748 += tmp_2749;
   tmp_2741 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2748;
   std::complex<double> tmp_2750;
   std::complex<double> tmp_2751;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2751 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2750 += tmp_2751;
   tmp_2741 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2750;
   std::complex<double> tmp_2752;
   std::complex<double> tmp_2753;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2753 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2752 += tmp_2753;
   tmp_2741 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2752;
   std::complex<double> tmp_2754;
   std::complex<double> tmp_2755;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2755 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2754 += tmp_2755;
   tmp_2741 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2754;
   std::complex<double> tmp_2756;
   std::complex<double> tmp_2757;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2757 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2756 += tmp_2757;
   tmp_2741 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2756;
   std::complex<double> tmp_2758;
   std::complex<double> tmp_2759;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2759 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2758 += tmp_2759;
   tmp_2741 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_2758;
   std::complex<double> tmp_2760;
   std::complex<double> tmp_2761;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2761 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2760 += tmp_2761;
   tmp_2741 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_2760;
   std::complex<double> tmp_2762;
   std::complex<double> tmp_2763;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2763 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2762 += tmp_2763;
   tmp_2741 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_2762;
   std::complex<double> tmp_2764;
   std::complex<double> tmp_2765;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2765 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2764 += tmp_2765;
   tmp_2741 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_2764;
   std::complex<double> tmp_2766;
   std::complex<double> tmp_2767;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2767 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2766 += tmp_2767;
   tmp_2741 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_2766;
   std::complex<double> tmp_2768;
   std::complex<double> tmp_2769;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2769 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2768 += tmp_2769;
   tmp_2741 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2768;
   std::complex<double> tmp_2770;
   std::complex<double> tmp_2771;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2771 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2770 += tmp_2771;
   tmp_2741 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_2770;
   std::complex<double> tmp_2772;
   std::complex<double> tmp_2773;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2773 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2772 += tmp_2773;
   tmp_2741 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_2772;
   std::complex<double> tmp_2774;
   std::complex<double> tmp_2775;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2775 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2774 += tmp_2775;
   tmp_2741 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2774;
   std::complex<double> tmp_2776;
   std::complex<double> tmp_2777;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2777 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2776 += tmp_2777;
   tmp_2741 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_2776;
   std::complex<double> tmp_2778;
   std::complex<double> tmp_2779;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2779 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2778 += tmp_2779;
   tmp_2741 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2778;
   std::complex<double> tmp_2780;
   std::complex<double> tmp_2781;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2781 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2780 += tmp_2781;
   tmp_2741 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2780;
   std::complex<double> tmp_2782;
   std::complex<double> tmp_2783;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2783 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2782 += tmp_2783;
   tmp_2741 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_2782;
   std::complex<double> tmp_2784;
   std::complex<double> tmp_2785;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2785 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2784 += tmp_2785;
   tmp_2741 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_2784;
   std::complex<double> tmp_2786;
   std::complex<double> tmp_2787;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2787 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2786 += tmp_2787;
   tmp_2741 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *KroneckerDelta(4,gO1)) * tmp_2786;
   std::complex<double> tmp_2788;
   std::complex<double> tmp_2789;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2789 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2788 += tmp_2789;
   tmp_2741 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)
      *KroneckerDelta(4,gO2)) * tmp_2788;
   std::complex<double> tmp_2790;
   std::complex<double> tmp_2791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2791 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2790 += tmp_2791;
   tmp_2741 += (std::complex<double>(0,0.375)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_2790;
   std::complex<double> tmp_2792;
   std::complex<double> tmp_2793;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2793 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2792 += tmp_2793;
   tmp_2741 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_2792;
   std::complex<double> tmp_2794;
   std::complex<double> tmp_2795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2795 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2794 += tmp_2795;
   tmp_2741 += (std::complex<double>(0,-0.125)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_2794;
   std::complex<double> tmp_2796;
   std::complex<double> tmp_2797;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2797 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2796 += tmp_2797;
   tmp_2741 += (std::complex<double>(0,0.125)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_2796;
   std::complex<double> tmp_2798;
   std::complex<double> tmp_2799;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2800;
      std::complex<double> tmp_2801;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2801 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_2800 += tmp_2801;
      tmp_2799 += (Conj(UHI0(gI2,2 + j2))) * tmp_2800;
   }
   tmp_2798 += tmp_2799;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_2798;
   std::complex<double> tmp_2802;
   std::complex<double> tmp_2803;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2804;
      std::complex<double> tmp_2805;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2805 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_2804 += tmp_2805;
      tmp_2803 += (Conj(UHI0(gI2,2 + j2))) * tmp_2804;
   }
   tmp_2802 += tmp_2803;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_2802;
   std::complex<double> tmp_2806;
   std::complex<double> tmp_2807;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2808;
      std::complex<double> tmp_2809;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2809 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2808 += tmp_2809;
      tmp_2807 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_2808;
   }
   tmp_2806 += tmp_2807;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)) * tmp_2806;
   std::complex<double> tmp_2810;
   std::complex<double> tmp_2811;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2812;
      std::complex<double> tmp_2813;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2813 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2812 += tmp_2813;
      tmp_2811 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_2812;
   }
   tmp_2810 += tmp_2811;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)) * tmp_2810;
   std::complex<double> tmp_2814;
   std::complex<double> tmp_2815;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2816;
      std::complex<double> tmp_2817;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2817 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2816 += tmp_2817;
      tmp_2815 += (UHI0(gI1,2 + j2)) * tmp_2816;
   }
   tmp_2814 += tmp_2815;
   tmp_2741 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2)
      *KroneckerDelta(2,gO1)) * tmp_2814;
   std::complex<double> tmp_2818;
   std::complex<double> tmp_2819;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2820;
      std::complex<double> tmp_2821;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2821 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2820 += tmp_2821;
      tmp_2819 += (UHI0(gI1,2 + j2)) * tmp_2820;
   }
   tmp_2818 += tmp_2819;
   tmp_2741 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1)
      *KroneckerDelta(2,gO2)) * tmp_2818;
   std::complex<double> tmp_2822;
   std::complex<double> tmp_2823;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2823 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2822 += tmp_2823;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2822;
   std::complex<double> tmp_2824;
   std::complex<double> tmp_2825;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2825 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_2824 += tmp_2825;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_2824;
   std::complex<double> tmp_2826;
   std::complex<double> tmp_2827;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2828;
      std::complex<double> tmp_2829;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2829 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_2828 += tmp_2829;
      tmp_2827 += (UHI0(gI1,4 + j2)) * tmp_2828;
   }
   tmp_2826 += tmp_2827;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)) * tmp_2826;
   std::complex<double> tmp_2830;
   std::complex<double> tmp_2831;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2832;
      std::complex<double> tmp_2833;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2833 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_2832 += tmp_2833;
      tmp_2831 += (UHI0(gI1,4 + j2)) * tmp_2832;
   }
   tmp_2830 += tmp_2831;
   tmp_2741 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)) * tmp_2830;
   std::complex<double> tmp_2834;
   std::complex<double> tmp_2835;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_2836;
      std::complex<double> tmp_2837;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_2838;
         std::complex<double> tmp_2839;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_2839 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_2838 += tmp_2839;
         tmp_2837 += (UHI0(gI1,2 + j2)) * tmp_2838;
      }
      tmp_2836 += tmp_2837;
      tmp_2835 += (Conj(UHI0(gI2,2 + j3))) * tmp_2836;
   }
   tmp_2834 += tmp_2835;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2834;
   std::complex<double> tmp_2840;
   std::complex<double> tmp_2841;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_2842;
      std::complex<double> tmp_2843;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_2844;
         std::complex<double> tmp_2845;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_2845 += Conj(fu(j1,j3))*fu(j1,j2);
         }
         tmp_2844 += tmp_2845;
         tmp_2843 += (Conj(UHI0(gI2,j2))) * tmp_2844;
      }
      tmp_2842 += tmp_2843;
      tmp_2841 += (UHI0(gI1,j3)) * tmp_2842;
   }
   tmp_2840 += tmp_2841;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2840;
   std::complex<double> tmp_2846;
   std::complex<double> tmp_2847;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_2848;
      std::complex<double> tmp_2849;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_2850;
         std::complex<double> tmp_2851;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_2851 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_2850 += tmp_2851;
         tmp_2849 += (Conj(UHI0(gI2,4 + j2))) * tmp_2850;
      }
      tmp_2848 += tmp_2849;
      tmp_2847 += (UHI0(gI1,4 + j3)) * tmp_2848;
   }
   tmp_2846 += tmp_2847;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_2846;
   std::complex<double> tmp_2852;
   std::complex<double> tmp_2853;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_2854;
      std::complex<double> tmp_2855;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_2856;
         std::complex<double> tmp_2857;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_2857 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_2856 += tmp_2857;
         tmp_2855 += (Conj(UHI0(gI2,4 + j2))) * tmp_2856;
      }
      tmp_2854 += tmp_2855;
      tmp_2853 += (UHI0(gI1,4 + j3)) * tmp_2854;
   }
   tmp_2852 += tmp_2853;
   tmp_2741 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_2852;
   result += (std::complex<double>(0,-1)) * tmp_2741;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2858;
   std::complex<double> tmp_2859;
   std::complex<double> tmp_2860;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2860 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2859 += tmp_2860;
   tmp_2858 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2859;
   std::complex<double> tmp_2861;
   std::complex<double> tmp_2862;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2862 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2861 += tmp_2862;
   tmp_2858 += (std::complex<double>(0,-0.225)*vd*KroneckerDelta(0,gO2)*Sqr(g1p
      )) * tmp_2861;
   std::complex<double> tmp_2863;
   std::complex<double> tmp_2864;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2864 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2863 += tmp_2864;
   tmp_2858 += (std::complex<double>(0,-0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2863;
   std::complex<double> tmp_2865;
   std::complex<double> tmp_2866;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2866 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2865 += tmp_2866;
   tmp_2858 += (std::complex<double>(0,0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2865;
   std::complex<double> tmp_2867;
   std::complex<double> tmp_2868;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2868 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2867 += tmp_2868;
   tmp_2858 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1p)
      ) * tmp_2867;
   std::complex<double> tmp_2869;
   std::complex<double> tmp_2870;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2870 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2869 += tmp_2870;
   tmp_2858 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2869;
   std::complex<double> tmp_2871;
   std::complex<double> tmp_2872;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2872 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2871 += tmp_2872;
   tmp_2858 += (std::complex<double>(0,0.075)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2871;
   std::complex<double> tmp_2873;
   std::complex<double> tmp_2874;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2874 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_2873 += tmp_2874;
   tmp_2858 += (std::complex<double>(0,-0.075)*QS*vsb*KroneckerDelta(3,gO2)*Sqr
      (g1p)) * tmp_2873;
   std::complex<double> tmp_2875;
   std::complex<double> tmp_2876;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2876 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2875 += tmp_2876;
   tmp_2858 += (std::complex<double>(0,-0.5)*vu*KroneckerDelta(0,gO2)*Lambdax)
      * tmp_2875;
   std::complex<double> tmp_2877;
   std::complex<double> tmp_2878;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2878 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2877 += tmp_2878;
   tmp_2858 += (std::complex<double>(0,-0.5)*vd*KroneckerDelta(1,gO2)*Lambdax)
      * tmp_2877;
   std::complex<double> tmp_2879;
   std::complex<double> tmp_2880;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2880 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2879 += tmp_2880;
   tmp_2858 += (std::complex<double>(0,-0.5)*vphi*KroneckerDelta(3,gO2)*Sigmax)
      * tmp_2879;
   std::complex<double> tmp_2881;
   std::complex<double> tmp_2882;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2882 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_2881 += tmp_2882;
   tmp_2858 += (std::complex<double>(0,-0.5)*vsb*KroneckerDelta(4,gO2)*Sigmax)
      * tmp_2881;
   std::complex<double> tmp_2883;
   std::complex<double> tmp_2884;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2884 += Conj(UHI0(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHI0(gI1,j1)
         ;
   }
   tmp_2883 += tmp_2884;
   tmp_2858 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2883;
   std::complex<double> tmp_2885;
   std::complex<double> tmp_2886;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2886 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2885 += tmp_2886;
   tmp_2858 += (std::complex<double>(0,0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1))
      * tmp_2885;
   std::complex<double> tmp_2887;
   std::complex<double> tmp_2888;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2888 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2887 += tmp_2888;
   tmp_2858 += (std::complex<double>(0,-0.15)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2887;
   std::complex<double> tmp_2889;
   std::complex<double> tmp_2890;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2890 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2889 += tmp_2890;
   tmp_2858 += (std::complex<double>(0,0.25)*vd*KroneckerDelta(0,gO2)*Sqr(g2))
      * tmp_2889;
   std::complex<double> tmp_2891;
   std::complex<double> tmp_2892;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2892 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2891 += tmp_2892;
   tmp_2858 += (std::complex<double>(0,-0.15)*vu*KroneckerDelta(1,gO2)*Sqr(g1))
      * tmp_2891;
   std::complex<double> tmp_2893;
   std::complex<double> tmp_2894;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2894 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2893 += tmp_2894;
   tmp_2858 += (std::complex<double>(0,-0.1)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2893;
   std::complex<double> tmp_2895;
   std::complex<double> tmp_2896;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2896 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2895 += tmp_2896;
   tmp_2858 += (std::complex<double>(0,-0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g2))
      * tmp_2895;
   std::complex<double> tmp_2897;
   std::complex<double> tmp_2898;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2898 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2897 += tmp_2898;
   tmp_2858 += (std::complex<double>(0,0.05)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2897;
   std::complex<double> tmp_2899;
   std::complex<double> tmp_2900;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2900 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_2899 += tmp_2900;
   tmp_2858 += (std::complex<double>(0,-0.05)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2899;
   std::complex<double> tmp_2901;
   std::complex<double> tmp_2902;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2902 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2901 += tmp_2902;
   tmp_2858 += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2901;
   std::complex<double> tmp_2903;
   std::complex<double> tmp_2904;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2904 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2903 += tmp_2904;
   tmp_2858 += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2903;
   std::complex<double> tmp_2905;
   std::complex<double> tmp_2906;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2906 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2905 += tmp_2906;
   tmp_2858 += (std::complex<double>(0,-0.5)*vphi*Conj(Sigmax)*KroneckerDelta(3
      ,gO2)) * tmp_2905;
   std::complex<double> tmp_2907;
   std::complex<double> tmp_2908;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2908 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_2907 += tmp_2908;
   tmp_2858 += (std::complex<double>(0,-0.5)*vsb*Conj(Sigmax)*KroneckerDelta(4,
      gO2)) * tmp_2907;
   std::complex<double> tmp_2909;
   std::complex<double> tmp_2910;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_2910 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_2909 += tmp_2910;
   tmp_2858 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_2909;
   std::complex<double> tmp_2911;
   std::complex<double> tmp_2912;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2912 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2911 += tmp_2912;
   tmp_2858 += (std::complex<double>(0,0.375)*vd*KroneckerDelta(0,gO2)*Sqr(g1p)
      ) * tmp_2911;
   std::complex<double> tmp_2913;
   std::complex<double> tmp_2914;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2914 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2913 += tmp_2914;
   tmp_2858 += (std::complex<double>(0,0.25)*vu*KroneckerDelta(1,gO2)*Sqr(g1p))
      * tmp_2913;
   std::complex<double> tmp_2915;
   std::complex<double> tmp_2916;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2916 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2915 += tmp_2916;
   tmp_2858 += (std::complex<double>(0,-0.125)*QS*vs*KroneckerDelta(2,gO2)*Sqr(
      g1p)) * tmp_2915;
   std::complex<double> tmp_2917;
   std::complex<double> tmp_2918;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_2918 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_2917 += tmp_2918;
   tmp_2858 += (std::complex<double>(0,0.125)*QS*vsb*KroneckerDelta(3,gO2)*Sqr(
      g1p)) * tmp_2917;
   std::complex<double> tmp_2919;
   std::complex<double> tmp_2920;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2921;
      std::complex<double> tmp_2922;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2922 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_2921 += tmp_2922;
      tmp_2920 += (Conj(UHI0(gI2,2 + j2))) * tmp_2921;
   }
   tmp_2919 += tmp_2920;
   tmp_2858 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)*Lambdax) *
      tmp_2919;
   std::complex<double> tmp_2923;
   std::complex<double> tmp_2924;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2925;
      std::complex<double> tmp_2926;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2926 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_2925 += tmp_2926;
      tmp_2924 += (Conj(UHI0(gI2,2 + j2))) * tmp_2925;
   }
   tmp_2923 += tmp_2924;
   tmp_2858 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)*Lambdax) *
      tmp_2923;
   std::complex<double> tmp_2927;
   std::complex<double> tmp_2928;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2929;
      std::complex<double> tmp_2930;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2930 += Conj(Tfd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_2929 += tmp_2930;
      tmp_2928 += (Conj(UHI0(gI2,2 + j2))) * tmp_2929;
   }
   tmp_2927 += tmp_2928;
   tmp_2858 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2927;
   std::complex<double> tmp_2931;
   std::complex<double> tmp_2932;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2933;
      std::complex<double> tmp_2934;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2934 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2933 += tmp_2934;
      tmp_2932 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_2933;
   }
   tmp_2931 += tmp_2932;
   tmp_2858 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(0,gO2)) *
      tmp_2931;
   std::complex<double> tmp_2935;
   std::complex<double> tmp_2936;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2937;
      std::complex<double> tmp_2938;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2938 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2937 += tmp_2938;
      tmp_2936 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_2937;
   }
   tmp_2935 += tmp_2936;
   tmp_2858 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(2,gO2)) *
      tmp_2935;
   std::complex<double> tmp_2939;
   std::complex<double> tmp_2940;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2941;
      std::complex<double> tmp_2942;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2942 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2941 += tmp_2942;
      tmp_2940 += (UHI0(gI1,2 + j2)) * tmp_2941;
   }
   tmp_2939 += tmp_2940;
   tmp_2858 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(1,
      gO2)) * tmp_2939;
   std::complex<double> tmp_2943;
   std::complex<double> tmp_2944;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2945;
      std::complex<double> tmp_2946;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2946 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_2945 += tmp_2946;
      tmp_2944 += (UHI0(gI1,2 + j2)) * tmp_2945;
   }
   tmp_2943 += tmp_2944;
   tmp_2858 += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2943;
   std::complex<double> tmp_2947;
   std::complex<double> tmp_2948;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2949;
      std::complex<double> tmp_2950;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2950 += Conj(UHI0(gI2,4 + j1))*Tfd(j1,j2);
      }
      tmp_2949 += tmp_2950;
      tmp_2948 += (UHI0(gI1,2 + j2)) * tmp_2949;
   }
   tmp_2947 += tmp_2948;
   tmp_2858 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_2947;
   std::complex<double> tmp_2951;
   std::complex<double> tmp_2952;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2952 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_2951 += tmp_2952;
   tmp_2858 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2951
      ;
   std::complex<double> tmp_2953;
   std::complex<double> tmp_2954;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_2954 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_2953 += tmp_2954;
   tmp_2858 += (std::complex<double>(0,-1)*vs*KroneckerDelta(2,gO2)) * tmp_2953
      ;
   std::complex<double> tmp_2955;
   std::complex<double> tmp_2956;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2957;
      std::complex<double> tmp_2958;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2958 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_2957 += tmp_2958;
      tmp_2956 += (UHI0(gI1,4 + j2)) * tmp_2957;
   }
   tmp_2955 += tmp_2956;
   tmp_2858 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(0,gO2)) *
      tmp_2955;
   std::complex<double> tmp_2959;
   std::complex<double> tmp_2960;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_2961;
      std::complex<double> tmp_2962;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_2962 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_2961 += tmp_2962;
      tmp_2960 += (UHI0(gI1,4 + j2)) * tmp_2961;
   }
   tmp_2959 += tmp_2960;
   tmp_2858 += (std::complex<double>(0,0.5)*vd*KroneckerDelta(2,gO2)) *
      tmp_2959;
   std::complex<double> tmp_2963;
   std::complex<double> tmp_2964;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_2965;
      std::complex<double> tmp_2966;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_2967;
         std::complex<double> tmp_2968;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_2968 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_2967 += tmp_2968;
         tmp_2966 += (UHI0(gI1,2 + j2)) * tmp_2967;
      }
      tmp_2965 += tmp_2966;
      tmp_2964 += (Conj(UHI0(gI2,2 + j3))) * tmp_2965;
   }
   tmp_2963 += tmp_2964;
   tmp_2858 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2963
      ;
   std::complex<double> tmp_2969;
   std::complex<double> tmp_2970;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_2971;
      std::complex<double> tmp_2972;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_2973;
         std::complex<double> tmp_2974;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_2974 += Conj(fu(j1,j3))*fu(j1,j2);
         }
         tmp_2973 += tmp_2974;
         tmp_2972 += (Conj(UHI0(gI2,j2))) * tmp_2973;
      }
      tmp_2971 += tmp_2972;
      tmp_2970 += (UHI0(gI1,j3)) * tmp_2971;
   }
   tmp_2969 += tmp_2970;
   tmp_2858 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2969
      ;
   std::complex<double> tmp_2975;
   std::complex<double> tmp_2976;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_2977;
      std::complex<double> tmp_2978;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_2979;
         std::complex<double> tmp_2980;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_2980 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_2979 += tmp_2980;
         tmp_2978 += (Conj(UHI0(gI2,4 + j2))) * tmp_2979;
      }
      tmp_2977 += tmp_2978;
      tmp_2976 += (UHI0(gI1,4 + j3)) * tmp_2977;
   }
   tmp_2975 += tmp_2976;
   tmp_2858 += (std::complex<double>(0,-1)*vd*KroneckerDelta(0,gO2)) * tmp_2975
      ;
   std::complex<double> tmp_2981;
   std::complex<double> tmp_2982;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_2983;
      std::complex<double> tmp_2984;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_2985;
         std::complex<double> tmp_2986;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_2986 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_2985 += tmp_2986;
         tmp_2984 += (Conj(UHI0(gI2,4 + j2))) * tmp_2985;
      }
      tmp_2983 += tmp_2984;
      tmp_2982 += (UHI0(gI1,4 + j3)) * tmp_2983;
   }
   tmp_2981 += tmp_2982;
   tmp_2858 += (std::complex<double>(0,-1)*vu*KroneckerDelta(1,gO2)) * tmp_2981
      ;
   result += (std::complex<double>(0,-1)) * tmp_2858;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_2987;
   std::complex<double> tmp_2988;
   std::complex<double> tmp_2989;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2990;
      std::complex<double> tmp_2991;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2991 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_2990 += tmp_2991;
      tmp_2989 += (Conj(UHI0(gI2,j2))) * tmp_2990;
   }
   tmp_2988 += tmp_2989;
   tmp_2987 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_2988;
   std::complex<double> tmp_2992;
   std::complex<double> tmp_2993;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2994;
      std::complex<double> tmp_2995;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2995 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_2994 += tmp_2995;
      tmp_2993 += (Conj(UHI0(gI2,j2))) * tmp_2994;
   }
   tmp_2992 += tmp_2993;
   tmp_2987 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_2992;
   std::complex<double> tmp_2996;
   std::complex<double> tmp_2997;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_2998;
      std::complex<double> tmp_2999;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_2999 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_2998 += tmp_2999;
      tmp_2997 += (Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_2998;
   }
   tmp_2996 += tmp_2997;
   tmp_2987 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)) *
      tmp_2996;
   std::complex<double> tmp_3000;
   std::complex<double> tmp_3001;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3002;
      std::complex<double> tmp_3003;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3003 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3002 += tmp_3003;
      tmp_3001 += (Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3002;
   }
   tmp_3000 += tmp_3001;
   tmp_2987 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)) *
      tmp_3000;
   std::complex<double> tmp_3004;
   std::complex<double> tmp_3005;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3006;
      std::complex<double> tmp_3007;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3007 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3006 += tmp_3007;
      tmp_3005 += (Conj(UHI0(gI1,j2))) * tmp_3006;
   }
   tmp_3004 += tmp_3005;
   tmp_2987 += (std::complex<double>(0,0.5)*vs*Conj(Lambdax)*KroneckerDelta(0,
      gO2)) * tmp_3004;
   std::complex<double> tmp_3008;
   std::complex<double> tmp_3009;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3010;
      std::complex<double> tmp_3011;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3011 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3010 += tmp_3011;
      tmp_3009 += (Conj(UHI0(gI1,j2))) * tmp_3010;
   }
   tmp_3008 += tmp_3009;
   tmp_2987 += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*KroneckerDelta(2,
      gO2)) * tmp_3008;
   std::complex<double> tmp_3012;
   std::complex<double> tmp_3013;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3014;
      std::complex<double> tmp_3015;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3015 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3014 += tmp_3015;
      tmp_3013 += (Conj(UHI0(gI1,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3014;
   }
   tmp_3012 += tmp_3013;
   tmp_2987 += (std::complex<double>(0,0.5)*vs*KroneckerDelta(1,gO2)) *
      tmp_3012;
   std::complex<double> tmp_3016;
   std::complex<double> tmp_3017;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3018;
      std::complex<double> tmp_3019;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3019 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3018 += tmp_3019;
      tmp_3017 += (Conj(UHI0(gI1,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3018;
   }
   tmp_3016 += tmp_3017;
   tmp_2987 += (std::complex<double>(0,0.5)*vu*KroneckerDelta(2,gO2)) *
      tmp_3016;
   std::complex<double> tmp_3020;
   std::complex<double> tmp_3021;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3022;
      std::complex<double> tmp_3023;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3023 += Conj(UHI0(gI1,4 + j1))*Tfu(j1,j2);
      }
      tmp_3022 += tmp_3023;
      tmp_3021 += (Conj(UHI0(gI2,j2))) * tmp_3022;
   }
   tmp_3020 += tmp_3021;
   tmp_2987 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_3020;
   std::complex<double> tmp_3024;
   std::complex<double> tmp_3025;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3026;
      std::complex<double> tmp_3027;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3027 += Conj(UHI0(gI2,4 + j1))*Tfu(j1,j2);
      }
      tmp_3026 += tmp_3027;
      tmp_3025 += (Conj(UHI0(gI1,j2))) * tmp_3026;
   }
   tmp_3024 += tmp_3025;
   tmp_2987 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_3024;
   std::complex<double> tmp_3028;
   std::complex<double> tmp_3029;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3030;
      std::complex<double> tmp_3031;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3032;
         std::complex<double> tmp_3033;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3033 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3032 += tmp_3033;
         tmp_3031 += (Conj(UHI0(gI1,j2))) * tmp_3032;
      }
      tmp_3030 += tmp_3031;
      tmp_3029 += (Conj(UHI0(gI2,2 + j3))) * tmp_3030;
   }
   tmp_3028 += tmp_3029;
   tmp_2987 += (std::complex<double>(0,-0.5)*vu*KroneckerDelta(0,gO2)) *
      tmp_3028;
   std::complex<double> tmp_3034;
   std::complex<double> tmp_3035;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3036;
      std::complex<double> tmp_3037;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3038;
         std::complex<double> tmp_3039;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3039 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3038 += tmp_3039;
         tmp_3037 += (Conj(UHI0(gI1,j2))) * tmp_3038;
      }
      tmp_3036 += tmp_3037;
      tmp_3035 += (Conj(UHI0(gI2,2 + j3))) * tmp_3036;
   }
   tmp_3034 += tmp_3035;
   tmp_2987 += (std::complex<double>(0,-0.5)*vd*KroneckerDelta(1,gO2)) *
      tmp_3034;
   std::complex<double> tmp_3040;
   std::complex<double> tmp_3041;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3042;
      std::complex<double> tmp_3043;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3044;
         std::complex<double> tmp_3045;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3045 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3044 += tmp_3045;
         tmp_3043 += (Conj(UHI0(gI2,j2))) * tmp_3044;
      }
      tmp_3042 += tmp_3043;
      tmp_3041 += (Conj(UHI0(gI1,2 + j3))) * tmp_3042;
   }
   tmp_3040 += tmp_3041;
   tmp_2987 += (std::complex<double>(0,-0.5)*vu*KroneckerDelta(0,gO2)) *
      tmp_3040;
   std::complex<double> tmp_3046;
   std::complex<double> tmp_3047;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3048;
      std::complex<double> tmp_3049;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3050;
         std::complex<double> tmp_3051;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3051 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3050 += tmp_3051;
         tmp_3049 += (Conj(UHI0(gI2,j2))) * tmp_3050;
      }
      tmp_3048 += tmp_3049;
      tmp_3047 += (Conj(UHI0(gI1,2 + j3))) * tmp_3048;
   }
   tmp_3046 += tmp_3047;
   tmp_2987 += (std::complex<double>(0,-0.5)*vd*KroneckerDelta(1,gO2)) *
      tmp_3046;
   result += (std::complex<double>(0,-1)) * tmp_2987;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiIChiIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3052;
   std::complex<double> tmp_3053;
   std::complex<double> tmp_3054;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3054 += Conj(Lambda12(j1,j1))*ZNI(gI1,2 + j1)*ZNI(gI2,j1);
   }
   tmp_3053 += tmp_3054;
   tmp_3052 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_3053;
   std::complex<double> tmp_3055;
   std::complex<double> tmp_3056;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3056 += Conj(Lambda12(j1,j1))*ZNI(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_3055 += tmp_3056;
   tmp_3052 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO2)) * tmp_3055;
   std::complex<double> tmp_3057;
   std::complex<double> tmp_3058;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3059;
      std::complex<double> tmp_3060;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3060 += Conj(fu(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_3059 += tmp_3060;
      tmp_3058 += (ZNI(gI1,j2)) * tmp_3059;
   }
   tmp_3057 += tmp_3058;
   tmp_3052 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_3057;
   std::complex<double> tmp_3061;
   std::complex<double> tmp_3062;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3063;
      std::complex<double> tmp_3064;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3064 += Conj(fd(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_3063 += tmp_3064;
      tmp_3062 += (ZNI(gI1,2 + j2)) * tmp_3063;
   }
   tmp_3061 += tmp_3062;
   tmp_3052 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_3061;
   std::complex<double> tmp_3065;
   std::complex<double> tmp_3066;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3067;
      std::complex<double> tmp_3068;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3068 += Conj(fu(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_3067 += tmp_3068;
      tmp_3066 += (ZNI(gI2,j2)) * tmp_3067;
   }
   tmp_3065 += tmp_3066;
   tmp_3052 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO2)) * tmp_3065;
   std::complex<double> tmp_3069;
   std::complex<double> tmp_3070;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3071;
      std::complex<double> tmp_3072;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3072 += Conj(fd(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_3071 += tmp_3072;
      tmp_3070 += (ZNI(gI2,2 + j2)) * tmp_3071;
   }
   tmp_3069 += tmp_3070;
   tmp_3052 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO2)) * tmp_3069;
   result += (std::complex<double>(0,-1)) * tmp_3052;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiIChiIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3073;
   std::complex<double> tmp_3074;
   std::complex<double> tmp_3075;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3075 += Conj(ZNI(gI1,2 + j1))*Conj(ZNI(gI2,j1))*Lambda12(j1,j1);
   }
   tmp_3074 += tmp_3075;
   tmp_3073 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO1)) * tmp_3074;
   std::complex<double> tmp_3076;
   std::complex<double> tmp_3077;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3077 += Conj(ZNI(gI1,j1))*Conj(ZNI(gI2,2 + j1))*Lambda12(j1,j1);
   }
   tmp_3076 += tmp_3077;
   tmp_3073 += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,
      gO1)) * tmp_3076;
   std::complex<double> tmp_3078;
   std::complex<double> tmp_3079;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3080;
      std::complex<double> tmp_3081;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3081 += Conj(ZNI(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_3080 += tmp_3081;
      tmp_3079 += (Conj(ZNI(gI2,2 + j2))) * tmp_3080;
   }
   tmp_3078 += tmp_3079;
   tmp_3073 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO1)) * tmp_3078;
   std::complex<double> tmp_3082;
   std::complex<double> tmp_3083;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3084;
      std::complex<double> tmp_3085;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3085 += Conj(ZNI(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3084 += tmp_3085;
      tmp_3083 += (Conj(ZNI(gI1,2 + j2))) * tmp_3084;
   }
   tmp_3082 += tmp_3083;
   tmp_3073 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,
      gO1)) * tmp_3082;
   std::complex<double> tmp_3086;
   std::complex<double> tmp_3087;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3088;
      std::complex<double> tmp_3089;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3089 += Conj(ZNI(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3088 += tmp_3089;
      tmp_3087 += (Conj(ZNI(gI2,j2))) * tmp_3088;
   }
   tmp_3086 += tmp_3087;
   tmp_3073 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO1)) * tmp_3086;
   std::complex<double> tmp_3090;
   std::complex<double> tmp_3091;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3092;
      std::complex<double> tmp_3093;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3093 += Conj(ZNI(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3092 += tmp_3093;
      tmp_3091 += (Conj(ZNI(gI1,j2))) * tmp_3092;
   }
   tmp_3090 += tmp_3091;
   tmp_3073 += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,
      gO1)) * tmp_3090;
   result += (std::complex<double>(0,-1)) * tmp_3073;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(1.4142135623730951*(10*Conj(Lambdax)*KroneckerDelta(2,gO2)*(
      ZN(gI1,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,3)) - 2.23606797749979*g1p*QS*
      KroneckerDelta(2,gO2)*ZN(gI1,7)*ZN(gI2,4) + 2.23606797749979*g1p*QS*
      KroneckerDelta(3,gO2)*ZN(gI1,7)*ZN(gI2,5) - 20*Conj(KappaPr)*KroneckerDelta(
      4,gO2)*ZN(gI1,6)*ZN(gI2,6) + 10*Conj(Sigmax)*(KroneckerDelta(4,gO2)*(ZN(gI1,
      5)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,5)) + KroneckerDelta(3,gO2)*(ZN(gI1,6)*ZN(
      gI2,4) + ZN(gI1,4)*ZN(gI2,6)) + KroneckerDelta(2,gO2)*(ZN(gI1,6)*ZN(gI2,5) +
      ZN(gI1,5)*ZN(gI2,6))) - 2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(
      gI1,4)*ZN(gI2,7) + 2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,5)*
      ZN(gI2,7)) + 2*KroneckerDelta(1,gO2)*((-3.872983346207417*g1*ZN(gI1,0) + 5*
      g2*ZN(gI1,1) + 3.1622776601683795*g1p*ZN(gI1,7))*ZN(gI2,3) +
      7.0710678118654755*Conj(Lambdax)*(ZN(gI1,4)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,4))
      + ZN(gI1,3)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*ZN(gI2,1) +
      3.1622776601683795*g1p*ZN(gI2,7))) + KroneckerDelta(0,gO2)*(
      7.745966692414834*g1*ZN(gI1,0)*ZN(gI2,2) - 10*g2*ZN(gI1,1)*ZN(gI2,2) +
      9.486832980505138*g1p*ZN(gI1,7)*ZN(gI2,2) + 14.142135623730951*Conj(Lambdax)
      *ZN(gI1,4)*ZN(gI2,3) + 14.142135623730951*Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4)
      + ZN(gI1,2)*(7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) +
      9.486832980505138*g1p*ZN(gI2,7))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1)
      + 9.486832980505138*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,2))*KroneckerDelta(0,gO1
      ) - 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,0))*KroneckerDelta(1,
      gO1) + 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*KroneckerDelta(1,gO1) + 10*g2*
      Conj(ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) + 6.324555320336759*
      g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,3))*KroneckerDelta(1,gO1) +
      6.324555320336759*g1p*Conj(ZN(gI1,3))*Conj(ZN(gI2,7))*KroneckerDelta(1,gO1)
      + 7.745966692414834*g1*Conj(ZN(gI1,0))*(Conj(ZN(gI2,2))*KroneckerDelta(0,gO1
      ) - Conj(ZN(gI2,3))*KroneckerDelta(1,gO1)) - 3.1622776601683795*g1p*QS*Conj(
      ZN(gI1,7))*Conj(ZN(gI2,4))*KroneckerDelta(2,gO1) - 3.1622776601683795*g1p*QS
      *Conj(ZN(gI1,4))*Conj(ZN(gI2,7))*KroneckerDelta(2,gO1) + 3.1622776601683795*
      g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(gI2,5))*KroneckerDelta(3,gO1) +
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*Conj(ZN(gI2,7))*KroneckerDelta(3,
      gO1) - 28.284271247461902*Conj(ZN(gI1,6))*Conj(ZN(gI2,6))*KroneckerDelta(4,
      gO1)*KappaPr + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,3))*
      KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(
      gI2,4))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*Conj(ZN(gI1,4))*
      Conj(ZN(gI2,2))*KroneckerDelta(1,gO1)*Lambdax + 14.142135623730951*Conj(ZN(
      gI1,3))*Conj(ZN(gI2,2))*KroneckerDelta(2,gO1)*Lambdax + Conj(ZN(gI1,2))*(
      7.745966692414834*g1*Conj(ZN(gI2,0))*KroneckerDelta(0,gO1) - 10*g2*Conj(ZN(
      gI2,1))*KroneckerDelta(0,gO1) + 1.4142135623730951*(6.708203932499369*g1p*
      Conj(ZN(gI2,7))*KroneckerDelta(0,gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1
      ,gO1) + Conj(ZN(gI2,3))*KroneckerDelta(2,gO1))*Lambdax)) +
      14.142135623730951*Conj(ZN(gI1,6))*Conj(ZN(gI2,5))*KroneckerDelta(2,gO1)*
      Sigmax + 14.142135623730951*Conj(ZN(gI1,5))*Conj(ZN(gI2,6))*KroneckerDelta(2
      ,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,6))*Conj(ZN(gI2,4))*
      KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(
      gI2,6))*KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,5))*
      Conj(ZN(gI2,4))*KroneckerDelta(4,gO1)*Sigmax + 14.142135623730951*Conj(ZN(
      gI1,4))*Conj(ZN(gI2,5))*KroneckerDelta(4,gO1)*Sigmax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZP(gI2,0))*KroneckerDelta(0,gO2) - Conj(ZP(gI2,1))*
      KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhVZAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(KroneckerDelta(0,gO2)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      - 9.486832980505138*g1p*Sin(ThetaWp()))*ZA(gI2,0) - 2*KroneckerDelta(1,gO2)
      *(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*
      Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*ZA(gI2,1) +
      3.1622776601683795*g1p*QS*Sin(ThetaWp())*(KroneckerDelta(2,gO2)*ZA(gI2,2) -
      KroneckerDelta(3,gO2)*ZA(gI2,3)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUhhVZpAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(KroneckerDelta(0,gO2)*(
      9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,0) + 2*
      KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZA(gI2,1) +
      3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(KroneckerDelta(2,gO2)*ZA(gI2,2))
      + KroneckerDelta(3,gO2)*ZA(gI2,3)));

   return result;
}

double CSE6SSM_mass_eigenstates::CpUhhbarChaPChaPPR(unsigned gO2) const
{
   double result = 0.0;

   result = 0.7071067811865475*Conj(SigmaL)*KroneckerDelta(4,gO2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpUhhbarChaPChaPPL(unsigned gO1) const
{
   double result = 0.0;

   result = 0.7071067811865475*KroneckerDelta(4,gO1)*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbargWmgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbargWmCgWmC(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(vd*KroneckerDelta(0,gO1) - vu*
      KroneckerDelta(1,gO1))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-14.696938456699067*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + Cos(ThetaW())*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*
      Sin(ThetaWp()) + 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp())))
      + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(
      ThetaWp()))) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*
      (7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())
      ) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      ))))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*((KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + KroneckerDelta
      (3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-2*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*
      Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(
      ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(2*Conj(ZP(gI2,1))*(-10*Conj(Lambdax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZP(gI1,0) - 10*Conj(Lambdax)*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*Sigmax*ZP(gI1,0) + 5*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,0) - 20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZP(gI1,1) - 3*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1)*ZP(gI1,1) - 2*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p)*ZP(gI1,1) + QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZP(gI1,1) - QS*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZP(gI1,1) - 5*
      KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g2)*ZP(gI1,1) +
      KroneckerDelta(0,gO2)*(5*KroneckerDelta(1,gO1)*(-2*AbsSqr(Lambdax) + Sqr(g2)
      )*ZP(gI1,0) + KroneckerDelta(0,gO1)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZP(
      gI1,1))) - Conj(ZP(gI2,0))*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZP(gI1,0) - 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*ZP(gI1,0) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*ZP(gI1,0) + 20*Conj(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4
      ,gO1)*Lambdax*ZP(gI1,1) + 20*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Lambdax*ZP(gI1,1) + KroneckerDelta(1,gO1)*(2*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,0) - 10*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZP(gI1,1)) +
      KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*
      Sqr(g2))*ZP(gI1,0) - 10*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))
      *ZP(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHp0(gI2,0))*(-20*AbsSqr(SigmaL)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*UHp0(gI1,0) - QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*UHp0(gI1,0) + QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*UHp0(gI1,0) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(
      g1) + 3*Sqr(g1p) - 5*Sqr(g2))*UHp0(gI1,0) + KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) - 10*
      Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*SigmaL*UHp0(gI1,1)
      - 10*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*SigmaL*UHp0(
      gI1,1) + 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*SigmaL
      *UHp0(gI1,1)) - Conj(UHp0(gI2,1))*((QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p)
      - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)))*UHp0(gI1,1) + 10*Conj(SigmaL)*(KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*UHp0(gI1,0) + KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*UHp0(gI1,0) + 2*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*(-(KappaPr*UHp0(gI1,0)) + SigmaL*UHp0(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHpp(gI2,0))*(-20*AbsSqr(SigmaL)*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*UHpp(gI1,0) - QS*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*UHpp(gI1,0) + QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)
      *Sqr(g1p)*UHpp(gI1,0) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(
      g1) + 2*Sqr(g1p) - 5*Sqr(g2))*UHpp(gI1,0) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) + 10
      *Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*SigmaL*UHpp(gI1,1)
      + 10*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*SigmaL*UHpp(
      gI1,1) - 20*Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*SigmaL
      *UHpp(gI1,1)) + Conj(UHpp(gI2,1))*((QS*(KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2) - KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(g1p) +
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(
      g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p)
      + 5*Sqr(g2)))*UHpp(gI1,1) + 10*Conj(SigmaL)*(KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*UHpp(gI1,0) + KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*Sigmax*UHpp(gI1,0) - 2*KroneckerDelta(4,gO1)*
      KroneckerDelta(4,gO2)*(KappaPr*UHpp(gI1,0) + SigmaL*UHpp(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjHpmHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(Conj(ZP(gI2,1))*(-2*(
      1.4142135623730951*Conj(TLambdax)*KroneckerDelta(2,gO2) + Conj(Lambdax)*(
      vphi*KroneckerDelta(3,gO2) + vsb*KroneckerDelta(4,gO2))*Sigmax) + vu*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)) + vd*KroneckerDelta(1,
      gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)))*ZP(gI1,0) + Conj(ZP(gI2,0))*(-(vu*
      KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2))) - vd*KroneckerDelta(1,
      gO2)*(-2*AbsSqr(Lambdax) + Sqr(g2)) + 2*(Conj(Sigmax)*(vphi*KroneckerDelta(3
      ,gO2) + vsb*KroneckerDelta(4,gO2))*Lambdax + 1.4142135623730951*
      KroneckerDelta(2,gO2)*TLambdax))*ZP(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSHp0SHp0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.5)*(1.4142135623730951*Conj(TSigmaL)*Conj(
      UHp0(gI2,1))*KroneckerDelta(4,gO2)*UHp0(gI1,0) - vsb*Conj(Sigmax)*Conj(UHp0(
      gI2,0))*KroneckerDelta(2,gO2)*SigmaL*UHp0(gI1,1) - vs*Conj(Sigmax)*Conj(UHp0
      (gI2,0))*KroneckerDelta(3,gO2)*SigmaL*UHp0(gI1,1) + 1.4142135623730951*Conj(
      MuPhi)*Conj(UHp0(gI2,0))*KroneckerDelta(4,gO2)*SigmaL*UHp0(gI1,1) + 2*vphi*
      Conj(KappaPr)*Conj(UHp0(gI2,0))*KroneckerDelta(4,gO2)*SigmaL*UHp0(gI1,1) -
      1.4142135623730951*Conj(UHp0(gI2,0))*KroneckerDelta(4,gO2)*TSigmaL*UHp0(gI1,
      1) + 1.4142135623730951*Conj(MuPr)*KroneckerDelta(4,gO2)*SigmaL*(Conj(UHp0(
      gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1)) + Conj(SigmaL)*(
      -1.4142135623730951*Conj(UHp0(gI2,0))*KroneckerDelta(4,gO2)*MuPr*UHp0(gI1,0)
      + Conj(UHp0(gI2,1))*(vsb*KroneckerDelta(2,gO2)*Sigmax*UHp0(gI1,0) + vs*
      KroneckerDelta(3,gO2)*Sigmax*UHp0(gI1,0) - KroneckerDelta(4,gO2)*((
      1.4142135623730951*MuPhi + 2*vphi*KappaPr)*UHp0(gI1,0) + 1.4142135623730951*
      MuPr*UHp0(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSHppSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*(1.4142135623730951*Conj(TSigmaL)*Conj
      (UHpp(gI2,1))*KroneckerDelta(4,gO2)*UHpp(gI1,0) - vsb*Conj(Sigmax)*Conj(UHpp
      (gI2,0))*KroneckerDelta(2,gO2)*SigmaL*UHpp(gI1,1) - vs*Conj(Sigmax)*Conj(
      UHpp(gI2,0))*KroneckerDelta(3,gO2)*SigmaL*UHpp(gI1,1) + 1.4142135623730951*
      Conj(MuPhi)*Conj(UHpp(gI2,0))*KroneckerDelta(4,gO2)*SigmaL*UHpp(gI1,1) + 2*
      vphi*Conj(KappaPr)*Conj(UHpp(gI2,0))*KroneckerDelta(4,gO2)*SigmaL*UHpp(gI1,1
      ) - 1.4142135623730951*Conj(UHpp(gI2,0))*KroneckerDelta(4,gO2)*TSigmaL*UHpp(
      gI1,1) - 1.4142135623730951*Conj(MuPr)*KroneckerDelta(4,gO2)*SigmaL*(Conj(
      UHpp(gI2,0))*UHpp(gI1,0) + Conj(UHpp(gI2,1))*UHpp(gI1,1)) + Conj(SigmaL)*(
      1.4142135623730951*Conj(UHpp(gI2,0))*KroneckerDelta(4,gO2)*MuPr*UHpp(gI1,0)
      + Conj(UHpp(gI2,1))*(vsb*KroneckerDelta(2,gO2)*Sigmax*UHpp(gI1,0) + vs*
      KroneckerDelta(3,gO2)*Sigmax*UHpp(gI1,0) + KroneckerDelta(4,gO2)*(-((
      1.4142135623730951*MuPhi + 2*vphi*KappaPr)*UHpp(gI1,0)) + 1.4142135623730951
      *MuPr*UHpp(gI1,1)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO2)*UM(gI1,1)*UP(gI2,0) + (g2*KroneckerDelta(1,gO2)*UM(gI1,0) - Conj(
      Lambdax)*KroneckerDelta(2,gO2)*UM(gI1,1))*UP(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI2,0))*
      Conj(UP(gI1,1))*KroneckerDelta(1,gO1) + Conj(UM(gI2,1))*(g2*Conj(UP(gI1,0))*
      KroneckerDelta(0,gO1) - Conj(UP(gI1,1))*KroneckerDelta(2,gO1)*Lambdax));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaIChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3094;
   std::complex<double> tmp_3095;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3095 += Conj(Lambda12(j1,j1))*ZMI(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_3094 += tmp_3095;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO2)
      ) * tmp_3094;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaIChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3096;
   std::complex<double> tmp_3097;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3097 += Conj(ZMI(gI2,j1))*Conj(ZPI(gI1,j1))*Lambda12(j1,j1);
   }
   tmp_3096 += tmp_3097;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO1
      )) * tmp_3096;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiPChiPPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*Conj(SigmaL)*
      KroneckerDelta(4,gO2)*(ZNp(gI1,1)*ZNp(gI2,0) + ZNp(gI1,0)*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiPChiPPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(Conj(ZNp(gI1,1))*Conj
      (ZNp(gI2,0)) + Conj(ZNp(gI1,0))*Conj(ZNp(gI2,1)))*KroneckerDelta(4,gO1)*
      SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*KroneckerDelta(gI1,gI2)*(QS*(-(KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2))*Sqr(
      g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p)
      - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFdFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3098;
   std::complex<double> tmp_3099;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3099 += Conj(Yd(j1,j1))*ZDL(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_3098 += tmp_3099;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_3098;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFdFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3100;
   std::complex<double> tmp_3101;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3101 += Conj(ZDL(gI2,j1))*Conj(ZDR(gI1,j1))*Yd(j1,j1);
   }
   tmp_3100 += tmp_3101;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_3100;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFDXFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3102;
   std::complex<double> tmp_3103;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3103 += Conj(Kappa(j1,j1))*ZDXL(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_3102 += tmp_3103;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(2,gO2)
      ) * tmp_3102;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFDXFDXPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3104;
   std::complex<double> tmp_3105;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3105 += Conj(ZDXL(gI2,j1))*Conj(ZDXR(gI1,j1))*Kappa(j1,j1);
   }
   tmp_3104 += tmp_3105;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(2,gO1
      )) * tmp_3104;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFeFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3106;
   std::complex<double> tmp_3107;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3107 += Conj(Ye(j1,j1))*ZEL(gI1,j1)*ZER(gI2,j1);
   }
   tmp_3106 += tmp_3107;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(0,gO2)
      ) * tmp_3106;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFeFePL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3108;
   std::complex<double> tmp_3109;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3109 += Conj(ZEL(gI2,j1))*Conj(ZER(gI1,j1))*Ye(j1,j1);
   }
   tmp_3108 += tmp_3109;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(0,gO1
      )) * tmp_3108;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFuFuPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3110;
   std::complex<double> tmp_3111;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3111 += Conj(Yu(j1,j1))*ZUL(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_3110 += tmp_3111;
   result += (std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(1,gO2)
      ) * tmp_3110;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarFuFuPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3112;
   std::complex<double> tmp_3113;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3113 += Conj(ZUL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_3112 += tmp_3113;
   result += (std::complex<double>(0.,-0.7071067811865475)*KroneckerDelta(1,gO1
      )) * tmp_3112;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3114;
   std::complex<double> tmp_3115;
   std::complex<double> tmp_3116;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3116 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3115 += tmp_3116;
   tmp_3114 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3115;
   std::complex<double> tmp_3117;
   std::complex<double> tmp_3118;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3118 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3117 += tmp_3118;
   tmp_3114 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3117;
   std::complex<double> tmp_3119;
   std::complex<double> tmp_3120;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3120 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3119 += tmp_3120;
   tmp_3114 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3119;
   std::complex<double> tmp_3121;
   std::complex<double> tmp_3122;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3122 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3121 += tmp_3122;
   tmp_3114 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3121;
   std::complex<double> tmp_3123;
   std::complex<double> tmp_3124;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3124 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3123 += tmp_3124;
   tmp_3114 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3123;
   std::complex<double> tmp_3125;
   std::complex<double> tmp_3126;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3126 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3125 += tmp_3126;
   tmp_3114 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3125;
   std::complex<double> tmp_3127;
   std::complex<double> tmp_3128;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3128 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3127 += tmp_3128;
   tmp_3114 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3127;
   std::complex<double> tmp_3129;
   std::complex<double> tmp_3130;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3130 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3129 += tmp_3130;
   tmp_3114 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3129;
   std::complex<double> tmp_3131;
   std::complex<double> tmp_3132;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3132 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3131 += tmp_3132;
   tmp_3114 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_3131;
   std::complex<double> tmp_3133;
   std::complex<double> tmp_3134;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3134 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3133 += tmp_3134;
   tmp_3114 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_3133;
   std::complex<double> tmp_3135;
   std::complex<double> tmp_3136;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3136 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3135 += tmp_3136;
   tmp_3114 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_3135;
   std::complex<double> tmp_3137;
   std::complex<double> tmp_3138;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3138 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3137 += tmp_3138;
   tmp_3114 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_3137;
   std::complex<double> tmp_3139;
   std::complex<double> tmp_3140;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3140 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3139 += tmp_3140;
   tmp_3114 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3139;
   std::complex<double> tmp_3141;
   std::complex<double> tmp_3142;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3142 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3141 += tmp_3142;
   tmp_3114 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3141;
   std::complex<double> tmp_3143;
   std::complex<double> tmp_3144;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3144 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3143 += tmp_3144;
   tmp_3114 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3143;
   std::complex<double> tmp_3145;
   std::complex<double> tmp_3146;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3146 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3145 += tmp_3146;
   tmp_3114 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3145;
   std::complex<double> tmp_3147;
   std::complex<double> tmp_3148;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3148 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3147 += tmp_3148;
   tmp_3114 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3147;
   std::complex<double> tmp_3149;
   std::complex<double> tmp_3150;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3150 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3149 += tmp_3150;
   tmp_3114 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3149;
   std::complex<double> tmp_3151;
   std::complex<double> tmp_3152;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3152 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3151 += tmp_3152;
   tmp_3114 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3151;
   std::complex<double> tmp_3153;
   std::complex<double> tmp_3154;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3154 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3153 += tmp_3154;
   tmp_3114 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3153;
   std::complex<double> tmp_3155;
   std::complex<double> tmp_3156;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3156 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3155 += tmp_3156;
   tmp_3114 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_3155;
   std::complex<double> tmp_3157;
   std::complex<double> tmp_3158;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3158 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3157 += tmp_3158;
   tmp_3114 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_3157;
   std::complex<double> tmp_3159;
   std::complex<double> tmp_3160;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3160 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3159 += tmp_3160;
   tmp_3114 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *KroneckerDelta(4,gO1)) * tmp_3159;
   std::complex<double> tmp_3161;
   std::complex<double> tmp_3162;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3162 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3161 += tmp_3162;
   tmp_3114 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)
      *KroneckerDelta(4,gO2)) * tmp_3161;
   std::complex<double> tmp_3163;
   std::complex<double> tmp_3164;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3164 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_3163 += tmp_3164;
   tmp_3114 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3163;
   std::complex<double> tmp_3165;
   std::complex<double> tmp_3166;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3166 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,
         2 + j2);
   }
   tmp_3165 += tmp_3166;
   tmp_3114 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3165;
   result += (std::complex<double>(0,-1)) * tmp_3114;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSHIPMSHIPM(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3167;
   std::complex<double> tmp_3168;
   std::complex<double> tmp_3169;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3169 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3168 += tmp_3169;
   tmp_3167 += (-0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_3168;
   std::complex<double> tmp_3170;
   std::complex<double> tmp_3171;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3171 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3170 += tmp_3171;
   tmp_3167 += (-0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_3170;
   std::complex<double> tmp_3172;
   std::complex<double> tmp_3173;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3173 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3172 += tmp_3173;
   tmp_3167 += (-0.5*vphi*KroneckerDelta(3,gO2)*Sigmax) * tmp_3172;
   std::complex<double> tmp_3174;
   std::complex<double> tmp_3175;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3175 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3174 += tmp_3175;
   tmp_3167 += (-0.5*vsb*KroneckerDelta(4,gO2)*Sigmax) * tmp_3174;
   std::complex<double> tmp_3176;
   std::complex<double> tmp_3177;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3177 += Conj(UHIPM(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHIPM(gI1,
         j1);
   }
   tmp_3176 += tmp_3177;
   tmp_3167 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3176;
   std::complex<double> tmp_3178;
   std::complex<double> tmp_3179;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3179 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3178 += tmp_3179;
   tmp_3167 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3178;
   std::complex<double> tmp_3180;
   std::complex<double> tmp_3181;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3181 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3180 += tmp_3181;
   tmp_3167 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3180;
   std::complex<double> tmp_3182;
   std::complex<double> tmp_3183;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3183 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3182 += tmp_3183;
   tmp_3167 += (0.5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)) * tmp_3182;
   std::complex<double> tmp_3184;
   std::complex<double> tmp_3185;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3185 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3184 += tmp_3185;
   tmp_3167 += (0.5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)) * tmp_3184;
   std::complex<double> tmp_3186;
   std::complex<double> tmp_3187;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3187 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_3186 += tmp_3187;
   tmp_3167 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3186;
   result += (std::complex<double>(0,-1)) * tmp_3167;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,
      gO2)*ZA(gI1,0)*ZA(gI2,0) + 3*QS*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*
      Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,
      gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,1)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0) - 10
      *Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,1)*
      ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,1)*ZA(gI2,0) - 40*AbsSqr(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*ZA(gI1,2)*ZA(gI2,0) + 3*QS*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,3)*ZA(gI2,0) - 10
      *Conj(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*
      ZA(gI2,0) - 3*QS*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1
      ,3)*ZA(gI2,0) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Lambdax*ZA(gI1,4)*ZA(gI2,0) - 10*Conj(Lambdax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,0) - 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,1) - 10
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*
      ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,0)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,1) - 40*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA(gI1,1)*ZA(gI2,1) + 2*QS*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1) - 2
      *QS*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)
      - 40*AbsSqr(Lambdax)*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*ZA(gI1,2)*
      ZA(gI2,1) + 2*QS*KroneckerDelta(1,gO2)*KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1
      ,2)*ZA(gI2,1) - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*
      Lambdax*ZA(gI1,3)*ZA(gI2,1) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,1) - 2*QS*KroneckerDelta(1,gO2
      )*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,1) - 10*Conj(Sigmax)*
      KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,4)*ZA(gI2,1) - 10
      *Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,1) - 40*AbsSqr(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*
      ZA(gI1,0)*ZA(gI2,2) + 3*QS*KroneckerDelta(0,gO2)*KroneckerDelta(2,gO1)*Sqr(
      g1p)*ZA(gI1,0)*ZA(gI2,2) - 40*AbsSqr(Lambdax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*ZA(gI1,1)*ZA(gI2,2) + 2*QS*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,2) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,2) - 3*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,2)*ZA(
      gI2,2) + KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,2)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1
      )*ZA(gI1,3)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(Sigmax)*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,2) + 20*Conj(KappaPr)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2) +
      KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(
      gI2,2) + KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1
      ,3)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1
      )*ZA(gI1,4)*ZA(gI2,2) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(Sigmax)*KroneckerDelta(3
      ,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,2) + 20
      *Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,2) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,2) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - 3*
      QS*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,3)
      - 10*Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Lambdax*ZA(gI1
      ,1)*ZA(gI2,3) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)
      *Sigmax*ZA(gI1,1)*ZA(gI2,3) - 2*QS*KroneckerDelta(1,gO2)*KroneckerDelta(3,
      gO1)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*ZA(gI1,2)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (2,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) + KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sqr(g1p)*Sqr(QS)*ZA(
      gI1,2)*ZA(gI2,3) + KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(
      QS)*ZA(gI1,2)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (4,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,3) + KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(gI2,3) - 3*
      KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI1,3)*ZA(
      gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*ZA(
      gI1,4)*ZA(gI2,3) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,
      gO2)*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20*Conj(Sigmax)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3) + 20
      *Conj(KappaPr)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,4)*
      ZA(gI2,3) + 20*Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI1,4)*ZA(gI2,3) - 10*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - 10*Conj(Lambdax)*
      KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,0)*ZA(gI2,4) - 10*
      Conj(Sigmax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax*ZA(gI1,1)*
      ZA(gI2,4) - 10*Conj(Lambdax)*KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*
      Sigmax*ZA(gI1,1)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*ZA(gI1,2)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*KroneckerDelta
      (2,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 20
      *Conj(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*
      ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*
      Sigmax*ZA(gI1,2)*ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4) - 40*AbsSqr(Sigmax)*
      KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*ZA(gI1,3)*ZA(gI2,4) - 40*AbsSqr(
      Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,4) + 20
      *Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*KappaPr*ZA(gI1,3)*
      ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(KappaPr)*KroneckerDelta(2,gO2)*
      KroneckerDelta(4,gO1)*Sigmax*ZA(gI1,3)*ZA(gI2,4) + 20*Conj(KappaPr)*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) - 40*
      AbsSqr(Sigmax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA(gI2,
      4) - 40*AbsSqr(Sigmax)*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*ZA(gI1,4)
      *ZA(gI2,4) - 240*AbsSqr(KappaPr)*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)
      *ZA(gI1,4)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO2)*KroneckerDelta(
      3,gO1)*KappaPr*ZA(gI1,4)*ZA(gI2,4) + 20*Conj(Sigmax)*KroneckerDelta(2,gO1)*
      KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) + 20*Conj(KappaPr)*
      KroneckerDelta(2,gO2)*KroneckerDelta(3,gO1)*Sigmax*ZA(gI1,4)*ZA(gI2,4) + 20*
      Conj(KappaPr)*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*
      ZA(gI2,4) + 2*KroneckerDelta(1,gO1)*(-5*Conj(Sigmax)*KroneckerDelta(4,gO2)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) - 5*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*
      ZA(gI1,3)*ZA(gI2,0) - 5*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)
      *ZA(gI2,0) - 5*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,0
      ) - 20*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,2)*ZA(gI2,1) + QS*
      KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,1) - QS*KroneckerDelta(3,gO2
      )*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,1) - 20*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA
      (gI1,1)*ZA(gI2,2) + QS*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,2) -
      5*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) - 5*Conj(
      Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2,3) - QS*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,3) + KroneckerDelta(1,gO2)*(
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,
      0) - 3*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) - 20*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)
      *ZA(gI1,3)*ZA(gI2,3)) - 5*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,
      0)*ZA(gI2,4) - 5*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,0)*ZA(gI2
      ,4) + KroneckerDelta(0,gO2)*((-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) +
      5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,0) + (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(
      g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,1) - 5*(Conj(Sigmax)*Lambdax + Conj(
      Lambdax)*Sigmax)*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))) -
      KroneckerDelta(0,gO1)*(40*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI1,2)*ZA
      (gI2,0) - 3*QS*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,0) + 3*QS*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,0) + 10*Conj(Sigmax)*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + 10*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,1) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + 10*Conj(Lambdax)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*
      KroneckerDelta(2,gO2)*ZA(gI1,0)*ZA(gI2,2) - 3*QS*KroneckerDelta(2,gO2)*Sqr(
      g1p)*ZA(gI1,0)*ZA(gI2,2) + 3*QS*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(
      gI2,3) + 10*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) +
      10*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,3) +
      KroneckerDelta(0,gO2)*(3*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(
      gI2,0) + 2*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,
      1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) - 3*QS*Sqr(g1p)*ZA(gI1
      ,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) + 10*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) + 10*Conj(Lambdax)*
      KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,1)*ZA(gI2,4) - 2*KroneckerDelta(1,gO2)*(
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,
      0) + (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA
      (gI2,1) - 5*(Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(ZA(gI1,4)*ZA(gI2,
      3) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 40*AbsSqr
      (Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,
      2))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2) - 40*AbsSqr(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta
      (3,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(4
      ,gO1)*KroneckerDelta(4,gO2) - 40*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) - 80*AbsSqr(KappaPr)*Conj(ZH
      (gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2) - 20*
      Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*KappaPr - 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      4))*KroneckerDelta(2,gO1)*KroneckerDelta(3,gO2)*KappaPr + 20*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,2))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*KappaPr + 20*Conj(
      Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta
      (4,gO1)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO1)*KroneckerDelta(4,gO2)*KappaPr + 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,4))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*KappaPr - 20*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO1)*KroneckerDelta
      (4,gO2)*KappaPr - 20*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*KappaPr + 10*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Lambdax + 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,
      gO2)*KroneckerDelta(1,gO1)*Lambdax + 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax + 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*
      KroneckerDelta(0,gO2)*KroneckerDelta(3,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*Lambdax - 10*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta
      (4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1)*Lambdax - 10*Conj(Sigmax)*Conj(
      ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*KroneckerDelta(4,gO2)*
      Lambdax - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,
      gO1)*KroneckerDelta(4,gO2)*Lambdax + 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(
      ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax + 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Sigmax + 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Sigmax + 10*Conj(Lambdax)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(0,
      gO2)*KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,0))*KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)*Sigmax - 20*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*
      KroneckerDelta(3,gO1)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      1))*KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)*
      Sigmax - 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(3,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,1))*KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,
      3))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KroneckerDelta(4,gO1)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO2)*KroneckerDelta(4,gO1)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH
      (gI2,4))*KroneckerDelta(3,gO2)*KroneckerDelta(4,gO1)*Sigmax - 10*Conj(
      Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,1))*KroneckerDelta(0,gO1)*
      KroneckerDelta(4,gO2)*Sigmax - 10*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      0))*KroneckerDelta(1,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,
      gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH
      (gI2,2))*KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)*Sigmax + 20*Conj(
      KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax - 20*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      2))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*Sigmax - 20*Conj(KappaPr)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO1)*KroneckerDelta(4,gO2)*
      Sigmax + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) - 2*QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) + 2*Conj(ZH(gI1,1))*(-5*(Conj(ZH(gI2,4))*(KroneckerDelta(0,gO2)*
      KroneckerDelta(3,gO1) + KroneckerDelta(0,gO1)*KroneckerDelta(3,gO2)) + Conj(
      ZH(gI2,3))*(KroneckerDelta(0,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(0,
      gO1)*KroneckerDelta(4,gO2)) - Conj(ZH(gI2,0))*(KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)))*(Conj(
      Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) + Conj(ZH(gI2,1))*(-20*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) + QS*KroneckerDelta(2,
      gO1)*KroneckerDelta(2,gO2)*Sqr(g1p) - QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)
      *(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)))) - Conj(
      ZH(gI1,0))*(10*(Conj(ZH(gI2,4))*(KroneckerDelta(1,gO2)*KroneckerDelta(3,gO1)
      + KroneckerDelta(1,gO1)*KroneckerDelta(3,gO2)) + Conj(ZH(gI2,3))*(
      KroneckerDelta(1,gO2)*KroneckerDelta(4,gO1) + KroneckerDelta(1,gO1)*
      KroneckerDelta(4,gO2)) - Conj(ZH(gI2,1))*(KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1) + KroneckerDelta(3,gO1)*KroneckerDelta(4,gO2)))*(Conj(
      Sigmax)*Lambdax + Conj(Lambdax)*Sigmax) + Conj(ZH(gI2,0))*(40*AbsSqr(Lambdax
      )*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2) - 3*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p) + 3*QS*KroneckerDelta(3,gO1)*KroneckerDelta(3
      ,gO2)*Sqr(g1p) + 2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(20*AbsSqr(
      Lambdax) - 3*Sqr(g1) + 3*Sqr(g1p) - 5*Sqr(g2)) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))) - Conj(ZH(gI1,
      2))*Conj(ZH(gI2,2))*KroneckerDelta(2,gO1)*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr
      (QS) + Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO1)*KroneckerDelta(
      2,gO2)*Sqr(g1p)*Sqr(QS) + Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(3,
      gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS) - Conj(ZH(gI1,3))*Conj(ZH(gI2,3)
      )*KroneckerDelta(3,gO1)*KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhAhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.25)*(-(vphi*Conj(Sigmax)*KroneckerDelta(3,
      gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,0)) - vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*
      Lambdax*ZA(gI1,1)*ZA(gI2,0) - 1.4142135623730951*KroneckerDelta(2,gO2)*
      TLambdax*ZA(gI1,1)*ZA(gI2,0) - 1.4142135623730951*KroneckerDelta(1,gO2)*
      TLambdax*ZA(gI1,2)*ZA(gI2,0) - vphi*Conj(Sigmax)*KroneckerDelta(1,gO2)*
      Lambdax*ZA(gI1,3)*ZA(gI2,0) + vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*
      ZA(gI1,3)*ZA(gI2,0) - vsb*Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,
      4)*ZA(gI2,0) + vu*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(
      gI2,0) - vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1)
      - vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,1) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,1) -
      1.4142135623730951*KroneckerDelta(0,gO2)*TLambdax*ZA(gI1,2)*ZA(gI2,1) - vphi
      *Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) + vd*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,1) - vsb*Conj(Sigmax)
      *KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) + vd*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,1) - 1.4142135623730951*
      KroneckerDelta(1,gO2)*TLambdax*ZA(gI1,0)*ZA(gI2,2) - 1.4142135623730951*
      KroneckerDelta(0,gO2)*TLambdax*ZA(gI1,1)*ZA(gI2,2) - 1.4142135623730951*
      MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,2) +
      1.4142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,3)*ZA(gI2,2) -
      2*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,2) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,2) + 2*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,2)
      - 1.4142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,2) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(gI2
      ,2) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,4)*ZA(
      gI2,2) - 2*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,
      2) + 2*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,2) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,2) + 2*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2)
      - 2*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,2) -
      1.4142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,2) +
      1.4142135623730951*Conj(TLambdax)*(KroneckerDelta(2,gO2)*(ZA(gI1,1)*ZA(gI2,0
      ) + ZA(gI1,0)*ZA(gI2,1)) + KroneckerDelta(1,gO2)*(ZA(gI1,2)*ZA(gI2,0) + ZA(
      gI1,0)*ZA(gI2,2)) + KroneckerDelta(0,gO2)*(ZA(gI1,2)*ZA(gI2,1) + ZA(gI1,1)*
      ZA(gI2,2))) - vphi*Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,0)*ZA(
      gI2,3) + vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,3) -
      vphi*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) + vd*
      Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,3) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(gI2
      ,3) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(4,gO2)*ZA(gI1,2)*ZA(
      gI2,3) - 2*vphi*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,
      3) + 1.4142135623730951*Conj(MuPhi)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*
      ZA(gI2,3) + 2*vphi*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(
      gI2,3) - 1.4142135623730951*KroneckerDelta(4,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,3
      ) - 1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*ZA
      (gI2,3) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,4)*
      ZA(gI2,3) - 2*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(
      gI2,3) + 2*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,3)
      + vu*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,3) + vd*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,4)*ZA(gI2,3) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2
      ,3) + 2*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3)
      - 2*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,3) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,4)*ZA(gI2,3) - vsb*
      Conj(Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) + vu*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,0)*ZA(gI2,4) - vsb*Conj(Sigmax)
      *KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) + vd*Conj(Sigmax)*
      KroneckerDelta(3,gO2)*Lambdax*ZA(gI1,1)*ZA(gI2,4) - 1.4142135623730951*MuPhi
      *Conj(Sigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,4) + 1.4142135623730951
      *Conj(TSigmax)*KroneckerDelta(3,gO2)*ZA(gI1,2)*ZA(gI2,4) - 2*vphi*Conj(
      Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) + 2*vsb*Conj(
      Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,2)*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2
      ,4) + 2*vphi*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4)
      - 2*vsb*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,2)*ZA(gI2,4) -
      1.4142135623730951*KroneckerDelta(3,gO2)*TSigmax*ZA(gI1,2)*ZA(gI2,4) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(gI2
      ,4) + 1.4142135623730951*Conj(TSigmax)*KroneckerDelta(2,gO2)*ZA(gI1,3)*ZA(
      gI2,4) - 2*vphi*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,
      4) + 2*vs*Conj(Sigmax)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,3)*ZA(gI2,4) +
      vu*Conj(Sigmax)*KroneckerDelta(0,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,4) + vd*Conj(
      Sigmax)*KroneckerDelta(1,gO2)*Lambdax*ZA(gI1,3)*ZA(gI2,4) +
      1.4142135623730951*Conj(MuPhi)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2
      ,4) + 2*vphi*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4)
      - 2*vs*Conj(KappaPr)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI1,3)*ZA(gI2,4) -
      1.4142135623730951*KroneckerDelta(2,gO2)*TSigmax*ZA(gI1,3)*ZA(gI2,4) +
      8.485281374238571*MuPhi*Conj(KappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(gI2
      ,4) - 2.8284271247461903*Conj(TKappaPr)*KroneckerDelta(4,gO2)*ZA(gI1,4)*ZA(
      gI2,4) + 2*vsb*Conj(Sigmax)*KroneckerDelta(2,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4
      ) + 2*vs*Conj(Sigmax)*KroneckerDelta(3,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2,4) -
      8.485281374238571*Conj(MuPhi)*KroneckerDelta(4,gO2)*KappaPr*ZA(gI1,4)*ZA(gI2
      ,4) - 2*vsb*Conj(KappaPr)*KroneckerDelta(2,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) -
      2*vs*Conj(KappaPr)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI1,4)*ZA(gI2,4) +
      2.8284271247461903*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI1,4)*ZA(gI2,4) + Conj
      (Lambdax)*Sigmax*(vphi*KroneckerDelta(1,gO2)*ZA(gI1,3)*ZA(gI2,0) + vsb*
      KroneckerDelta(1,gO2)*ZA(gI1,4)*ZA(gI2,0) + vphi*KroneckerDelta(0,gO2)*ZA(
      gI1,3)*ZA(gI2,1) + vsb*KroneckerDelta(0,gO2)*ZA(gI1,4)*ZA(gI2,1) + vphi*
      KroneckerDelta(1,gO2)*ZA(gI1,0)*ZA(gI2,3) + vphi*KroneckerDelta(0,gO2)*ZA(
      gI1,1)*ZA(gI2,3) - vu*KroneckerDelta(0,gO2)*ZA(gI1,4)*ZA(gI2,3) - vd*
      KroneckerDelta(1,gO2)*ZA(gI1,4)*ZA(gI2,3) - KroneckerDelta(4,gO2)*(ZA(gI1,3)
      *(vu*ZA(gI2,0) + vd*ZA(gI2,1)) + ZA(gI1,1)*(-(vsb*ZA(gI2,0)) + vd*ZA(gI2,3))
      + ZA(gI1,0)*(-(vsb*ZA(gI2,1)) + vu*ZA(gI2,3))) + vsb*KroneckerDelta(1,gO2)*
      ZA(gI1,0)*ZA(gI2,4) + vsb*KroneckerDelta(0,gO2)*ZA(gI1,1)*ZA(gI2,4) - vu*
      KroneckerDelta(0,gO2)*ZA(gI1,3)*ZA(gI2,4) - vd*KroneckerDelta(1,gO2)*ZA(gI1,
      3)*ZA(gI2,4) - KroneckerDelta(3,gO2)*(ZA(gI1,4)*(vu*ZA(gI2,0) + vd*ZA(gI2,1)
      ) + ZA(gI1,1)*(-(vphi*ZA(gI2,0)) + vd*ZA(gI2,4)) + ZA(gI1,0)*(-(vphi*ZA(gI2,
      1)) + vu*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhhhAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)
      *ZA(gI2,0) - 14.142135623730951*Conj(TLambdax)*Conj(ZH(gI1,2))*
      KroneckerDelta(1,gO2)*ZA(gI2,0) + 10*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) + 10*vsb*Conj(Sigmax)*Conj(ZH(gI1,4)
      )*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,0) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,
      3))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) + 10*vphi*Conj(Lambdax)*Conj(ZH(
      gI1,3))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,0) + 10*vsb*Conj(Lambdax)*Conj(
      ZH(gI1,4))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,0) - 10*vu*Conj(Lambdax)*Conj
      (ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,0) - 10*vu*Conj(Lambdax)*
      Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,0) + 3*QS*vs*Conj(ZH(gI1
      ,2))*KroneckerDelta(0,gO2)*Sqr(g1p)*ZA(gI2,0) - 3*QS*vsb*Conj(ZH(gI1,3))*
      KroneckerDelta(0,gO2)*Sqr(g1p)*ZA(gI2,0) - 14.142135623730951*Conj(ZH(gI1,2)
      )*KroneckerDelta(1,gO2)*TLambdax*ZA(gI2,0) - 14.142135623730951*Conj(
      TLambdax)*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)*ZA(gI2,1) - 40*vs*AbsSqr(
      Lambdax)*Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*ZA(gI2,1) + 10*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) + 10*vsb*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,1) - 10*vd
      *Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,1) - 10*
      vd*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,1) + 10
      *vphi*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,1) +
      10*vsb*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,1)
      - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,1
      ) - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,
      1) + 2*QS*vs*Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) - 2*QS
      *vsb*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) -
      14.142135623730951*Conj(ZH(gI1,2))*KroneckerDelta(0,gO2)*TLambdax*ZA(gI2,1)
      - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,2) - 40
      *vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*ZA(gI2,2) -
      14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*
      ZA(gI2,2) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*KroneckerDelta(
      3,gO2)*ZA(gI2,2) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*ZA(gI2,2) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*ZA(gI2,2) - 20*vphi*Conj(Sigmax)*Conj(ZH(gI1,4
      ))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,2) + 20*vphi*Conj(Sigmax)*Conj(ZH(
      gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,2) + 20*vsb*Conj(Sigmax)*Conj(
      ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,2) - 14.142135623730951*Conj
      (MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) - 20*vphi*
      Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,2) +
      14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*
      ZA(gI2,2) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      Sigmax*ZA(gI2,2) + 20*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2
      )*Sigmax*ZA(gI2,2) - vs*Conj(ZH(gI1,2))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(
      QS)*ZA(gI2,2) + vsb*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*Sqr(g1p)*Sqr(QS)*
      ZA(gI2,2) - 14.142135623730951*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*TSigmax
      *ZA(gI2,2) - 14.142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*
      TSigmax*ZA(gI2,2) - 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(2,gO2)*ZA(gI2,3) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,4))*KroneckerDelta(2,gO2)*ZA(gI2,3) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,2
      ))*KroneckerDelta(3,gO2)*ZA(gI2,3) - 40*vphi*AbsSqr(Sigmax)*Conj(ZH(gI1,4))*
      KroneckerDelta(3,gO2)*ZA(gI2,3) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) - 14.142135623730951*Conj(
      TSigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*ZA(gI2,3) - 20*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,3) + 20*vphi*
      Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) + 20*vs
      *Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,3) - 10*
      vu*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Lambdax*ZA(gI2,3) - 10
      *vd*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,3) -
      10*vu*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(0,gO2)*Sigmax*ZA(gI2,3) -
      10*vd*Conj(Lambdax)*Conj(ZH(gI1,4))*KroneckerDelta(1,gO2)*Sigmax*ZA(gI2,3)
      - 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*
      Sigmax*ZA(gI2,3) - 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(2,
      gO2)*Sigmax*ZA(gI2,3) + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 20*vs*Conj(KappaPr)*Conj(ZH(gI1,
      4))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + vs*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI2,3) - vsb*Conj(ZH(gI1,3))*
      KroneckerDelta(3,gO2)*Sqr(g1p)*Sqr(QS)*ZA(gI2,3) - 14.142135623730951*Conj(
      ZH(gI1,4))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,3) - 14.142135623730951*Conj
      (ZH(gI1,2))*KroneckerDelta(4,gO2)*TSigmax*ZA(gI2,3) + 14.142135623730951*
      MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(gI2,4) -
      14.142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*ZA(
      gI2,4) + 14.142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,2))*
      KroneckerDelta(3,gO2)*ZA(gI2,4) - 14.142135623730951*Conj(TSigmax)*Conj(ZH(
      gI1,2))*KroneckerDelta(3,gO2)*ZA(gI2,4) - 40*vs*AbsSqr(Sigmax)*Conj(ZH(gI1,2
      ))*KroneckerDelta(4,gO2)*ZA(gI2,4) - 40*vsb*AbsSqr(Sigmax)*Conj(ZH(gI1,3))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 80*vphi*AbsSqr(KappaPr)*Conj(ZH(gI1,4))*
      KroneckerDelta(4,gO2)*ZA(gI2,4) - 28.284271247461902*MuPhi*Conj(KappaPr)*
      Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) + 28.284271247461902*Conj(
      TKappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*ZA(gI2,4) + 20*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) + 20*vsb*
      Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(2,gO2)*KappaPr*ZA(gI2,4) + 20*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) +
      20*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*KappaPr*ZA(gI2,4) -
      20*vsb*Conj(Sigmax)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4)
      - 20*vs*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*KappaPr*ZA(gI2,4
      ) - 28.284271247461902*Conj(MuPhi)*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*
      KappaPr*ZA(gI2,4) - 10*vu*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(0,gO2)
      *Lambdax*ZA(gI2,4) - 10*vd*Conj(Sigmax)*Conj(ZH(gI1,3))*KroneckerDelta(1,gO2
      )*Lambdax*ZA(gI2,4) - 10*vu*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(0,
      gO2)*Sigmax*ZA(gI2,4) - 10*vd*Conj(Lambdax)*Conj(ZH(gI1,3))*KroneckerDelta(1
      ,gO2)*Sigmax*ZA(gI2,4) + 14.142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*
      KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 20*vphi*Conj(KappaPr)*Conj(ZH(gI1,3
      ))*KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 20*vsb*Conj(KappaPr)*Conj(ZH(gI1
      ,4))*KroneckerDelta(2,gO2)*Sigmax*ZA(gI2,4) + 14.142135623730951*Conj(MuPhi)
      *Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 20*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + 20*vs*Conj
      (KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) - 20*vsb*
      Conj(KappaPr)*Conj(ZH(gI1,2))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) - 20*vs
      *Conj(KappaPr)*Conj(ZH(gI1,3))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) +
      28.284271247461902*Conj(ZH(gI1,4))*KroneckerDelta(4,gO2)*TKappaPr*ZA(gI2,4)
      - 14.142135623730951*Conj(ZH(gI1,3))*KroneckerDelta(2,gO2)*TSigmax*ZA(gI2,4)
      - 14.142135623730951*Conj(ZH(gI1,2))*KroneckerDelta(3,gO2)*TSigmax*ZA(gI2,4
      ) + 2*Conj(ZH(gI1,1))*(-7.0710678118654755*Conj(TLambdax)*KroneckerDelta(2,
      gO2)*ZA(gI2,0) - 5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,0)
      - 5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,0) - 5*vphi*Conj(
      Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,0) - 5*vsb*Conj(Lambdax)*
      KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,0) - 7.0710678118654755*KroneckerDelta(2
      ,gO2)*TLambdax*ZA(gI2,0) - 3*vu*KroneckerDelta(1,gO2)*Sqr(g1)*ZA(gI2,1) - 2*
      vu*KroneckerDelta(1,gO2)*Sqr(g1p)*ZA(gI2,1) - 5*vu*KroneckerDelta(1,gO2)*Sqr
      (g2)*ZA(gI2,1) - 20*vu*AbsSqr(Lambdax)*KroneckerDelta(2,gO2)*ZA(gI2,2) + QS*
      vu*KroneckerDelta(2,gO2)*Sqr(g1p)*ZA(gI2,2) + 5*vd*Conj(Sigmax)*
      KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3) + 5*vd*Conj(Lambdax)*KroneckerDelta(
      4,gO2)*Sigmax*ZA(gI2,3) - QS*vu*KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI2,3) + 5
      *vd*Conj(Sigmax)*KroneckerDelta(3,gO2)*Lambdax*ZA(gI2,4) + 5*vd*Conj(Lambdax
      )*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,4) + KroneckerDelta(0,gO2)*(vu*(-20*
      AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI2,0) - 5*(
      1.4142135623730951*Conj(TLambdax)*ZA(gI2,2) + 1.4142135623730951*TLambdax*ZA
      (gI2,2) + (Conj(Sigmax)*Lambdax + Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) +
      vsb*ZA(gI2,4))))) - Conj(ZH(gI1,0))*(vd*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9
      *Sqr(g1p) + 10*Sqr(g2))*ZA(gI2,0) + 14.142135623730951*Conj(TLambdax)*
      KroneckerDelta(2,gO2)*ZA(gI2,1) + 10*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *Lambdax*ZA(gI2,1) + 10*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(
      gI2,1) + 10*vphi*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax*ZA(gI2,1) + 10*
      vsb*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,1) +
      14.142135623730951*KroneckerDelta(2,gO2)*TLambdax*ZA(gI2,1) + 40*vd*AbsSqr(
      Lambdax)*KroneckerDelta(2,gO2)*ZA(gI2,2) - 3*QS*vd*KroneckerDelta(2,gO2)*Sqr
      (g1p)*ZA(gI2,2) - 10*vu*Conj(Sigmax)*KroneckerDelta(4,gO2)*Lambdax*ZA(gI2,3)
      - 10*vu*Conj(Lambdax)*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) + 3*QS*vd*
      KroneckerDelta(3,gO2)*Sqr(g1p)*ZA(gI2,3) - 10*vu*Conj(Sigmax)*KroneckerDelta
      (3,gO2)*Lambdax*ZA(gI2,4) - 10*vu*Conj(Lambdax)*KroneckerDelta(3,gO2)*Sigmax
      *ZA(gI2,4) + 2*KroneckerDelta(1,gO2)*(vd*(20*AbsSqr(Lambdax) - 3*Sqr(g1) + 3
      *Sqr(g1p) - 5*Sqr(g2))*ZA(gI2,1) + 5*(1.4142135623730951*Conj(TLambdax)*ZA(
      gI2,2) + 1.4142135623730951*TLambdax*ZA(gI2,2) + (Conj(Sigmax)*Lambdax +
      Conj(Lambdax)*Sigmax)*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4))))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhhhhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,4))*KroneckerDelta(2,gO2) + 1.4142135623730951*Conj(TLambdax)*(
      Conj(ZH(gI1,2))*(Conj(ZH(gI2,1))*KroneckerDelta(0,gO2) + Conj(ZH(gI2,0))*
      KroneckerDelta(1,gO2)) + Conj(ZH(gI1,1))*(Conj(ZH(gI2,2))*KroneckerDelta(0,
      gO2) + Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)) + Conj(ZH(gI1,0))*(Conj(ZH(gI2
      ,2))*KroneckerDelta(1,gO2) + Conj(ZH(gI2,1))*KroneckerDelta(2,gO2))) +
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*
      KroneckerDelta(3,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,2))*KroneckerDelta(3,gO2) + 1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) -
      1.4142135623730951*MuPhi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2) + 1.4142135623730951*Conj(TSigmax)*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,2))*KroneckerDelta(4,gO2) - 1.4142135623730951*MuPhi*Conj(Sigmax
      )*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) + 1.4142135623730951
      *Conj(TSigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) -
      2.8284271247461903*MuPhi*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2) - 2.8284271247461903*Conj(TKappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(4,gO2) + 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*KappaPr + 2*vphi*Conj(Sigmax)*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 2*vsb*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*KappaPr + 2*vphi*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*KappaPr + 2*
      vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*
      KappaPr + 2*vs*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(3
      ,gO2)*KappaPr - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(4,gO2)*KappaPr - 2*vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,2))*KroneckerDelta(4,gO2)*KappaPr - 2*vphi*Conj(Sigmax)*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr - 2*vs*Conj(Sigmax)*Conj(ZH(
      gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*KappaPr - 2*vsb*Conj(Sigmax)*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*KappaPr - 2*vs*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*KappaPr +
      2.8284271247461903*Conj(MuPhi)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(4,gO2)*KappaPr + vphi*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,1))*KroneckerDelta(0,gO2)*Lambdax + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*Lambdax + vphi*Conj(Sigmax)*Conj(ZH(
      gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax + vu*Conj(Sigmax)*Conj
      (ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*Lambdax + vsb*Conj(Sigmax)
      *Conj(ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax + vu*Conj(
      Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*Lambdax + vphi
      *Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*Lambdax
      + vsb*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*
      Lambdax + vphi*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,3))*KroneckerDelta(1
      ,gO2)*Lambdax + vd*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
      KroneckerDelta(1,gO2)*Lambdax + vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2
      ,4))*KroneckerDelta(1,gO2)*Lambdax + vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH
      (gI2,4))*KroneckerDelta(1,gO2)*Lambdax - vphi*Conj(Sigmax)*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,0))*KroneckerDelta(3,gO2)*Lambdax - vphi*Conj(Sigmax)*Conj(
      ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - vd*Conj(Sigmax)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2)*Lambdax - vu*Conj(
      Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax - vd*
      Conj(Sigmax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Lambdax -
      vsb*Conj(Sigmax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(4,gO2)*
      Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,0))*KroneckerDelta(4,
      gO2)*Lambdax - vsb*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
      KroneckerDelta(4,gO2)*Lambdax - vd*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,
      1))*KroneckerDelta(4,gO2)*Lambdax - vu*Conj(Sigmax)*Conj(ZH(gI1,0))*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Lambdax - vd*Conj(Sigmax)*Conj(ZH(gI1,1))*Conj
      (ZH(gI2,3))*KroneckerDelta(4,gO2)*Lambdax - 1.4142135623730951*Conj(MuPhi)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sigmax - 2*vphi*Conj(
      KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(2,gO2)*Sigmax -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2)*Sigmax - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(
      gI2,4))*KroneckerDelta(2,gO2)*Sigmax - 2*vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(2,gO2)*Sigmax - 1.4142135623730951*Conj(MuPhi
      )*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax - 2*vphi*Conj
      (KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(3,gO2)*Sigmax -
      1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,4))*
      KroneckerDelta(3,gO2)*Sigmax - 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(
      gI2,4))*KroneckerDelta(3,gO2)*Sigmax - 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*Sigmax + 1.4142135623730951*Conj(MuPhi
      )*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 2*vphi*Conj
      (KappaPr)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*Sigmax + 2*
      vsb*Conj(KappaPr)*Conj(ZH(gI1,4))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*
      Sigmax + 1.4142135623730951*Conj(MuPhi)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*
      KroneckerDelta(4,gO2)*Sigmax + 2*vphi*Conj(KappaPr)*Conj(ZH(gI1,2))*Conj(ZH(
      gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 2*vs*Conj(KappaPr)*Conj(ZH(gI1,4))*
      Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*Sigmax + 2*vsb*Conj(KappaPr)*Conj(ZH(
      gI1,2))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + 2*vs*Conj(KappaPr)*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(4,gO2)*Sigmax + Conj(Lambdax)
      *(-(vphi*Conj(ZH(gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)) - vsb*Conj(
      ZH(gI1,1))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2) - vphi*Conj(ZH(gI1,0))*Conj
      (ZH(gI2,3))*KroneckerDelta(1,gO2) - vsb*Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*
      KroneckerDelta(1,gO2) + vphi*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(
      3,gO2) + vphi*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(3,gO2) + vu*
      Conj(ZH(gI1,0))*Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) + vd*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2) - Conj(ZH(gI1,4))*(Conj(ZH(gI2,3))*(vu
      *KroneckerDelta(0,gO2) + vd*KroneckerDelta(1,gO2)) + Conj(ZH(gI2,1))*(vsb*
      KroneckerDelta(0,gO2) - vd*KroneckerDelta(3,gO2)) + Conj(ZH(gI2,0))*(vsb*
      KroneckerDelta(1,gO2) - vu*KroneckerDelta(3,gO2))) + vsb*Conj(ZH(gI1,1))*
      Conj(ZH(gI2,0))*KroneckerDelta(4,gO2) + vsb*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
      KroneckerDelta(4,gO2) + vu*Conj(ZH(gI1,0))*Conj(ZH(gI2,3))*KroneckerDelta(4,
      gO2) + vd*Conj(ZH(gI1,1))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2) - Conj(ZH(
      gI1,3))*(Conj(ZH(gI2,4))*(vu*KroneckerDelta(0,gO2) + vd*KroneckerDelta(1,gO2
      )) + Conj(ZH(gI2,1))*(vphi*KroneckerDelta(0,gO2) - vd*KroneckerDelta(4,gO2))
      + Conj(ZH(gI2,0))*(vphi*KroneckerDelta(1,gO2) - vu*KroneckerDelta(4,gO2))))
      *Sigmax + 2.8284271247461903*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(
      4,gO2)*TKappaPr - 1.4142135623730951*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*
      KroneckerDelta(0,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(gI1,1))*Conj(ZH(
      gI2,2))*KroneckerDelta(0,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,0))*KroneckerDelta(1,gO2)*TLambdax - 1.4142135623730951*Conj(ZH(
      gI1,0))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*TLambdax - 1.4142135623730951*
      Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*KroneckerDelta(2,gO2)*TLambdax -
      1.4142135623730951*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*KroneckerDelta(2,gO2)*
      TLambdax - 1.4142135623730951*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta
      (2,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(2,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,4))*Conj(ZH(
      gI2,2))*KroneckerDelta(3,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,4))*KroneckerDelta(3,gO2)*TSigmax - 1.4142135623730951*Conj(ZH(
      gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(4,gO2)*TSigmax - 1.4142135623730951*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(4,gO2)*TSigmax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3188;
   std::complex<double> tmp_3189;
   std::complex<double> tmp_3190;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3190 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3189 += tmp_3190;
   tmp_3188 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3189;
   std::complex<double> tmp_3191;
   std::complex<double> tmp_3192;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3192 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3191 += tmp_3192;
   tmp_3188 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3191;
   std::complex<double> tmp_3193;
   std::complex<double> tmp_3194;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3194 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3193 += tmp_3194;
   tmp_3188 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3193;
   std::complex<double> tmp_3195;
   std::complex<double> tmp_3196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3196 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3195 += tmp_3196;
   tmp_3188 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3195;
   std::complex<double> tmp_3197;
   std::complex<double> tmp_3198;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3198 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3197 += tmp_3198;
   tmp_3188 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3197;
   std::complex<double> tmp_3199;
   std::complex<double> tmp_3200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3200 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3199 += tmp_3200;
   tmp_3188 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3199;
   std::complex<double> tmp_3201;
   std::complex<double> tmp_3202;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3202 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3201 += tmp_3202;
   tmp_3188 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3201;
   std::complex<double> tmp_3203;
   std::complex<double> tmp_3204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3204 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3203 += tmp_3204;
   tmp_3188 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3203;
   std::complex<double> tmp_3205;
   std::complex<double> tmp_3206;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3206 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_3205 += tmp_3206;
   tmp_3188 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_3205;
   std::complex<double> tmp_3207;
   std::complex<double> tmp_3208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3208 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_3207 += tmp_3208;
   tmp_3188 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_3207;
   std::complex<double> tmp_3209;
   std::complex<double> tmp_3210;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3210 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3209 += tmp_3210;
   tmp_3188 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3209;
   std::complex<double> tmp_3211;
   std::complex<double> tmp_3212;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3212 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3211 += tmp_3212;
   tmp_3188 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3211;
   std::complex<double> tmp_3213;
   std::complex<double> tmp_3214;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3214 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3213 += tmp_3214;
   tmp_3188 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3213;
   std::complex<double> tmp_3215;
   std::complex<double> tmp_3216;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3216 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3215 += tmp_3216;
   tmp_3188 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3215;
   std::complex<double> tmp_3217;
   std::complex<double> tmp_3218;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3218 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3217 += tmp_3218;
   tmp_3188 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3217;
   std::complex<double> tmp_3219;
   std::complex<double> tmp_3220;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3220 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3219 += tmp_3220;
   tmp_3188 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3219;
   std::complex<double> tmp_3221;
   std::complex<double> tmp_3222;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3222 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_3221 += tmp_3222;
   tmp_3188 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_3221;
   std::complex<double> tmp_3223;
   std::complex<double> tmp_3224;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3224 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_3223 += tmp_3224;
   tmp_3188 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_3223;
   std::complex<double> tmp_3225;
   std::complex<double> tmp_3226;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3226 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3225 += tmp_3226;
   tmp_3188 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3225;
   std::complex<double> tmp_3227;
   std::complex<double> tmp_3228;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3228 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_3227 += tmp_3228;
   tmp_3188 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3227;
   result += (std::complex<double>(0,-1)) * tmp_3188;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3229;
   std::complex<double> tmp_3230;
   std::complex<double> tmp_3231;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3231 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3230 += tmp_3231;
   tmp_3229 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3230;
   std::complex<double> tmp_3232;
   std::complex<double> tmp_3233;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3233 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3232 += tmp_3233;
   tmp_3229 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3232;
   std::complex<double> tmp_3234;
   std::complex<double> tmp_3235;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3235 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3234 += tmp_3235;
   tmp_3229 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3234;
   std::complex<double> tmp_3236;
   std::complex<double> tmp_3237;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3237 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3236 += tmp_3237;
   tmp_3229 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3236;
   std::complex<double> tmp_3238;
   std::complex<double> tmp_3239;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3239 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3238 += tmp_3239;
   tmp_3229 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3238;
   std::complex<double> tmp_3240;
   std::complex<double> tmp_3241;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3241 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3240 += tmp_3241;
   tmp_3229 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3240;
   std::complex<double> tmp_3242;
   std::complex<double> tmp_3243;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3243 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3242 += tmp_3243;
   tmp_3229 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_3242;
   std::complex<double> tmp_3244;
   std::complex<double> tmp_3245;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3245 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3244 += tmp_3245;
   tmp_3229 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_3244;
   std::complex<double> tmp_3246;
   std::complex<double> tmp_3247;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3247 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3246 += tmp_3247;
   tmp_3229 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_3246;
   std::complex<double> tmp_3248;
   std::complex<double> tmp_3249;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3249 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3248 += tmp_3249;
   tmp_3229 += (std::complex<double>(0,-0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_3248;
   std::complex<double> tmp_3250;
   std::complex<double> tmp_3251;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3251 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3250 += tmp_3251;
   tmp_3229 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3250;
   std::complex<double> tmp_3252;
   std::complex<double> tmp_3253;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3253 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3252 += tmp_3253;
   tmp_3229 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3252;
   std::complex<double> tmp_3254;
   std::complex<double> tmp_3255;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3255 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3254 += tmp_3255;
   tmp_3229 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3254;
   std::complex<double> tmp_3256;
   std::complex<double> tmp_3257;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3257 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3256 += tmp_3257;
   tmp_3229 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3256;
   std::complex<double> tmp_3258;
   std::complex<double> tmp_3259;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3259 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3258 += tmp_3259;
   tmp_3229 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3258;
   std::complex<double> tmp_3260;
   std::complex<double> tmp_3261;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3261 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3260 += tmp_3261;
   tmp_3229 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3260;
   std::complex<double> tmp_3262;
   std::complex<double> tmp_3263;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3263 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3262 += tmp_3263;
   tmp_3229 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(1,gO1)) * tmp_3262;
   std::complex<double> tmp_3264;
   std::complex<double> tmp_3265;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3265 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3264 += tmp_3265;
   tmp_3229 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(1,gO2)) * tmp_3264;
   std::complex<double> tmp_3266;
   std::complex<double> tmp_3267;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3267 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3266 += tmp_3267;
   tmp_3229 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)
      *KroneckerDelta(4,gO1)) * tmp_3266;
   std::complex<double> tmp_3268;
   std::complex<double> tmp_3269;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3269 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3268 += tmp_3269;
   tmp_3229 += (std::complex<double>(0,-0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)
      *KroneckerDelta(4,gO2)) * tmp_3268;
   std::complex<double> tmp_3270;
   std::complex<double> tmp_3271;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3271 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_3270 += tmp_3271;
   tmp_3229 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3270;
   std::complex<double> tmp_3272;
   std::complex<double> tmp_3273;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3273 += AbsSqr(Kappa(j2,j2))*Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2)
         ;
   }
   tmp_3272 += tmp_3273;
   tmp_3229 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3272;
   result += (std::complex<double>(0,-1)) * tmp_3229;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3274;
   std::complex<double> tmp_3275;
   std::complex<double> tmp_3276;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3276 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3275 += tmp_3276;
   tmp_3274 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3275;
   std::complex<double> tmp_3277;
   std::complex<double> tmp_3278;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3278 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3277 += tmp_3278;
   tmp_3274 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3277;
   std::complex<double> tmp_3279;
   std::complex<double> tmp_3280;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3280 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3279 += tmp_3280;
   tmp_3274 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3279;
   std::complex<double> tmp_3281;
   std::complex<double> tmp_3282;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3282 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3281 += tmp_3282;
   tmp_3274 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3281;
   std::complex<double> tmp_3283;
   std::complex<double> tmp_3284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3284 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3283 += tmp_3284;
   tmp_3274 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3283;
   std::complex<double> tmp_3285;
   std::complex<double> tmp_3286;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3286 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3285 += tmp_3286;
   tmp_3274 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3285;
   std::complex<double> tmp_3287;
   std::complex<double> tmp_3288;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3288 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3287 += tmp_3288;
   tmp_3274 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3287;
   std::complex<double> tmp_3289;
   std::complex<double> tmp_3290;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3290 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3289 += tmp_3290;
   tmp_3274 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3289;
   std::complex<double> tmp_3291;
   std::complex<double> tmp_3292;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3292 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_3291 += tmp_3292;
   tmp_3274 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_3291;
   std::complex<double> tmp_3293;
   std::complex<double> tmp_3294;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3294 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_3293 += tmp_3294;
   tmp_3274 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_3293;
   std::complex<double> tmp_3295;
   std::complex<double> tmp_3296;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3296 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3295 += tmp_3296;
   tmp_3274 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3295;
   std::complex<double> tmp_3297;
   std::complex<double> tmp_3298;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3298 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3297 += tmp_3298;
   tmp_3274 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3297;
   std::complex<double> tmp_3299;
   std::complex<double> tmp_3300;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3300 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3299 += tmp_3300;
   tmp_3274 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3299;
   std::complex<double> tmp_3301;
   std::complex<double> tmp_3302;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3302 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3301 += tmp_3302;
   tmp_3274 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3301;
   std::complex<double> tmp_3303;
   std::complex<double> tmp_3304;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3304 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3303 += tmp_3304;
   tmp_3274 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3303;
   std::complex<double> tmp_3305;
   std::complex<double> tmp_3306;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3306 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3305 += tmp_3306;
   tmp_3274 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3305;
   std::complex<double> tmp_3307;
   std::complex<double> tmp_3308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3308 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_3307 += tmp_3308;
   tmp_3274 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_3307;
   std::complex<double> tmp_3309;
   std::complex<double> tmp_3310;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3310 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_3309 += tmp_3310;
   tmp_3274 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_3309;
   std::complex<double> tmp_3311;
   std::complex<double> tmp_3312;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3312 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_3311 += tmp_3312;
   tmp_3274 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3311;
   std::complex<double> tmp_3313;
   std::complex<double> tmp_3314;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3314 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_3313 += tmp_3314;
   tmp_3274 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3313;
   result += (std::complex<double>(0,-1)) * tmp_3274;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3315;
   std::complex<double> tmp_3316;
   std::complex<double> tmp_3317;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3317 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3316 += tmp_3317;
   tmp_3315 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3316;
   std::complex<double> tmp_3318;
   std::complex<double> tmp_3319;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3319 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3318 += tmp_3319;
   tmp_3315 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3318;
   std::complex<double> tmp_3320;
   std::complex<double> tmp_3321;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3321 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3320 += tmp_3321;
   tmp_3315 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3320;
   std::complex<double> tmp_3322;
   std::complex<double> tmp_3323;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3323 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3322 += tmp_3323;
   tmp_3315 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3322;
   std::complex<double> tmp_3324;
   std::complex<double> tmp_3325;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3325 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3324 += tmp_3325;
   tmp_3315 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3324;
   std::complex<double> tmp_3326;
   std::complex<double> tmp_3327;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3327 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3326 += tmp_3327;
   tmp_3315 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3326;
   std::complex<double> tmp_3328;
   std::complex<double> tmp_3329;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3329 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3328 += tmp_3329;
   tmp_3315 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3328;
   std::complex<double> tmp_3330;
   std::complex<double> tmp_3331;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3331 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3330 += tmp_3331;
   tmp_3315 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3330;
   std::complex<double> tmp_3332;
   std::complex<double> tmp_3333;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3333 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3332 += tmp_3333;
   tmp_3315 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_3332;
   std::complex<double> tmp_3334;
   std::complex<double> tmp_3335;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3335 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3334 += tmp_3335;
   tmp_3315 += (std::complex<double>(0,-0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_3334;
   std::complex<double> tmp_3336;
   std::complex<double> tmp_3337;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3337 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3336 += tmp_3337;
   tmp_3315 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3336;
   std::complex<double> tmp_3338;
   std::complex<double> tmp_3339;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3339 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3338 += tmp_3339;
   tmp_3315 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3338;
   std::complex<double> tmp_3340;
   std::complex<double> tmp_3341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3341 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3340 += tmp_3341;
   tmp_3315 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3340;
   std::complex<double> tmp_3342;
   std::complex<double> tmp_3343;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3343 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3342 += tmp_3343;
   tmp_3315 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3342;
   std::complex<double> tmp_3344;
   std::complex<double> tmp_3345;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3345 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3344 += tmp_3345;
   tmp_3315 += (std::complex<double>(0,-0.025)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3344;
   std::complex<double> tmp_3346;
   std::complex<double> tmp_3347;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3347 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3346 += tmp_3347;
   tmp_3315 += (std::complex<double>(0,0.025)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3346;
   std::complex<double> tmp_3348;
   std::complex<double> tmp_3349;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3349 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3348 += tmp_3349;
   tmp_3315 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2
      )*KroneckerDelta(2,gO1)) * tmp_3348;
   std::complex<double> tmp_3350;
   std::complex<double> tmp_3351;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3351 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3350 += tmp_3351;
   tmp_3315 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1
      )*KroneckerDelta(2,gO2)) * tmp_3350;
   std::complex<double> tmp_3352;
   std::complex<double> tmp_3353;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3353 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3352 += tmp_3353;
   tmp_3315 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3352;
   std::complex<double> tmp_3354;
   std::complex<double> tmp_3355;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3355 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_3354 += tmp_3355;
   tmp_3315 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3354;
   result += (std::complex<double>(0,-1)) * tmp_3315;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSdSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3356;
   std::complex<double> tmp_3357;
   std::complex<double> tmp_3358;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3358 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_3357 += tmp_3358;
   tmp_3356 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_3357;
   std::complex<double> tmp_3359;
   std::complex<double> tmp_3360;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3360 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZD(gI1,j1);
   }
   tmp_3359 += tmp_3360;
   tmp_3356 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_3359;
   std::complex<double> tmp_3361;
   std::complex<double> tmp_3362;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3362 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZD(gI1,j1);
   }
   tmp_3361 += tmp_3362;
   tmp_3356 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3361;
   std::complex<double> tmp_3363;
   std::complex<double> tmp_3364;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3364 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_3363 += tmp_3364;
   tmp_3356 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3363;
   std::complex<double> tmp_3365;
   std::complex<double> tmp_3366;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3366 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_3365 += tmp_3366;
   tmp_3356 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3365;
   std::complex<double> tmp_3367;
   std::complex<double> tmp_3368;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3368 += Conj(ZD(gI2,j1))*ZD(gI1,3 + j1)*TYd(j1,j1);
   }
   tmp_3367 += tmp_3368;
   tmp_3356 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3367;
   result += (std::complex<double>(0,-1)) * tmp_3356;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSDXSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3369;
   std::complex<double> tmp_3370;
   std::complex<double> tmp_3371;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3371 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3370 += tmp_3371;
   tmp_3369 += (-0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_3370;
   std::complex<double> tmp_3372;
   std::complex<double> tmp_3373;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3373 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3372 += tmp_3373;
   tmp_3369 += (-0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_3372;
   std::complex<double> tmp_3374;
   std::complex<double> tmp_3375;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3375 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3374 += tmp_3375;
   tmp_3369 += (-0.5*vphi*KroneckerDelta(3,gO2)*Sigmax) * tmp_3374;
   std::complex<double> tmp_3376;
   std::complex<double> tmp_3377;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3377 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3376 += tmp_3377;
   tmp_3369 += (-0.5*vsb*KroneckerDelta(4,gO2)*Sigmax) * tmp_3376;
   std::complex<double> tmp_3378;
   std::complex<double> tmp_3379;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3379 += Conj(ZDX(gI2,3 + j1))*Conj(TKappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3378 += tmp_3379;
   tmp_3369 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3378;
   std::complex<double> tmp_3380;
   std::complex<double> tmp_3381;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3381 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3380 += tmp_3381;
   tmp_3369 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3380;
   std::complex<double> tmp_3382;
   std::complex<double> tmp_3383;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3383 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3382 += tmp_3383;
   tmp_3369 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3382;
   std::complex<double> tmp_3384;
   std::complex<double> tmp_3385;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3385 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3384 += tmp_3385;
   tmp_3369 += (0.5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)) * tmp_3384;
   std::complex<double> tmp_3386;
   std::complex<double> tmp_3387;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3387 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3386 += tmp_3387;
   tmp_3369 += (0.5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)) * tmp_3386;
   std::complex<double> tmp_3388;
   std::complex<double> tmp_3389;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3389 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*TKappa(j1,j1);
   }
   tmp_3388 += tmp_3389;
   tmp_3369 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3388;
   result += (std::complex<double>(0,-1)) * tmp_3369;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSeSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3390;
   std::complex<double> tmp_3391;
   std::complex<double> tmp_3392;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3392 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_3391 += tmp_3392;
   tmp_3390 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_3391;
   std::complex<double> tmp_3393;
   std::complex<double> tmp_3394;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3394 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZE(gI1,j1);
   }
   tmp_3393 += tmp_3394;
   tmp_3390 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_3393;
   std::complex<double> tmp_3395;
   std::complex<double> tmp_3396;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3396 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZE(gI1,j1);
   }
   tmp_3395 += tmp_3396;
   tmp_3390 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3395;
   std::complex<double> tmp_3397;
   std::complex<double> tmp_3398;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3398 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_3397 += tmp_3398;
   tmp_3390 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3397;
   std::complex<double> tmp_3399;
   std::complex<double> tmp_3400;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3400 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_3399 += tmp_3400;
   tmp_3390 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3399;
   std::complex<double> tmp_3401;
   std::complex<double> tmp_3402;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3402 += Conj(ZE(gI2,j1))*ZE(gI1,3 + j1)*TYe(j1,j1);
   }
   tmp_3401 += tmp_3402;
   tmp_3390 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3401;
   result += (std::complex<double>(0,-1)) * tmp_3390;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSuSu(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3403;
   std::complex<double> tmp_3404;
   std::complex<double> tmp_3405;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3405 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3404 += tmp_3405;
   tmp_3403 += (-0.5*vs*KroneckerDelta(0,gO2)*Lambdax) * tmp_3404;
   std::complex<double> tmp_3406;
   std::complex<double> tmp_3407;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3407 += Conj(Yu(j1,j1))*Conj(ZU(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3406 += tmp_3407;
   tmp_3403 += (-0.5*vd*KroneckerDelta(2,gO2)*Lambdax) * tmp_3406;
   std::complex<double> tmp_3408;
   std::complex<double> tmp_3409;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3409 += Conj(ZU(gI2,3 + j1))*Conj(TYu(j1,j1))*ZU(gI1,j1);
   }
   tmp_3408 += tmp_3409;
   tmp_3403 += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3408;
   std::complex<double> tmp_3410;
   std::complex<double> tmp_3411;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3411 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3410 += tmp_3411;
   tmp_3403 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3410;
   std::complex<double> tmp_3412;
   std::complex<double> tmp_3413;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3413 += Conj(ZU(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3412 += tmp_3413;
   tmp_3403 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3412;
   std::complex<double> tmp_3414;
   std::complex<double> tmp_3415;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3415 += Conj(ZU(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_3414 += tmp_3415;
   tmp_3403 += (0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3414;
   result += (std::complex<double>(0,-1)) * tmp_3403;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhUAhconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3416;
   std::complex<double> tmp_3417;
   std::complex<double> tmp_3418;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3418 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3417 += tmp_3418;
   tmp_3416 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3417;
   std::complex<double> tmp_3419;
   std::complex<double> tmp_3420;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3420 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3419 += tmp_3420;
   tmp_3416 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3419;
   std::complex<double> tmp_3421;
   std::complex<double> tmp_3422;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3422 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3421 += tmp_3422;
   tmp_3416 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3421;
   std::complex<double> tmp_3423;
   std::complex<double> tmp_3424;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3424 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3423 += tmp_3424;
   tmp_3416 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3423;
   std::complex<double> tmp_3425;
   std::complex<double> tmp_3426;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3426 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3425 += tmp_3426;
   tmp_3416 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3425;
   std::complex<double> tmp_3427;
   std::complex<double> tmp_3428;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3428 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3427 += tmp_3428;
   tmp_3416 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3427;
   std::complex<double> tmp_3429;
   std::complex<double> tmp_3430;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3430 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3429 += tmp_3430;
   tmp_3416 += (std::complex<double>(0,0.075)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3429;
   std::complex<double> tmp_3431;
   std::complex<double> tmp_3432;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3432 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3431 += tmp_3432;
   tmp_3416 += (std::complex<double>(0,-0.075)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3431;
   std::complex<double> tmp_3433;
   std::complex<double> tmp_3434;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3434 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3433 += tmp_3434;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)*Lambdax) * tmp_3433;
   std::complex<double> tmp_3435;
   std::complex<double> tmp_3436;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3436 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3435 += tmp_3436;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*Lambdax) * tmp_3435;
   std::complex<double> tmp_3437;
   std::complex<double> tmp_3438;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3438 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3437 += tmp_3438;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)*Sigmax) * tmp_3437;
   std::complex<double> tmp_3439;
   std::complex<double> tmp_3440;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3440 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3439 += tmp_3440;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)*Sigmax) * tmp_3439;
   std::complex<double> tmp_3441;
   std::complex<double> tmp_3442;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3442 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3441 += tmp_3442;
   tmp_3416 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3441;
   std::complex<double> tmp_3443;
   std::complex<double> tmp_3444;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3444 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3443 += tmp_3444;
   tmp_3416 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3443;
   std::complex<double> tmp_3445;
   std::complex<double> tmp_3446;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3446 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3445 += tmp_3446;
   tmp_3416 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3445;
   std::complex<double> tmp_3447;
   std::complex<double> tmp_3448;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3448 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3447 += tmp_3448;
   tmp_3416 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3447;
   std::complex<double> tmp_3449;
   std::complex<double> tmp_3450;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3450 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3449 += tmp_3450;
   tmp_3416 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3449;
   std::complex<double> tmp_3451;
   std::complex<double> tmp_3452;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3452 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3451 += tmp_3452;
   tmp_3416 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3451;
   std::complex<double> tmp_3453;
   std::complex<double> tmp_3454;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3454 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3453 += tmp_3454;
   tmp_3416 += (std::complex<double>(0,0.05)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3453;
   std::complex<double> tmp_3455;
   std::complex<double> tmp_3456;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3456 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3455 += tmp_3456;
   tmp_3416 += (std::complex<double>(0,-0.05)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3455;
   std::complex<double> tmp_3457;
   std::complex<double> tmp_3458;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3458 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3457 += tmp_3458;
   tmp_3416 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO2)
      *KroneckerDelta(1,gO1)) * tmp_3457;
   std::complex<double> tmp_3459;
   std::complex<double> tmp_3460;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3460 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3459 += tmp_3460;
   tmp_3416 += (std::complex<double>(0,0.5)*Conj(Lambdax)*KroneckerDelta(0,gO1)
      *KroneckerDelta(1,gO2)) * tmp_3459;
   std::complex<double> tmp_3461;
   std::complex<double> tmp_3462;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3462 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3461 += tmp_3462;
   tmp_3416 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO2)*
      KroneckerDelta(4,gO1)) * tmp_3461;
   std::complex<double> tmp_3463;
   std::complex<double> tmp_3464;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3464 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3463 += tmp_3464;
   tmp_3416 += (std::complex<double>(0,0.5)*Conj(Sigmax)*KroneckerDelta(3,gO1)*
      KroneckerDelta(4,gO2)) * tmp_3463;
   std::complex<double> tmp_3465;
   std::complex<double> tmp_3466;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3466 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3465 += tmp_3466;
   tmp_3416 += (std::complex<double>(0,0.375)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3465;
   std::complex<double> tmp_3467;
   std::complex<double> tmp_3468;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3468 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3467 += tmp_3468;
   tmp_3416 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3467;
   std::complex<double> tmp_3469;
   std::complex<double> tmp_3470;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3470 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3469 += tmp_3470;
   tmp_3416 += (std::complex<double>(0,-0.125)*QS*KroneckerDelta(2,gO1)*
      KroneckerDelta(2,gO2)*Sqr(g1p)) * tmp_3469;
   std::complex<double> tmp_3471;
   std::complex<double> tmp_3472;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3472 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3471 += tmp_3472;
   tmp_3416 += (std::complex<double>(0,0.125)*QS*KroneckerDelta(3,gO1)*
      KroneckerDelta(3,gO2)*Sqr(g1p)) * tmp_3471;
   std::complex<double> tmp_3473;
   std::complex<double> tmp_3474;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3475;
      std::complex<double> tmp_3476;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3476 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3475 += tmp_3476;
      tmp_3474 += (Conj(UHI0(gI2,2 + j2))) * tmp_3475;
   }
   tmp_3473 += tmp_3474;
   tmp_3416 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO2)*
      KroneckerDelta(2,gO1)*Lambdax) * tmp_3473;
   std::complex<double> tmp_3477;
   std::complex<double> tmp_3478;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3479;
      std::complex<double> tmp_3480;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3480 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3479 += tmp_3480;
      tmp_3478 += (Conj(UHI0(gI2,2 + j2))) * tmp_3479;
   }
   tmp_3477 += tmp_3478;
   tmp_3416 += (std::complex<double>(0,-0.5)*KroneckerDelta(1,gO1)*
      KroneckerDelta(2,gO2)*Lambdax) * tmp_3477;
   std::complex<double> tmp_3481;
   std::complex<double> tmp_3482;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3483;
      std::complex<double> tmp_3484;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3484 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3483 += tmp_3484;
      tmp_3482 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_3483;
   }
   tmp_3481 += tmp_3482;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)) * tmp_3481;
   std::complex<double> tmp_3485;
   std::complex<double> tmp_3486;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3487;
      std::complex<double> tmp_3488;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3488 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3487 += tmp_3488;
      tmp_3486 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_3487;
   }
   tmp_3485 += tmp_3486;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)) * tmp_3485;
   std::complex<double> tmp_3489;
   std::complex<double> tmp_3490;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3491;
      std::complex<double> tmp_3492;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3492 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3491 += tmp_3492;
      tmp_3490 += (UHI0(gI1,2 + j2)) * tmp_3491;
   }
   tmp_3489 += tmp_3490;
   tmp_3416 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO2
      )*KroneckerDelta(2,gO1)) * tmp_3489;
   std::complex<double> tmp_3493;
   std::complex<double> tmp_3494;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3495;
      std::complex<double> tmp_3496;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3496 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3495 += tmp_3496;
      tmp_3494 += (UHI0(gI1,2 + j2)) * tmp_3495;
   }
   tmp_3493 += tmp_3494;
   tmp_3416 += (std::complex<double>(0,-0.5)*Conj(Lambdax)*KroneckerDelta(1,gO1
      )*KroneckerDelta(2,gO2)) * tmp_3493;
   std::complex<double> tmp_3497;
   std::complex<double> tmp_3498;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3498 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_3497 += tmp_3498;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3497;
   std::complex<double> tmp_3499;
   std::complex<double> tmp_3500;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_3500 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2
         + j2);
   }
   tmp_3499 += tmp_3500;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)*KroneckerDelta
      (2,gO2)) * tmp_3499;
   std::complex<double> tmp_3501;
   std::complex<double> tmp_3502;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_3503;
      std::complex<double> tmp_3504;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3504 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_3503 += tmp_3504;
      tmp_3502 += (UHI0(gI1,4 + j2)) * tmp_3503;
   }
   tmp_3501 += tmp_3502;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO2)*
      KroneckerDelta(2,gO1)) * tmp_3501;
   std::complex<double> tmp_3505;
   std::complex<double> tmp_3506;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_3507;
      std::complex<double> tmp_3508;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3508 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_3507 += tmp_3508;
      tmp_3506 += (UHI0(gI1,4 + j2)) * tmp_3507;
   }
   tmp_3505 += tmp_3506;
   tmp_3416 += (std::complex<double>(0,0.5)*KroneckerDelta(0,gO1)*
      KroneckerDelta(2,gO2)) * tmp_3505;
   std::complex<double> tmp_3509;
   std::complex<double> tmp_3510;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3511;
      std::complex<double> tmp_3512;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3513;
         std::complex<double> tmp_3514;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3514 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_3513 += tmp_3514;
         tmp_3512 += (UHI0(gI1,2 + j2)) * tmp_3513;
      }
      tmp_3511 += tmp_3512;
      tmp_3510 += (Conj(UHI0(gI2,2 + j3))) * tmp_3511;
   }
   tmp_3509 += tmp_3510;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3509;
   std::complex<double> tmp_3515;
   std::complex<double> tmp_3516;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3517;
      std::complex<double> tmp_3518;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3519;
         std::complex<double> tmp_3520;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3520 += Conj(fu(j1,j3))*fu(j1,j2);
         }
         tmp_3519 += tmp_3520;
         tmp_3518 += (Conj(UHI0(gI2,j2))) * tmp_3519;
      }
      tmp_3517 += tmp_3518;
      tmp_3516 += (UHI0(gI1,j3)) * tmp_3517;
   }
   tmp_3515 += tmp_3516;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3515;
   std::complex<double> tmp_3521;
   std::complex<double> tmp_3522;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_3523;
      std::complex<double> tmp_3524;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_3525;
         std::complex<double> tmp_3526;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_3526 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_3525 += tmp_3526;
         tmp_3524 += (Conj(UHI0(gI2,4 + j2))) * tmp_3525;
      }
      tmp_3523 += tmp_3524;
      tmp_3522 += (UHI0(gI1,4 + j3)) * tmp_3523;
   }
   tmp_3521 += tmp_3522;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3521;
   std::complex<double> tmp_3527;
   std::complex<double> tmp_3528;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_3529;
      std::complex<double> tmp_3530;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_3531;
         std::complex<double> tmp_3532;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_3532 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_3531 += tmp_3532;
         tmp_3530 += (Conj(UHI0(gI2,4 + j2))) * tmp_3531;
      }
      tmp_3529 += tmp_3530;
      tmp_3528 += (UHI0(gI1,4 + j3)) * tmp_3529;
   }
   tmp_3527 += tmp_3528;
   tmp_3416 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3527;
   result += (std::complex<double>(0,-1)) * tmp_3416;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3533;
   std::complex<double> tmp_3534;
   std::complex<double> tmp_3535;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3535 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3534 += tmp_3535;
   tmp_3533 += (0.5*vu*KroneckerDelta(0,gO2)*Lambdax) * tmp_3534;
   std::complex<double> tmp_3536;
   std::complex<double> tmp_3537;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3537 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3536 += tmp_3537;
   tmp_3533 += (0.5*vd*KroneckerDelta(1,gO2)*Lambdax) * tmp_3536;
   std::complex<double> tmp_3538;
   std::complex<double> tmp_3539;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3539 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3538 += tmp_3539;
   tmp_3533 += (0.5*vphi*KroneckerDelta(3,gO2)*Sigmax) * tmp_3538;
   std::complex<double> tmp_3540;
   std::complex<double> tmp_3541;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3541 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3540 += tmp_3541;
   tmp_3533 += (0.5*vsb*KroneckerDelta(4,gO2)*Sigmax) * tmp_3540;
   std::complex<double> tmp_3542;
   std::complex<double> tmp_3543;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3543 += Conj(UHI0(gI2,2 + j1))*Conj(TLambda12(j1,j1))*UHI0(gI1,j1)
         ;
   }
   tmp_3542 += tmp_3543;
   tmp_3533 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3542;
   std::complex<double> tmp_3544;
   std::complex<double> tmp_3545;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3545 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3544 += tmp_3545;
   tmp_3533 += (-0.5*vu*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3544;
   std::complex<double> tmp_3546;
   std::complex<double> tmp_3547;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3547 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3546 += tmp_3547;
   tmp_3533 += (-0.5*vd*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3546;
   std::complex<double> tmp_3548;
   std::complex<double> tmp_3549;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3549 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3548 += tmp_3549;
   tmp_3533 += (-0.5*vphi*Conj(Sigmax)*KroneckerDelta(3,gO2)) * tmp_3548;
   std::complex<double> tmp_3550;
   std::complex<double> tmp_3551;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3551 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3550 += tmp_3551;
   tmp_3533 += (-0.5*vsb*Conj(Sigmax)*KroneckerDelta(4,gO2)) * tmp_3550;
   std::complex<double> tmp_3552;
   std::complex<double> tmp_3553;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3553 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*TLambda12(j1,j1);
   }
   tmp_3552 += tmp_3553;
   tmp_3533 += (-0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3552;
   std::complex<double> tmp_3554;
   std::complex<double> tmp_3555;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3556;
      std::complex<double> tmp_3557;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3557 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3556 += tmp_3557;
      tmp_3555 += (Conj(UHI0(gI2,2 + j2))) * tmp_3556;
   }
   tmp_3554 += tmp_3555;
   tmp_3533 += (-0.5*vs*KroneckerDelta(1,gO2)*Lambdax) * tmp_3554;
   std::complex<double> tmp_3558;
   std::complex<double> tmp_3559;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3560;
      std::complex<double> tmp_3561;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3561 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3560 += tmp_3561;
      tmp_3559 += (Conj(UHI0(gI2,2 + j2))) * tmp_3560;
   }
   tmp_3558 += tmp_3559;
   tmp_3533 += (-0.5*vu*KroneckerDelta(2,gO2)*Lambdax) * tmp_3558;
   std::complex<double> tmp_3562;
   std::complex<double> tmp_3563;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3564;
      std::complex<double> tmp_3565;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3565 += Conj(Tfd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3564 += tmp_3565;
      tmp_3563 += (Conj(UHI0(gI2,2 + j2))) * tmp_3564;
   }
   tmp_3562 += tmp_3563;
   tmp_3533 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3562;
   std::complex<double> tmp_3566;
   std::complex<double> tmp_3567;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3568;
      std::complex<double> tmp_3569;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3569 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3568 += tmp_3569;
      tmp_3567 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_3568;
   }
   tmp_3566 += tmp_3567;
   tmp_3533 += (-0.5*vs*KroneckerDelta(0,gO2)) * tmp_3566;
   std::complex<double> tmp_3570;
   std::complex<double> tmp_3571;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3572;
      std::complex<double> tmp_3573;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3573 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3572 += tmp_3573;
      tmp_3571 += (Conj(Lambda12(j2,j2))*UHI0(gI1,j2)) * tmp_3572;
   }
   tmp_3570 += tmp_3571;
   tmp_3533 += (0.5*vd*KroneckerDelta(2,gO2)) * tmp_3570;
   std::complex<double> tmp_3574;
   std::complex<double> tmp_3575;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3576;
      std::complex<double> tmp_3577;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3577 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3576 += tmp_3577;
      tmp_3575 += (UHI0(gI1,2 + j2)) * tmp_3576;
   }
   tmp_3574 += tmp_3575;
   tmp_3533 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(1,gO2)) * tmp_3574;
   std::complex<double> tmp_3578;
   std::complex<double> tmp_3579;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3580;
      std::complex<double> tmp_3581;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3581 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3580 += tmp_3581;
      tmp_3579 += (UHI0(gI1,2 + j2)) * tmp_3580;
   }
   tmp_3578 += tmp_3579;
   tmp_3533 += (0.5*vu*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3578;
   std::complex<double> tmp_3582;
   std::complex<double> tmp_3583;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3584;
      std::complex<double> tmp_3585;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3585 += Conj(UHI0(gI2,4 + j1))*Tfd(j1,j2);
      }
      tmp_3584 += tmp_3585;
      tmp_3583 += (UHI0(gI1,2 + j2)) * tmp_3584;
   }
   tmp_3582 += tmp_3583;
   tmp_3533 += (0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3582;
   std::complex<double> tmp_3586;
   std::complex<double> tmp_3587;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_3588;
      std::complex<double> tmp_3589;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3589 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_3588 += tmp_3589;
      tmp_3587 += (UHI0(gI1,4 + j2)) * tmp_3588;
   }
   tmp_3586 += tmp_3587;
   tmp_3533 += (0.5*vs*KroneckerDelta(0,gO2)) * tmp_3586;
   std::complex<double> tmp_3590;
   std::complex<double> tmp_3591;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_3592;
      std::complex<double> tmp_3593;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3593 += Conj(fd(j2,j1))*Conj(UHI0(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_3592 += tmp_3593;
      tmp_3591 += (UHI0(gI1,4 + j2)) * tmp_3592;
   }
   tmp_3590 += tmp_3591;
   tmp_3533 += (-0.5*vd*KroneckerDelta(2,gO2)) * tmp_3590;
   result += (std::complex<double>(0,-1)) * tmp_3533;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhSHI0SHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3594;
   std::complex<double> tmp_3595;
   std::complex<double> tmp_3596;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3597;
      std::complex<double> tmp_3598;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3598 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3597 += tmp_3598;
      tmp_3596 += (Conj(UHI0(gI2,j2))) * tmp_3597;
   }
   tmp_3595 += tmp_3596;
   tmp_3594 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3595;
   std::complex<double> tmp_3599;
   std::complex<double> tmp_3600;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3601;
      std::complex<double> tmp_3602;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3602 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3601 += tmp_3602;
      tmp_3600 += (Conj(UHI0(gI2,j2))) * tmp_3601;
   }
   tmp_3599 += tmp_3600;
   tmp_3594 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3599;
   std::complex<double> tmp_3603;
   std::complex<double> tmp_3604;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3605;
      std::complex<double> tmp_3606;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3606 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3605 += tmp_3606;
      tmp_3604 += (Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3605;
   }
   tmp_3603 += tmp_3604;
   tmp_3594 += (-0.5*vs*KroneckerDelta(1,gO2)) * tmp_3603;
   std::complex<double> tmp_3607;
   std::complex<double> tmp_3608;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3609;
      std::complex<double> tmp_3610;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3610 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3609 += tmp_3610;
      tmp_3608 += (Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3609;
   }
   tmp_3607 += tmp_3608;
   tmp_3594 += (0.5*vu*KroneckerDelta(2,gO2)) * tmp_3607;
   std::complex<double> tmp_3611;
   std::complex<double> tmp_3612;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3613;
      std::complex<double> tmp_3614;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3614 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3613 += tmp_3614;
      tmp_3612 += (Conj(UHI0(gI1,j2))) * tmp_3613;
   }
   tmp_3611 += tmp_3612;
   tmp_3594 += (0.5*vs*Conj(Lambdax)*KroneckerDelta(0,gO2)) * tmp_3611;
   std::complex<double> tmp_3615;
   std::complex<double> tmp_3616;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3617;
      std::complex<double> tmp_3618;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3618 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3617 += tmp_3618;
      tmp_3616 += (Conj(UHI0(gI1,j2))) * tmp_3617;
   }
   tmp_3615 += tmp_3616;
   tmp_3594 += (0.5*vd*Conj(Lambdax)*KroneckerDelta(2,gO2)) * tmp_3615;
   std::complex<double> tmp_3619;
   std::complex<double> tmp_3620;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3621;
      std::complex<double> tmp_3622;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3622 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3621 += tmp_3622;
      tmp_3620 += (Conj(UHI0(gI1,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3621;
   }
   tmp_3619 += tmp_3620;
   tmp_3594 += (-0.5*vs*KroneckerDelta(1,gO2)) * tmp_3619;
   std::complex<double> tmp_3623;
   std::complex<double> tmp_3624;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3625;
      std::complex<double> tmp_3626;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3626 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3625 += tmp_3626;
      tmp_3624 += (Conj(UHI0(gI1,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3625;
   }
   tmp_3623 += tmp_3624;
   tmp_3594 += (0.5*vu*KroneckerDelta(2,gO2)) * tmp_3623;
   std::complex<double> tmp_3627;
   std::complex<double> tmp_3628;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3629;
      std::complex<double> tmp_3630;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3630 += Conj(UHI0(gI1,4 + j1))*Tfu(j1,j2);
      }
      tmp_3629 += tmp_3630;
      tmp_3628 += (Conj(UHI0(gI2,j2))) * tmp_3629;
   }
   tmp_3627 += tmp_3628;
   tmp_3594 += (0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3627;
   std::complex<double> tmp_3631;
   std::complex<double> tmp_3632;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3633;
      std::complex<double> tmp_3634;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3634 += Conj(UHI0(gI2,4 + j1))*Tfu(j1,j2);
      }
      tmp_3633 += tmp_3634;
      tmp_3632 += (Conj(UHI0(gI1,j2))) * tmp_3633;
   }
   tmp_3631 += tmp_3632;
   tmp_3594 += (0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3631;
   std::complex<double> tmp_3635;
   std::complex<double> tmp_3636;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3637;
      std::complex<double> tmp_3638;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3639;
         std::complex<double> tmp_3640;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3640 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3639 += tmp_3640;
         tmp_3638 += (Conj(UHI0(gI1,j2))) * tmp_3639;
      }
      tmp_3637 += tmp_3638;
      tmp_3636 += (Conj(UHI0(gI2,2 + j3))) * tmp_3637;
   }
   tmp_3635 += tmp_3636;
   tmp_3594 += (-0.5*vu*KroneckerDelta(0,gO2)) * tmp_3635;
   std::complex<double> tmp_3641;
   std::complex<double> tmp_3642;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3643;
      std::complex<double> tmp_3644;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3645;
         std::complex<double> tmp_3646;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3646 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3645 += tmp_3646;
         tmp_3644 += (Conj(UHI0(gI1,j2))) * tmp_3645;
      }
      tmp_3643 += tmp_3644;
      tmp_3642 += (Conj(UHI0(gI2,2 + j3))) * tmp_3643;
   }
   tmp_3641 += tmp_3642;
   tmp_3594 += (0.5*vd*KroneckerDelta(1,gO2)) * tmp_3641;
   std::complex<double> tmp_3647;
   std::complex<double> tmp_3648;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3649;
      std::complex<double> tmp_3650;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3651;
         std::complex<double> tmp_3652;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3652 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3651 += tmp_3652;
         tmp_3650 += (Conj(UHI0(gI2,j2))) * tmp_3651;
      }
      tmp_3649 += tmp_3650;
      tmp_3648 += (Conj(UHI0(gI1,2 + j3))) * tmp_3649;
   }
   tmp_3647 += tmp_3648;
   tmp_3594 += (-0.5*vu*KroneckerDelta(0,gO2)) * tmp_3647;
   std::complex<double> tmp_3653;
   std::complex<double> tmp_3654;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3655;
      std::complex<double> tmp_3656;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3657;
         std::complex<double> tmp_3658;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3658 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3657 += tmp_3658;
         tmp_3656 += (Conj(UHI0(gI2,j2))) * tmp_3657;
      }
      tmp_3655 += tmp_3656;
      tmp_3654 += (Conj(UHI0(gI1,2 + j3))) * tmp_3655;
   }
   tmp_3653 += tmp_3654;
   tmp_3594 += (0.5*vd*KroneckerDelta(1,gO2)) * tmp_3653;
   result += (std::complex<double>(0,-1)) * tmp_3594;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiIChiIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3659;
   std::complex<double> tmp_3660;
   std::complex<double> tmp_3661;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3661 += Conj(Lambda12(j1,j1))*ZNI(gI1,2 + j1)*ZNI(gI2,j1);
   }
   tmp_3660 += tmp_3661;
   tmp_3659 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3660;
   std::complex<double> tmp_3662;
   std::complex<double> tmp_3663;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3663 += Conj(Lambda12(j1,j1))*ZNI(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_3662 += tmp_3663;
   tmp_3659 += (0.7071067811865475*KroneckerDelta(2,gO2)) * tmp_3662;
   std::complex<double> tmp_3664;
   std::complex<double> tmp_3665;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3666;
      std::complex<double> tmp_3667;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3667 += Conj(fu(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_3666 += tmp_3667;
      tmp_3665 += (ZNI(gI1,j2)) * tmp_3666;
   }
   tmp_3664 += tmp_3665;
   tmp_3659 += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3664;
   std::complex<double> tmp_3668;
   std::complex<double> tmp_3669;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3670;
      std::complex<double> tmp_3671;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3671 += Conj(fd(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_3670 += tmp_3671;
      tmp_3669 += (ZNI(gI1,2 + j2)) * tmp_3670;
   }
   tmp_3668 += tmp_3669;
   tmp_3659 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3668;
   std::complex<double> tmp_3672;
   std::complex<double> tmp_3673;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3674;
      std::complex<double> tmp_3675;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3675 += Conj(fu(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_3674 += tmp_3675;
      tmp_3673 += (ZNI(gI2,j2)) * tmp_3674;
   }
   tmp_3672 += tmp_3673;
   tmp_3659 += (-0.7071067811865475*KroneckerDelta(1,gO2)) * tmp_3672;
   std::complex<double> tmp_3676;
   std::complex<double> tmp_3677;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3678;
      std::complex<double> tmp_3679;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3679 += Conj(fd(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_3678 += tmp_3679;
      tmp_3677 += (ZNI(gI2,2 + j2)) * tmp_3678;
   }
   tmp_3676 += tmp_3677;
   tmp_3659 += (-0.7071067811865475*KroneckerDelta(0,gO2)) * tmp_3676;
   result += (std::complex<double>(0,-1)) * tmp_3659;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiIChiIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3680;
   std::complex<double> tmp_3681;
   std::complex<double> tmp_3682;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3682 += Conj(ZNI(gI1,2 + j1))*Conj(ZNI(gI2,j1))*Lambda12(j1,j1);
   }
   tmp_3681 += tmp_3682;
   tmp_3680 += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_3681;
   std::complex<double> tmp_3683;
   std::complex<double> tmp_3684;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3684 += Conj(ZNI(gI1,j1))*Conj(ZNI(gI2,2 + j1))*Lambda12(j1,j1);
   }
   tmp_3683 += tmp_3684;
   tmp_3680 += (-0.7071067811865475*KroneckerDelta(2,gO1)) * tmp_3683;
   std::complex<double> tmp_3685;
   std::complex<double> tmp_3686;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3687;
      std::complex<double> tmp_3688;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3688 += Conj(ZNI(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_3687 += tmp_3688;
      tmp_3686 += (Conj(ZNI(gI2,2 + j2))) * tmp_3687;
   }
   tmp_3685 += tmp_3686;
   tmp_3680 += (0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_3685;
   std::complex<double> tmp_3689;
   std::complex<double> tmp_3690;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3691;
      std::complex<double> tmp_3692;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3692 += Conj(ZNI(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_3691 += tmp_3692;
      tmp_3690 += (Conj(ZNI(gI1,2 + j2))) * tmp_3691;
   }
   tmp_3689 += tmp_3690;
   tmp_3680 += (0.7071067811865475*KroneckerDelta(0,gO1)) * tmp_3689;
   std::complex<double> tmp_3693;
   std::complex<double> tmp_3694;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3695;
      std::complex<double> tmp_3696;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3696 += Conj(ZNI(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3695 += tmp_3696;
      tmp_3694 += (Conj(ZNI(gI2,j2))) * tmp_3695;
   }
   tmp_3693 += tmp_3694;
   tmp_3680 += (0.7071067811865475*KroneckerDelta(1,gO1)) * tmp_3693;
   std::complex<double> tmp_3697;
   std::complex<double> tmp_3698;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3699;
      std::complex<double> tmp_3700;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3700 += Conj(ZNI(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3699 += tmp_3700;
      tmp_3698 += (Conj(ZNI(gI1,j2))) * tmp_3699;
   }
   tmp_3697 += tmp_3698;
   tmp_3680 += (0.7071067811865475*KroneckerDelta(1,gO1)) * tmp_3697;
   result += (std::complex<double>(0,-1)) * tmp_3680;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(1.4142135623730951*(10*Conj(Lambdax)
      *KroneckerDelta(2,gO2)*(ZN(gI1,3)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,3)) +
      2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(gI1,7)*ZN(gI2,4) -
      2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,7)*ZN(gI2,5) - 20*Conj(
      KappaPr)*KroneckerDelta(4,gO2)*ZN(gI1,6)*ZN(gI2,6) + 10*Conj(Sigmax)*(
      KroneckerDelta(4,gO2)*(ZN(gI1,5)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,5)) +
      KroneckerDelta(3,gO2)*(ZN(gI1,6)*ZN(gI2,4) + ZN(gI1,4)*ZN(gI2,6)) +
      KroneckerDelta(2,gO2)*(ZN(gI1,6)*ZN(gI2,5) + ZN(gI1,5)*ZN(gI2,6))) +
      2.23606797749979*g1p*QS*KroneckerDelta(2,gO2)*ZN(gI1,4)*ZN(gI2,7) -
      2.23606797749979*g1p*QS*KroneckerDelta(3,gO2)*ZN(gI1,5)*ZN(gI2,7)) +
      KroneckerDelta(0,gO2)*(-7.745966692414834*g1*ZN(gI1,0)*ZN(gI2,2) + 10*g2*ZN(
      gI1,1)*ZN(gI2,2) - 9.486832980505138*g1p*ZN(gI1,7)*ZN(gI2,2) +
      14.142135623730951*Conj(Lambdax)*ZN(gI1,4)*ZN(gI2,3) + 14.142135623730951*
      Conj(Lambdax)*ZN(gI1,3)*ZN(gI2,4) + ZN(gI1,2)*(-7.745966692414834*g1*ZN(gI2,
      0) + 10*g2*ZN(gI2,1) - 9.486832980505138*g1p*ZN(gI2,7))) + 2*KroneckerDelta(
      1,gO2)*((3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) -
      3.1622776601683795*g1p*ZN(gI1,7))*ZN(gI2,3) + 7.0710678118654755*Conj(
      Lambdax)*(ZN(gI1,4)*ZN(gI2,2) + ZN(gI1,2)*ZN(gI2,4)) + ZN(gI1,3)*(
      3.872983346207417*g1*ZN(gI2,0) - 5*g2*ZN(gI2,1) - 3.1622776601683795*g1p*ZN(
      gI2,7))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhChiChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,2))
      *KroneckerDelta(0,gO1) - 9.486832980505138*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,2
      ))*KroneckerDelta(0,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,3))*Conj(ZN(gI2,
      0))*KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,3))*Conj(ZN(gI2,1))*
      KroneckerDelta(1,gO1) - 10*g2*Conj(ZN(gI1,1))*Conj(ZN(gI2,3))*KroneckerDelta
      (1,gO1) - 6.324555320336759*g1p*Conj(ZN(gI1,7))*Conj(ZN(gI2,3))*
      KroneckerDelta(1,gO1) - 6.324555320336759*g1p*Conj(ZN(gI1,3))*Conj(ZN(gI2,7)
      )*KroneckerDelta(1,gO1) + 7.745966692414834*g1*Conj(ZN(gI1,0))*(-(Conj(ZN(
      gI2,2))*KroneckerDelta(0,gO1)) + Conj(ZN(gI2,3))*KroneckerDelta(1,gO1)) +
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(gI2,4))*KroneckerDelta(2,
      gO1) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,4))*Conj(ZN(gI2,7))*
      KroneckerDelta(2,gO1) - 3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*Conj(ZN(
      gI2,5))*KroneckerDelta(3,gO1) - 3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*
      Conj(ZN(gI2,7))*KroneckerDelta(3,gO1) - 28.284271247461902*Conj(ZN(gI1,6))*
      Conj(ZN(gI2,6))*KroneckerDelta(4,gO1)*KappaPr + 14.142135623730951*Conj(ZN(
      gI1,4))*Conj(ZN(gI2,3))*KroneckerDelta(0,gO1)*Lambdax + 14.142135623730951*
      Conj(ZN(gI1,3))*Conj(ZN(gI2,4))*KroneckerDelta(0,gO1)*Lambdax +
      14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1)*
      Lambdax + 14.142135623730951*Conj(ZN(gI1,3))*Conj(ZN(gI2,2))*KroneckerDelta(
      2,gO1)*Lambdax + Conj(ZN(gI1,2))*(-7.745966692414834*g1*Conj(ZN(gI2,0))*
      KroneckerDelta(0,gO1) + 10*g2*Conj(ZN(gI2,1))*KroneckerDelta(0,gO1) +
      1.4142135623730951*(-6.708203932499369*g1p*Conj(ZN(gI2,7))*KroneckerDelta(0,
      gO1) + 10*(Conj(ZN(gI2,4))*KroneckerDelta(1,gO1) + Conj(ZN(gI2,3))*
      KroneckerDelta(2,gO1))*Lambdax)) + 14.142135623730951*Conj(ZN(gI1,6))*Conj(
      ZN(gI2,5))*KroneckerDelta(2,gO1)*Sigmax + 14.142135623730951*Conj(ZN(gI1,5))
      *Conj(ZN(gI2,6))*KroneckerDelta(2,gO1)*Sigmax + 14.142135623730951*Conj(ZN(
      gI1,6))*Conj(ZN(gI2,4))*KroneckerDelta(3,gO1)*Sigmax + 14.142135623730951*
      Conj(ZN(gI1,4))*Conj(ZN(gI2,6))*KroneckerDelta(3,gO1)*Sigmax +
      14.142135623730951*Conj(ZN(gI1,5))*Conj(ZN(gI2,4))*KroneckerDelta(4,gO1)*
      Sigmax + 14.142135623730951*Conj(ZN(gI1,4))*Conj(ZN(gI2,5))*KroneckerDelta(4
      ,gO1)*Sigmax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhconjVWmHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(Conj(ZP(gI2,0))*KroneckerDelta(0,
      gO2) + Conj(ZP(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhVZhh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.05)*(3.1622776601683795*g1p*QS*(Conj(ZH(
      gI2,2))*KroneckerDelta(2,gO2) - Conj(ZH(gI2,3))*KroneckerDelta(3,gO2))*Sin(
      ThetaWp()) + Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*(10*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*g1p*Sin(ThetaWp())) - 2*Conj(ZH(gI2,1))*KroneckerDelta(1,
      gO2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp()
      )*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhVZphh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(3.1622776601683795*g1p*QS*Cos(ThetaWp
      ())*(-(Conj(ZH(gI2,2))*KroneckerDelta(2,gO2)) + Conj(ZH(gI2,3))*
      KroneckerDelta(3,gO2)) + 2*Conj(ZH(gI2,1))*KroneckerDelta(1,gO2)*(
      3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())) + Conj(ZH(gI2,0))*
      KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaPChaPPR(unsigned gO2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*Conj(SigmaL)*
      KroneckerDelta(4,gO2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUAhbarChaPChaPPL(unsigned gO1) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*KroneckerDelta(4,gO1)*
      SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVWmVP(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*Cos(ThetaW())*(vd*KroneckerDelta(0,gO2) -
      vu*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVZVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.11180339887498948*g2*(vd*KroneckerDelta(0,gO2)*(
      3.4641016151377544*g1*Cos(ThetaWp())*Sin(ThetaW()) - 4.242640687119286*g1p*
      Sin(ThetaWp())) - 2*vu*KroneckerDelta(1,gO2)*(1.7320508075688772*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 1.4142135623730951*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVZpVWm(unsigned gO2) const
{
   std::complex<double> result;

   result = -0.11180339887498948*g2*(2*vu*KroneckerDelta(1,gO2)*(
      1.4142135623730951*g1p*Cos(ThetaWp()) - 1.7320508075688772*g1*Sin(ThetaW())*
      Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(4.242640687119286*g1p*Cos(
      ThetaWp()) + 3.4641016151377544*g1*Sin(ThetaW())*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbargWmCgZ(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmgWmCbargZ(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(-10*g2*
      Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbargWmCgZp(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp(
      ))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmgWmCbargZp(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbargZgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO1)*(-10*g2*
      Cos(ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmgZbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp())) + vd*KroneckerDelta(0,gO2)*(10*g2*Cos
      (ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbargZpgWm(unsigned gO1) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO1)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO1)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      )));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmgZpbargWm(unsigned gO2) const
{
   std::complex<double> result;

   result = 0.025*g2*(2*vu*KroneckerDelta(1,gO2)*(3.1622776601683795*g1p*Cos(
      ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(
      ThetaWp())) + vd*KroneckerDelta(0,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp(
      ))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(2*ThetaWp()) + 5*Sqr(g2)*Sqr(Cos(
      ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW())*(3.1622776601683795*g1p*g2*
      Cos(ThetaWp())*Sin(ThetaWp()) + 3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(
      Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 2*Sqr(
      g1p)*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(
      -14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) + 10*
      Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) - 15.491933384829668
      *g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(Cos(ThetaWp()))*
      Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.05*(2*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(
      -4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(g1p)*Sqr(
      Cos(ThetaWp())) - 7.745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(
      g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) + KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*(Cos(ThetaWp())*(-18.973665961010276*g1p*g2*Cos(ThetaW
      ())*Sin(ThetaWp()) + 14.696938456699067*g1*g1p*Sin(ThetaW())*Sin(ThetaWp()))
      + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(-7.745966692414834*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW()) + 5*Sqr(g2)*Sqr(Cos(ThetaW())) + 3*Sqr(g1)*Sqr(Sin(ThetaW())
      ))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,1))*(-2*KroneckerDelta(1,gO1)*KroneckerDelta(1,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZP(gI1,1) + KroneckerDelta(0,gO1)*
      (-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1
      ,gO2)*ZP(gI1,0) + KroneckerDelta(0,gO2)*ZP(gI1,1))) - Conj(ZP(gI2,0))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr
      (g2))*ZP(gI1,0) - KroneckerDelta(1,gO1)*(-20*AbsSqr(Lambdax) + 3*Sqr(g1) - 3
      *Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1,gO2)*ZP(gI1,0) + KroneckerDelta(0,
      gO2)*ZP(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*
      Sqr(g1p) - 5*Sqr(g2)) + KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(-3*Sqr(
      g1) - 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) - Conj(UHp0(
      gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*
      Sqr(g1p) + 5*Sqr(g2)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(
      g1) + 2*Sqr(g1p) + 5*Sqr(g2)))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) - Conj(UHpp(
      gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmconjSHp0SHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(vd*KroneckerDelta(0,gO2) + vu*KroneckerDelta(
      1,gO2))*Sqr(g2)*(Conj(UHpp(gI2,0))*UHp0(gI1,0) + Conj(UHpp(gI2,1))*UHp0(gI1,
      1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmHpmAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.25)*(Conj(ZP(gI1,0))*KroneckerDelta(1,gO2
      )*(-(vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,0)) - vd*(-2*AbsSqr(Lambdax) +
      Sqr(g2))*ZA(gI2,1) + 2*(1.4142135623730951*TLambdax*ZA(gI2,2) + Conj(Sigmax
      )*Lambdax*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4)))) + Conj(ZP(gI1,1))*
      KroneckerDelta(0,gO2)*(vu*(-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,0) + vd*(-2*
      AbsSqr(Lambdax) + Sqr(g2))*ZA(gI2,1) - 2*(1.4142135623730951*Conj(TLambdax)*
      ZA(gI2,2) + Conj(Lambdax)*Sigmax*(vphi*ZA(gI2,3) + vsb*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmHpmhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*
      KroneckerDelta(0,gO2) - 28.284271247461902*Conj(TLambdax)*Conj(ZH(gI2,2))*
      Conj(ZP(gI1,1))*KroneckerDelta(0,gO2) - 40*vs*AbsSqr(Lambdax)*Conj(ZH(gI2,2)
      )*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2) + 20*vphi*Conj(Sigmax)*Conj(ZH(gI2,3
      ))*Conj(ZP(gI1,0))*KroneckerDelta(1,gO2)*Lambdax + 20*vsb*Conj(Sigmax)*Conj(
      ZH(gI2,4))*Conj(ZP(gI1,0))*KroneckerDelta(1,gO2)*Lambdax + 20*vphi*Conj(
      Lambdax)*Conj(ZH(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)*Sigmax + 20*
      vsb*Conj(Lambdax)*Conj(ZH(gI2,4))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)*
      Sigmax + 3*QS*vs*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*KroneckerDelta(0,gO2)*Sqr(
      g1p) - 3*QS*vsb*Conj(ZH(gI2,3))*Conj(ZP(gI1,0))*KroneckerDelta(0,gO2)*Sqr(
      g1p) + 2*QS*vs*Conj(ZH(gI2,2))*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2)*Sqr(g1p
      ) - 2*QS*vsb*Conj(ZH(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(1,gO2)*Sqr(g1p)
      + 2*Conj(ZH(gI2,1))*(Conj(ZP(gI1,0))*(vu*KroneckerDelta(0,gO2)*(3*Sqr(g1) -
      3*Sqr(g1p) - 5*Sqr(g2)) - 5*vd*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax) +
      Sqr(g2))) - Conj(ZP(gI1,1))*(5*vd*KroneckerDelta(0,gO2)*(-2*AbsSqr(Lambdax)
      + Sqr(g2)) + vu*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))))
      - Conj(ZH(gI2,0))*(2*Conj(ZP(gI1,1))*(5*vu*KroneckerDelta(0,gO2)*(-2*AbsSqr
      (Lambdax) + Sqr(g2)) + vd*KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5
      *Sqr(g2))) + Conj(ZP(gI1,0))*(10*vu*KroneckerDelta(1,gO2)*(-2*AbsSqr(Lambdax
      ) + Sqr(g2)) + vd*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)
      ))) - 28.284271247461902*Conj(ZH(gI2,2))*Conj(ZP(gI1,0))*KroneckerDelta(1,
      gO2)*TLambdax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3701;
   tmp_3701 += std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_3701 += std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_3701 += std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   tmp_3701 += std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1);
   tmp_3701 += std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g1p);
   tmp_3701 += std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*KroneckerDelta(gI1,gI2)*Sqr(g2);
   std::complex<double> tmp_3702;
   std::complex<double> tmp_3703;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3703 += AbsSqr(Ye(j2,j2))*Conj(ZV(gI2,j2))*ZV(gI1,j2);
   }
   tmp_3702 += tmp_3703;
   tmp_3701 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3702;
   result += (std::complex<double>(0,-1)) * tmp_3701;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbarFuFdPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3704;
   std::complex<double> tmp_3705;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3705 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gI1,j1);
   }
   tmp_3704 += tmp_3705;
   result += (KroneckerDelta(0,gO2)) * tmp_3704;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbarFuFdPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3706;
   std::complex<double> tmp_3707;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3707 += Conj(ZDL(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_3706 += tmp_3707;
   result += (KroneckerDelta(1,gO1)) * tmp_3706;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmbarFvFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*KroneckerDelta(0,gO2)*ZER(gI2,gI1);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUHpmbarFvFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmconjSvSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3708;
   std::complex<double> tmp_3709;
   std::complex<double> tmp_3710;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3710 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_3709 += tmp_3710;
   tmp_3708 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_3709;
   std::complex<double> tmp_3711;
   std::complex<double> tmp_3712;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3712 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_3711 += tmp_3712;
   tmp_3708 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_3711;
   std::complex<double> tmp_3713;
   std::complex<double> tmp_3714;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3714 += Conj(Ye(j1,j1))*Conj(ZE(gI2,3 + j1))*ZV(gI1,j1);
   }
   tmp_3713 += tmp_3714;
   tmp_3708 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_3713;
   std::complex<double> tmp_3715;
   std::complex<double> tmp_3716;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3716 += Conj(ZE(gI2,3 + j1))*Conj(TYe(j1,j1))*ZV(gI1,j1);
   }
   tmp_3715 += tmp_3716;
   tmp_3708 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_3715;
   std::complex<double> tmp_3717;
   std::complex<double> tmp_3718;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3718 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,j2))*ZV(gI1,j2);
   }
   tmp_3717 += tmp_3718;
   tmp_3708 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_3717;
   result += (std::complex<double>(0,-1)) * tmp_3708;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3719;
   std::complex<double> tmp_3720;
   std::complex<double> tmp_3721;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3721 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3720 += tmp_3721;
   tmp_3719 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3720;
   std::complex<double> tmp_3722;
   std::complex<double> tmp_3723;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3723 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3722 += tmp_3723;
   tmp_3719 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3722;
   std::complex<double> tmp_3724;
   std::complex<double> tmp_3725;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3725 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3724 += tmp_3725;
   tmp_3719 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3724;
   std::complex<double> tmp_3726;
   std::complex<double> tmp_3727;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3727 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3726 += tmp_3727;
   tmp_3719 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3726;
   std::complex<double> tmp_3728;
   std::complex<double> tmp_3729;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3729 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3728 += tmp_3729;
   tmp_3719 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3728;
   std::complex<double> tmp_3730;
   std::complex<double> tmp_3731;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3731 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_3730 += tmp_3731;
   tmp_3719 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3730;
   std::complex<double> tmp_3732;
   std::complex<double> tmp_3733;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3733 += Conj(UHIPM(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHIPM(gI1,j1
         );
   }
   tmp_3732 += tmp_3733;
   tmp_3719 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax) * tmp_3732;
   std::complex<double> tmp_3734;
   std::complex<double> tmp_3735;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3735 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3734 += tmp_3735;
   tmp_3719 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3734;
   std::complex<double> tmp_3736;
   std::complex<double> tmp_3737;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3737 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3736 += tmp_3737;
   tmp_3719 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3736;
   std::complex<double> tmp_3738;
   std::complex<double> tmp_3739;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3739 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3738 += tmp_3739;
   tmp_3719 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3738;
   std::complex<double> tmp_3740;
   std::complex<double> tmp_3741;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3741 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3740 += tmp_3741;
   tmp_3719 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3740;
   std::complex<double> tmp_3742;
   std::complex<double> tmp_3743;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3743 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3742 += tmp_3743;
   tmp_3719 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3742;
   std::complex<double> tmp_3744;
   std::complex<double> tmp_3745;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3745 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_3744 += tmp_3745;
   tmp_3719 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3744;
   std::complex<double> tmp_3746;
   std::complex<double> tmp_3747;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3747 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3746 += tmp_3747;
   tmp_3719 += (std::complex<double>(0,-1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_3746;
   std::complex<double> tmp_3748;
   std::complex<double> tmp_3749;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3750;
      std::complex<double> tmp_3751;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3752;
         std::complex<double> tmp_3753;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3753 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_3752 += tmp_3753;
         tmp_3751 += (UHIPM(gI1,2 + j2)) * tmp_3752;
      }
      tmp_3750 += tmp_3751;
      tmp_3749 += (Conj(UHIPM(gI2,2 + j3))) * tmp_3750;
   }
   tmp_3748 += tmp_3749;
   tmp_3719 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3748;
   std::complex<double> tmp_3754;
   std::complex<double> tmp_3755;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3756;
      std::complex<double> tmp_3757;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3758;
         std::complex<double> tmp_3759;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3759 += Conj(fu(j1,j3))*fu(j1,j2);
         }
         tmp_3758 += tmp_3759;
         tmp_3757 += (Conj(UHIPM(gI2,j2))) * tmp_3758;
      }
      tmp_3756 += tmp_3757;
      tmp_3755 += (UHIPM(gI1,j3)) * tmp_3756;
   }
   tmp_3754 += tmp_3755;
   tmp_3719 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3754;
   result += (std::complex<double>(0,-1)) * tmp_3719;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmSHIPMSHI0(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3760;
   std::complex<double> tmp_3761;
   std::complex<double> tmp_3762;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3763;
      std::complex<double> tmp_3764;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3764 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3763 += tmp_3764;
      tmp_3762 += (Conj(UHIPM(gI1,j2))) * tmp_3763;
   }
   tmp_3761 += tmp_3762;
   tmp_3760 += (std::complex<double>(0.,0.7071067811865475)*vs*Conj(Lambdax)*
      KroneckerDelta(0,gO2)) * tmp_3761;
   std::complex<double> tmp_3765;
   std::complex<double> tmp_3766;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3767;
      std::complex<double> tmp_3768;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3768 += Conj(UHI0(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_3767 += tmp_3768;
      tmp_3766 += (Conj(UHIPM(gI1,2 + j2))*Conj(Lambda12(j2,j2))) * tmp_3767
         ;
   }
   tmp_3765 += tmp_3766;
   tmp_3760 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)) * tmp_3765;
   std::complex<double> tmp_3769;
   std::complex<double> tmp_3770;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3771;
      std::complex<double> tmp_3772;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3772 += Conj(UHI0(gI2,4 + j1))*Tfu(j1,j2);
      }
      tmp_3771 += tmp_3772;
      tmp_3770 += (Conj(UHIPM(gI1,j2))) * tmp_3771;
   }
   tmp_3769 += tmp_3770;
   tmp_3760 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_3769;
   std::complex<double> tmp_3773;
   std::complex<double> tmp_3774;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3775;
      std::complex<double> tmp_3776;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3777;
         std::complex<double> tmp_3778;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3778 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3777 += tmp_3778;
         tmp_3776 += (Conj(UHI0(gI2,j2))) * tmp_3777;
      }
      tmp_3775 += tmp_3776;
      tmp_3774 += (Conj(UHIPM(gI1,2 + j3))) * tmp_3775;
   }
   tmp_3773 += tmp_3774;
   tmp_3760 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(0
      ,gO2)) * tmp_3773;
   std::complex<double> tmp_3779;
   std::complex<double> tmp_3780;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3781;
      std::complex<double> tmp_3782;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3783;
         std::complex<double> tmp_3784;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3784 += Conj(fd(j1,j3))*fu(j1,j2);
         }
         tmp_3783 += tmp_3784;
         tmp_3782 += (Conj(UHIPM(gI1,j2))) * tmp_3783;
      }
      tmp_3781 += tmp_3782;
      tmp_3780 += (Conj(UHI0(gI2,2 + j3))) * tmp_3781;
   }
   tmp_3779 += tmp_3780;
   tmp_3760 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(1
      ,gO2)) * tmp_3779;
   result += (std::complex<double>(0,-1)) * tmp_3760;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-(KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((6*Sqr(g1) +
      9*Sqr(g1p) + 10*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + 2*(-3*Sqr(g1) + 3*Sqr(g1p) +
      5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + 40*AbsSqr(Lambdax)*ZA(gI1,2)*ZA(gI2,2) - 3
      *QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + 3*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) - 10*
      KroneckerDelta(1,gO2)*((-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,1)*ZA(gI2,0) +
      (-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,0)*ZA(gI2,1) - 2*Conj(Sigmax)*Lambdax*
      (ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4))))) + 2*KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2
      ,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) - 20*AbsSqr(
      Lambdax)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)
      *ZA(gI1,3)*ZA(gI2,3)) + 5*KroneckerDelta(0,gO2)*((-2*AbsSqr(Lambdax) + Sqr(
      g2))*ZA(gI1,1)*ZA(gI2,0) + (-2*AbsSqr(Lambdax) + Sqr(g2))*ZA(gI1,0)*ZA(gI2,1
      ) - 2*Conj(Lambdax)*Sigmax*(ZA(gI1,4)*ZA(gI2,3) + ZA(gI1,3)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*(-40*AbsSqr(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 40*AbsSqr(Lambdax)*Conj(ZH(gI1
      ,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) + 20*Conj(
      Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax + 20*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*Lambdax + 20*Conj(Lambdax)*Conj(
      ZH(gI1,4))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*
      Sigmax + 20*Conj(Lambdax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*KroneckerDelta(0,
      gO2)*KroneckerDelta(1,gO1)*Sigmax + 3*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) - 3*QS*Conj(ZH(gI1,3))*
      Conj(ZH(gI2,3))*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + 2*QS*
      Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) - 2*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p) + 2*Conj(ZH(gI1,1))*(-5*Conj(ZH(gI2,0))*(
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1) + KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2))*(-2*AbsSqr(Lambdax) + Sqr(g2)) + Conj(ZH(gI2,1))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(
      g2)) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) +
      5*Sqr(g2)))) - Conj(ZH(gI1,0))*(10*Conj(ZH(gI2,1))*(KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1) + KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2))*(-2*
      AbsSqr(Lambdax) + Sqr(g2)) + Conj(ZH(gI2,0))*(2*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2)) + KroneckerDelta
      (0,gO1)*KroneckerDelta(0,gO2)*(6*Sqr(g1) + 9*Sqr(g1p) + 10*Sqr(g2)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3785;
   std::complex<double> tmp_3786;
   std::complex<double> tmp_3787;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3787 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3786 += tmp_3787;
   tmp_3785 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3786;
   std::complex<double> tmp_3788;
   std::complex<double> tmp_3789;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3789 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3788 += tmp_3789;
   tmp_3785 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3788;
   std::complex<double> tmp_3790;
   std::complex<double> tmp_3791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3791 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3790 += tmp_3791;
   tmp_3785 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3790;
   std::complex<double> tmp_3792;
   std::complex<double> tmp_3793;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3793 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3792 += tmp_3793;
   tmp_3785 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3792;
   std::complex<double> tmp_3794;
   std::complex<double> tmp_3795;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3795 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3794 += tmp_3795;
   tmp_3785 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3794;
   std::complex<double> tmp_3796;
   std::complex<double> tmp_3797;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3797 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_3796 += tmp_3797;
   tmp_3785 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3796;
   std::complex<double> tmp_3798;
   std::complex<double> tmp_3799;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3799 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3798 += tmp_3799;
   tmp_3785 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3798;
   std::complex<double> tmp_3800;
   std::complex<double> tmp_3801;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3801 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3800 += tmp_3801;
   tmp_3785 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3800;
   std::complex<double> tmp_3802;
   std::complex<double> tmp_3803;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3803 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3802 += tmp_3803;
   tmp_3785 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3802;
   std::complex<double> tmp_3804;
   std::complex<double> tmp_3805;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3805 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_3804 += tmp_3805;
   tmp_3785 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3804;
   std::complex<double> tmp_3806;
   std::complex<double> tmp_3807;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3807 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_3806 += tmp_3807;
   tmp_3785 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3806;
   std::complex<double> tmp_3808;
   std::complex<double> tmp_3809;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3809 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_3808 += tmp_3809;
   tmp_3785 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3808;
   result += (std::complex<double>(0,-1)) * tmp_3785;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3810;
   std::complex<double> tmp_3811;
   std::complex<double> tmp_3812;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3812 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3811 += tmp_3812;
   tmp_3810 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3811;
   std::complex<double> tmp_3813;
   std::complex<double> tmp_3814;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3814 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3813 += tmp_3814;
   tmp_3810 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3813;
   std::complex<double> tmp_3815;
   std::complex<double> tmp_3816;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3816 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3815 += tmp_3816;
   tmp_3810 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3815;
   std::complex<double> tmp_3817;
   std::complex<double> tmp_3818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3818 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_3817 += tmp_3818;
   tmp_3810 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3817;
   std::complex<double> tmp_3819;
   std::complex<double> tmp_3820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3820 += Conj(ZDX(gI2,3 + j1))*Conj(Kappa(j1,j1))*ZDX(gI1,j1);
   }
   tmp_3819 += tmp_3820;
   tmp_3810 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (1,gO2)*Lambdax) * tmp_3819;
   std::complex<double> tmp_3821;
   std::complex<double> tmp_3822;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3822 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3821 += tmp_3822;
   tmp_3810 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3821;
   std::complex<double> tmp_3823;
   std::complex<double> tmp_3824;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3824 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3823 += tmp_3824;
   tmp_3810 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3823;
   std::complex<double> tmp_3825;
   std::complex<double> tmp_3826;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3826 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3825 += tmp_3826;
   tmp_3810 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3825;
   std::complex<double> tmp_3827;
   std::complex<double> tmp_3828;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3828 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_3827 += tmp_3828;
   tmp_3810 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3827;
   std::complex<double> tmp_3829;
   std::complex<double> tmp_3830;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3830 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_3829 += tmp_3830;
   tmp_3810 += (std::complex<double>(0,-1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_3829;
   result += (std::complex<double>(0,-1)) * tmp_3810;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3831;
   std::complex<double> tmp_3832;
   std::complex<double> tmp_3833;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3833 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3832 += tmp_3833;
   tmp_3831 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3832;
   std::complex<double> tmp_3834;
   std::complex<double> tmp_3835;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3835 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3834 += tmp_3835;
   tmp_3831 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3834;
   std::complex<double> tmp_3836;
   std::complex<double> tmp_3837;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3837 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3836 += tmp_3837;
   tmp_3831 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3836;
   std::complex<double> tmp_3838;
   std::complex<double> tmp_3839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3839 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3838 += tmp_3839;
   tmp_3831 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3838;
   std::complex<double> tmp_3840;
   std::complex<double> tmp_3841;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3841 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3840 += tmp_3841;
   tmp_3831 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3840;
   std::complex<double> tmp_3842;
   std::complex<double> tmp_3843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3843 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_3842 += tmp_3843;
   tmp_3831 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3842;
   std::complex<double> tmp_3844;
   std::complex<double> tmp_3845;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3845 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3844 += tmp_3845;
   tmp_3831 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3844;
   std::complex<double> tmp_3846;
   std::complex<double> tmp_3847;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3847 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3846 += tmp_3847;
   tmp_3831 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3846;
   std::complex<double> tmp_3848;
   std::complex<double> tmp_3849;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3849 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3848 += tmp_3849;
   tmp_3831 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3848;
   std::complex<double> tmp_3850;
   std::complex<double> tmp_3851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3851 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_3850 += tmp_3851;
   tmp_3831 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3850;
   std::complex<double> tmp_3852;
   std::complex<double> tmp_3853;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3853 += AbsSqr(Ye(j2,j2))*Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_3852 += tmp_3853;
   tmp_3831 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3852;
   result += (std::complex<double>(0,-1)) * tmp_3831;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3854;
   std::complex<double> tmp_3855;
   std::complex<double> tmp_3856;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3856 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3855 += tmp_3856;
   tmp_3854 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3855;
   std::complex<double> tmp_3857;
   std::complex<double> tmp_3858;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3858 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3857 += tmp_3858;
   tmp_3854 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3857;
   std::complex<double> tmp_3859;
   std::complex<double> tmp_3860;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3860 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3859 += tmp_3860;
   tmp_3854 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3859;
   std::complex<double> tmp_3861;
   std::complex<double> tmp_3862;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3862 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3861 += tmp_3862;
   tmp_3854 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3861;
   std::complex<double> tmp_3863;
   std::complex<double> tmp_3864;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3864 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3863 += tmp_3864;
   tmp_3854 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3863;
   std::complex<double> tmp_3865;
   std::complex<double> tmp_3866;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3866 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3865 += tmp_3866;
   tmp_3854 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3865;
   std::complex<double> tmp_3867;
   std::complex<double> tmp_3868;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3868 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3867 += tmp_3868;
   tmp_3854 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3867;
   std::complex<double> tmp_3869;
   std::complex<double> tmp_3870;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3870 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3869 += tmp_3870;
   tmp_3854 += (std::complex<double>(0,0.075)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3869;
   std::complex<double> tmp_3871;
   std::complex<double> tmp_3872;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3872 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3871 += tmp_3872;
   tmp_3854 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3871;
   std::complex<double> tmp_3873;
   std::complex<double> tmp_3874;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3874 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_3873 += tmp_3874;
   tmp_3854 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3873;
   std::complex<double> tmp_3875;
   std::complex<double> tmp_3876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3876 += AbsSqr(Yd(j2,j2))*Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3875 += tmp_3876;
   tmp_3854 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3875;
   std::complex<double> tmp_3877;
   std::complex<double> tmp_3878;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3878 += AbsSqr(Yu(j2,j2))*Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_3877 += tmp_3878;
   tmp_3854 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3877;
   result += (std::complex<double>(0,-1)) * tmp_3854;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmconjSuSd(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3879;
   std::complex<double> tmp_3880;
   std::complex<double> tmp_3881;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3881 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3880 += tmp_3881;
   tmp_3879 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_3880;
   std::complex<double> tmp_3882;
   std::complex<double> tmp_3883;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3883 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_3882 += tmp_3883;
   tmp_3879 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_3882;
   std::complex<double> tmp_3884;
   std::complex<double> tmp_3885;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3885 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZU(gI1,j1);
   }
   tmp_3884 += tmp_3885;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_3884;
   std::complex<double> tmp_3886;
   std::complex<double> tmp_3887;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3887 += Conj(ZD(gI2,3 + j1))*Conj(TYd(j1,j1))*ZU(gI1,j1);
   }
   tmp_3886 += tmp_3887;
   tmp_3879 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_3886;
   std::complex<double> tmp_3888;
   std::complex<double> tmp_3889;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3889 += Conj(ZD(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_3888 += tmp_3889;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vs*Conj(Lambdax)*
      KroneckerDelta(0,gO2)) * tmp_3888;
   std::complex<double> tmp_3890;
   std::complex<double> tmp_3891;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3891 += Conj(ZD(gI2,j1))*ZU(gI1,3 + j1)*TYu(j1,j1);
   }
   tmp_3890 += tmp_3891;
   tmp_3879 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_3890;
   std::complex<double> tmp_3892;
   std::complex<double> tmp_3893;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3893 += AbsSqr(Yd(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3892 += tmp_3893;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_3892;
   std::complex<double> tmp_3894;
   std::complex<double> tmp_3895;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3895 += AbsSqr(Yu(j2,j2))*Conj(ZD(gI2,j2))*ZU(gI1,j2);
   }
   tmp_3894 += tmp_3895;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(1
      ,gO2)) * tmp_3894;
   std::complex<double> tmp_3896;
   std::complex<double> tmp_3897;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3897 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_3896 += tmp_3897;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(0
      ,gO2)) * tmp_3896;
   std::complex<double> tmp_3898;
   std::complex<double> tmp_3899;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_3899 += Conj(Yd(j2,j2))*Conj(ZD(gI2,3 + j2))*Yu(j2,j2)*ZU(gI1,3 +
         j2);
   }
   tmp_3898 += tmp_3899;
   tmp_3879 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(1
      ,gO2)) * tmp_3898;
   result += (std::complex<double>(0,-1)) * tmp_3879;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUHpmconjUHpmconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3900;
   std::complex<double> tmp_3901;
   std::complex<double> tmp_3902;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3902 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3901 += tmp_3902;
   tmp_3900 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3901;
   std::complex<double> tmp_3903;
   std::complex<double> tmp_3904;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3904 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3903 += tmp_3904;
   tmp_3900 += (std::complex<double>(0,-0.225)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3903;
   std::complex<double> tmp_3905;
   std::complex<double> tmp_3906;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3906 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3905 += tmp_3906;
   tmp_3900 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3905;
   std::complex<double> tmp_3907;
   std::complex<double> tmp_3908;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3908 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3907 += tmp_3908;
   tmp_3900 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3907;
   std::complex<double> tmp_3909;
   std::complex<double> tmp_3910;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3910 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3909 += tmp_3910;
   tmp_3900 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3909;
   std::complex<double> tmp_3911;
   std::complex<double> tmp_3912;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3912 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3911 += tmp_3912;
   tmp_3900 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3911;
   std::complex<double> tmp_3913;
   std::complex<double> tmp_3914;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3914 += Conj(UHI0(gI2,2 + j1))*Conj(Lambda12(j1,j1))*UHI0(gI1,j1);
   }
   tmp_3913 += tmp_3914;
   tmp_3900 += (std::complex<double>(0,1)*KroneckerDelta(0,gO1)*KroneckerDelta(
      1,gO2)*Lambdax) * tmp_3913;
   std::complex<double> tmp_3915;
   std::complex<double> tmp_3916;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3916 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3915 += tmp_3916;
   tmp_3900 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_3915;
   std::complex<double> tmp_3917;
   std::complex<double> tmp_3918;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3918 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3917 += tmp_3918;
   tmp_3900 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3917;
   std::complex<double> tmp_3919;
   std::complex<double> tmp_3920;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3920 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3919 += tmp_3920;
   tmp_3900 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_3919;
   std::complex<double> tmp_3921;
   std::complex<double> tmp_3922;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3922 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3921 += tmp_3922;
   tmp_3900 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_3921;
   std::complex<double> tmp_3923;
   std::complex<double> tmp_3924;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3924 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3923 += tmp_3924;
   tmp_3900 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3923;
   std::complex<double> tmp_3925;
   std::complex<double> tmp_3926;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3926 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3925 += tmp_3926;
   tmp_3900 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_3925;
   std::complex<double> tmp_3927;
   std::complex<double> tmp_3928;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3928 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_3927 += tmp_3928;
   tmp_3900 += (std::complex<double>(0,1)*Conj(Lambdax)*KroneckerDelta(0,gO2)*
      KroneckerDelta(1,gO1)) * tmp_3927;
   std::complex<double> tmp_3929;
   std::complex<double> tmp_3930;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3930 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3929 += tmp_3930;
   tmp_3900 += (std::complex<double>(0,0.375)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_3929;
   std::complex<double> tmp_3931;
   std::complex<double> tmp_3932;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3932 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_3931 += tmp_3932;
   tmp_3900 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_3931;
   std::complex<double> tmp_3933;
   std::complex<double> tmp_3934;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_3935;
      std::complex<double> tmp_3936;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_3937;
         std::complex<double> tmp_3938;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_3938 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_3937 += tmp_3938;
         tmp_3936 += (Conj(UHI0(gI2,4 + j2))) * tmp_3937;
      }
      tmp_3935 += tmp_3936;
      tmp_3934 += (UHI0(gI1,4 + j3)) * tmp_3935;
   }
   tmp_3933 += tmp_3934;
   tmp_3900 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_3933;
   std::complex<double> tmp_3939;
   std::complex<double> tmp_3940;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_3941;
      std::complex<double> tmp_3942;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_3943;
         std::complex<double> tmp_3944;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_3944 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_3943 += tmp_3944;
         tmp_3942 += (Conj(UHI0(gI2,4 + j2))) * tmp_3943;
      }
      tmp_3941 += tmp_3942;
      tmp_3940 += (UHI0(gI1,4 + j3)) * tmp_3941;
   }
   tmp_3939 += tmp_3940;
   tmp_3900 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO1)*KroneckerDelta
      (1,gO2)) * tmp_3939;
   result += (std::complex<double>(0,-1)) * tmp_3900;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmChiIChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3945;
   std::complex<double> tmp_3946;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3947;
      std::complex<double> tmp_3948;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3948 += Conj(fd(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_3947 += tmp_3948;
      tmp_3946 += (ZPI(gI2,j2)) * tmp_3947;
   }
   tmp_3945 += tmp_3946;
   result += (KroneckerDelta(0,gO2)) * tmp_3945;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmChiIChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3949;
   std::complex<double> tmp_3950;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3951;
      std::complex<double> tmp_3952;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3952 += Conj(ZNI(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_3951 += tmp_3952;
      tmp_3950 += (Conj(ZMI(gI2,j2))) * tmp_3951;
   }
   tmp_3949 += tmp_3950;
   result += (KroneckerDelta(1,gO1)) * tmp_3949;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmconjSHI0SHIPM(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3953;
   std::complex<double> tmp_3954;
   std::complex<double> tmp_3955;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3955 += Conj(UHIPM(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3954 += tmp_3955;
   tmp_3953 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_3954;
   std::complex<double> tmp_3956;
   std::complex<double> tmp_3957;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3957 += Conj(UHIPM(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_3956 += tmp_3957;
   tmp_3953 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_3956;
   std::complex<double> tmp_3958;
   std::complex<double> tmp_3959;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3959 += Conj(UHIPM(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3958 += tmp_3959;
   tmp_3953 += (std::complex<double>(0.,-0.35355339059327373)*vd*KroneckerDelta
      (0,gO2)*Sqr(g2)) * tmp_3958;
   std::complex<double> tmp_3960;
   std::complex<double> tmp_3961;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3961 += Conj(UHIPM(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_3960 += tmp_3961;
   tmp_3953 += (std::complex<double>(0.,-0.35355339059327373)*vu*KroneckerDelta
      (1,gO2)*Sqr(g2)) * tmp_3960;
   std::complex<double> tmp_3962;
   std::complex<double> tmp_3963;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3964;
      std::complex<double> tmp_3965;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3965 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3964 += tmp_3965;
      tmp_3963 += (Conj(UHIPM(gI2,2 + j2))) * tmp_3964;
   }
   tmp_3962 += tmp_3963;
   tmp_3953 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(1
      ,gO2)*Lambdax) * tmp_3962;
   std::complex<double> tmp_3966;
   std::complex<double> tmp_3967;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_3968;
      std::complex<double> tmp_3969;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_3969 += Conj(Tfd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_3968 += tmp_3969;
      tmp_3967 += (Conj(UHIPM(gI2,2 + j2))) * tmp_3968;
   }
   tmp_3966 += tmp_3967;
   tmp_3953 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_3966;
   std::complex<double> tmp_3970;
   std::complex<double> tmp_3971;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_3972;
      std::complex<double> tmp_3973;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_3973 += Conj(fd(j2,j1))*Conj(UHIPM(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_3972 += tmp_3973;
      tmp_3971 += (UHI0(gI1,4 + j2)) * tmp_3972;
   }
   tmp_3970 += tmp_3971;
   tmp_3953 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(0
      ,gO2)) * tmp_3970;
   std::complex<double> tmp_3974;
   std::complex<double> tmp_3975;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3976;
      std::complex<double> tmp_3977;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3978;
         std::complex<double> tmp_3979;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3979 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_3978 += tmp_3979;
         tmp_3977 += (UHI0(gI1,2 + j2)) * tmp_3978;
      }
      tmp_3976 += tmp_3977;
      tmp_3975 += (Conj(UHIPM(gI2,2 + j3))) * tmp_3976;
   }
   tmp_3974 += tmp_3975;
   tmp_3953 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_3974;
   std::complex<double> tmp_3980;
   std::complex<double> tmp_3981;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_3982;
      std::complex<double> tmp_3983;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_3984;
         std::complex<double> tmp_3985;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_3985 += Conj(fu(j1,j3))*fu(j1,j2);
         }
         tmp_3984 += tmp_3985;
         tmp_3983 += (Conj(UHIPM(gI2,j2))) * tmp_3984;
      }
      tmp_3982 += tmp_3983;
      tmp_3981 += (UHI0(gI1,j3)) * tmp_3982;
   }
   tmp_3980 += tmp_3981;
   tmp_3953 += (std::complex<double>(0.,0.7071067811865475)*vu*KroneckerDelta(1
      ,gO2)) * tmp_3980;
   result += (std::complex<double>(0,-1)) * tmp_3953;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmChiChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(0,gO2)*UP(gI2,1)*ZN(gI1,4)) - 0.1*
      KroneckerDelta(1,gO2)*(10*g2*UP(gI2,0)*ZN(gI1,3) + UP(gI2,1)*(
      5.477225575051661*g1*ZN(gI1,0) + 7.0710678118654755*g2*ZN(gI1,1) -
      4.47213595499958*g1p*ZN(gI1,7)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmChiChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZN(gI1,2))*KroneckerDelta(0,gO1)) + 0.1*
      Conj(UM(gI2,1))*(5.477225575051661*g1*Conj(ZN(gI1,0))*KroneckerDelta(0,gO1)
      + 7.0710678118654755*g2*Conj(ZN(gI1,1))*KroneckerDelta(0,gO1) +
      6.708203932499369*g1p*Conj(ZN(gI1,7))*KroneckerDelta(0,gO1) - 10*Conj(ZN(gI1
      ,4))*KroneckerDelta(1,gO1)*Lambdax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVPHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(ZP(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(ZP(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVZHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*KroneckerDelta(0,gO2)*(-10*g2*Cos(ThetaW())*
      Cos(ThetaWp()) + 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      9.486832980505138*g1p*Sin(ThetaWp())) + 2*Conj(ZP(gI2,1))*KroneckerDelta(1,
      gO2)*(-5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp(
      ))*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVZpHpm(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(2*Conj(ZP(gI2,1))*KroneckerDelta(1,gO2)*(3.1622776601683795*
      g1p*Cos(ThetaWp()) + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()
      ))*Sin(ThetaWp())) + Conj(ZP(gI2,0))*KroneckerDelta(0,gO2)*(
      -9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) -
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVWmAh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(KroneckerDelta(0,gO2)*ZA(gI2,0) +
      KroneckerDelta(1,gO2)*ZA(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUHpmVWmhh(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZH(gI2,0))*KroneckerDelta(0,gO2) - Conj(ZH(gI2,1))*
      KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0VZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_3986;
   std::complex<double> tmp_3987;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3987 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3986 += tmp_3987;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))) * tmp_3986;
   std::complex<double> tmp_3988;
   std::complex<double> tmp_3989;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3989 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3988 += tmp_3989;
   result += (0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp()))) * tmp_3988;
   std::complex<double> tmp_3990;
   std::complex<double> tmp_3991;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3991 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3990 += tmp_3991;
   result += (0.3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_3990;
   std::complex<double> tmp_3992;
   std::complex<double> tmp_3993;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3993 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3992 += tmp_3993;
   result += (0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*Sin(
      ThetaWp())) * tmp_3992;
   std::complex<double> tmp_3994;
   std::complex<double> tmp_3995;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3995 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3994 += tmp_3995;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_3994;
   std::complex<double> tmp_3996;
   std::complex<double> tmp_3997;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_3997 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_3996 += tmp_3997;
   result += (0.2*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_3996;
   std::complex<double> tmp_3998;
   std::complex<double> tmp_3999;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_3999 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_3998 += tmp_3999;
   result += (1.25*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_3998;
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 2) {
      result += -0.9486832980505138*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.7348469228349533*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0VZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4000;
   std::complex<double> tmp_4001;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4001 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4000 += tmp_4001;
   result += (0.2*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_4000;
   std::complex<double> tmp_4002;
   std::complex<double> tmp_4003;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4003 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4002 += tmp_4003;
   result += (1.25*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_4002;
   std::complex<double> tmp_4004;
   std::complex<double> tmp_4005;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4005 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4004 += tmp_4005;
   result += (-0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*Sin(
      ThetaWp())) * tmp_4004;
   std::complex<double> tmp_4006;
   std::complex<double> tmp_4007;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4007 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4006 += tmp_4007;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_4006;
   std::complex<double> tmp_4008;
   std::complex<double> tmp_4009;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4009 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4008 += tmp_4009;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4008;
   std::complex<double> tmp_4010;
   std::complex<double> tmp_4011;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4011 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4010 += tmp_4011;
   result += (0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))) * tmp_4010;
   std::complex<double> tmp_4012;
   std::complex<double> tmp_4013;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4013 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4012 += tmp_4013;
   result += (0.3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_4012;
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.9486832980505138*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.7348469228349533*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   if (gO1 < 4) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4014;
   std::complex<double> tmp_4015;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4015 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4014 += tmp_4015;
   result += (0.15*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_4014;
   std::complex<double> tmp_4016;
   std::complex<double> tmp_4017;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4017 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4016 += tmp_4017;
   result += (-0.15*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_4016;
   std::complex<double> tmp_4018;
   std::complex<double> tmp_4019;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4019 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4018 += tmp_4019;
   result += (-0.25*Conj(ZP(gI2,0))*Sqr(g2)*ZP(gI1,0)) * tmp_4018;
   std::complex<double> tmp_4020;
   std::complex<double> tmp_4021;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4021 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4020 += tmp_4021;
   result += (0.375*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_4020;
   std::complex<double> tmp_4022;
   std::complex<double> tmp_4023;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4024;
      std::complex<double> tmp_4025;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4026;
         std::complex<double> tmp_4027;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4027 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_4026 += tmp_4027;
         tmp_4025 += (KroneckerDelta(gO1,4 + j2)) * tmp_4026;
      }
      tmp_4024 += tmp_4025;
      tmp_4023 += (KroneckerDelta(gO2,4 + j3)) * tmp_4024;
   }
   tmp_4022 += tmp_4023;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_4022;
   if (gO1 < 2) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,0);
   }
   if (gO1 < 2) {
      result += -0.225*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         0);
   }
   std::complex<double> tmp_4028;
   std::complex<double> tmp_4029;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4029 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4028 += tmp_4029;
   result += (-0.15*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_4028;
   std::complex<double> tmp_4030;
   std::complex<double> tmp_4031;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4031 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4030 += tmp_4031;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_4030;
   std::complex<double> tmp_4032;
   std::complex<double> tmp_4033;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4033 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4032 += tmp_4033;
   result += (0.25*Conj(ZP(gI2,1))*Sqr(g2)*ZP(gI1,1)) * tmp_4032;
   std::complex<double> tmp_4034;
   std::complex<double> tmp_4035;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4035 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4034 += tmp_4035;
   result += (0.25*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_4034;
   std::complex<double> tmp_4036;
   std::complex<double> tmp_4037;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4038;
      std::complex<double> tmp_4039;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4040;
         std::complex<double> tmp_4041;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4041 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_4040 += tmp_4041;
         tmp_4039 += (KroneckerDelta(gO1,4 + j2)) * tmp_4040;
      }
      tmp_4038 += tmp_4039;
      tmp_4037 += (KroneckerDelta(gO2,4 + j3)) * tmp_4038;
   }
   tmp_4036 += tmp_4037;
   result += (-(Conj(ZP(gI2,1))*ZP(gI1,1))) * tmp_4036;
   if (gO1 < 2) {
      result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,1);
   }
   if (gO2 < 2) {
      result += Conj(ZP(gI2,0))*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2
         + gO2)*Lambdax*ZP(gI1,1);
   }
   if (gO1 < 2) {
      result += Conj(Lambdax)*Conj(ZP(gI2,1))*KroneckerDelta(2 + gO1,gO2)*ZP
         (gI1,0)*Lambda12(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4042;
   std::complex<double> tmp_4043;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4043 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4042 += tmp_4043;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_4042;
   std::complex<double> tmp_4044;
   std::complex<double> tmp_4045;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4045 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4044 += tmp_4045;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_4044;
   std::complex<double> tmp_4046;
   std::complex<double> tmp_4047;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4047 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4046 += tmp_4047;
   result += (0.25*Conj(UHp0(gI2,0))*Sqr(g2)*UHp0(gI1,0)) * tmp_4046;
   std::complex<double> tmp_4048;
   std::complex<double> tmp_4049;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4049 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4048 += tmp_4049;
   result += (-0.25*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_4048;
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,0);
   }
   std::complex<double> tmp_4050;
   std::complex<double> tmp_4051;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4051 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4050 += tmp_4051;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_4050;
   std::complex<double> tmp_4052;
   std::complex<double> tmp_4053;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4053 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4052 += tmp_4053;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_4052;
   std::complex<double> tmp_4054;
   std::complex<double> tmp_4055;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4055 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4054 += tmp_4055;
   result += (-0.25*Conj(UHp0(gI2,1))*Sqr(g2)*UHp0(gI1,1)) * tmp_4054;
   std::complex<double> tmp_4056;
   std::complex<double> tmp_4057;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4057 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4056 += tmp_4057;
   result += (0.25*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_4056;
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,1);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4058;
   std::complex<double> tmp_4059;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4059 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4058 += tmp_4059;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_4058;
   std::complex<double> tmp_4060;
   std::complex<double> tmp_4061;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4061 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4060 += tmp_4061;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_4060;
   std::complex<double> tmp_4062;
   std::complex<double> tmp_4063;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4063 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4062 += tmp_4063;
   result += (-0.25*Conj(UHpp(gI2,0))*Sqr(g2)*UHpp(gI1,0)) * tmp_4062;
   std::complex<double> tmp_4064;
   std::complex<double> tmp_4065;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4065 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4064 += tmp_4065;
   result += (-0.25*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_4064;
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,0);
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_4066;
      std::complex<double> tmp_4067;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4067 += Conj(hE(j1,gO2))*hE(j1,gO1);
      }
      tmp_4066 += tmp_4067;
      result += (-(Conj(UHpp(gI2,0))*UHpp(gI1,0))) * tmp_4066;
   }
   std::complex<double> tmp_4068;
   std::complex<double> tmp_4069;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4069 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4068 += tmp_4069;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_4068;
   std::complex<double> tmp_4070;
   std::complex<double> tmp_4071;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4071 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4070 += tmp_4071;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_4070;
   std::complex<double> tmp_4072;
   std::complex<double> tmp_4073;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4073 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4072 += tmp_4073;
   result += (0.25*Conj(UHpp(gI2,1))*Sqr(g2)*UHpp(gI1,1)) * tmp_4072;
   std::complex<double> tmp_4074;
   std::complex<double> tmp_4075;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4075 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4074 += tmp_4075;
   result += (0.25*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_4074;
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,1);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0barChaChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4076;
   std::complex<double> tmp_4077;
   std::complex<double> tmp_4078;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4078 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_4077 += tmp_4078;
   tmp_4076 += (std::complex<double>(0,-1)*g2*UM(gI1,0)) * tmp_4077;
   std::complex<double> tmp_4079;
   std::complex<double> tmp_4080;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4081;
      std::complex<double> tmp_4082;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4082 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4081 += tmp_4082;
      tmp_4080 += (ZPI(gI2,j2)) * tmp_4081;
   }
   tmp_4079 += tmp_4080;
   tmp_4076 += (std::complex<double>(0,1)*UM(gI1,1)) * tmp_4079;
   result += (std::complex<double>(0,-1)) * tmp_4076;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0barChaChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(g2*Conj(UP(gI1,0))*Conj(ZMI(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0barChaIChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4083;
   std::complex<double> tmp_4084;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4085;
      std::complex<double> tmp_4086;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4086 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4085 += tmp_4086;
      tmp_4084 += (ZMI(gI1,j2)) * tmp_4085;
   }
   tmp_4083 += tmp_4084;
   result += (UP(gI2,1)) * tmp_4083;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHI0barChaIChaPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjHpmSHIPM(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4087;
   std::complex<double> tmp_4088;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4088 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4087 += tmp_4088;
   result += (-0.35355339059327373*vd*Sqr(g2)*ZP(gI1,0)) * tmp_4087;
   std::complex<double> tmp_4089;
   std::complex<double> tmp_4090;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4091;
      std::complex<double> tmp_4092;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4092 += Conj(Tfd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4091 += tmp_4092;
      tmp_4090 += (Conj(UHIPM(gI2,2 + j2))) * tmp_4091;
   }
   tmp_4089 += tmp_4090;
   result += (ZP(gI1,0)) * tmp_4089;
   std::complex<double> tmp_4093;
   std::complex<double> tmp_4094;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_4095;
      std::complex<double> tmp_4096;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4096 += Conj(fd(j2,j1))*Conj(UHIPM(gI2,j1))*Lambda12(j1,j1);
      }
      tmp_4095 += tmp_4096;
      tmp_4094 += (KroneckerDelta(gO2,4 + j2)) * tmp_4095;
   }
   tmp_4093 += tmp_4094;
   result += (0.7071067811865475*vs*ZP(gI1,0)) * tmp_4093;
   std::complex<double> tmp_4097;
   std::complex<double> tmp_4098;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4099;
      std::complex<double> tmp_4100;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4101;
         std::complex<double> tmp_4102;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4102 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_4101 += tmp_4102;
         tmp_4100 += (KroneckerDelta(gO2,2 + j2)) * tmp_4101;
      }
      tmp_4099 += tmp_4100;
      tmp_4098 += (Conj(UHIPM(gI2,2 + j3))) * tmp_4099;
   }
   tmp_4097 += tmp_4098;
   result += (0.7071067811865475*vd*ZP(gI1,0)) * tmp_4097;
   if (gO2 < 2) {
      result += -0.35355339059327373*vd*Conj(UHIPM(gI2,gO2))*Sqr(g2)*ZP(gI1,
         0);
   }
   std::complex<double> tmp_4103;
   std::complex<double> tmp_4104;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4104 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4103 += tmp_4104;
   result += (-0.35355339059327373*vu*Sqr(g2)*ZP(gI1,1)) * tmp_4103;
   std::complex<double> tmp_4105;
   std::complex<double> tmp_4106;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4107;
      std::complex<double> tmp_4108;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4108 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4107 += tmp_4108;
      tmp_4106 += (Conj(UHIPM(gI2,2 + j2))) * tmp_4107;
   }
   tmp_4105 += tmp_4106;
   result += (0.7071067811865475*vs*Lambdax*ZP(gI1,1)) * tmp_4105;
   if (gO2 < 2) {
      result += -0.35355339059327373*vu*Conj(UHIPM(gI2,gO2))*Sqr(g2)*ZP(gI1,
         1);
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4109;
      std::complex<double> tmp_4110;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4111;
         std::complex<double> tmp_4112;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4112 += Conj(fu(j1,gO2))*fu(j1,j2);
         }
         tmp_4111 += tmp_4112;
         tmp_4110 += (Conj(UHIPM(gI2,j2))) * tmp_4111;
      }
      tmp_4109 += tmp_4110;
      result += (0.7071067811865475*vu*ZP(gI1,1)) * tmp_4109;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjSHppSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4113;
   std::complex<double> tmp_4114;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_4115;
      std::complex<double> tmp_4116;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4116 += Conj(hE(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_4115 += tmp_4116;
      tmp_4114 += (Conj(ZE(gI2,3 + j2))) * tmp_4115;
   }
   tmp_4113 += tmp_4114;
   result += (0.7071067811865475*vs*UHpp(gI1,0)) * tmp_4113;
   if (gO2 < 2) {
      std::complex<double> tmp_4117;
      std::complex<double> tmp_4118;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4118 += Conj(ZE(gI2,3 + j1))*Conj(ThE(j1,gO2));
      }
      tmp_4117 += tmp_4118;
      result += (-UHpp(gI1,0)) * tmp_4117;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4119;
      std::complex<double> tmp_4120;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4120 += Conj(hE(j1,gO2))*Conj(ZE(gI2,j1))*Ye(j1,j1);
      }
      tmp_4119 += tmp_4120;
      result += (-0.7071067811865475*vd*UHpp(gI1,0)) * tmp_4119;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4121;
      std::complex<double> tmp_4122;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4122 += Conj(hE(j1,gO2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_4121 += tmp_4122;
      result += (-(MuPr*UHpp(gI1,1))) * tmp_4121;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4123;
      std::complex<double> tmp_4124;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4124 += Conj(hE(j1,gO2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_4123 += tmp_4124;
      result += (0.7071067811865475*vphi*SigmaL*UHpp(gI1,1)) * tmp_4123;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4125;
   std::complex<double> tmp_4126;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4126 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4125 += tmp_4126;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_4125;
   std::complex<double> tmp_4127;
   std::complex<double> tmp_4128;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4128 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4127 += tmp_4128;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_4127;
   std::complex<double> tmp_4129;
   std::complex<double> tmp_4130;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4130 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4129 += tmp_4130;
   result += (0.25*KroneckerDelta(gI1,gI2)*Sqr(g2)) * tmp_4129;
   std::complex<double> tmp_4131;
   std::complex<double> tmp_4132;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4132 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4131 += tmp_4132;
   result += (-0.25*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_4131;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p
         );
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2
         );
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4133;
   std::complex<double> tmp_4135;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4135 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
   }
   tmp_4133 += tmp_4135;
   std::complex<double> tmp_4134;
   std::complex<double> tmp_4136;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4136 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4134 += tmp_4136;
   result += (-0.25*Sqr(g2)) * tmp_4133 * tmp_4134;
   std::complex<double> tmp_4137;
   std::complex<double> tmp_4139;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4139 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_4137 += tmp_4139;
   std::complex<double> tmp_4138;
   std::complex<double> tmp_4140;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4140 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4138 += tmp_4140;
   result += (0.075*Sqr(g1)) * tmp_4137 * tmp_4138;
   std::complex<double> tmp_4141;
   std::complex<double> tmp_4143;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4143 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_4141 += tmp_4143;
   std::complex<double> tmp_4142;
   std::complex<double> tmp_4144;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4144 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4142 += tmp_4144;
   result += (-0.075*Sqr(g1p)) * tmp_4141 * tmp_4142;
   std::complex<double> tmp_4145;
   std::complex<double> tmp_4147;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4147 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_4145 += tmp_4147;
   std::complex<double> tmp_4146;
   std::complex<double> tmp_4148;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4148 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4146 += tmp_4148;
   result += (-0.125*Sqr(g2)) * tmp_4145 * tmp_4146;
   std::complex<double> tmp_4149;
   std::complex<double> tmp_4151;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4151 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_4149 += tmp_4151;
   std::complex<double> tmp_4150;
   std::complex<double> tmp_4152;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4152 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4150 += tmp_4152;
   result += (-0.075*Sqr(g1)) * tmp_4149 * tmp_4150;
   std::complex<double> tmp_4153;
   std::complex<double> tmp_4155;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4155 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_4153 += tmp_4155;
   std::complex<double> tmp_4154;
   std::complex<double> tmp_4156;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4156 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4154 += tmp_4156;
   result += (-0.05*Sqr(g1p)) * tmp_4153 * tmp_4154;
   std::complex<double> tmp_4157;
   std::complex<double> tmp_4159;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4159 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_4157 += tmp_4159;
   std::complex<double> tmp_4158;
   std::complex<double> tmp_4160;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4160 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4158 += tmp_4160;
   result += (0.125*Sqr(g2)) * tmp_4157 * tmp_4158;
   std::complex<double> tmp_4161;
   std::complex<double> tmp_4163;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4163 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4161 += tmp_4163;
   std::complex<double> tmp_4162;
   std::complex<double> tmp_4164;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4164 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_4162 += tmp_4164;
   result += (0.075*Sqr(g1)) * tmp_4161 * tmp_4162;
   std::complex<double> tmp_4165;
   std::complex<double> tmp_4167;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4167 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4165 += tmp_4167;
   std::complex<double> tmp_4166;
   std::complex<double> tmp_4168;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4168 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_4166 += tmp_4168;
   result += (-0.075*Sqr(g1p)) * tmp_4165 * tmp_4166;
   std::complex<double> tmp_4169;
   std::complex<double> tmp_4171;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4171 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4169 += tmp_4171;
   std::complex<double> tmp_4170;
   std::complex<double> tmp_4172;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4172 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_4170 += tmp_4172;
   result += (-0.125*Sqr(g2)) * tmp_4169 * tmp_4170;
   std::complex<double> tmp_4173;
   std::complex<double> tmp_4175;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4175 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4173 += tmp_4175;
   std::complex<double> tmp_4174;
   std::complex<double> tmp_4176;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4176 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_4174 += tmp_4176;
   result += (0.1875*Sqr(g1p)) * tmp_4173 * tmp_4174;
   std::complex<double> tmp_4177;
   std::complex<double> tmp_4179;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4179 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4177 += tmp_4179;
   std::complex<double> tmp_4178;
   std::complex<double> tmp_4180;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4180 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_4178 += tmp_4180;
   result += (-0.075*Sqr(g1)) * tmp_4177 * tmp_4178;
   std::complex<double> tmp_4181;
   std::complex<double> tmp_4183;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4183 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4181 += tmp_4183;
   std::complex<double> tmp_4182;
   std::complex<double> tmp_4184;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4184 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_4182 += tmp_4184;
   result += (-0.05*Sqr(g1p)) * tmp_4181 * tmp_4182;
   std::complex<double> tmp_4185;
   std::complex<double> tmp_4187;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4187 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4185 += tmp_4187;
   std::complex<double> tmp_4186;
   std::complex<double> tmp_4188;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4188 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_4186 += tmp_4188;
   result += (0.125*Sqr(g2)) * tmp_4185 * tmp_4186;
   std::complex<double> tmp_4189;
   std::complex<double> tmp_4191;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4191 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4189 += tmp_4191;
   std::complex<double> tmp_4190;
   std::complex<double> tmp_4192;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4192 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_4190 += tmp_4192;
   result += (0.125*Sqr(g1p)) * tmp_4189 * tmp_4190;
   std::complex<double> tmp_4193;
   std::complex<double> tmp_4195;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4195 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4193 += tmp_4195;
   std::complex<double> tmp_4194;
   std::complex<double> tmp_4196;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4196 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
   }
   tmp_4194 += tmp_4196;
   result += (-0.25*Sqr(g2)) * tmp_4193 * tmp_4194;
   std::complex<double> tmp_4197;
   std::complex<double> tmp_4199;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4199 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_4197 += tmp_4199;
   std::complex<double> tmp_4198;
   std::complex<double> tmp_4200;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4200 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4198 += tmp_4200;
   result += (0.1875*Sqr(g1p)) * tmp_4197 * tmp_4198;
   std::complex<double> tmp_4201;
   std::complex<double> tmp_4203;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4203 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_4201 += tmp_4203;
   std::complex<double> tmp_4202;
   std::complex<double> tmp_4204;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4204 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4202 += tmp_4204;
   result += (0.125*Sqr(g1p)) * tmp_4201 * tmp_4202;
   std::complex<double> tmp_4205;
   std::complex<double> tmp_4207;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4208;
      std::complex<double> tmp_4209;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4209 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4208 += tmp_4209;
      tmp_4207 += (UHIPM(gI1,2 + j2)) * tmp_4208;
   }
   tmp_4205 += tmp_4207;
   std::complex<double> tmp_4206;
   std::complex<double> tmp_4210;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4211;
      std::complex<double> tmp_4212;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4212 += Conj(fd(j3,j4))*KroneckerDelta(gO2,4 + j3);
      }
      tmp_4211 += tmp_4212;
      tmp_4210 += (Conj(UHIPM(gI2,2 + j4))) * tmp_4211;
   }
   tmp_4206 += tmp_4210;
   result += (-1) * tmp_4205 * tmp_4206;
   std::complex<double> tmp_4213;
   std::complex<double> tmp_4215;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4216;
      std::complex<double> tmp_4217;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4217 += KroneckerDelta(gO1,4 + j1)*fu(j1,j2);
      }
      tmp_4216 += tmp_4217;
      tmp_4215 += (Conj(UHIPM(gI2,j2))) * tmp_4216;
   }
   tmp_4213 += tmp_4215;
   std::complex<double> tmp_4214;
   std::complex<double> tmp_4218;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4219;
      std::complex<double> tmp_4220;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4220 += Conj(fu(j3,j4))*KroneckerDelta(gO2,4 + j3);
      }
      tmp_4219 += tmp_4220;
      tmp_4218 += (UHIPM(gI1,j4)) * tmp_4219;
   }
   tmp_4214 += tmp_4218;
   result += (-1) * tmp_4213 * tmp_4214;
   if (gO1 < 2) {
      std::complex<double> tmp_4221;
      std::complex<double> tmp_4222;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4222 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_4221 += tmp_4222;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4221;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4223;
      std::complex<double> tmp_4224;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4224 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_4223 += tmp_4224;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4223;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4225;
      std::complex<double> tmp_4226;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4226 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_4225 += tmp_4226;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4225;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4227;
      std::complex<double> tmp_4228;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4228 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_4227 += tmp_4228;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4227;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4229;
      std::complex<double> tmp_4230;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4230 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_4229 += tmp_4230;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4229;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4231;
      std::complex<double> tmp_4232;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4232 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_4231 += tmp_4232;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4231;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4233;
      std::complex<double> tmp_4234;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4234 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_4233 += tmp_4234;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4233;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4235;
      std::complex<double> tmp_4236;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4236 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_4235 += tmp_4236;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4235;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4237;
      std::complex<double> tmp_4238;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4238 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_4237 += tmp_4238;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4237;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4239;
      std::complex<double> tmp_4240;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4240 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_4239 += tmp_4240;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4239;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4241;
      std::complex<double> tmp_4242;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4242 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_4241 += tmp_4242;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4241;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4243;
      std::complex<double> tmp_4244;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4244 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_4243 += tmp_4244;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4243;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4245;
      std::complex<double> tmp_4246;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4246 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
      }
      tmp_4245 += tmp_4246;
      result += (-0.25*Conj(UHIPM(gI2,gO2))*Sqr(g2)) * tmp_4245;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4247;
      std::complex<double> tmp_4248;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4248 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1
            );
      }
      tmp_4247 += tmp_4248;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_4247;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4249;
      std::complex<double> tmp_4250;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4250 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
      }
      tmp_4249 += tmp_4250;
      result += (-0.25*Conj(UHIPM(gI2,gO2))*Sqr(g2)) * tmp_4249;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4251;
      std::complex<double> tmp_4252;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4252 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_4251 += tmp_4252;
      result += (-0.25*Sqr(g2)*UHIPM(gI1,gO1)) * tmp_4251;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4253;
      std::complex<double> tmp_4254;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4254 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_4253 += tmp_4254;
      result += (-0.25*Sqr(g2)*UHIPM(gI1,gO1)) * tmp_4253;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.5*Conj(UHIPM(gI2,gO2))*Sqr(g2)*UHIPM(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4255;
      std::complex<double> tmp_4256;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4256 += Conj(UHIPM(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIPM(
            gI1,j2);
      }
      tmp_4255 += tmp_4256;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_4255;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjSHIPMHpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4257;
   std::complex<double> tmp_4258;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4259;
      std::complex<double> tmp_4260;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4260 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4259 += tmp_4260;
      tmp_4258 += (UHIPM(gI1,j2)) * tmp_4259;
   }
   tmp_4257 += tmp_4258;
   result += (0.7071067811865475*vs*Conj(ZP(gI2,0))*Lambdax) * tmp_4257;
   std::complex<double> tmp_4261;
   std::complex<double> tmp_4262;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4263;
      std::complex<double> tmp_4264;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4264 += Conj(Tfu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4263 += tmp_4264;
      tmp_4262 += (UHIPM(gI1,j2)) * tmp_4263;
   }
   tmp_4261 += tmp_4262;
   result += (Conj(ZP(gI2,1))) * tmp_4261;
   std::complex<double> tmp_4265;
   std::complex<double> tmp_4266;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_4267;
      std::complex<double> tmp_4268;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4268 += Conj(fu(j2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_4267 += tmp_4268;
      tmp_4266 += (KroneckerDelta(gO2,4 + j2)) * tmp_4267;
   }
   tmp_4265 += tmp_4266;
   result += (0.7071067811865475*vs*Conj(ZP(gI2,1))) * tmp_4265;
   std::complex<double> tmp_4269;
   std::complex<double> tmp_4270;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4271;
      std::complex<double> tmp_4272;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4273;
         std::complex<double> tmp_4274;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4274 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_4273 += tmp_4274;
         tmp_4272 += (KroneckerDelta(gO2,2 + j2)) * tmp_4273;
      }
      tmp_4271 += tmp_4272;
      tmp_4270 += (UHIPM(gI1,j3)) * tmp_4271;
   }
   tmp_4269 += tmp_4270;
   result += (0.7071067811865475*vd*Conj(ZP(gI2,1))) * tmp_4269;
   if (gO2 < 2) {
      std::complex<double> tmp_4275;
      std::complex<double> tmp_4276;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4277;
         std::complex<double> tmp_4278;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4278 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_4277 += tmp_4278;
         tmp_4276 += (UHIPM(gI1,2 + j2)) * tmp_4277;
      }
      tmp_4275 += tmp_4276;
      result += (0.7071067811865475*vu*Conj(ZP(gI2,0))) * tmp_4275;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4279;
   std::complex<double> tmp_4280;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4280 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4279 += tmp_4280;
   result += (0.15*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_4279;
   std::complex<double> tmp_4281;
   std::complex<double> tmp_4282;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4282 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4281 += tmp_4282;
   result += (-0.15*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_4281;
   std::complex<double> tmp_4283;
   std::complex<double> tmp_4284;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4284 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4283 += tmp_4284;
   result += (0.25*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0)) * tmp_4283;
   std::complex<double> tmp_4285;
   std::complex<double> tmp_4286;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4286 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4285 += tmp_4286;
   result += (0.375*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_4285;
   std::complex<double> tmp_4287;
   std::complex<double> tmp_4288;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4289;
      std::complex<double> tmp_4290;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4291;
         std::complex<double> tmp_4292;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4292 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_4291 += tmp_4292;
         tmp_4290 += (KroneckerDelta(gO2,2 + j2)) * tmp_4291;
      }
      tmp_4289 += tmp_4290;
      tmp_4288 += (KroneckerDelta(gO1,2 + j3)) * tmp_4289;
   }
   tmp_4287 += tmp_4288;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_4287;
   std::complex<double> tmp_4293;
   std::complex<double> tmp_4294;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4295;
      std::complex<double> tmp_4296;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4297;
         std::complex<double> tmp_4298;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4298 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_4297 += tmp_4298;
         tmp_4296 += (KroneckerDelta(gO1,4 + j2)) * tmp_4297;
      }
      tmp_4295 += tmp_4296;
      tmp_4294 += (KroneckerDelta(gO2,4 + j3)) * tmp_4295;
   }
   tmp_4293 += tmp_4294;
   result += (-(ZA(gI1,0)*ZA(gI2,0))) * tmp_4293;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4299;
      std::complex<double> tmp_4300;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4300 += fd(j1,gO2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4299 += tmp_4300;
      result += (0.5*Conj(Lambda12(gO2,gO2))*ZA(gI1,2)*ZA(gI2,0)) * tmp_4299
         ;
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_4301;
   std::complex<double> tmp_4302;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4302 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4301 += tmp_4302;
   result += (-0.15*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_4301;
   std::complex<double> tmp_4303;
   std::complex<double> tmp_4304;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4304 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4303 += tmp_4304;
   result += (-0.1*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_4303;
   std::complex<double> tmp_4305;
   std::complex<double> tmp_4306;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4306 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4305 += tmp_4306;
   result += (-0.25*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1)) * tmp_4305;
   std::complex<double> tmp_4307;
   std::complex<double> tmp_4308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4308 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4307 += tmp_4308;
   result += (0.25*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_4307;
   std::complex<double> tmp_4309;
   std::complex<double> tmp_4310;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4311;
      std::complex<double> tmp_4312;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4313;
         std::complex<double> tmp_4314;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4314 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_4313 += tmp_4314;
         tmp_4312 += (KroneckerDelta(gO1,4 + j2)) * tmp_4313;
      }
      tmp_4311 += tmp_4312;
      tmp_4310 += (KroneckerDelta(gO2,4 + j3)) * tmp_4311;
   }
   tmp_4309 += tmp_4310;
   result += (-(ZA(gI1,1)*ZA(gI2,1))) * tmp_4309;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_4315;
      std::complex<double> tmp_4316;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4316 += Conj(fu(j1,gO2))*fu(j1,gO1);
      }
      tmp_4315 += tmp_4316;
      result += (-(ZA(gI1,1)*ZA(gI2,1))) * tmp_4315;
   }
   std::complex<double> tmp_4317;
   std::complex<double> tmp_4318;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4319;
      std::complex<double> tmp_4320;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4320 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4319 += tmp_4320;
      tmp_4318 += (KroneckerDelta(gO2,2 + j2)) * tmp_4319;
   }
   tmp_4317 += tmp_4318;
   result += (-0.5*Conj(Lambdax)*ZA(gI1,2)*ZA(gI2,1)) * tmp_4317;
   std::complex<double> tmp_4321;
   std::complex<double> tmp_4322;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4323;
      std::complex<double> tmp_4324;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4324 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4323 += tmp_4324;
      tmp_4322 += (KroneckerDelta(gO1,2 + j2)) * tmp_4323;
   }
   tmp_4321 += tmp_4322;
   result += (-0.5*Lambdax*ZA(gI1,2)*ZA(gI2,1)) * tmp_4321;
   if (gO2 < 2) {
      std::complex<double> tmp_4325;
      std::complex<double> tmp_4326;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4326 += fd(j1,gO2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4325 += tmp_4326;
      result += (0.5*Conj(Lambda12(gO2,gO2))*ZA(gI1,0)*ZA(gI2,2)) * tmp_4325
         ;
   }
   std::complex<double> tmp_4327;
   std::complex<double> tmp_4328;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4329;
      std::complex<double> tmp_4330;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4330 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4329 += tmp_4330;
      tmp_4328 += (KroneckerDelta(gO2,2 + j2)) * tmp_4329;
   }
   tmp_4327 += tmp_4328;
   result += (-0.5*Conj(Lambdax)*ZA(gI1,1)*ZA(gI2,2)) * tmp_4327;
   std::complex<double> tmp_4331;
   std::complex<double> tmp_4332;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4333;
      std::complex<double> tmp_4334;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4334 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4333 += tmp_4334;
      tmp_4332 += (KroneckerDelta(gO1,2 + j2)) * tmp_4333;
   }
   tmp_4331 += tmp_4332;
   result += (-0.5*Lambdax*ZA(gI1,1)*ZA(gI2,2)) * tmp_4331;
   std::complex<double> tmp_4335;
   std::complex<double> tmp_4336;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4336 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4335 += tmp_4336;
   result += (0.05*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_4335;
   std::complex<double> tmp_4337;
   std::complex<double> tmp_4338;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4338 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4337 += tmp_4338;
   result += (-0.125*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_4337;
   std::complex<double> tmp_4339;
   std::complex<double> tmp_4340;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4340 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_4339 += tmp_4340;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_4339;
   if (gO1 < 2) {
      result += 0.075*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2
         );
   }
   std::complex<double> tmp_4341;
   std::complex<double> tmp_4342;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4342 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4341 += tmp_4342;
   result += (-0.05*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_4341;
   std::complex<double> tmp_4343;
   std::complex<double> tmp_4344;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4344 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4343 += tmp_4344;
   result += (0.125*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_4343;
   if (gO1 < 2) {
      result += -0.075*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,
         3);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Sigmax*ZA(gI1,4)*ZA(gI2,3);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Sigmax*ZA(gI1,3)*ZA(gI2,4);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4345;
      std::complex<double> tmp_4346;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4346 += Conj(fd(j2,gO1))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4345 += tmp_4346;
      result += (0.5*ZA(gI1,2)*ZA(gI2,0)*Lambda12(gO1,gO1)) * tmp_4345;
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4347;
      std::complex<double> tmp_4348;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4348 += Conj(fd(j2,gO1))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4347 += tmp_4348;
      result += (0.5*ZA(gI1,0)*ZA(gI2,2)*Lambda12(gO1,gO1)) * tmp_4347;
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2
         )*ZA(gI2,2));
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Sigmax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,4)*ZA(
         gI2,3)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Sigmax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,3)*ZA(
         gI2,4)*Lambda12(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4349;
   std::complex<double> tmp_4350;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4350 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4349 += tmp_4350;
   result += (0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_4349;
   std::complex<double> tmp_4351;
   std::complex<double> tmp_4352;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4352 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4351 += tmp_4352;
   result += (-0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_4351;
   std::complex<double> tmp_4353;
   std::complex<double> tmp_4354;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4354 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4353 += tmp_4354;
   result += (0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g2)) * tmp_4353;
   std::complex<double> tmp_4355;
   std::complex<double> tmp_4356;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4356 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4355 += tmp_4356;
   result += (-0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_4355;
   std::complex<double> tmp_4357;
   std::complex<double> tmp_4358;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4358 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4357 += tmp_4358;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_4357;
   std::complex<double> tmp_4359;
   std::complex<double> tmp_4360;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4360 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4359 += tmp_4360;
   result += (-0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g2)) * tmp_4359;
   std::complex<double> tmp_4361;
   std::complex<double> tmp_4362;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4362 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4361 += tmp_4362;
   result += (0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_4361;
   std::complex<double> tmp_4363;
   std::complex<double> tmp_4364;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4364 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4363 += tmp_4364;
   result += (-0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_4363;
   std::complex<double> tmp_4365;
   std::complex<double> tmp_4366;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4366 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4365 += tmp_4366;
   result += (0.375*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_4365;
   std::complex<double> tmp_4367;
   std::complex<double> tmp_4368;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4368 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4367 += tmp_4368;
   result += (0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_4367;
   std::complex<double> tmp_4369;
   std::complex<double> tmp_4370;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4370 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4369 += tmp_4370;
   result += (-0.125*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_4369;
   std::complex<double> tmp_4371;
   std::complex<double> tmp_4372;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4372 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4371 += tmp_4372;
   result += (0.125*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_4371;
   std::complex<double> tmp_4373;
   std::complex<double> tmp_4374;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4375;
      std::complex<double> tmp_4376;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4376 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4375 += tmp_4376;
      tmp_4374 += (KroneckerDelta(gO2,2 + j2)) * tmp_4375;
   }
   tmp_4373 += tmp_4374;
   result += (0.5*Conj(Lambdax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))) * tmp_4373;
   std::complex<double> tmp_4377;
   std::complex<double> tmp_4378;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4379;
      std::complex<double> tmp_4380;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4380 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4379 += tmp_4380;
      tmp_4378 += (KroneckerDelta(gO2,2 + j2)) * tmp_4379;
   }
   tmp_4377 += tmp_4378;
   result += (0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))) * tmp_4377;
   std::complex<double> tmp_4381;
   std::complex<double> tmp_4382;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4383;
      std::complex<double> tmp_4384;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4384 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4383 += tmp_4384;
      tmp_4382 += (KroneckerDelta(gO1,2 + j2)) * tmp_4383;
   }
   tmp_4381 += tmp_4382;
   result += (0.5*Conj(ZH(gI1,2))*Conj(ZH(gI2,1))*Lambdax) * tmp_4381;
   std::complex<double> tmp_4385;
   std::complex<double> tmp_4386;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4387;
      std::complex<double> tmp_4388;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4388 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4387 += tmp_4388;
      tmp_4386 += (KroneckerDelta(gO1,2 + j2)) * tmp_4387;
   }
   tmp_4385 += tmp_4386;
   result += (0.5*Conj(ZH(gI1,1))*Conj(ZH(gI2,2))*Lambdax) * tmp_4385;
   std::complex<double> tmp_4389;
   std::complex<double> tmp_4390;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4390 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_4389 += tmp_4390;
   result += (-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)))) * tmp_4389;
   std::complex<double> tmp_4391;
   std::complex<double> tmp_4392;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4393;
      std::complex<double> tmp_4394;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4395;
         std::complex<double> tmp_4396;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4396 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_4395 += tmp_4396;
         tmp_4394 += (KroneckerDelta(gO2,2 + j2)) * tmp_4395;
      }
      tmp_4393 += tmp_4394;
      tmp_4392 += (KroneckerDelta(gO1,2 + j3)) * tmp_4393;
   }
   tmp_4391 += tmp_4392;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_4391;
   std::complex<double> tmp_4397;
   std::complex<double> tmp_4398;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4399;
      std::complex<double> tmp_4400;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4401;
         std::complex<double> tmp_4402;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4402 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_4401 += tmp_4402;
         tmp_4400 += (KroneckerDelta(gO1,4 + j2)) * tmp_4401;
      }
      tmp_4399 += tmp_4400;
      tmp_4398 += (KroneckerDelta(gO2,4 + j3)) * tmp_4399;
   }
   tmp_4397 += tmp_4398;
   result += (-(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)))) * tmp_4397;
   std::complex<double> tmp_4403;
   std::complex<double> tmp_4404;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4405;
      std::complex<double> tmp_4406;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4407;
         std::complex<double> tmp_4408;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4408 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_4407 += tmp_4408;
         tmp_4406 += (KroneckerDelta(gO1,4 + j2)) * tmp_4407;
      }
      tmp_4405 += tmp_4406;
      tmp_4404 += (KroneckerDelta(gO2,4 + j3)) * tmp_4405;
   }
   tmp_4403 += tmp_4404;
   result += (-(Conj(ZH(gI1,1))*Conj(ZH(gI2,1)))) * tmp_4403;
   if (gO1 < 2) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 2) {
      result += -0.225*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 2) {
      result += 0.075*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += -0.075*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1
         ,gO2)*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*Conj(Lambda12(gO2,gO2))
         *KroneckerDelta(gO1,2 + gO2)*Lambdax;
   }
   if (gO2 < 2) {
      result += -0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*Conj(Lambda12(gO2,gO2))
         *KroneckerDelta(gO1,2 + gO2)*Lambdax;
   }
   if (gO2 < 2) {
      result += -0.5*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*Conj(Lambda12(gO2,gO2))
         *KroneckerDelta(gO1,2 + gO2)*Sigmax;
   }
   if (gO2 < 2) {
      result += -0.5*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*Conj(Lambda12(gO2,gO2))
         *KroneckerDelta(gO1,2 + gO2)*Sigmax;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4409;
      std::complex<double> tmp_4410;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4410 += fd(j1,gO2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4409 += tmp_4410;
      result += (0.5*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*Conj(Lambda12(gO2,gO2))
         ) * tmp_4409;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4411;
      std::complex<double> tmp_4412;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4412 += fd(j1,gO2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4411 += tmp_4412;
      result += (0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*Conj(Lambda12(gO2,gO2))
         ) * tmp_4411;
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_4413;
      std::complex<double> tmp_4414;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4414 += Conj(fu(j1,gO2))*fu(j1,gO1);
      }
      tmp_4413 += tmp_4414;
      result += (-(Conj(ZH(gI1,1))*Conj(ZH(gI2,1)))) * tmp_4413;
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4415;
      std::complex<double> tmp_4416;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4416 += Conj(fd(j2,gO1))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4415 += tmp_4416;
      result += (0.5*Conj(ZH(gI1,2))*Conj(ZH(gI2,0))*Lambda12(gO1,gO1)) *
         tmp_4415;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4417;
      std::complex<double> tmp_4418;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4418 += Conj(fd(j2,gO1))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4417 += tmp_4418;
      result += (0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,2))*Lambda12(gO1,gO1)) *
         tmp_4417;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4419;
   std::complex<double> tmp_4421;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4421 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4419 += tmp_4421;
   std::complex<double> tmp_4420;
   std::complex<double> tmp_4422;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4422 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4420 += tmp_4422;
   result += (-0.025*Sqr(g1)) * tmp_4419 * tmp_4420;
   std::complex<double> tmp_4423;
   std::complex<double> tmp_4425;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4425 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4423 += tmp_4425;
   std::complex<double> tmp_4424;
   std::complex<double> tmp_4426;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4426 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4424 += tmp_4426;
   result += (0.025*Sqr(g1p)) * tmp_4423 * tmp_4424;
   std::complex<double> tmp_4427;
   std::complex<double> tmp_4429;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4429 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4427 += tmp_4429;
   std::complex<double> tmp_4428;
   std::complex<double> tmp_4430;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4430 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4428 += tmp_4430;
   result += (-0.125*Sqr(g2)) * tmp_4427 * tmp_4428;
   std::complex<double> tmp_4431;
   std::complex<double> tmp_4433;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4433 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4431 += tmp_4433;
   std::complex<double> tmp_4432;
   std::complex<double> tmp_4434;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4434 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4432 += tmp_4434;
   result += (-0.05*Sqr(g1)) * tmp_4431 * tmp_4432;
   std::complex<double> tmp_4435;
   std::complex<double> tmp_4437;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4437 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4435 += tmp_4437;
   std::complex<double> tmp_4436;
   std::complex<double> tmp_4438;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4438 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4436 += tmp_4438;
   result += (0.05*Sqr(g1p)) * tmp_4435 * tmp_4436;
   std::complex<double> tmp_4439;
   std::complex<double> tmp_4441;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4441 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_4439 += tmp_4441;
   std::complex<double> tmp_4440;
   std::complex<double> tmp_4442;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4442 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4440 += tmp_4442;
   result += (-0.0625*Sqr(g1p)) * tmp_4439 * tmp_4440;
   std::complex<double> tmp_4443;
   std::complex<double> tmp_4445;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4445 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_4443 += tmp_4445;
   std::complex<double> tmp_4444;
   std::complex<double> tmp_4446;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4446 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4444 += tmp_4446;
   result += (-0.125*Sqr(g1p)) * tmp_4443 * tmp_4444;
   std::complex<double> tmp_4447;
   std::complex<double> tmp_4449;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4449 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4447 += tmp_4449;
   std::complex<double> tmp_4448;
   std::complex<double> tmp_4450;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4450 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4448 += tmp_4450;
   result += (-0.025*Sqr(g1)) * tmp_4447 * tmp_4448;
   std::complex<double> tmp_4451;
   std::complex<double> tmp_4453;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4453 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4451 += tmp_4453;
   std::complex<double> tmp_4452;
   std::complex<double> tmp_4454;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4454 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4452 += tmp_4454;
   result += (0.025*Sqr(g1p)) * tmp_4451 * tmp_4452;
   std::complex<double> tmp_4455;
   std::complex<double> tmp_4457;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4457 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4455 += tmp_4457;
   std::complex<double> tmp_4456;
   std::complex<double> tmp_4458;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4458 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4456 += tmp_4458;
   result += (-0.125*Sqr(g2)) * tmp_4455 * tmp_4456;
   std::complex<double> tmp_4459;
   std::complex<double> tmp_4461;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4461 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4459 += tmp_4461;
   std::complex<double> tmp_4460;
   std::complex<double> tmp_4462;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4462 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_4460 += tmp_4462;
   result += (-0.0625*Sqr(g1p)) * tmp_4459 * tmp_4460;
   std::complex<double> tmp_4463;
   std::complex<double> tmp_4465;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4465 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4463 += tmp_4465;
   std::complex<double> tmp_4464;
   std::complex<double> tmp_4466;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4466 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_4464 += tmp_4466;
   result += (-0.05*Sqr(g1)) * tmp_4463 * tmp_4464;
   std::complex<double> tmp_4467;
   std::complex<double> tmp_4469;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4469 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4467 += tmp_4469;
   std::complex<double> tmp_4468;
   std::complex<double> tmp_4470;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4470 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_4468 += tmp_4470;
   result += (0.05*Sqr(g1p)) * tmp_4467 * tmp_4468;
   std::complex<double> tmp_4471;
   std::complex<double> tmp_4473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4473 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4471 += tmp_4473;
   std::complex<double> tmp_4472;
   std::complex<double> tmp_4474;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4474 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_4472 += tmp_4474;
   result += (-0.125*Sqr(g1p)) * tmp_4471 * tmp_4472;
   std::complex<double> tmp_4475;
   std::complex<double> tmp_4477;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4477 += Conj(ZD(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_4475 += tmp_4477;
   std::complex<double> tmp_4476;
   std::complex<double> tmp_4478;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4479;
      std::complex<double> tmp_4480;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4480 += Conj(fd(j2,j3))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4479 += tmp_4480;
      tmp_4478 += (KroneckerDelta(gO1,2 + j3)) * tmp_4479;
   }
   tmp_4476 += tmp_4478;
   result += (-1) * tmp_4475 * tmp_4476;
   std::complex<double> tmp_4481;
   std::complex<double> tmp_4483;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4484;
      std::complex<double> tmp_4485;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4485 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4484 += tmp_4485;
      tmp_4483 += (KroneckerDelta(gO2,2 + j2)) * tmp_4484;
   }
   tmp_4481 += tmp_4483;
   std::complex<double> tmp_4482;
   std::complex<double> tmp_4486;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      tmp_4486 += Conj(Yd(j3,j3))*Conj(ZD(gI2,3 + j3))*ZD(gI1,j3);
   }
   tmp_4482 += tmp_4486;
   result += (-1) * tmp_4481 * tmp_4482;
   if (gO1 < 2) {
      std::complex<double> tmp_4487;
      std::complex<double> tmp_4488;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4488 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4487 += tmp_4488;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4487;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4489;
      std::complex<double> tmp_4490;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4490 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4489 += tmp_4490;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4489;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4491;
      std::complex<double> tmp_4492;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4492 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_4491 += tmp_4492;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4491;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4493;
      std::complex<double> tmp_4494;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4494 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_4493 += tmp_4494;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4493;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4495;
      std::complex<double> tmp_4496;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4496 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_4495 += tmp_4496;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4495;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4497;
      std::complex<double> tmp_4498;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4498 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4497 += tmp_4498;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4497;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4499;
      std::complex<double> tmp_4500;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4500 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4499 += tmp_4500;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4499;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4501;
      std::complex<double> tmp_4502;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4502 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_4501 += tmp_4502;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4501;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4503;
      std::complex<double> tmp_4504;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4504 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_4503 += tmp_4504;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4503;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4505;
      std::complex<double> tmp_4506;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4506 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_4505 += tmp_4506;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4505;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4507;
   std::complex<double> tmp_4509;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4509 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4507 += tmp_4509;
   std::complex<double> tmp_4508;
   std::complex<double> tmp_4510;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4510 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4508 += tmp_4510;
   result += (0.05*Sqr(g1)) * tmp_4507 * tmp_4508;
   std::complex<double> tmp_4511;
   std::complex<double> tmp_4513;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4513 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4511 += tmp_4513;
   std::complex<double> tmp_4512;
   std::complex<double> tmp_4514;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4514 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4512 += tmp_4514;
   result += (-0.05*Sqr(g1p)) * tmp_4511 * tmp_4512;
   std::complex<double> tmp_4515;
   std::complex<double> tmp_4517;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4517 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4515 += tmp_4517;
   std::complex<double> tmp_4516;
   std::complex<double> tmp_4518;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4518 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4516 += tmp_4518;
   result += (-0.05*Sqr(g1)) * tmp_4515 * tmp_4516;
   std::complex<double> tmp_4519;
   std::complex<double> tmp_4521;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4521 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4519 += tmp_4521;
   std::complex<double> tmp_4520;
   std::complex<double> tmp_4522;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4522 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4520 += tmp_4522;
   result += (-0.075*Sqr(g1p)) * tmp_4519 * tmp_4520;
   std::complex<double> tmp_4523;
   std::complex<double> tmp_4525;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4525 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_4523 += tmp_4525;
   std::complex<double> tmp_4524;
   std::complex<double> tmp_4526;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4526 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4524 += tmp_4526;
   result += (0.125*Sqr(g1p)) * tmp_4523 * tmp_4524;
   std::complex<double> tmp_4527;
   std::complex<double> tmp_4529;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4529 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_4527 += tmp_4529;
   std::complex<double> tmp_4528;
   std::complex<double> tmp_4530;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4530 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4528 += tmp_4530;
   result += (0.1875*Sqr(g1p)) * tmp_4527 * tmp_4528;
   std::complex<double> tmp_4531;
   std::complex<double> tmp_4533;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4533 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4531 += tmp_4533;
   std::complex<double> tmp_4532;
   std::complex<double> tmp_4534;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4534 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_4532 += tmp_4534;
   result += (0.05*Sqr(g1)) * tmp_4531 * tmp_4532;
   std::complex<double> tmp_4535;
   std::complex<double> tmp_4537;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4537 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4535 += tmp_4537;
   std::complex<double> tmp_4536;
   std::complex<double> tmp_4538;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4538 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_4536 += tmp_4538;
   result += (-0.05*Sqr(g1p)) * tmp_4535 * tmp_4536;
   std::complex<double> tmp_4539;
   std::complex<double> tmp_4541;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4541 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4539 += tmp_4541;
   std::complex<double> tmp_4540;
   std::complex<double> tmp_4542;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4542 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_4540 += tmp_4542;
   result += (0.125*Sqr(g1p)) * tmp_4539 * tmp_4540;
   std::complex<double> tmp_4543;
   std::complex<double> tmp_4545;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4545 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4543 += tmp_4545;
   std::complex<double> tmp_4544;
   std::complex<double> tmp_4546;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4546 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_4544 += tmp_4546;
   result += (-0.05*Sqr(g1)) * tmp_4543 * tmp_4544;
   std::complex<double> tmp_4547;
   std::complex<double> tmp_4549;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4549 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4547 += tmp_4549;
   std::complex<double> tmp_4548;
   std::complex<double> tmp_4550;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4550 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_4548 += tmp_4550;
   result += (-0.075*Sqr(g1p)) * tmp_4547 * tmp_4548;
   std::complex<double> tmp_4551;
   std::complex<double> tmp_4553;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4553 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4551 += tmp_4553;
   std::complex<double> tmp_4552;
   std::complex<double> tmp_4554;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4554 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_4552 += tmp_4554;
   result += (0.1875*Sqr(g1p)) * tmp_4551 * tmp_4552;
   if (gO1 < 2) {
      std::complex<double> tmp_4555;
      std::complex<double> tmp_4556;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4556 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_4555 += tmp_4556;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4555;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4557;
      std::complex<double> tmp_4558;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4558 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_4557 += tmp_4558;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4557;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4559;
      std::complex<double> tmp_4560;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4560 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_4559 += tmp_4560;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4559;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4561;
      std::complex<double> tmp_4562;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4562 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_4561 += tmp_4562;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4561;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4563;
      std::complex<double> tmp_4564;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4564 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_4563 += tmp_4564;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4563;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4565;
      std::complex<double> tmp_4566;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4566 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_4565 += tmp_4566;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4565;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4567;
      std::complex<double> tmp_4568;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4568 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_4567 += tmp_4568;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4567;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4569;
      std::complex<double> tmp_4570;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4570 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_4569 += tmp_4570;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4569;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4571;
      std::complex<double> tmp_4572;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4572 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_4571 += tmp_4572;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_4571;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4573;
      std::complex<double> tmp_4574;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4574 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_4573 += tmp_4574;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_4573;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4575;
   std::complex<double> tmp_4577;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4577 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4575 += tmp_4577;
   std::complex<double> tmp_4576;
   std::complex<double> tmp_4578;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4578 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4576 += tmp_4578;
   result += (0.075*Sqr(g1)) * tmp_4575 * tmp_4576;
   std::complex<double> tmp_4579;
   std::complex<double> tmp_4581;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4581 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4579 += tmp_4581;
   std::complex<double> tmp_4580;
   std::complex<double> tmp_4582;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4582 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4580 += tmp_4582;
   result += (0.05*Sqr(g1p)) * tmp_4579 * tmp_4580;
   std::complex<double> tmp_4583;
   std::complex<double> tmp_4585;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4585 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4583 += tmp_4585;
   std::complex<double> tmp_4584;
   std::complex<double> tmp_4586;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4586 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4584 += tmp_4586;
   result += (-0.125*Sqr(g2)) * tmp_4583 * tmp_4584;
   std::complex<double> tmp_4587;
   std::complex<double> tmp_4589;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4589 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4587 += tmp_4589;
   std::complex<double> tmp_4588;
   std::complex<double> tmp_4590;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4590 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4588 += tmp_4590;
   result += (-0.15*Sqr(g1)) * tmp_4587 * tmp_4588;
   std::complex<double> tmp_4591;
   std::complex<double> tmp_4593;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4593 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4591 += tmp_4593;
   std::complex<double> tmp_4592;
   std::complex<double> tmp_4594;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4594 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4592 += tmp_4594;
   result += (0.025*Sqr(g1p)) * tmp_4591 * tmp_4592;
   std::complex<double> tmp_4595;
   std::complex<double> tmp_4597;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4597 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_4595 += tmp_4597;
   std::complex<double> tmp_4596;
   std::complex<double> tmp_4598;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4598 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4596 += tmp_4598;
   result += (-0.125*Sqr(g1p)) * tmp_4595 * tmp_4596;
   std::complex<double> tmp_4599;
   std::complex<double> tmp_4601;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4601 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_4599 += tmp_4601;
   std::complex<double> tmp_4600;
   std::complex<double> tmp_4602;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4602 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4600 += tmp_4602;
   result += (-0.0625*Sqr(g1p)) * tmp_4599 * tmp_4600;
   std::complex<double> tmp_4603;
   std::complex<double> tmp_4605;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4605 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4603 += tmp_4605;
   std::complex<double> tmp_4604;
   std::complex<double> tmp_4606;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4606 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4604 += tmp_4606;
   result += (0.075*Sqr(g1)) * tmp_4603 * tmp_4604;
   std::complex<double> tmp_4607;
   std::complex<double> tmp_4609;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4609 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4607 += tmp_4609;
   std::complex<double> tmp_4608;
   std::complex<double> tmp_4610;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4610 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4608 += tmp_4610;
   result += (0.05*Sqr(g1p)) * tmp_4607 * tmp_4608;
   std::complex<double> tmp_4611;
   std::complex<double> tmp_4613;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4613 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4611 += tmp_4613;
   std::complex<double> tmp_4612;
   std::complex<double> tmp_4614;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4614 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4612 += tmp_4614;
   result += (-0.125*Sqr(g2)) * tmp_4611 * tmp_4612;
   std::complex<double> tmp_4615;
   std::complex<double> tmp_4617;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4617 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4615 += tmp_4617;
   std::complex<double> tmp_4616;
   std::complex<double> tmp_4618;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4618 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_4616 += tmp_4618;
   result += (-0.125*Sqr(g1p)) * tmp_4615 * tmp_4616;
   std::complex<double> tmp_4619;
   std::complex<double> tmp_4621;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4621 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4619 += tmp_4621;
   std::complex<double> tmp_4620;
   std::complex<double> tmp_4622;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4622 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_4620 += tmp_4622;
   result += (-0.15*Sqr(g1)) * tmp_4619 * tmp_4620;
   std::complex<double> tmp_4623;
   std::complex<double> tmp_4625;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4625 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4623 += tmp_4625;
   std::complex<double> tmp_4624;
   std::complex<double> tmp_4626;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4626 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_4624 += tmp_4626;
   result += (0.025*Sqr(g1p)) * tmp_4623 * tmp_4624;
   std::complex<double> tmp_4627;
   std::complex<double> tmp_4629;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4629 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4627 += tmp_4629;
   std::complex<double> tmp_4628;
   std::complex<double> tmp_4630;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4630 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_4628 += tmp_4630;
   result += (-0.0625*Sqr(g1p)) * tmp_4627 * tmp_4628;
   std::complex<double> tmp_4631;
   std::complex<double> tmp_4633;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4633 += Conj(ZE(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_4631 += tmp_4633;
   std::complex<double> tmp_4632;
   std::complex<double> tmp_4634;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_4635;
      std::complex<double> tmp_4636;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4636 += Conj(fd(j2,j3))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4635 += tmp_4636;
      tmp_4634 += (KroneckerDelta(gO1,2 + j3)) * tmp_4635;
   }
   tmp_4632 += tmp_4634;
   result += (-1) * tmp_4631 * tmp_4632;
   std::complex<double> tmp_4637;
   std::complex<double> tmp_4639;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4640;
      std::complex<double> tmp_4641;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4641 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4640 += tmp_4641;
      tmp_4639 += (KroneckerDelta(gO2,2 + j2)) * tmp_4640;
   }
   tmp_4637 += tmp_4639;
   std::complex<double> tmp_4638;
   std::complex<double> tmp_4642;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      tmp_4642 += Conj(Ye(j3,j3))*Conj(ZE(gI2,3 + j3))*ZE(gI1,j3);
   }
   tmp_4638 += tmp_4642;
   result += (-1) * tmp_4637 * tmp_4638;
   if (gO1 < 2) {
      std::complex<double> tmp_4643;
      std::complex<double> tmp_4644;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4644 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4643 += tmp_4644;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4643;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4645;
      std::complex<double> tmp_4646;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4646 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4645 += tmp_4646;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4645;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4647;
      std::complex<double> tmp_4648;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4648 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_4647 += tmp_4648;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4647;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4649;
      std::complex<double> tmp_4650;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4650 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_4649 += tmp_4650;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4649;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4651;
      std::complex<double> tmp_4652;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4652 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_4651 += tmp_4652;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4651;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4653;
      std::complex<double> tmp_4654;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4654 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4653 += tmp_4654;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4653;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4655;
      std::complex<double> tmp_4656;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4656 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4655 += tmp_4656;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4655;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4657;
      std::complex<double> tmp_4658;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4658 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_4657 += tmp_4658;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4657;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4659;
      std::complex<double> tmp_4660;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4660 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_4659 += tmp_4660;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4659;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4661;
      std::complex<double> tmp_4662;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4662 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_4661 += tmp_4662;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4661;
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_4663;
      std::complex<double> tmp_4665;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4665 += hE(j1,gO1)*ZE(gI1,3 + j1);
      }
      tmp_4663 += tmp_4665;
      std::complex<double> tmp_4664;
      std::complex<double> tmp_4666;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4666 += Conj(hE(j3,gO2))*Conj(ZE(gI2,3 + j3));
      }
      tmp_4664 += tmp_4666;
      result += (-1) * tmp_4663 * tmp_4664;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4667;
   std::complex<double> tmp_4669;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4669 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4667 += tmp_4669;
   std::complex<double> tmp_4668;
   std::complex<double> tmp_4670;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4670 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4668 += tmp_4670;
   result += (-0.025*Sqr(g1)) * tmp_4667 * tmp_4668;
   std::complex<double> tmp_4671;
   std::complex<double> tmp_4673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4673 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4671 += tmp_4673;
   std::complex<double> tmp_4672;
   std::complex<double> tmp_4674;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4674 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4672 += tmp_4674;
   result += (0.025*Sqr(g1p)) * tmp_4671 * tmp_4672;
   std::complex<double> tmp_4675;
   std::complex<double> tmp_4677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4677 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4675 += tmp_4677;
   std::complex<double> tmp_4676;
   std::complex<double> tmp_4678;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4678 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4676 += tmp_4678;
   result += (0.125*Sqr(g2)) * tmp_4675 * tmp_4676;
   std::complex<double> tmp_4679;
   std::complex<double> tmp_4681;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4681 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4679 += tmp_4681;
   std::complex<double> tmp_4680;
   std::complex<double> tmp_4682;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4682 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4680 += tmp_4682;
   result += (0.1*Sqr(g1)) * tmp_4679 * tmp_4680;
   std::complex<double> tmp_4683;
   std::complex<double> tmp_4685;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4685 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4683 += tmp_4685;
   std::complex<double> tmp_4684;
   std::complex<double> tmp_4686;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4686 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4684 += tmp_4686;
   result += (0.025*Sqr(g1p)) * tmp_4683 * tmp_4684;
   std::complex<double> tmp_4687;
   std::complex<double> tmp_4689;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4689 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_4687 += tmp_4689;
   std::complex<double> tmp_4688;
   std::complex<double> tmp_4690;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4690 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4688 += tmp_4690;
   result += (-0.0625*Sqr(g1p)) * tmp_4687 * tmp_4688;
   std::complex<double> tmp_4691;
   std::complex<double> tmp_4693;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4693 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_4691 += tmp_4693;
   std::complex<double> tmp_4692;
   std::complex<double> tmp_4694;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4694 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4692 += tmp_4694;
   result += (-0.0625*Sqr(g1p)) * tmp_4691 * tmp_4692;
   std::complex<double> tmp_4695;
   std::complex<double> tmp_4697;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4697 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4695 += tmp_4697;
   std::complex<double> tmp_4696;
   std::complex<double> tmp_4698;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4698 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4696 += tmp_4698;
   result += (-0.025*Sqr(g1)) * tmp_4695 * tmp_4696;
   std::complex<double> tmp_4699;
   std::complex<double> tmp_4701;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4701 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4699 += tmp_4701;
   std::complex<double> tmp_4700;
   std::complex<double> tmp_4702;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4702 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4700 += tmp_4702;
   result += (0.025*Sqr(g1p)) * tmp_4699 * tmp_4700;
   std::complex<double> tmp_4703;
   std::complex<double> tmp_4705;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4705 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4703 += tmp_4705;
   std::complex<double> tmp_4704;
   std::complex<double> tmp_4706;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4706 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4704 += tmp_4706;
   result += (0.125*Sqr(g2)) * tmp_4703 * tmp_4704;
   std::complex<double> tmp_4707;
   std::complex<double> tmp_4709;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4709 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4707 += tmp_4709;
   std::complex<double> tmp_4708;
   std::complex<double> tmp_4710;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4710 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_4708 += tmp_4710;
   result += (-0.0625*Sqr(g1p)) * tmp_4707 * tmp_4708;
   std::complex<double> tmp_4711;
   std::complex<double> tmp_4713;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4713 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4711 += tmp_4713;
   std::complex<double> tmp_4712;
   std::complex<double> tmp_4714;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4714 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_4712 += tmp_4714;
   result += (0.1*Sqr(g1)) * tmp_4711 * tmp_4712;
   std::complex<double> tmp_4715;
   std::complex<double> tmp_4717;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4717 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4715 += tmp_4717;
   std::complex<double> tmp_4716;
   std::complex<double> tmp_4718;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4718 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_4716 += tmp_4718;
   result += (0.025*Sqr(g1p)) * tmp_4715 * tmp_4716;
   std::complex<double> tmp_4719;
   std::complex<double> tmp_4721;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4721 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4719 += tmp_4721;
   std::complex<double> tmp_4720;
   std::complex<double> tmp_4722;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4722 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_4720 += tmp_4722;
   result += (-0.0625*Sqr(g1p)) * tmp_4719 * tmp_4720;
   if (gO1 < 2) {
      std::complex<double> tmp_4723;
      std::complex<double> tmp_4724;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4724 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4723 += tmp_4724;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4723;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4725;
      std::complex<double> tmp_4726;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4726 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4725 += tmp_4726;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4725;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4727;
      std::complex<double> tmp_4728;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4728 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_4727 += tmp_4728;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4727;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4729;
      std::complex<double> tmp_4730;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4730 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_4729 += tmp_4730;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4729;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4731;
      std::complex<double> tmp_4732;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4732 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_4731 += tmp_4732;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4731;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4733;
      std::complex<double> tmp_4734;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4734 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4733 += tmp_4734;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4733;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4735;
      std::complex<double> tmp_4736;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4736 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4735 += tmp_4736;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4735;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4737;
      std::complex<double> tmp_4738;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4738 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_4737 += tmp_4738;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4737;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4739;
      std::complex<double> tmp_4740;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4740 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_4739 += tmp_4740;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4739;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4741;
      std::complex<double> tmp_4742;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4742 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_4741 += tmp_4742;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4741;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjSeSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4743;
   std::complex<double> tmp_4744;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_4745;
      std::complex<double> tmp_4746;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_4747;
         std::complex<double> tmp_4748;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_4748 += Conj(fu(j3,j1))*hE(j2,j1);
         }
         tmp_4747 += tmp_4748;
         tmp_4746 += (ZE(gI1,3 + j2)) * tmp_4747;
      }
      tmp_4745 += tmp_4746;
      tmp_4744 += (KroneckerDelta(gO2,4 + j3)) * tmp_4745;
   }
   tmp_4743 += tmp_4744;
   result += (-0.7071067811865475*vu*Conj(UHpp(gI2,0))) * tmp_4743;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHI0conjUSHI0conjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_4749;
   std::complex<double> tmp_4751;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4751 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_4749 += tmp_4751;
   std::complex<double> tmp_4750;
   std::complex<double> tmp_4752;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4752 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4750 += tmp_4752;
   result += (-0.075*Sqr(g1)) * tmp_4749 * tmp_4750;
   std::complex<double> tmp_4753;
   std::complex<double> tmp_4755;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4755 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_4753 += tmp_4755;
   std::complex<double> tmp_4754;
   std::complex<double> tmp_4756;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4756 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4754 += tmp_4756;
   result += (-0.05*Sqr(g1p)) * tmp_4753 * tmp_4754;
   std::complex<double> tmp_4757;
   std::complex<double> tmp_4759;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4759 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_4757 += tmp_4759;
   std::complex<double> tmp_4758;
   std::complex<double> tmp_4760;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4760 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4758 += tmp_4760;
   result += (-0.125*Sqr(g2)) * tmp_4757 * tmp_4758;
   std::complex<double> tmp_4761;
   std::complex<double> tmp_4763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4763 += KroneckerDelta(gO1,4 + j1)*UHI0(gI1,4 + j1);
   }
   tmp_4761 += tmp_4763;
   std::complex<double> tmp_4762;
   std::complex<double> tmp_4764;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4764 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4762 += tmp_4764;
   result += (0.125*Sqr(g1p)) * tmp_4761 * tmp_4762;
   std::complex<double> tmp_4765;
   std::complex<double> tmp_4767;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4767 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4765 += tmp_4767;
   std::complex<double> tmp_4766;
   std::complex<double> tmp_4768;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4768 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4766 += tmp_4768;
   result += (0.075*Sqr(g1)) * tmp_4765 * tmp_4766;
   std::complex<double> tmp_4769;
   std::complex<double> tmp_4771;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4771 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4769 += tmp_4771;
   std::complex<double> tmp_4770;
   std::complex<double> tmp_4772;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4772 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4770 += tmp_4772;
   result += (-0.075*Sqr(g1p)) * tmp_4769 * tmp_4770;
   std::complex<double> tmp_4773;
   std::complex<double> tmp_4775;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4775 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4773 += tmp_4775;
   std::complex<double> tmp_4774;
   std::complex<double> tmp_4776;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4776 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4774 += tmp_4776;
   result += (0.125*Sqr(g2)) * tmp_4773 * tmp_4774;
   std::complex<double> tmp_4777;
   std::complex<double> tmp_4779;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4779 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4777 += tmp_4779;
   std::complex<double> tmp_4778;
   std::complex<double> tmp_4780;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4780 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4778 += tmp_4780;
   result += (-0.075*Sqr(g1)) * tmp_4777 * tmp_4778;
   std::complex<double> tmp_4781;
   std::complex<double> tmp_4783;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4783 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4781 += tmp_4783;
   std::complex<double> tmp_4782;
   std::complex<double> tmp_4784;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4784 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4782 += tmp_4784;
   result += (-0.05*Sqr(g1p)) * tmp_4781 * tmp_4782;
   std::complex<double> tmp_4785;
   std::complex<double> tmp_4787;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4787 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4785 += tmp_4787;
   std::complex<double> tmp_4786;
   std::complex<double> tmp_4788;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4788 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4786 += tmp_4788;
   result += (-0.125*Sqr(g2)) * tmp_4785 * tmp_4786;
   std::complex<double> tmp_4789;
   std::complex<double> tmp_4791;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4791 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_4789 += tmp_4791;
   std::complex<double> tmp_4790;
   std::complex<double> tmp_4792;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4792 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_4790 += tmp_4792;
   result += (0.125*Sqr(g1p)) * tmp_4789 * tmp_4790;
   std::complex<double> tmp_4793;
   std::complex<double> tmp_4795;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4795 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4793 += tmp_4795;
   std::complex<double> tmp_4794;
   std::complex<double> tmp_4796;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4796 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_4794 += tmp_4796;
   result += (0.075*Sqr(g1)) * tmp_4793 * tmp_4794;
   std::complex<double> tmp_4797;
   std::complex<double> tmp_4799;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4799 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4797 += tmp_4799;
   std::complex<double> tmp_4798;
   std::complex<double> tmp_4800;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4800 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_4798 += tmp_4800;
   result += (-0.075*Sqr(g1p)) * tmp_4797 * tmp_4798;
   std::complex<double> tmp_4801;
   std::complex<double> tmp_4803;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4803 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4801 += tmp_4803;
   std::complex<double> tmp_4802;
   std::complex<double> tmp_4804;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4804 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_4802 += tmp_4804;
   result += (0.125*Sqr(g2)) * tmp_4801 * tmp_4802;
   std::complex<double> tmp_4805;
   std::complex<double> tmp_4807;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4807 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4805 += tmp_4807;
   std::complex<double> tmp_4806;
   std::complex<double> tmp_4808;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4808 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_4806 += tmp_4808;
   result += (0.1875*Sqr(g1p)) * tmp_4805 * tmp_4806;
   std::complex<double> tmp_4809;
   std::complex<double> tmp_4811;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4811 += Conj(UHI0(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_4809 += tmp_4811;
   std::complex<double> tmp_4810;
   std::complex<double> tmp_4812;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4812 += Conj(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*UHI0(gI1,
         j2);
   }
   tmp_4810 += tmp_4812;
   result += (-1) * tmp_4809 * tmp_4810;
   std::complex<double> tmp_4813;
   std::complex<double> tmp_4815;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4815 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4813 += tmp_4815;
   std::complex<double> tmp_4814;
   std::complex<double> tmp_4816;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4816 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_4814 += tmp_4816;
   result += (-0.075*Sqr(g1)) * tmp_4813 * tmp_4814;
   std::complex<double> tmp_4817;
   std::complex<double> tmp_4819;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4819 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4817 += tmp_4819;
   std::complex<double> tmp_4818;
   std::complex<double> tmp_4820;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4820 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_4818 += tmp_4820;
   result += (-0.05*Sqr(g1p)) * tmp_4817 * tmp_4818;
   std::complex<double> tmp_4821;
   std::complex<double> tmp_4823;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4823 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4821 += tmp_4823;
   std::complex<double> tmp_4822;
   std::complex<double> tmp_4824;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4824 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_4822 += tmp_4824;
   result += (-0.125*Sqr(g2)) * tmp_4821 * tmp_4822;
   std::complex<double> tmp_4825;
   std::complex<double> tmp_4827;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4827 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4825 += tmp_4827;
   std::complex<double> tmp_4826;
   std::complex<double> tmp_4828;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4828 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_4826 += tmp_4828;
   result += (0.125*Sqr(g1p)) * tmp_4825 * tmp_4826;
   std::complex<double> tmp_4829;
   std::complex<double> tmp_4831;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4831 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4829 += tmp_4831;
   std::complex<double> tmp_4830;
   std::complex<double> tmp_4832;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4832 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_4830 += tmp_4832;
   result += (-0.075*Sqr(g1)) * tmp_4829 * tmp_4830;
   std::complex<double> tmp_4833;
   std::complex<double> tmp_4835;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4835 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4833 += tmp_4835;
   std::complex<double> tmp_4834;
   std::complex<double> tmp_4836;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4836 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_4834 += tmp_4836;
   result += (-0.05*Sqr(g1p)) * tmp_4833 * tmp_4834;
   std::complex<double> tmp_4837;
   std::complex<double> tmp_4839;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4839 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4837 += tmp_4839;
   std::complex<double> tmp_4838;
   std::complex<double> tmp_4840;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4840 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_4838 += tmp_4840;
   result += (-0.125*Sqr(g2)) * tmp_4837 * tmp_4838;
   std::complex<double> tmp_4841;
   std::complex<double> tmp_4843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4843 += Conj(UHI0(gI2,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4841 += tmp_4843;
   std::complex<double> tmp_4842;
   std::complex<double> tmp_4844;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_4844 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_4842 += tmp_4844;
   result += (0.125*Sqr(g1p)) * tmp_4841 * tmp_4842;
   std::complex<double> tmp_4845;
   std::complex<double> tmp_4847;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4847 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_4845 += tmp_4847;
   std::complex<double> tmp_4846;
   std::complex<double> tmp_4848;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4848 += Conj(UHI0(gI2,4 + j2))*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4846 += tmp_4848;
   result += (0.125*Sqr(g1p)) * tmp_4845 * tmp_4846;
   std::complex<double> tmp_4849;
   std::complex<double> tmp_4851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4851 += KroneckerDelta(gO1,4 + j1)*UHI0(gI1,4 + j1);
   }
   tmp_4849 += tmp_4851;
   std::complex<double> tmp_4850;
   std::complex<double> tmp_4852;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4852 += Conj(UHI0(gI2,4 + j2))*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4850 += tmp_4852;
   result += (-0.3125*Sqr(g1p)) * tmp_4849 * tmp_4850;
   std::complex<double> tmp_4853;
   std::complex<double> tmp_4855;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4855 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_4853 += tmp_4855;
   std::complex<double> tmp_4854;
   std::complex<double> tmp_4856;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4856 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4854 += tmp_4856;
   result += (0.1875*Sqr(g1p)) * tmp_4853 * tmp_4854;
   std::complex<double> tmp_4857;
   std::complex<double> tmp_4859;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4859 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_4857 += tmp_4859;
   std::complex<double> tmp_4858;
   std::complex<double> tmp_4860;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4860 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4858 += tmp_4860;
   result += (0.125*Sqr(g1p)) * tmp_4857 * tmp_4858;
   std::complex<double> tmp_4861;
   std::complex<double> tmp_4863;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4863 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_4861 += tmp_4863;
   std::complex<double> tmp_4862;
   std::complex<double> tmp_4864;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4864 += KroneckerDelta(gO1,4 + j2)*KroneckerDelta(gO2,4 + j2);
   }
   tmp_4862 += tmp_4864;
   result += (-0.3125*Sqr(g1p)) * tmp_4861 * tmp_4862;
   std::complex<double> tmp_4865;
   std::complex<double> tmp_4867;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4867 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4865 += tmp_4867;
   std::complex<double> tmp_4866;
   std::complex<double> tmp_4868;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4868 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_4866 += tmp_4868;
   result += (0.125*Sqr(g1p)) * tmp_4865 * tmp_4866;
   std::complex<double> tmp_4869;
   std::complex<double> tmp_4871;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4871 += KroneckerDelta(gO1,4 + j1)*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4869 += tmp_4871;
   std::complex<double> tmp_4870;
   std::complex<double> tmp_4872;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4872 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_4870 += tmp_4872;
   result += (-0.3125*Sqr(g1p)) * tmp_4869 * tmp_4870;
   std::complex<double> tmp_4873;
   std::complex<double> tmp_4875;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_4875 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_4873 += tmp_4875;
   std::complex<double> tmp_4874;
   std::complex<double> tmp_4876;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4876 += KroneckerDelta(gO1,4 + j2)*UHI0(gI1,4 + j2);
   }
   tmp_4874 += tmp_4876;
   result += (0.125*Sqr(g1p)) * tmp_4873 * tmp_4874;
   std::complex<double> tmp_4877;
   std::complex<double> tmp_4879;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_4879 += Conj(UHI0(gI2,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_4877 += tmp_4879;
   std::complex<double> tmp_4878;
   std::complex<double> tmp_4880;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_4880 += KroneckerDelta(gO1,4 + j2)*UHI0(gI1,4 + j2);
   }
   tmp_4878 += tmp_4880;
   result += (-0.3125*Sqr(g1p)) * tmp_4877 * tmp_4878;
   std::complex<double> tmp_4881;
   std::complex<double> tmp_4883;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4884;
      std::complex<double> tmp_4885;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4885 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4884 += tmp_4885;
      tmp_4883 += (UHI0(gI1,2 + j2)) * tmp_4884;
   }
   tmp_4881 += tmp_4883;
   std::complex<double> tmp_4882;
   std::complex<double> tmp_4886;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4887;
      std::complex<double> tmp_4888;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4888 += Conj(fd(j3,j4))*KroneckerDelta(gO2,4 + j3);
      }
      tmp_4887 += tmp_4888;
      tmp_4886 += (Conj(UHI0(gI2,2 + j4))) * tmp_4887;
   }
   tmp_4882 += tmp_4886;
   result += (-1) * tmp_4881 * tmp_4882;
   std::complex<double> tmp_4889;
   std::complex<double> tmp_4891;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4892;
      std::complex<double> tmp_4893;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4893 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_4892 += tmp_4893;
      tmp_4891 += (UHI0(gI1,2 + j2)) * tmp_4892;
   }
   tmp_4889 += tmp_4891;
   std::complex<double> tmp_4890;
   std::complex<double> tmp_4894;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4895;
      std::complex<double> tmp_4896;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4896 += Conj(fd(j3,j4))*KroneckerDelta(gO2,4 + j3);
      }
      tmp_4895 += tmp_4896;
      tmp_4894 += (KroneckerDelta(gO1,2 + j4)) * tmp_4895;
   }
   tmp_4890 += tmp_4894;
   result += (-1) * tmp_4889 * tmp_4890;
   std::complex<double> tmp_4897;
   std::complex<double> tmp_4899;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4900;
      std::complex<double> tmp_4901;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4901 += fd(j1,j2)*KroneckerDelta(gO1,4 + j1);
      }
      tmp_4900 += tmp_4901;
      tmp_4899 += (KroneckerDelta(gO2,2 + j2)) * tmp_4900;
   }
   tmp_4897 += tmp_4899;
   std::complex<double> tmp_4898;
   std::complex<double> tmp_4902;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4903;
      std::complex<double> tmp_4904;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4904 += Conj(fd(j3,j4))*UHI0(gI1,4 + j3);
      }
      tmp_4903 += tmp_4904;
      tmp_4902 += (Conj(UHI0(gI2,2 + j4))) * tmp_4903;
   }
   tmp_4898 += tmp_4902;
   result += (-1) * tmp_4897 * tmp_4898;
   std::complex<double> tmp_4905;
   std::complex<double> tmp_4907;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4908;
      std::complex<double> tmp_4909;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4909 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_4908 += tmp_4909;
      tmp_4907 += (KroneckerDelta(gO2,2 + j2)) * tmp_4908;
   }
   tmp_4905 += tmp_4907;
   std::complex<double> tmp_4906;
   std::complex<double> tmp_4910;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4911;
      std::complex<double> tmp_4912;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4912 += Conj(fd(j3,j4))*UHI0(gI1,4 + j3);
      }
      tmp_4911 += tmp_4912;
      tmp_4910 += (KroneckerDelta(gO1,2 + j4)) * tmp_4911;
   }
   tmp_4906 += tmp_4910;
   result += (-1) * tmp_4905 * tmp_4906;
   std::complex<double> tmp_4913;
   std::complex<double> tmp_4915;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_4916;
      std::complex<double> tmp_4917;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4917 += KroneckerDelta(gO1,4 + j1)*fu(j1,j2);
      }
      tmp_4916 += tmp_4917;
      tmp_4915 += (Conj(UHI0(gI2,j2))) * tmp_4916;
   }
   tmp_4913 += tmp_4915;
   std::complex<double> tmp_4914;
   std::complex<double> tmp_4918;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_4919;
      std::complex<double> tmp_4920;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4920 += Conj(fu(j3,j4))*KroneckerDelta(gO2,4 + j3);
      }
      tmp_4919 += tmp_4920;
      tmp_4918 += (UHI0(gI1,j4)) * tmp_4919;
   }
   tmp_4914 += tmp_4918;
   result += (-1) * tmp_4913 * tmp_4914;
   if (gO1 < 2) {
      std::complex<double> tmp_4921;
      std::complex<double> tmp_4922;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4922 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_4921 += tmp_4922;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4921;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4923;
      std::complex<double> tmp_4924;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4924 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_4923 += tmp_4924;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4923;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4925;
      std::complex<double> tmp_4926;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4926 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_4925 += tmp_4926;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4925;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4927;
      std::complex<double> tmp_4928;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4928 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_4927 += tmp_4928;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4927;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4929;
      std::complex<double> tmp_4930;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4930 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_4929 += tmp_4930;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4929;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4931;
      std::complex<double> tmp_4932;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4932 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_4931 += tmp_4932;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4931;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4933;
      std::complex<double> tmp_4934;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4934 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_4933 += tmp_4934;
      result += (0.1875*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4933;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4935;
      std::complex<double> tmp_4936;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4936 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_4935 += tmp_4936;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4935;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4937;
      std::complex<double> tmp_4938;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4938 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_4937 += tmp_4938;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4937;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4939;
      std::complex<double> tmp_4940;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4940 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_4939 += tmp_4940;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4939;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4941;
      std::complex<double> tmp_4942;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4942 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_4941 += tmp_4942;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_4941;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4943;
      std::complex<double> tmp_4944;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4944 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_4943 += tmp_4944;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4943;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4945;
      std::complex<double> tmp_4946;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4946 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_4945 += tmp_4946;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_4945;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4947;
      std::complex<double> tmp_4948;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4948 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_4947 += tmp_4948;
      result += (0.1875*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_4947;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4949;
      std::complex<double> tmp_4951;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4951 += Conj(UHI0(gI2,4 + j1))*fu(j1,gO1);
      }
      tmp_4949 += tmp_4951;
      std::complex<double> tmp_4950;
      std::complex<double> tmp_4952;
      for (unsigned j4 = 0; j4 < 2; ++j4) {
         std::complex<double> tmp_4953;
         std::complex<double> tmp_4954;
         for (unsigned j3 = 0; j3 < 3; ++j3) {
            tmp_4954 += Conj(fu(j3,j4))*KroneckerDelta(gO2,4 + j3);
         }
         tmp_4953 += tmp_4954;
         tmp_4952 += (UHI0(gI1,j4)) * tmp_4953;
      }
      tmp_4950 += tmp_4952;
      result += (-1) * tmp_4949 * tmp_4950;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4955;
      std::complex<double> tmp_4956;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4956 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_4955 += tmp_4956;
      result += (0.075*Conj(UHI0(gI2,gO2))*Sqr(g1)) * tmp_4955;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4957;
      std::complex<double> tmp_4958;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4958 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_4957 += tmp_4958;
      result += (-0.075*Conj(UHI0(gI2,gO2))*Sqr(g1p)) * tmp_4957;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4959;
      std::complex<double> tmp_4960;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4960 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_4959 += tmp_4960;
      result += (0.125*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_4959;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4961;
      std::complex<double> tmp_4962;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4962 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_4961 += tmp_4962;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_4961;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4963;
      std::complex<double> tmp_4964;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4964 += KroneckerDelta(gO1,4 + j1)*UHI0(gI1,4 + j1);
      }
      tmp_4963 += tmp_4964;
      result += (0.1875*Conj(UHI0(gI2,gO2))*Sqr(g1p)) * tmp_4963;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4965;
      std::complex<double> tmp_4966;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4966 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_4965 += tmp_4966;
      result += (0.075*Conj(UHI0(gI2,gO2))*Sqr(g1)) * tmp_4965;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4967;
      std::complex<double> tmp_4968;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4968 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_4967 += tmp_4968;
      result += (-0.075*Conj(UHI0(gI2,gO2))*Sqr(g1p)) * tmp_4967;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4969;
      std::complex<double> tmp_4970;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4970 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_4969 += tmp_4970;
      result += (0.125*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_4969;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4971;
      std::complex<double> tmp_4972;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4972 += KroneckerDelta(gO1,4 + j2)*UHI0(gI1,4 + j2);
      }
      tmp_4971 += tmp_4972;
      result += (0.1875*Conj(UHI0(gI2,gO2))*Sqr(g1p)) * tmp_4971;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_4973;
      std::complex<double> tmp_4975;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_4976;
         std::complex<double> tmp_4977;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_4977 += KroneckerDelta(gO1,4 + j1)*fu(j1,j2);
         }
         tmp_4976 += tmp_4977;
         tmp_4975 += (Conj(UHI0(gI2,j2))) * tmp_4976;
      }
      tmp_4973 += tmp_4975;
      std::complex<double> tmp_4974;
      std::complex<double> tmp_4978;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4978 += Conj(fu(j3,gO2))*UHI0(gI1,4 + j3);
      }
      tmp_4974 += tmp_4978;
      result += (-1) * tmp_4973 * tmp_4974;
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_4979;
      std::complex<double> tmp_4981;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4981 += Conj(UHI0(gI2,4 + j1))*fu(j1,gO1);
      }
      tmp_4979 += tmp_4981;
      std::complex<double> tmp_4980;
      std::complex<double> tmp_4982;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_4982 += Conj(fu(j3,gO2))*UHI0(gI1,4 + j3);
      }
      tmp_4980 += tmp_4982;
      result += (-1) * tmp_4979 * tmp_4980;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4983;
      std::complex<double> tmp_4984;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4984 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_4983 += tmp_4984;
      result += (0.075*Sqr(g1)*UHI0(gI1,gO1)) * tmp_4983;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4985;
      std::complex<double> tmp_4986;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4986 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_4985 += tmp_4986;
      result += (-0.075*Sqr(g1p)*UHI0(gI1,gO1)) * tmp_4985;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4987;
      std::complex<double> tmp_4988;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_4988 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_4987 += tmp_4988;
      result += (0.125*Sqr(g2)*UHI0(gI1,gO1)) * tmp_4987;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4989;
      std::complex<double> tmp_4990;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_4990 += Conj(UHI0(gI2,4 + j1))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_4989 += tmp_4990;
      result += (0.1875*Sqr(g1p)*UHI0(gI1,gO1)) * tmp_4989;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4991;
      std::complex<double> tmp_4992;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4992 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_4991 += tmp_4992;
      result += (0.075*Sqr(g1)*UHI0(gI1,gO1)) * tmp_4991;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4993;
      std::complex<double> tmp_4994;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4994 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_4993 += tmp_4994;
      result += (-0.075*Sqr(g1p)*UHI0(gI1,gO1)) * tmp_4993;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4995;
      std::complex<double> tmp_4996;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_4996 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_4995 += tmp_4996;
      result += (0.125*Sqr(g2)*UHI0(gI1,gO1)) * tmp_4995;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4997;
      std::complex<double> tmp_4998;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_4998 += Conj(UHI0(gI2,4 + j2))*KroneckerDelta(gO2,4 + j2);
      }
      tmp_4997 += tmp_4998;
      result += (0.1875*Sqr(g1p)*UHI0(gI1,gO1)) * tmp_4997;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.15*Conj(UHI0(gI2,gO2))*Sqr(g1)*UHI0(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.225*Conj(UHI0(gI2,gO2))*Sqr(g1p)*UHI0(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)*UHI0(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_4999;
      std::complex<double> tmp_5000;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5000 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_4999 += tmp_5000;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_4999;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -(Conj(UHI0(gI2,2 + gO2))*Conj(Lambda12(gO2,gO2))*UHI0(gI1,2
         + gO1)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjSHI0Ah(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5001;
   std::complex<double> tmp_5002;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5003;
      std::complex<double> tmp_5004;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5004 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5003 += tmp_5004;
      tmp_5002 += (UHI0(gI1,j2)) * tmp_5003;
   }
   tmp_5001 += tmp_5002;
   result += (std::complex<double>(0,0.5)*vs*Lambdax*ZA(gI2,0)) * tmp_5001;
   std::complex<double> tmp_5005;
   std::complex<double> tmp_5006;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5007;
      std::complex<double> tmp_5008;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5009;
         std::complex<double> tmp_5010;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5010 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_5009 += tmp_5010;
         tmp_5008 += (KroneckerDelta(gO2,2 + j2)) * tmp_5009;
      }
      tmp_5007 += tmp_5008;
      tmp_5006 += (UHI0(gI1,j3)) * tmp_5007;
   }
   tmp_5005 += tmp_5006;
   result += (std::complex<double>(0,-0.5)*vu*ZA(gI2,0)) * tmp_5005;
   if (gO2 < 2) {
      std::complex<double> tmp_5011;
      std::complex<double> tmp_5012;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5012 += Conj(fu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5011 += tmp_5012;
      result += (std::complex<double>(0,0.5)*vs*Lambdax*ZA(gI2,0)) *
         tmp_5011;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5013;
      std::complex<double> tmp_5014;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5015;
         std::complex<double> tmp_5016;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5016 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_5015 += tmp_5016;
         tmp_5014 += (UHI0(gI1,2 + j2)) * tmp_5015;
      }
      tmp_5013 += tmp_5014;
      result += (std::complex<double>(0,-0.5)*vu*ZA(gI2,0)) * tmp_5013;
   }
   std::complex<double> tmp_5017;
   std::complex<double> tmp_5018;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5019;
      std::complex<double> tmp_5020;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5020 += Conj(Tfu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5019 += tmp_5020;
      tmp_5018 += (UHI0(gI1,j2)) * tmp_5019;
   }
   tmp_5017 += tmp_5018;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) * tmp_5017
      ;
   std::complex<double> tmp_5021;
   std::complex<double> tmp_5022;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5023;
      std::complex<double> tmp_5024;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5024 += Conj(fu(j2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_5023 += tmp_5024;
      tmp_5022 += (KroneckerDelta(gO2,4 + j2)) * tmp_5023;
   }
   tmp_5021 += tmp_5022;
   result += (std::complex<double>(0,-0.5)*vs*ZA(gI2,1)) * tmp_5021;
   std::complex<double> tmp_5025;
   std::complex<double> tmp_5026;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5027;
      std::complex<double> tmp_5028;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5028 += Conj(fu(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5027 += tmp_5028;
      tmp_5026 += (UHI0(gI1,4 + j2)) * tmp_5027;
   }
   tmp_5025 += tmp_5026;
   result += (std::complex<double>(0,-0.5)*vs*ZA(gI2,1)) * tmp_5025;
   std::complex<double> tmp_5029;
   std::complex<double> tmp_5030;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5031;
      std::complex<double> tmp_5032;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5033;
         std::complex<double> tmp_5034;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5034 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_5033 += tmp_5034;
         tmp_5032 += (KroneckerDelta(gO2,2 + j2)) * tmp_5033;
      }
      tmp_5031 += tmp_5032;
      tmp_5030 += (UHI0(gI1,j3)) * tmp_5031;
   }
   tmp_5029 += tmp_5030;
   result += (std::complex<double>(0,0.5)*vd*ZA(gI2,1)) * tmp_5029;
   if (gO2 < 2) {
      std::complex<double> tmp_5035;
      std::complex<double> tmp_5036;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5036 += Conj(Tfu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5035 += tmp_5036;
      result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) *
         tmp_5035;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5037;
      std::complex<double> tmp_5038;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5039;
         std::complex<double> tmp_5040;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5040 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_5039 += tmp_5040;
         tmp_5038 += (UHI0(gI1,2 + j2)) * tmp_5039;
      }
      tmp_5037 += tmp_5038;
      result += (std::complex<double>(0,0.5)*vd*ZA(gI2,1)) * tmp_5037;
   }
   std::complex<double> tmp_5041;
   std::complex<double> tmp_5042;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5043;
      std::complex<double> tmp_5044;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5044 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5043 += tmp_5044;
      tmp_5042 += (UHI0(gI1,j2)) * tmp_5043;
   }
   tmp_5041 += tmp_5042;
   result += (std::complex<double>(0,0.5)*vd*Lambdax*ZA(gI2,2)) * tmp_5041;
   std::complex<double> tmp_5045;
   std::complex<double> tmp_5046;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5047;
      std::complex<double> tmp_5048;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5048 += Conj(fu(j2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_5047 += tmp_5048;
      tmp_5046 += (KroneckerDelta(gO2,4 + j2)) * tmp_5047;
   }
   tmp_5045 += tmp_5046;
   result += (std::complex<double>(0,0.5)*vu*ZA(gI2,2)) * tmp_5045;
   std::complex<double> tmp_5049;
   std::complex<double> tmp_5050;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5051;
      std::complex<double> tmp_5052;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5052 += Conj(fu(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5051 += tmp_5052;
      tmp_5050 += (UHI0(gI1,4 + j2)) * tmp_5051;
   }
   tmp_5049 += tmp_5050;
   result += (std::complex<double>(0,0.5)*vu*ZA(gI2,2)) * tmp_5049;
   if (gO2 < 2) {
      std::complex<double> tmp_5053;
      std::complex<double> tmp_5054;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5054 += Conj(fu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5053 += tmp_5054;
      result += (std::complex<double>(0,0.5)*vd*Lambdax*ZA(gI2,2)) *
         tmp_5053;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjSHI0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5055;
   std::complex<double> tmp_5056;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5057;
      std::complex<double> tmp_5058;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5058 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5057 += tmp_5058;
      tmp_5056 += (UHI0(gI1,j2)) * tmp_5057;
   }
   tmp_5055 += tmp_5056;
   result += (0.5*vs*Conj(ZH(gI2,0))*Lambdax) * tmp_5055;
   std::complex<double> tmp_5059;
   std::complex<double> tmp_5060;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5061;
      std::complex<double> tmp_5062;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5062 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5061 += tmp_5062;
      tmp_5060 += (UHI0(gI1,j2)) * tmp_5061;
   }
   tmp_5059 += tmp_5060;
   result += (0.5*vd*Conj(ZH(gI2,2))*Lambdax) * tmp_5059;
   std::complex<double> tmp_5063;
   std::complex<double> tmp_5064;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5065;
      std::complex<double> tmp_5066;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5066 += Conj(Tfu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5065 += tmp_5066;
      tmp_5064 += (UHI0(gI1,j2)) * tmp_5065;
   }
   tmp_5063 += tmp_5064;
   result += (-0.7071067811865475*Conj(ZH(gI2,1))) * tmp_5063;
   std::complex<double> tmp_5067;
   std::complex<double> tmp_5068;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5069;
      std::complex<double> tmp_5070;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5070 += Conj(fu(j2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_5069 += tmp_5070;
      tmp_5068 += (KroneckerDelta(gO2,4 + j2)) * tmp_5069;
   }
   tmp_5067 += tmp_5068;
   result += (0.5*vs*Conj(ZH(gI2,1))) * tmp_5067;
   std::complex<double> tmp_5071;
   std::complex<double> tmp_5072;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5073;
      std::complex<double> tmp_5074;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5074 += Conj(fu(j2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_5073 += tmp_5074;
      tmp_5072 += (KroneckerDelta(gO2,4 + j2)) * tmp_5073;
   }
   tmp_5071 += tmp_5072;
   result += (0.5*vu*Conj(ZH(gI2,2))) * tmp_5071;
   std::complex<double> tmp_5075;
   std::complex<double> tmp_5076;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5077;
      std::complex<double> tmp_5078;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5078 += Conj(fu(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5077 += tmp_5078;
      tmp_5076 += (UHI0(gI1,4 + j2)) * tmp_5077;
   }
   tmp_5075 += tmp_5076;
   result += (0.5*vs*Conj(ZH(gI2,1))) * tmp_5075;
   std::complex<double> tmp_5079;
   std::complex<double> tmp_5080;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5081;
      std::complex<double> tmp_5082;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5082 += Conj(fu(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5081 += tmp_5082;
      tmp_5080 += (UHI0(gI1,4 + j2)) * tmp_5081;
   }
   tmp_5079 += tmp_5080;
   result += (0.5*vu*Conj(ZH(gI2,2))) * tmp_5079;
   std::complex<double> tmp_5083;
   std::complex<double> tmp_5084;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5085;
      std::complex<double> tmp_5086;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5087;
         std::complex<double> tmp_5088;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5088 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_5087 += tmp_5088;
         tmp_5086 += (KroneckerDelta(gO2,2 + j2)) * tmp_5087;
      }
      tmp_5085 += tmp_5086;
      tmp_5084 += (UHI0(gI1,j3)) * tmp_5085;
   }
   tmp_5083 += tmp_5084;
   result += (-0.5*vu*Conj(ZH(gI2,0))) * tmp_5083;
   std::complex<double> tmp_5089;
   std::complex<double> tmp_5090;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5091;
      std::complex<double> tmp_5092;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5093;
         std::complex<double> tmp_5094;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5094 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_5093 += tmp_5094;
         tmp_5092 += (KroneckerDelta(gO2,2 + j2)) * tmp_5093;
      }
      tmp_5091 += tmp_5092;
      tmp_5090 += (UHI0(gI1,j3)) * tmp_5091;
   }
   tmp_5089 += tmp_5090;
   result += (-0.5*vd*Conj(ZH(gI2,1))) * tmp_5089;
   if (gO2 < 2) {
      std::complex<double> tmp_5095;
      std::complex<double> tmp_5096;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5096 += Conj(fu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5095 += tmp_5096;
      result += (0.5*vs*Conj(ZH(gI2,0))*Lambdax) * tmp_5095;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5097;
      std::complex<double> tmp_5098;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5098 += Conj(fu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5097 += tmp_5098;
      result += (0.5*vd*Conj(ZH(gI2,2))*Lambdax) * tmp_5097;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5099;
      std::complex<double> tmp_5100;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5100 += Conj(Tfu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5099 += tmp_5100;
      result += (-0.7071067811865475*Conj(ZH(gI2,1))) * tmp_5099;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5101;
      std::complex<double> tmp_5102;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5103;
         std::complex<double> tmp_5104;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5104 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_5103 += tmp_5104;
         tmp_5102 += (UHI0(gI1,2 + j2)) * tmp_5103;
      }
      tmp_5101 += tmp_5102;
      result += (-0.5*vu*Conj(ZH(gI2,0))) * tmp_5101;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5105;
      std::complex<double> tmp_5106;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5107;
         std::complex<double> tmp_5108;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5108 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_5107 += tmp_5108;
         tmp_5106 += (UHI0(gI1,2 + j2)) * tmp_5107;
      }
      tmp_5105 += tmp_5106;
      result += (-0.5*vd*Conj(ZH(gI2,1))) * tmp_5105;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0SHI0Ah(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5109;
   std::complex<double> tmp_5110;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5110 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5109 += tmp_5110;
   result += (std::complex<double>(0,0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_5109;
   std::complex<double> tmp_5111;
   std::complex<double> tmp_5112;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5113;
      std::complex<double> tmp_5114;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5114 += Conj(Tfd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5113 += tmp_5114;
      tmp_5112 += (Conj(UHI0(gI1,2 + j2))) * tmp_5113;
   }
   tmp_5111 += tmp_5112;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_5111
      ;
   std::complex<double> tmp_5115;
   std::complex<double> tmp_5116;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5117;
      std::complex<double> tmp_5118;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5118 += Conj(UHI0(gI1,4 + j1))*Tfd(j1,j2);
      }
      tmp_5117 += tmp_5118;
      tmp_5116 += (KroneckerDelta(gO2,2 + j2)) * tmp_5117;
   }
   tmp_5115 += tmp_5116;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_5115;
   std::complex<double> tmp_5119;
   std::complex<double> tmp_5120;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5121;
      std::complex<double> tmp_5122;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5122 += Conj(fd(j2,j1))*Conj(UHI0(gI1,j1))*Lambda12(j1,j1);
      }
      tmp_5121 += tmp_5122;
      tmp_5120 += (KroneckerDelta(gO2,4 + j2)) * tmp_5121;
   }
   tmp_5119 += tmp_5120;
   result += (std::complex<double>(0,-0.5)*vs*ZA(gI2,0)) * tmp_5119;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vu*Conj(UHI0(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5123;
      std::complex<double> tmp_5124;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5124 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_5123 += tmp_5124;
      result += (std::complex<double>(0,0.5)*vs*Conj(Lambda12(gO2,gO2))*ZA(
         gI2,0)) * tmp_5123;
   }
   std::complex<double> tmp_5125;
   std::complex<double> tmp_5126;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5126 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5125 += tmp_5126;
   result += (std::complex<double>(0,0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_5125;
   std::complex<double> tmp_5127;
   std::complex<double> tmp_5128;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5129;
      std::complex<double> tmp_5130;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5130 += Conj(UHI0(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5129 += tmp_5130;
      tmp_5128 += (KroneckerDelta(gO2,2 + j2)) * tmp_5129;
   }
   tmp_5127 += tmp_5128;
   result += (std::complex<double>(0,-0.5)*vs*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_5127;
   std::complex<double> tmp_5131;
   std::complex<double> tmp_5132;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5133;
      std::complex<double> tmp_5134;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5134 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5133 += tmp_5134;
      tmp_5132 += (Conj(UHI0(gI1,2 + j2))) * tmp_5133;
   }
   tmp_5131 += tmp_5132;
   result += (std::complex<double>(0,0.5)*vs*Lambdax*ZA(gI2,1)) * tmp_5131;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vd*Conj(UHI0(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_5135;
   std::complex<double> tmp_5136;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5136 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_5135 += tmp_5136;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,2)) * tmp_5135
      ;
   std::complex<double> tmp_5137;
   std::complex<double> tmp_5138;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5139;
      std::complex<double> tmp_5140;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5140 += Conj(UHI0(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5139 += tmp_5140;
      tmp_5138 += (KroneckerDelta(gO2,2 + j2)) * tmp_5139;
   }
   tmp_5137 += tmp_5138;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,2)) *
      tmp_5137;
   std::complex<double> tmp_5141;
   std::complex<double> tmp_5142;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5143;
      std::complex<double> tmp_5144;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5144 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5143 += tmp_5144;
      tmp_5142 += (Conj(UHI0(gI1,2 + j2))) * tmp_5143;
   }
   tmp_5141 += tmp_5142;
   result += (std::complex<double>(0,0.5)*vu*Lambdax*ZA(gI2,2)) * tmp_5141;
   std::complex<double> tmp_5145;
   std::complex<double> tmp_5146;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5147;
      std::complex<double> tmp_5148;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5148 += Conj(fd(j2,j1))*Conj(UHI0(gI1,j1))*Lambda12(j1,j1);
      }
      tmp_5147 += tmp_5148;
      tmp_5146 += (KroneckerDelta(gO2,4 + j2)) * tmp_5147;
   }
   tmp_5145 += tmp_5146;
   result += (std::complex<double>(0,0.5)*vd*ZA(gI2,2)) * tmp_5145;
   if (gO2 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(UHI0(gI1,2
         + gO2))*Conj(TLambda12(gO2,gO2))*ZA(gI2,2);
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5149;
      std::complex<double> tmp_5150;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5150 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_5149 += tmp_5150;
      result += (std::complex<double>(0,-0.5)*vd*Conj(Lambda12(gO2,gO2))*ZA(
         gI2,2)) * tmp_5149;
   }
   std::complex<double> tmp_5151;
   std::complex<double> tmp_5152;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5152 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5151 += tmp_5152;
   result += (std::complex<double>(0,0.5)*vphi*Conj(Sigmax)*ZA(gI2,3)) *
      tmp_5151;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vphi*Conj(UHI0(gI1,2 + gO2))*
         Conj(Lambda12(gO2,gO2))*Sigmax*ZA(gI2,3);
   }
   std::complex<double> tmp_5153;
   std::complex<double> tmp_5154;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5154 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5153 += tmp_5154;
   result += (std::complex<double>(0,0.5)*vsb*Conj(Sigmax)*ZA(gI2,4)) *
      tmp_5153;
   if (gO2 < 2) {
      result += std::complex<double>(0,-0.5)*vsb*Conj(UHI0(gI1,2 + gO2))*
         Conj(Lambda12(gO2,gO2))*Sigmax*ZA(gI2,4);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0SHI0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5155;
   std::complex<double> tmp_5156;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5156 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5155 += tmp_5156;
   result += (0.15*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_5155;
   std::complex<double> tmp_5157;
   std::complex<double> tmp_5158;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5158 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5157 += tmp_5158;
   result += (-0.15*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_5157;
   std::complex<double> tmp_5159;
   std::complex<double> tmp_5160;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5160 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5159 += tmp_5160;
   result += (0.25*vd*Conj(ZH(gI2,0))*Sqr(g2)) * tmp_5159;
   std::complex<double> tmp_5161;
   std::complex<double> tmp_5162;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5162 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5161 += tmp_5162;
   result += (-0.15*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_5161;
   std::complex<double> tmp_5163;
   std::complex<double> tmp_5164;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5164 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5163 += tmp_5164;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_5163;
   std::complex<double> tmp_5165;
   std::complex<double> tmp_5166;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5166 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5165 += tmp_5166;
   result += (-0.25*vu*Conj(ZH(gI2,1))*Sqr(g2)) * tmp_5165;
   std::complex<double> tmp_5167;
   std::complex<double> tmp_5168;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5168 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5167 += tmp_5168;
   result += (0.05*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_5167;
   std::complex<double> tmp_5169;
   std::complex<double> tmp_5170;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5170 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5169 += tmp_5170;
   result += (-0.05*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_5169;
   std::complex<double> tmp_5171;
   std::complex<double> tmp_5172;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5172 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5171 += tmp_5172;
   result += (-0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_5171;
   std::complex<double> tmp_5173;
   std::complex<double> tmp_5174;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5174 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5173 += tmp_5174;
   result += (-0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_5173;
   std::complex<double> tmp_5175;
   std::complex<double> tmp_5176;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5176 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5175 += tmp_5176;
   result += (-0.5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))) * tmp_5175;
   std::complex<double> tmp_5177;
   std::complex<double> tmp_5178;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5178 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5177 += tmp_5178;
   result += (-0.5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))) * tmp_5177;
   std::complex<double> tmp_5179;
   std::complex<double> tmp_5180;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5180 += Conj(UHI0(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(j1
         ,j1);
   }
   tmp_5179 += tmp_5180;
   result += (0.7071067811865475*Conj(ZH(gI2,2))) * tmp_5179;
   std::complex<double> tmp_5181;
   std::complex<double> tmp_5182;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5182 += Conj(UHI0(gI1,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5181 += tmp_5182;
   result += (0.375*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_5181;
   std::complex<double> tmp_5183;
   std::complex<double> tmp_5184;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5184 += Conj(UHI0(gI1,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5183 += tmp_5184;
   result += (0.25*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_5183;
   std::complex<double> tmp_5185;
   std::complex<double> tmp_5186;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5186 += Conj(UHI0(gI1,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5185 += tmp_5186;
   result += (-0.125*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_5185;
   std::complex<double> tmp_5187;
   std::complex<double> tmp_5188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5188 += Conj(UHI0(gI1,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5187 += tmp_5188;
   result += (0.125*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_5187;
   std::complex<double> tmp_5189;
   std::complex<double> tmp_5190;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5191;
      std::complex<double> tmp_5192;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5192 += Conj(UHI0(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5191 += tmp_5192;
      tmp_5190 += (KroneckerDelta(gO2,2 + j2)) * tmp_5191;
   }
   tmp_5189 += tmp_5190;
   result += (0.5*vs*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_5189;
   std::complex<double> tmp_5193;
   std::complex<double> tmp_5194;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5195;
      std::complex<double> tmp_5196;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5196 += Conj(UHI0(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5195 += tmp_5196;
      tmp_5194 += (KroneckerDelta(gO2,2 + j2)) * tmp_5195;
   }
   tmp_5193 += tmp_5194;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,2))) * tmp_5193;
   std::complex<double> tmp_5197;
   std::complex<double> tmp_5198;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5199;
      std::complex<double> tmp_5200;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5200 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5199 += tmp_5200;
      tmp_5198 += (Conj(UHI0(gI1,2 + j2))) * tmp_5199;
   }
   tmp_5197 += tmp_5198;
   result += (0.5*vs*Conj(ZH(gI2,1))*Lambdax) * tmp_5197;
   std::complex<double> tmp_5201;
   std::complex<double> tmp_5202;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5203;
      std::complex<double> tmp_5204;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5204 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5203 += tmp_5204;
      tmp_5202 += (Conj(UHI0(gI1,2 + j2))) * tmp_5203;
   }
   tmp_5201 += tmp_5202;
   result += (0.5*vu*Conj(ZH(gI2,2))*Lambdax) * tmp_5201;
   std::complex<double> tmp_5205;
   std::complex<double> tmp_5206;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5207;
      std::complex<double> tmp_5208;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5208 += Conj(Tfd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5207 += tmp_5208;
      tmp_5206 += (Conj(UHI0(gI1,2 + j2))) * tmp_5207;
   }
   tmp_5205 += tmp_5206;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_5205;
   std::complex<double> tmp_5209;
   std::complex<double> tmp_5210;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5211;
      std::complex<double> tmp_5212;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5212 += Conj(UHI0(gI1,4 + j1))*Tfd(j1,j2);
      }
      tmp_5211 += tmp_5212;
      tmp_5210 += (KroneckerDelta(gO2,2 + j2)) * tmp_5211;
   }
   tmp_5209 += tmp_5210;
   result += (-0.7071067811865475*Conj(ZH(gI2,0))) * tmp_5209;
   std::complex<double> tmp_5213;
   std::complex<double> tmp_5214;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5214 += AbsSqr(Lambda12(j2,j2))*Conj(UHI0(gI1,2 + j2))*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_5213 += tmp_5214;
   result += (-(vs*Conj(ZH(gI2,2)))) * tmp_5213;
   std::complex<double> tmp_5215;
   std::complex<double> tmp_5216;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5217;
      std::complex<double> tmp_5218;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5218 += Conj(fd(j2,j1))*Conj(UHI0(gI1,j1))*Lambda12(j1,j1);
      }
      tmp_5217 += tmp_5218;
      tmp_5216 += (KroneckerDelta(gO2,4 + j2)) * tmp_5217;
   }
   tmp_5215 += tmp_5216;
   result += (0.5*vs*Conj(ZH(gI2,0))) * tmp_5215;
   std::complex<double> tmp_5219;
   std::complex<double> tmp_5220;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5221;
      std::complex<double> tmp_5222;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5222 += Conj(fd(j2,j1))*Conj(UHI0(gI1,j1))*Lambda12(j1,j1);
      }
      tmp_5221 += tmp_5222;
      tmp_5220 += (KroneckerDelta(gO2,4 + j2)) * tmp_5221;
   }
   tmp_5219 += tmp_5220;
   result += (0.5*vd*Conj(ZH(gI2,2))) * tmp_5219;
   std::complex<double> tmp_5223;
   std::complex<double> tmp_5224;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5225;
      std::complex<double> tmp_5226;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5227;
         std::complex<double> tmp_5228;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5228 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_5227 += tmp_5228;
         tmp_5226 += (KroneckerDelta(gO2,2 + j2)) * tmp_5227;
      }
      tmp_5225 += tmp_5226;
      tmp_5224 += (Conj(UHI0(gI1,2 + j3))) * tmp_5225;
   }
   tmp_5223 += tmp_5224;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_5223;
   std::complex<double> tmp_5229;
   std::complex<double> tmp_5230;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_5231;
      std::complex<double> tmp_5232;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_5233;
         std::complex<double> tmp_5234;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_5234 += Conj(fd(j3,j1))*fd(j2,j1);
         }
         tmp_5233 += tmp_5234;
         tmp_5232 += (Conj(UHI0(gI1,4 + j2))) * tmp_5233;
      }
      tmp_5231 += tmp_5232;
      tmp_5230 += (KroneckerDelta(gO2,4 + j3)) * tmp_5231;
   }
   tmp_5229 += tmp_5230;
   result += (-(vd*Conj(ZH(gI2,0)))) * tmp_5229;
   std::complex<double> tmp_5235;
   std::complex<double> tmp_5236;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_5237;
      std::complex<double> tmp_5238;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_5239;
         std::complex<double> tmp_5240;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_5240 += Conj(fu(j3,j1))*fu(j2,j1);
         }
         tmp_5239 += tmp_5240;
         tmp_5238 += (Conj(UHI0(gI1,4 + j2))) * tmp_5239;
      }
      tmp_5237 += tmp_5238;
      tmp_5236 += (KroneckerDelta(gO2,4 + j3)) * tmp_5237;
   }
   tmp_5235 += tmp_5236;
   result += (-(vu*Conj(ZH(gI2,1)))) * tmp_5235;
   if (gO2 < 2) {
      result += -0.15*vd*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 2) {
      result += -0.225*vd*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.25*vd*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 2) {
      result += 0.15*vu*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 2) {
      result += -0.15*vu*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += 0.25*vu*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 2) {
      result += 0.075*QS*vs*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.075*QS*vsb*Conj(UHI0(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.5*vu*Conj(UHI0(gI1,2 + gO2))*Conj(ZH(gI2,0))*Conj(
         Lambda12(gO2,gO2))*Lambdax;
   }
   if (gO2 < 2) {
      result += -0.5*vd*Conj(UHI0(gI1,2 + gO2))*Conj(ZH(gI2,1))*Conj(
         Lambda12(gO2,gO2))*Lambdax;
   }
   if (gO2 < 2) {
      result += -0.5*vphi*Conj(UHI0(gI1,2 + gO2))*Conj(ZH(gI2,3))*Conj(
         Lambda12(gO2,gO2))*Sigmax;
   }
   if (gO2 < 2) {
      result += -0.5*vsb*Conj(UHI0(gI1,2 + gO2))*Conj(ZH(gI2,4))*Conj(
         Lambda12(gO2,gO2))*Sigmax;
   }
   if (gO2 < 2) {
      result += 0.7071067811865475*Conj(UHI0(gI1,2 + gO2))*Conj(ZH(gI2,2))*
         Conj(TLambda12(gO2,gO2));
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5241;
      std::complex<double> tmp_5242;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5242 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_5241 += tmp_5242;
      result += (0.5*vs*Conj(ZH(gI2,0))*Conj(Lambda12(gO2,gO2))) * tmp_5241;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5243;
      std::complex<double> tmp_5244;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5244 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_5243 += tmp_5244;
      result += (0.5*vd*Conj(ZH(gI2,2))*Conj(Lambda12(gO2,gO2))) * tmp_5243;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5245;
      std::complex<double> tmp_5246;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5247;
         std::complex<double> tmp_5248;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5248 += Conj(fu(j1,gO2))*fu(j1,j2);
         }
         tmp_5247 += tmp_5248;
         tmp_5246 += (Conj(UHI0(gI1,j2))) * tmp_5247;
      }
      tmp_5245 += tmp_5246;
      result += (-(vu*Conj(ZH(gI2,1)))) * tmp_5245;
   }
   if (gO2 < 2) {
      result += -(vs*AbsSqr(Lambda12(gO2,gO2))*Conj(UHI0(gI1,gO2))*Conj(ZH(
         gI2,2)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0ChiIChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5249;
   std::complex<double> tmp_5250;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5250 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_5249 += tmp_5250;
   result += (-0.5477225575051661*g1*ZN(gI2,0)) * tmp_5249;
   std::complex<double> tmp_5251;
   std::complex<double> tmp_5252;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5252 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_5251 += tmp_5252;
   result += (0.7071067811865475*g2*ZN(gI2,1)) * tmp_5251;
   std::complex<double> tmp_5253;
   std::complex<double> tmp_5254;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5255;
      std::complex<double> tmp_5256;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5256 += Conj(fd(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5255 += tmp_5256;
      tmp_5254 += (ZNI(gI1,2 + j2)) * tmp_5255;
   }
   tmp_5253 += tmp_5254;
   result += (-ZN(gI2,2)) * tmp_5253;
   std::complex<double> tmp_5257;
   std::complex<double> tmp_5258;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5259;
      std::complex<double> tmp_5260;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5260 += Conj(fu(j1,j2))*KroneckerDelta(gO2,4 + j1);
      }
      tmp_5259 += tmp_5260;
      tmp_5258 += (ZNI(gI1,j2)) * tmp_5259;
   }
   tmp_5257 += tmp_5258;
   result += (-ZN(gI2,3)) * tmp_5257;
   if (gO2 < 2) {
      std::complex<double> tmp_5261;
      std::complex<double> tmp_5262;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5262 += Conj(fu(j1,gO2))*ZNI(gI1,4 + j1);
      }
      tmp_5261 += tmp_5262;
      result += (-ZN(gI2,3)) * tmp_5261;
   }
   std::complex<double> tmp_5263;
   std::complex<double> tmp_5264;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5264 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_5263 += tmp_5264;
   result += (0.4472135954999579*g1p*ZN(gI2,7)) * tmp_5263;
   if (gO2 < 2) {
      result += Conj(Lambda12(gO2,gO2))*ZN(gI2,4)*ZNI(gI1,2 + gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0ChiIChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5265;
   std::complex<double> tmp_5266;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5266 += Conj(ZNI(gI1,j1))*KroneckerDelta(gO1,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5265 += tmp_5266;
   result += (Conj(ZN(gI2,4))) * tmp_5265;
   std::complex<double> tmp_5267;
   std::complex<double> tmp_5268;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5268 += Conj(ZNI(gI1,4 + j1))*KroneckerDelta(gO1,4 + j1);
   }
   tmp_5267 += tmp_5268;
   result += (-1.118033988749895*g1p*Conj(ZN(gI2,7))) * tmp_5267;
   std::complex<double> tmp_5269;
   std::complex<double> tmp_5270;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5271;
      std::complex<double> tmp_5272;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5272 += Conj(ZNI(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5271 += tmp_5272;
      tmp_5270 += (KroneckerDelta(gO1,2 + j2)) * tmp_5271;
   }
   tmp_5269 += tmp_5270;
   result += (-Conj(ZN(gI2,2))) * tmp_5269;
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*Conj(ZNI(gI1,gO1));
   }
   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*Conj(ZNI(gI1,gO1));
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*g1p*Conj(ZN(gI2,7))*Conj(ZNI(gI1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0barChaPFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      std::complex<double> tmp_5273;
      std::complex<double> tmp_5274;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5274 += Conj(hE(j1,gO2))*ZER(gI2,j1);
      }
      tmp_5273 += tmp_5274;
      result += (-1) * tmp_5273;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHI0barChaPFePL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0conjVWmSHIPM(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5275;
   std::complex<double> tmp_5276;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5276 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5275 += tmp_5276;
   result += (-0.7071067811865475*g2) * tmp_5275;
   if (gO2 < 2) {
      result += 0.7071067811865475*g2*Conj(UHIPM(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0VZSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5277;
   std::complex<double> tmp_5278;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5278 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5277 += tmp_5278;
   result += (0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_5277;
   std::complex<double> tmp_5279;
   std::complex<double> tmp_5280;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5280 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5279 += tmp_5280;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_5279;
   std::complex<double> tmp_5281;
   std::complex<double> tmp_5282;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5282 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5281 += tmp_5282;
   result += (0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_5281;
   std::complex<double> tmp_5283;
   std::complex<double> tmp_5284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5284 += Conj(UHI0(gI2,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5283 += tmp_5284;
   result += (0.7905694150420949*g1p*Sin(ThetaWp())) * tmp_5283;
   if (gO2 < 2) {
      result += 0.5*g2*Conj(UHI0(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHI0(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Conj(UHI0(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHI0VZpSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5285;
   std::complex<double> tmp_5286;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5286 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5285 += tmp_5286;
   result += (0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_5285;
   std::complex<double> tmp_5287;
   std::complex<double> tmp_5288;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5288 += Conj(UHI0(gI2,4 + j1))*KroneckerDelta(gO2,4 + j1);
   }
   tmp_5287 += tmp_5288;
   result += (0.7905694150420949*g1p*Cos(ThetaWp())) * tmp_5287;
   std::complex<double> tmp_5289;
   std::complex<double> tmp_5290;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5290 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5289 += tmp_5290;
   result += (-0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_5289;
   std::complex<double> tmp_5291;
   std::complex<double> tmp_5292;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5292 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5291 += tmp_5292;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_5291;
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Conj(UHI0(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.5*g2*Conj(UHI0(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHI0(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5293;
   std::complex<double> tmp_5294;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5294 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5293 += tmp_5294;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()))) * tmp_5293;
   std::complex<double> tmp_5295;
   std::complex<double> tmp_5296;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5296 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5295 += tmp_5296;
   result += (-0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Cos(
      ThetaWp()))) * tmp_5295;
   std::complex<double> tmp_5297;
   std::complex<double> tmp_5298;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5298 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5297 += tmp_5298;
   result += (0.3*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_5297;
   std::complex<double> tmp_5299;
   std::complex<double> tmp_5300;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5300 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5299 += tmp_5300;
   result += (-0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*Sin(
      ThetaWp())) * tmp_5299;
   std::complex<double> tmp_5301;
   std::complex<double> tmp_5302;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5302 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5301 += tmp_5302;
   result += (0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_5301;
   std::complex<double> tmp_5303;
   std::complex<double> tmp_5304;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5304 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5303 += tmp_5304;
   result += (0.2*Sqr(g1p)*Sqr(Sin(ThetaWp()))) * tmp_5303;
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(
         Sin(ThetaW()));
   }
   if (gO1 < 2) {
      result += 0.9486832980505138*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.7348469228349533*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1
         ,gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Sin(ThetaWp()));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5305;
   std::complex<double> tmp_5306;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5306 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5305 += tmp_5306;
   result += (0.2*Sqr(g1p)*Sqr(Cos(ThetaWp()))) * tmp_5305;
   std::complex<double> tmp_5307;
   std::complex<double> tmp_5308;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5308 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5307 += tmp_5308;
   result += (0.6324555320336759*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*Sin(
      ThetaWp())) * tmp_5307;
   std::complex<double> tmp_5309;
   std::complex<double> tmp_5310;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5310 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5309 += tmp_5310;
   result += (-0.4898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp())) * tmp_5309;
   std::complex<double> tmp_5311;
   std::complex<double> tmp_5312;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5312 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5311 += tmp_5312;
   result += (0.5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_5311;
   std::complex<double> tmp_5313;
   std::complex<double> tmp_5314;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5314 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5313 += tmp_5314;
   result += (-0.7745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(Sin(
      ThetaWp()))) * tmp_5313;
   std::complex<double> tmp_5315;
   std::complex<double> tmp_5316;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5316 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5315 += tmp_5316;
   result += (0.3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_5315;
   if (gO1 < 2) {
      result += 0.45*KroneckerDelta(gO1,gO2)*Sqr(g1p)*Sqr(Cos(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.9486832980505138*g1p*g2*Cos(ThetaW())*Cos(ThetaWp())*
         KroneckerDelta(gO1,gO2)*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.7348469228349533*g1*g1p*Cos(ThetaWp())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += -0.7745966692414834*g1*g2*Cos(ThetaW())*KroneckerDelta(gO1,
         gO2)*Sin(ThetaW())*Sqr(Sin(ThetaWp()));
   }
   if (gO1 < 2) {
      result += 0.3*KroneckerDelta(gO1,gO2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(
         Sin(ThetaWp()));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gO1,gO2)*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5317;
   std::complex<double> tmp_5318;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5318 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5317 += tmp_5318;
   result += (0.15*Conj(ZP(gI2,0))*Sqr(g1)*ZP(gI1,0)) * tmp_5317;
   std::complex<double> tmp_5319;
   std::complex<double> tmp_5320;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5320 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5319 += tmp_5320;
   result += (-0.15*Conj(ZP(gI2,0))*Sqr(g1p)*ZP(gI1,0)) * tmp_5319;
   std::complex<double> tmp_5321;
   std::complex<double> tmp_5322;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5322 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5321 += tmp_5322;
   result += (0.25*Conj(ZP(gI2,0))*Sqr(g2)*ZP(gI1,0)) * tmp_5321;
   std::complex<double> tmp_5323;
   std::complex<double> tmp_5324;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5325;
      std::complex<double> tmp_5326;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5327;
         std::complex<double> tmp_5328;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5328 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_5327 += tmp_5328;
         tmp_5326 += (KroneckerDelta(gO2,2 + j2)) * tmp_5327;
      }
      tmp_5325 += tmp_5326;
      tmp_5324 += (KroneckerDelta(gO1,2 + j3)) * tmp_5325;
   }
   tmp_5323 += tmp_5324;
   result += (-(Conj(ZP(gI2,0))*ZP(gI1,0))) * tmp_5323;
   if (gO1 < 2) {
      result += -0.15*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1
         ,0);
   }
   if (gO1 < 2) {
      result += -0.225*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,0);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(ZP(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1
         ,0);
   }
   std::complex<double> tmp_5329;
   std::complex<double> tmp_5330;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5330 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5329 += tmp_5330;
   result += (-0.15*Conj(ZP(gI2,1))*Sqr(g1)*ZP(gI1,1)) * tmp_5329;
   std::complex<double> tmp_5331;
   std::complex<double> tmp_5332;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5332 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5331 += tmp_5332;
   result += (-0.1*Conj(ZP(gI2,1))*Sqr(g1p)*ZP(gI1,1)) * tmp_5331;
   std::complex<double> tmp_5333;
   std::complex<double> tmp_5334;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5334 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5333 += tmp_5334;
   result += (-0.25*Conj(ZP(gI2,1))*Sqr(g2)*ZP(gI1,1)) * tmp_5333;
   if (gO1 < 2) {
      result += 0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZP(gI1,
         1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZP(
         gI1,1);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(ZP(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZP(gI1,
         1);
   }
   if (gO2 < 2) {
      result += -(Conj(ZP(gI2,0))*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1
         ,2 + gO2)*Lambdax*ZP(gI1,1));
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_5335;
      std::complex<double> tmp_5336;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5336 += Conj(fu(j1,gO2))*fu(j1,gO1);
      }
      tmp_5335 += tmp_5336;
      result += (-(Conj(ZP(gI2,1))*ZP(gI1,1))) * tmp_5335;
   }
   if (gO1 < 2) {
      result += -(Conj(Lambdax)*Conj(ZP(gI2,1))*KroneckerDelta(2 + gO1,gO2)*
         ZP(gI1,0)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5337;
   std::complex<double> tmp_5338;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5338 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5337 += tmp_5338;
   result += (0.15*Conj(UHp0(gI2,0))*Sqr(g1)*UHp0(gI1,0)) * tmp_5337;
   std::complex<double> tmp_5339;
   std::complex<double> tmp_5340;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5340 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5339 += tmp_5340;
   result += (0.1*Conj(UHp0(gI2,0))*Sqr(g1p)*UHp0(gI1,0)) * tmp_5339;
   std::complex<double> tmp_5341;
   std::complex<double> tmp_5342;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5342 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5341 += tmp_5342;
   result += (-0.25*Conj(UHp0(gI2,0))*Sqr(g2)*UHp0(gI1,0)) * tmp_5341;
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHp0
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHp0(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0(
         gI1,0);
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_5343;
      std::complex<double> tmp_5344;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5344 += Conj(hE(j1,gO2))*hE(j1,gO1);
      }
      tmp_5343 += tmp_5344;
      result += (-(Conj(UHp0(gI2,0))*UHp0(gI1,0))) * tmp_5343;
   }
   std::complex<double> tmp_5345;
   std::complex<double> tmp_5346;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5346 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5345 += tmp_5346;
   result += (-0.15*Conj(UHp0(gI2,1))*Sqr(g1)*UHp0(gI1,1)) * tmp_5345;
   std::complex<double> tmp_5347;
   std::complex<double> tmp_5348;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5348 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5347 += tmp_5348;
   result += (-0.1*Conj(UHp0(gI2,1))*Sqr(g1p)*UHp0(gI1,1)) * tmp_5347;
   std::complex<double> tmp_5349;
   std::complex<double> tmp_5350;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5350 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5349 += tmp_5350;
   result += (0.25*Conj(UHp0(gI2,1))*Sqr(g2)*UHp0(gI1,1)) * tmp_5349;
   if (gO1 < 2) {
      result += 0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHp0(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHp0(gI1,1);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHp0(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHp0
         (gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5351;
   std::complex<double> tmp_5352;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5352 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5351 += tmp_5352;
   result += (0.15*Conj(UHpp(gI2,0))*Sqr(g1)*UHpp(gI1,0)) * tmp_5351;
   std::complex<double> tmp_5353;
   std::complex<double> tmp_5354;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5354 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5353 += tmp_5354;
   result += (0.1*Conj(UHpp(gI2,0))*Sqr(g1p)*UHpp(gI1,0)) * tmp_5353;
   std::complex<double> tmp_5355;
   std::complex<double> tmp_5356;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5356 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5355 += tmp_5356;
   result += (0.25*Conj(UHpp(gI2,0))*Sqr(g2)*UHpp(gI1,0)) * tmp_5355;
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*UHpp
         (gI1,0);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(UHpp(gI2,0))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp
         (gI1,0);
   }
   std::complex<double> tmp_5357;
   std::complex<double> tmp_5358;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5358 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5357 += tmp_5358;
   result += (-0.15*Conj(UHpp(gI2,1))*Sqr(g1)*UHpp(gI1,1)) * tmp_5357;
   std::complex<double> tmp_5359;
   std::complex<double> tmp_5360;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5360 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5359 += tmp_5360;
   result += (-0.1*Conj(UHpp(gI2,1))*Sqr(g1p)*UHpp(gI1,1)) * tmp_5359;
   std::complex<double> tmp_5361;
   std::complex<double> tmp_5362;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5362 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5361 += tmp_5362;
   result += (-0.25*Conj(UHpp(gI2,1))*Sqr(g2)*UHpp(gI1,1)) * tmp_5361;
   if (gO1 < 2) {
      result += 0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1)*UHpp(
         gI1,1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g1p)*
         UHpp(gI1,1);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(UHpp(gI2,1))*KroneckerDelta(gO1,gO2)*Sqr(g2)*UHpp(
         gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMconjSHp0Se(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5363;
   std::complex<double> tmp_5364;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5365;
      std::complex<double> tmp_5366;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5366 += Conj(hE(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5365 += tmp_5366;
      tmp_5364 += (Conj(ZE(gI2,3 + j2))) * tmp_5365;
   }
   tmp_5363 += tmp_5364;
   result += (0.7071067811865475*vs*UHp0(gI1,0)) * tmp_5363;
   if (gO2 < 2) {
      std::complex<double> tmp_5367;
      std::complex<double> tmp_5368;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5368 += Conj(ZE(gI2,3 + j1))*Conj(ThE(j1,gO2));
      }
      tmp_5367 += tmp_5368;
      result += (UHp0(gI1,0)) * tmp_5367;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5369;
      std::complex<double> tmp_5370;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5370 += Conj(hE(j1,gO2))*Conj(ZE(gI2,j1))*Ye(j1,j1);
      }
      tmp_5369 += tmp_5370;
      result += (0.7071067811865475*vd*UHp0(gI1,0)) * tmp_5369;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5371;
      std::complex<double> tmp_5372;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5372 += Conj(hE(j1,gO2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_5371 += tmp_5372;
      result += (-(MuPr*UHp0(gI1,1))) * tmp_5371;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5373;
      std::complex<double> tmp_5374;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5374 += Conj(hE(j1,gO2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_5373 += tmp_5374;
      result += (0.7071067811865475*vphi*SigmaL*UHp0(gI1,1)) * tmp_5373;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5375;
   std::complex<double> tmp_5376;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5376 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5375 += tmp_5376;
   result += (0.15*KroneckerDelta(gI1,gI2)*Sqr(g1)) * tmp_5375;
   std::complex<double> tmp_5377;
   std::complex<double> tmp_5378;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5378 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5377 += tmp_5378;
   result += (0.1*KroneckerDelta(gI1,gI2)*Sqr(g1p)) * tmp_5377;
   std::complex<double> tmp_5379;
   std::complex<double> tmp_5380;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5380 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5379 += tmp_5380;
   result += (-0.25*KroneckerDelta(gI1,gI2)*Sqr(g2)) * tmp_5379;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1
         );
   }
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g1p
         );
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gI1,gI2)*KroneckerDelta(gO1,gO2)*Sqr(g2)
         ;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMFeChiPPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      std::complex<double> tmp_5381;
      std::complex<double> tmp_5382;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5382 += Conj(hE(j1,gO2))*ZER(gI1,j1);
      }
      tmp_5381 += tmp_5382;
      result += (ZNp(gI2,0)) * tmp_5381;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHIPMFeChiPPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5383;
   std::complex<double> tmp_5385;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5385 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
   }
   tmp_5383 += tmp_5385;
   std::complex<double> tmp_5384;
   std::complex<double> tmp_5386;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5386 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5384 += tmp_5386;
   result += (-0.075*Sqr(g1)) * tmp_5383 * tmp_5384;
   std::complex<double> tmp_5387;
   std::complex<double> tmp_5389;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5389 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
   }
   tmp_5387 += tmp_5389;
   std::complex<double> tmp_5388;
   std::complex<double> tmp_5390;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5390 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5388 += tmp_5390;
   result += (-0.05*Sqr(g1p)) * tmp_5387 * tmp_5388;
   std::complex<double> tmp_5391;
   std::complex<double> tmp_5393;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5393 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
   }
   tmp_5391 += tmp_5393;
   std::complex<double> tmp_5392;
   std::complex<double> tmp_5394;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5394 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5392 += tmp_5394;
   result += (-0.125*Sqr(g2)) * tmp_5391 * tmp_5392;
   std::complex<double> tmp_5395;
   std::complex<double> tmp_5397;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5397 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_5395 += tmp_5397;
   std::complex<double> tmp_5396;
   std::complex<double> tmp_5398;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5398 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5396 += tmp_5398;
   result += (0.075*Sqr(g1)) * tmp_5395 * tmp_5396;
   std::complex<double> tmp_5399;
   std::complex<double> tmp_5401;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5401 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_5399 += tmp_5401;
   std::complex<double> tmp_5400;
   std::complex<double> tmp_5402;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5402 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5400 += tmp_5402;
   result += (-0.075*Sqr(g1p)) * tmp_5399 * tmp_5400;
   std::complex<double> tmp_5403;
   std::complex<double> tmp_5405;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5405 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_5403 += tmp_5405;
   std::complex<double> tmp_5404;
   std::complex<double> tmp_5406;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5406 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5404 += tmp_5406;
   result += (0.125*Sqr(g2)) * tmp_5403 * tmp_5404;
   std::complex<double> tmp_5407;
   std::complex<double> tmp_5409;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5409 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_5407 += tmp_5409;
   std::complex<double> tmp_5408;
   std::complex<double> tmp_5410;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5410 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5408 += tmp_5410;
   result += (-0.075*Sqr(g1)) * tmp_5407 * tmp_5408;
   std::complex<double> tmp_5411;
   std::complex<double> tmp_5413;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5413 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_5411 += tmp_5413;
   std::complex<double> tmp_5412;
   std::complex<double> tmp_5414;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5414 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5412 += tmp_5414;
   result += (-0.05*Sqr(g1p)) * tmp_5411 * tmp_5412;
   std::complex<double> tmp_5415;
   std::complex<double> tmp_5417;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5417 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_5415 += tmp_5417;
   std::complex<double> tmp_5416;
   std::complex<double> tmp_5418;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5418 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5416 += tmp_5418;
   result += (-0.125*Sqr(g2)) * tmp_5415 * tmp_5416;
   std::complex<double> tmp_5419;
   std::complex<double> tmp_5421;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5421 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5419 += tmp_5421;
   std::complex<double> tmp_5420;
   std::complex<double> tmp_5422;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5422 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_5420 += tmp_5422;
   result += (0.075*Sqr(g1)) * tmp_5419 * tmp_5420;
   std::complex<double> tmp_5423;
   std::complex<double> tmp_5425;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5425 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5423 += tmp_5425;
   std::complex<double> tmp_5424;
   std::complex<double> tmp_5426;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5426 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_5424 += tmp_5426;
   result += (-0.075*Sqr(g1p)) * tmp_5423 * tmp_5424;
   std::complex<double> tmp_5427;
   std::complex<double> tmp_5429;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5429 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5427 += tmp_5429;
   std::complex<double> tmp_5428;
   std::complex<double> tmp_5430;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5430 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
   }
   tmp_5428 += tmp_5430;
   result += (0.125*Sqr(g2)) * tmp_5427 * tmp_5428;
   std::complex<double> tmp_5431;
   std::complex<double> tmp_5433;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5433 += Conj(UHIPM(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5431 += tmp_5433;
   std::complex<double> tmp_5432;
   std::complex<double> tmp_5434;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5434 += Conj(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*UHIPM(gI1
         ,j2);
   }
   tmp_5432 += tmp_5434;
   result += (-1) * tmp_5431 * tmp_5432;
   std::complex<double> tmp_5435;
   std::complex<double> tmp_5437;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5437 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5435 += tmp_5437;
   std::complex<double> tmp_5436;
   std::complex<double> tmp_5438;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5438 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_5436 += tmp_5438;
   result += (-0.075*Sqr(g1)) * tmp_5435 * tmp_5436;
   std::complex<double> tmp_5439;
   std::complex<double> tmp_5441;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5441 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5439 += tmp_5441;
   std::complex<double> tmp_5440;
   std::complex<double> tmp_5442;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5442 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_5440 += tmp_5442;
   result += (-0.05*Sqr(g1p)) * tmp_5439 * tmp_5440;
   std::complex<double> tmp_5443;
   std::complex<double> tmp_5445;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5445 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5443 += tmp_5445;
   std::complex<double> tmp_5444;
   std::complex<double> tmp_5446;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5446 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
   }
   tmp_5444 += tmp_5446;
   result += (-0.125*Sqr(g2)) * tmp_5443 * tmp_5444;
   std::complex<double> tmp_5447;
   std::complex<double> tmp_5449;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5449 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5447 += tmp_5449;
   std::complex<double> tmp_5448;
   std::complex<double> tmp_5450;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5450 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
   }
   tmp_5448 += tmp_5450;
   result += (-0.075*Sqr(g1)) * tmp_5447 * tmp_5448;
   std::complex<double> tmp_5451;
   std::complex<double> tmp_5453;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5453 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5451 += tmp_5453;
   std::complex<double> tmp_5452;
   std::complex<double> tmp_5454;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5454 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
   }
   tmp_5452 += tmp_5454;
   result += (-0.05*Sqr(g1p)) * tmp_5451 * tmp_5452;
   std::complex<double> tmp_5455;
   std::complex<double> tmp_5457;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5457 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5455 += tmp_5457;
   std::complex<double> tmp_5456;
   std::complex<double> tmp_5458;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5458 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
   }
   tmp_5456 += tmp_5458;
   result += (-0.125*Sqr(g2)) * tmp_5455 * tmp_5456;
   if (gO1 < 2) {
      std::complex<double> tmp_5459;
      std::complex<double> tmp_5460;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5460 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_5459 += tmp_5460;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5459;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5461;
      std::complex<double> tmp_5462;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5462 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_5461 += tmp_5462;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5461;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5463;
      std::complex<double> tmp_5464;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5464 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
      }
      tmp_5463 += tmp_5464;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5463;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5465;
      std::complex<double> tmp_5466;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5466 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_5465 += tmp_5466;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5465;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5467;
      std::complex<double> tmp_5468;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5468 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_5467 += tmp_5468;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5467;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5469;
      std::complex<double> tmp_5470;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5470 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
      }
      tmp_5469 += tmp_5470;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5469;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5471;
      std::complex<double> tmp_5472;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5472 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_5471 += tmp_5472;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5471;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5473;
      std::complex<double> tmp_5474;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5474 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_5473 += tmp_5474;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5473;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5475;
      std::complex<double> tmp_5476;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5476 += Conj(UHIPM(gI2,j2))*UHIPM(gI1,j2);
      }
      tmp_5475 += tmp_5476;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5475;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5477;
      std::complex<double> tmp_5478;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5478 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_5477 += tmp_5478;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5477;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5479;
      std::complex<double> tmp_5480;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5480 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_5479 += tmp_5480;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5479;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5481;
      std::complex<double> tmp_5482;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5482 += Conj(UHIPM(gI2,2 + j2))*UHIPM(gI1,2 + j2);
      }
      tmp_5481 += tmp_5482;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5481;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5483;
      std::complex<double> tmp_5484;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5484 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
      }
      tmp_5483 += tmp_5484;
      result += (0.075*Conj(UHIPM(gI2,gO2))*Sqr(g1)) * tmp_5483;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5485;
      std::complex<double> tmp_5486;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5486 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
      }
      tmp_5485 += tmp_5486;
      result += (-0.075*Conj(UHIPM(gI2,gO2))*Sqr(g1p)) * tmp_5485;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5487;
      std::complex<double> tmp_5488;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5488 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
      }
      tmp_5487 += tmp_5488;
      result += (0.125*Conj(UHIPM(gI2,gO2))*Sqr(g2)) * tmp_5487;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5489;
      std::complex<double> tmp_5490;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5490 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1
            );
      }
      tmp_5489 += tmp_5490;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_5489;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5491;
      std::complex<double> tmp_5492;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5492 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
      }
      tmp_5491 += tmp_5492;
      result += (0.075*Conj(UHIPM(gI2,gO2))*Sqr(g1)) * tmp_5491;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5493;
      std::complex<double> tmp_5494;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5494 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
      }
      tmp_5493 += tmp_5494;
      result += (-0.075*Conj(UHIPM(gI2,gO2))*Sqr(g1p)) * tmp_5493;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5495;
      std::complex<double> tmp_5496;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5496 += KroneckerDelta(gO1,2 + j2)*UHIPM(gI1,2 + j2);
      }
      tmp_5495 += tmp_5496;
      result += (0.125*Conj(UHIPM(gI2,gO2))*Sqr(g2)) * tmp_5495;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5497;
      std::complex<double> tmp_5498;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5498 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_5497 += tmp_5498;
      result += (0.075*Sqr(g1)*UHIPM(gI1,gO1)) * tmp_5497;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5499;
      std::complex<double> tmp_5500;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5500 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_5499 += tmp_5500;
      result += (-0.075*Sqr(g1p)*UHIPM(gI1,gO1)) * tmp_5499;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5501;
      std::complex<double> tmp_5502;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5502 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_5501 += tmp_5502;
      result += (0.125*Sqr(g2)*UHIPM(gI1,gO1)) * tmp_5501;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5503;
      std::complex<double> tmp_5504;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5504 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_5503 += tmp_5504;
      result += (0.075*Sqr(g1)*UHIPM(gI1,gO1)) * tmp_5503;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5505;
      std::complex<double> tmp_5506;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5506 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_5505 += tmp_5506;
      result += (-0.075*Sqr(g1p)*UHIPM(gI1,gO1)) * tmp_5505;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5507;
      std::complex<double> tmp_5508;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5508 += Conj(UHIPM(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_5507 += tmp_5508;
      result += (0.125*Sqr(g2)*UHIPM(gI1,gO1)) * tmp_5507;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.15*Conj(UHIPM(gI2,gO2))*Sqr(g1)*UHIPM(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.225*Conj(UHIPM(gI2,gO2))*Sqr(g1p)*UHIPM(gI1,gO1);
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.25*Conj(UHIPM(gI2,gO2))*Sqr(g2)*UHIPM(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5509;
      std::complex<double> tmp_5510;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5510 += Conj(UHIPM(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHIPM(
            gI1,j2);
      }
      tmp_5509 += tmp_5510;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_5509;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -(Conj(UHIPM(gI2,2 + gO2))*Conj(Lambda12(gO2,gO2))*UHIPM(gI1
         ,2 + gO1)*Lambda12(gO1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMSHIPMAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5511;
   std::complex<double> tmp_5512;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5512 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5511 += tmp_5512;
   result += (std::complex<double>(0,-0.5)*vu*Conj(Lambdax)*ZA(gI2,0)) *
      tmp_5511;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vu*Conj(UHIPM(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,0);
   }
   std::complex<double> tmp_5513;
   std::complex<double> tmp_5514;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5514 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5513 += tmp_5514;
   result += (std::complex<double>(0,-0.5)*vd*Conj(Lambdax)*ZA(gI2,1)) *
      tmp_5513;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vd*Conj(UHIPM(gI1,2 + gO2))*Conj
         (Lambda12(gO2,gO2))*Lambdax*ZA(gI2,1);
   }
   std::complex<double> tmp_5515;
   std::complex<double> tmp_5516;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5516 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(
         j1,j1);
   }
   tmp_5515 += tmp_5516;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_5515;
   if (gO2 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(UHIPM(gI1,2
         + gO2))*Conj(TLambda12(gO2,gO2))*ZA(gI2,2);
   }
   std::complex<double> tmp_5517;
   std::complex<double> tmp_5518;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5518 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5517 += tmp_5518;
   result += (std::complex<double>(0,-0.5)*vphi*Conj(Sigmax)*ZA(gI2,3)) *
      tmp_5517;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vphi*Conj(UHIPM(gI1,2 + gO2))*
         Conj(Lambda12(gO2,gO2))*Sigmax*ZA(gI2,3);
   }
   std::complex<double> tmp_5519;
   std::complex<double> tmp_5520;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5520 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5519 += tmp_5520;
   result += (std::complex<double>(0,-0.5)*vsb*Conj(Sigmax)*ZA(gI2,4)) *
      tmp_5519;
   if (gO2 < 2) {
      result += std::complex<double>(0,0.5)*vsb*Conj(UHIPM(gI1,2 + gO2))*
         Conj(Lambda12(gO2,gO2))*Sigmax*ZA(gI2,4);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMSHIPMhh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5521;
   std::complex<double> tmp_5522;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5522 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5521 += tmp_5522;
   result += (0.15*vd*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_5521;
   std::complex<double> tmp_5523;
   std::complex<double> tmp_5524;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5524 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5523 += tmp_5524;
   result += (-0.15*vd*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_5523;
   std::complex<double> tmp_5525;
   std::complex<double> tmp_5526;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5526 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5525 += tmp_5526;
   result += (-0.25*vd*Conj(ZH(gI2,0))*Sqr(g2)) * tmp_5525;
   std::complex<double> tmp_5527;
   std::complex<double> tmp_5528;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5528 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5527 += tmp_5528;
   result += (-0.15*vu*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_5527;
   std::complex<double> tmp_5529;
   std::complex<double> tmp_5530;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5530 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5529 += tmp_5530;
   result += (-0.1*vu*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_5529;
   std::complex<double> tmp_5531;
   std::complex<double> tmp_5532;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5532 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5531 += tmp_5532;
   result += (0.25*vu*Conj(ZH(gI2,1))*Sqr(g2)) * tmp_5531;
   std::complex<double> tmp_5533;
   std::complex<double> tmp_5534;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5534 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5533 += tmp_5534;
   result += (0.05*QS*vs*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_5533;
   std::complex<double> tmp_5535;
   std::complex<double> tmp_5536;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5536 += Conj(UHIPM(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5535 += tmp_5536;
   result += (-0.05*QS*vsb*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_5535;
   std::complex<double> tmp_5537;
   std::complex<double> tmp_5538;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5538 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5537 += tmp_5538;
   result += (0.5*vu*Conj(Lambdax)*Conj(ZH(gI2,0))) * tmp_5537;
   std::complex<double> tmp_5539;
   std::complex<double> tmp_5540;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5540 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5539 += tmp_5540;
   result += (0.5*vd*Conj(Lambdax)*Conj(ZH(gI2,1))) * tmp_5539;
   std::complex<double> tmp_5541;
   std::complex<double> tmp_5542;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5542 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5541 += tmp_5542;
   result += (0.5*vphi*Conj(Sigmax)*Conj(ZH(gI2,3))) * tmp_5541;
   std::complex<double> tmp_5543;
   std::complex<double> tmp_5544;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5544 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1
         ,j1);
   }
   tmp_5543 += tmp_5544;
   result += (0.5*vsb*Conj(Sigmax)*Conj(ZH(gI2,4))) * tmp_5543;
   std::complex<double> tmp_5545;
   std::complex<double> tmp_5546;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5546 += Conj(UHIPM(gI1,j1))*KroneckerDelta(gO2,2 + j1)*TLambda12(
         j1,j1);
   }
   tmp_5545 += tmp_5546;
   result += (-0.7071067811865475*Conj(ZH(gI2,2))) * tmp_5545;
   std::complex<double> tmp_5547;
   std::complex<double> tmp_5548;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5548 += AbsSqr(Lambda12(j2,j2))*Conj(UHIPM(gI1,2 + j2))*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_5547 += tmp_5548;
   result += (-(vs*Conj(ZH(gI2,2)))) * tmp_5547;
   if (gO2 < 2) {
      result += -0.15*vd*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1);
   }
   if (gO2 < 2) {
      result += -0.225*vd*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += 0.25*vd*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,0))*Sqr(g2);
   }
   if (gO2 < 2) {
      result += 0.15*vu*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1);
   }
   if (gO2 < 2) {
      result += -0.15*vu*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.25*vu*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,1))*Sqr(g2);
   }
   if (gO2 < 2) {
      result += 0.075*QS*vs*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,2))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += -0.075*QS*vsb*Conj(UHIPM(gI1,gO2))*Conj(ZH(gI2,3))*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += 0.5*vu*Conj(UHIPM(gI1,2 + gO2))*Conj(ZH(gI2,0))*Conj(
         Lambda12(gO2,gO2))*Lambdax;
   }
   if (gO2 < 2) {
      result += 0.5*vd*Conj(UHIPM(gI1,2 + gO2))*Conj(ZH(gI2,1))*Conj(
         Lambda12(gO2,gO2))*Lambdax;
   }
   if (gO2 < 2) {
      result += 0.5*vphi*Conj(UHIPM(gI1,2 + gO2))*Conj(ZH(gI2,3))*Conj(
         Lambda12(gO2,gO2))*Sigmax;
   }
   if (gO2 < 2) {
      result += 0.5*vsb*Conj(UHIPM(gI1,2 + gO2))*Conj(ZH(gI2,4))*Conj(
         Lambda12(gO2,gO2))*Sigmax;
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*Conj(UHIPM(gI1,2 + gO2))*Conj(ZH(gI2,2))
         *Conj(TLambda12(gO2,gO2));
   }
   if (gO2 < 2) {
      result += -(vs*AbsSqr(Lambda12(gO2,gO2))*Conj(UHIPM(gI1,gO2))*Conj(ZH(
         gI2,2)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5549;
   std::complex<double> tmp_5550;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5550 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5549 += tmp_5550;
   result += (0.15*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0)) * tmp_5549;
   std::complex<double> tmp_5551;
   std::complex<double> tmp_5552;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5552 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5551 += tmp_5552;
   result += (-0.15*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0)) * tmp_5551;
   std::complex<double> tmp_5553;
   std::complex<double> tmp_5554;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5554 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5553 += tmp_5554;
   result += (-0.25*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0)) * tmp_5553;
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += -0.225*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,0)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,1)*ZA(gI2,0);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Lambdax*ZA(gI1,0)*ZA(gI2,1);
   }
   std::complex<double> tmp_5555;
   std::complex<double> tmp_5556;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5556 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5555 += tmp_5556;
   result += (-0.15*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1)) * tmp_5555;
   std::complex<double> tmp_5557;
   std::complex<double> tmp_5558;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5558 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5557 += tmp_5558;
   result += (-0.1*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1)) * tmp_5557;
   std::complex<double> tmp_5559;
   std::complex<double> tmp_5560;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5560 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5559 += tmp_5560;
   result += (0.25*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1)) * tmp_5559;
   if (gO1 < 2) {
      result += 0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.15*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,1)*ZA(gI2,1);
   }
   if (gO1 < 2) {
      result += -0.25*KroneckerDelta(gO1,gO2)*Sqr(g2)*ZA(gI1,1)*ZA(gI2,1);
   }
   std::complex<double> tmp_5561;
   std::complex<double> tmp_5562;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5562 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5561 += tmp_5562;
   result += (0.05*QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2)) * tmp_5561;
   std::complex<double> tmp_5563;
   std::complex<double> tmp_5564;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5564 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_5563 += tmp_5564;
   result += (-(ZA(gI1,2)*ZA(gI2,2))) * tmp_5563;
   if (gO1 < 2) {
      result += 0.075*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2
         );
   }
   std::complex<double> tmp_5565;
   std::complex<double> tmp_5566;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5566 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5565 += tmp_5566;
   result += (-0.05*QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3)) * tmp_5565;
   if (gO1 < 2) {
      result += -0.075*QS*KroneckerDelta(gO1,gO2)*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,
         3);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Sigmax*ZA(gI1,4)*ZA(gI2,3);
   }
   if (gO2 < 2) {
      result += -0.5*Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)*
         Sigmax*ZA(gI1,3)*ZA(gI2,4);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,1)*ZA(
         gI2,0)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Lambdax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,0)*ZA(
         gI2,1)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*KroneckerDelta(gO1,gO2)*ZA(gI1,2
         )*ZA(gI2,2));
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,4)*ZA(
         gI2,3)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += -0.5*Conj(Sigmax)*KroneckerDelta(2 + gO1,gO2)*ZA(gI1,3)*ZA(
         gI2,4)*Lambda12(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMhhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5567;
   std::complex<double> tmp_5568;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5568 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5567 += tmp_5568;
   result += (0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1)) * tmp_5567;
   std::complex<double> tmp_5569;
   std::complex<double> tmp_5570;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5570 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5569 += tmp_5570;
   result += (-0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g1p)) * tmp_5569;
   std::complex<double> tmp_5571;
   std::complex<double> tmp_5572;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5572 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5571 += tmp_5572;
   result += (-0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*Sqr(g2)) * tmp_5571;
   std::complex<double> tmp_5573;
   std::complex<double> tmp_5574;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5574 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5573 += tmp_5574;
   result += (-0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1)) * tmp_5573;
   std::complex<double> tmp_5575;
   std::complex<double> tmp_5576;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5576 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5575 += tmp_5576;
   result += (-0.1*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g1p)) * tmp_5575;
   std::complex<double> tmp_5577;
   std::complex<double> tmp_5578;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5578 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5577 += tmp_5578;
   result += (0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*Sqr(g2)) * tmp_5577;
   std::complex<double> tmp_5579;
   std::complex<double> tmp_5580;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5580 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5579 += tmp_5580;
   result += (0.05*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*Sqr(g1p)) * tmp_5579;
   std::complex<double> tmp_5581;
   std::complex<double> tmp_5582;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5582 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5581 += tmp_5582;
   result += (-0.05*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*Sqr(g1p)) * tmp_5581;
   std::complex<double> tmp_5583;
   std::complex<double> tmp_5584;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5584 += AbsSqr(Lambda12(j2,j2))*KroneckerDelta(gO1,2 + j2)*
         KroneckerDelta(gO2,2 + j2);
   }
   tmp_5583 += tmp_5584;
   result += (-(Conj(ZH(gI1,2))*Conj(ZH(gI2,2)))) * tmp_5583;
   if (gO1 < 2) {
      result += -0.15*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2
         )*Sqr(g1);
   }
   if (gO1 < 2) {
      result += -0.225*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += 0.25*Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*KroneckerDelta(gO1,gO2)
         *Sqr(g2);
   }
   if (gO1 < 2) {
      result += 0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2)
         *Sqr(g1);
   }
   if (gO1 < 2) {
      result += -0.15*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += -0.25*Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*KroneckerDelta(gO1,gO2
         )*Sqr(g2);
   }
   if (gO1 < 2) {
      result += 0.075*QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(gO1,
         gO2)*Sqr(g1p);
   }
   if (gO1 < 2) {
      result += -0.075*QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(gO1
         ,gO2)*Sqr(g1p);
   }
   if (gO2 < 2) {
      result += 0.5*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*Conj(Lambda12(gO2,gO2))*
         KroneckerDelta(gO1,2 + gO2)*Lambdax;
   }
   if (gO2 < 2) {
      result += 0.5*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*Conj(Lambda12(gO2,gO2))*
         KroneckerDelta(gO1,2 + gO2)*Lambdax;
   }
   if (gO2 < 2) {
      result += 0.5*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*Conj(Lambda12(gO2,gO2))*
         KroneckerDelta(gO1,2 + gO2)*Sigmax;
   }
   if (gO2 < 2) {
      result += 0.5*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*Conj(Lambda12(gO2,gO2))*
         KroneckerDelta(gO1,2 + gO2)*Sigmax;
   }
   if (gO1 < 2) {
      result += -(AbsSqr(Lambda12(gO1,gO1))*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*
         KroneckerDelta(gO1,gO2));
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,1))*Conj(ZH(gI2,0))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Lambdax)*Conj(ZH(gI1,0))*Conj(ZH(gI2,1))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,4))*Conj(ZH(gI2,3))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }
   if (gO1 < 2) {
      result += 0.5*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,4))*
         KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5585;
   std::complex<double> tmp_5587;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5587 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_5585 += tmp_5587;
   std::complex<double> tmp_5586;
   std::complex<double> tmp_5588;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5588 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5586 += tmp_5588;
   result += (-0.025*Sqr(g1)) * tmp_5585 * tmp_5586;
   std::complex<double> tmp_5589;
   std::complex<double> tmp_5591;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5591 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_5589 += tmp_5591;
   std::complex<double> tmp_5590;
   std::complex<double> tmp_5592;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5592 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5590 += tmp_5592;
   result += (0.025*Sqr(g1p)) * tmp_5589 * tmp_5590;
   std::complex<double> tmp_5593;
   std::complex<double> tmp_5595;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5595 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_5593 += tmp_5595;
   std::complex<double> tmp_5594;
   std::complex<double> tmp_5596;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5596 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5594 += tmp_5596;
   result += (0.125*Sqr(g2)) * tmp_5593 * tmp_5594;
   std::complex<double> tmp_5597;
   std::complex<double> tmp_5599;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5599 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_5597 += tmp_5599;
   std::complex<double> tmp_5598;
   std::complex<double> tmp_5600;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5600 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5598 += tmp_5600;
   result += (-0.05*Sqr(g1)) * tmp_5597 * tmp_5598;
   std::complex<double> tmp_5601;
   std::complex<double> tmp_5603;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5603 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_5601 += tmp_5603;
   std::complex<double> tmp_5602;
   std::complex<double> tmp_5604;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5604 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5602 += tmp_5604;
   result += (0.05*Sqr(g1p)) * tmp_5601 * tmp_5602;
   std::complex<double> tmp_5605;
   std::complex<double> tmp_5607;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5607 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5605 += tmp_5607;
   std::complex<double> tmp_5606;
   std::complex<double> tmp_5608;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5608 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_5606 += tmp_5608;
   result += (-0.025*Sqr(g1)) * tmp_5605 * tmp_5606;
   std::complex<double> tmp_5609;
   std::complex<double> tmp_5611;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5611 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5609 += tmp_5611;
   std::complex<double> tmp_5610;
   std::complex<double> tmp_5612;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5612 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_5610 += tmp_5612;
   result += (0.025*Sqr(g1p)) * tmp_5609 * tmp_5610;
   std::complex<double> tmp_5613;
   std::complex<double> tmp_5615;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5615 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5613 += tmp_5615;
   std::complex<double> tmp_5614;
   std::complex<double> tmp_5616;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5616 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
   }
   tmp_5614 += tmp_5616;
   result += (0.125*Sqr(g2)) * tmp_5613 * tmp_5614;
   std::complex<double> tmp_5617;
   std::complex<double> tmp_5619;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5619 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5617 += tmp_5619;
   std::complex<double> tmp_5618;
   std::complex<double> tmp_5620;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5620 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_5618 += tmp_5620;
   result += (-0.05*Sqr(g1)) * tmp_5617 * tmp_5618;
   std::complex<double> tmp_5621;
   std::complex<double> tmp_5623;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5623 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5621 += tmp_5623;
   std::complex<double> tmp_5622;
   std::complex<double> tmp_5624;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5624 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
   }
   tmp_5622 += tmp_5624;
   result += (0.05*Sqr(g1p)) * tmp_5621 * tmp_5622;
   if (gO1 < 2) {
      std::complex<double> tmp_5625;
      std::complex<double> tmp_5626;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5626 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_5625 += tmp_5626;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5625;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5627;
      std::complex<double> tmp_5628;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5628 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_5627 += tmp_5628;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5627;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5629;
      std::complex<double> tmp_5630;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5630 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
      }
      tmp_5629 += tmp_5630;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5629;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5631;
      std::complex<double> tmp_5632;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5632 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_5631 += tmp_5632;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5631;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5633;
      std::complex<double> tmp_5634;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5634 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
      }
      tmp_5633 += tmp_5634;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5633;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5635;
      std::complex<double> tmp_5636;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5636 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_5635 += tmp_5636;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5635;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5637;
      std::complex<double> tmp_5638;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5638 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_5637 += tmp_5638;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5637;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5639;
      std::complex<double> tmp_5640;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5640 += Conj(ZD(gI2,j2))*ZD(gI1,j2);
      }
      tmp_5639 += tmp_5640;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5639;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5641;
      std::complex<double> tmp_5642;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5642 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_5641 += tmp_5642;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5641;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5643;
      std::complex<double> tmp_5644;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5644 += Conj(ZD(gI2,3 + j2))*ZD(gI1,3 + j2);
      }
      tmp_5643 += tmp_5644;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5643;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5645;
   std::complex<double> tmp_5647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5647 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_5645 += tmp_5647;
   std::complex<double> tmp_5646;
   std::complex<double> tmp_5648;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5648 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5646 += tmp_5648;
   result += (0.05*Sqr(g1)) * tmp_5645 * tmp_5646;
   std::complex<double> tmp_5649;
   std::complex<double> tmp_5651;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5651 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_5649 += tmp_5651;
   std::complex<double> tmp_5650;
   std::complex<double> tmp_5652;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5652 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5650 += tmp_5652;
   result += (-0.05*Sqr(g1p)) * tmp_5649 * tmp_5650;
   std::complex<double> tmp_5653;
   std::complex<double> tmp_5655;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5655 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_5653 += tmp_5655;
   std::complex<double> tmp_5654;
   std::complex<double> tmp_5656;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5656 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5654 += tmp_5656;
   result += (-0.05*Sqr(g1)) * tmp_5653 * tmp_5654;
   std::complex<double> tmp_5657;
   std::complex<double> tmp_5659;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5659 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_5657 += tmp_5659;
   std::complex<double> tmp_5658;
   std::complex<double> tmp_5660;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5660 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5658 += tmp_5660;
   result += (-0.075*Sqr(g1p)) * tmp_5657 * tmp_5658;
   std::complex<double> tmp_5661;
   std::complex<double> tmp_5663;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5663 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5661 += tmp_5663;
   std::complex<double> tmp_5662;
   std::complex<double> tmp_5664;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5664 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_5662 += tmp_5664;
   result += (0.05*Sqr(g1)) * tmp_5661 * tmp_5662;
   std::complex<double> tmp_5665;
   std::complex<double> tmp_5667;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5667 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5665 += tmp_5667;
   std::complex<double> tmp_5666;
   std::complex<double> tmp_5668;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5668 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
   }
   tmp_5666 += tmp_5668;
   result += (-0.05*Sqr(g1p)) * tmp_5665 * tmp_5666;
   std::complex<double> tmp_5669;
   std::complex<double> tmp_5671;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5671 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5669 += tmp_5671;
   std::complex<double> tmp_5670;
   std::complex<double> tmp_5672;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5672 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_5670 += tmp_5672;
   result += (-0.05*Sqr(g1)) * tmp_5669 * tmp_5670;
   std::complex<double> tmp_5673;
   std::complex<double> tmp_5675;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5675 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5673 += tmp_5675;
   std::complex<double> tmp_5674;
   std::complex<double> tmp_5676;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5676 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
   }
   tmp_5674 += tmp_5676;
   result += (-0.075*Sqr(g1p)) * tmp_5673 * tmp_5674;
   if (gO1 < 2) {
      std::complex<double> tmp_5677;
      std::complex<double> tmp_5678;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5678 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_5677 += tmp_5678;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5677;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5679;
      std::complex<double> tmp_5680;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5680 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
      }
      tmp_5679 += tmp_5680;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5679;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5681;
      std::complex<double> tmp_5682;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5682 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_5681 += tmp_5682;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5681;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5683;
      std::complex<double> tmp_5684;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5684 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
      }
      tmp_5683 += tmp_5684;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5683;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5685;
      std::complex<double> tmp_5686;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5686 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_5685 += tmp_5686;
      result += (-0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5685;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5687;
      std::complex<double> tmp_5688;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5688 += Conj(ZDX(gI2,j2))*ZDX(gI1,j2);
      }
      tmp_5687 += tmp_5688;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5687;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5689;
      std::complex<double> tmp_5690;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5690 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_5689 += tmp_5690;
      result += (0.05*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5689;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5691;
      std::complex<double> tmp_5692;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5692 += Conj(ZDX(gI2,3 + j2))*ZDX(gI1,3 + j2);
      }
      tmp_5691 += tmp_5692;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5691;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5693;
      std::complex<double> tmp_5694;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5694 += Conj(ZDX(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
      }
      tmp_5693 += tmp_5694;
      result += (-(Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2))) *
         tmp_5693;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5695;
      std::complex<double> tmp_5696;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5696 += Conj(ZDX(gI2,3 + j2))*Conj(Kappa(j2,j2))*ZDX(gI1,j2)
            ;
      }
      tmp_5695 += tmp_5696;
      result += (-(KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1))) *
         tmp_5695;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5697;
   std::complex<double> tmp_5699;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5699 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_5697 += tmp_5699;
   std::complex<double> tmp_5698;
   std::complex<double> tmp_5700;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5700 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5698 += tmp_5700;
   result += (0.075*Sqr(g1)) * tmp_5697 * tmp_5698;
   std::complex<double> tmp_5701;
   std::complex<double> tmp_5703;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5703 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_5701 += tmp_5703;
   std::complex<double> tmp_5702;
   std::complex<double> tmp_5704;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5704 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5702 += tmp_5704;
   result += (0.05*Sqr(g1p)) * tmp_5701 * tmp_5702;
   std::complex<double> tmp_5705;
   std::complex<double> tmp_5707;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5707 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_5705 += tmp_5707;
   std::complex<double> tmp_5706;
   std::complex<double> tmp_5708;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5708 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5706 += tmp_5708;
   result += (0.125*Sqr(g2)) * tmp_5705 * tmp_5706;
   std::complex<double> tmp_5709;
   std::complex<double> tmp_5711;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5711 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_5709 += tmp_5711;
   std::complex<double> tmp_5710;
   std::complex<double> tmp_5712;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5712 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5710 += tmp_5712;
   result += (-0.15*Sqr(g1)) * tmp_5709 * tmp_5710;
   std::complex<double> tmp_5713;
   std::complex<double> tmp_5715;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5715 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_5713 += tmp_5715;
   std::complex<double> tmp_5714;
   std::complex<double> tmp_5716;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5716 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5714 += tmp_5716;
   result += (0.025*Sqr(g1p)) * tmp_5713 * tmp_5714;
   std::complex<double> tmp_5717;
   std::complex<double> tmp_5719;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5719 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5717 += tmp_5719;
   std::complex<double> tmp_5718;
   std::complex<double> tmp_5720;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5720 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_5718 += tmp_5720;
   result += (0.075*Sqr(g1)) * tmp_5717 * tmp_5718;
   std::complex<double> tmp_5721;
   std::complex<double> tmp_5723;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5723 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5721 += tmp_5723;
   std::complex<double> tmp_5722;
   std::complex<double> tmp_5724;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5724 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_5722 += tmp_5724;
   result += (0.05*Sqr(g1p)) * tmp_5721 * tmp_5722;
   std::complex<double> tmp_5725;
   std::complex<double> tmp_5727;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5727 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5725 += tmp_5727;
   std::complex<double> tmp_5726;
   std::complex<double> tmp_5728;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5728 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
   }
   tmp_5726 += tmp_5728;
   result += (0.125*Sqr(g2)) * tmp_5725 * tmp_5726;
   std::complex<double> tmp_5729;
   std::complex<double> tmp_5731;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5731 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5729 += tmp_5731;
   std::complex<double> tmp_5730;
   std::complex<double> tmp_5732;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5732 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_5730 += tmp_5732;
   result += (-0.15*Sqr(g1)) * tmp_5729 * tmp_5730;
   std::complex<double> tmp_5733;
   std::complex<double> tmp_5735;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5735 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5733 += tmp_5735;
   std::complex<double> tmp_5734;
   std::complex<double> tmp_5736;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5736 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
   }
   tmp_5734 += tmp_5736;
   result += (0.025*Sqr(g1p)) * tmp_5733 * tmp_5734;
   if (gO1 < 2) {
      std::complex<double> tmp_5737;
      std::complex<double> tmp_5738;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5738 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_5737 += tmp_5738;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5737;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5739;
      std::complex<double> tmp_5740;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5740 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_5739 += tmp_5740;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5739;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5741;
      std::complex<double> tmp_5742;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5742 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
      }
      tmp_5741 += tmp_5742;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5741;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5743;
      std::complex<double> tmp_5744;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5744 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_5743 += tmp_5744;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5743;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5745;
      std::complex<double> tmp_5746;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5746 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
      }
      tmp_5745 += tmp_5746;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5745;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5747;
      std::complex<double> tmp_5748;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5748 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_5747 += tmp_5748;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5747;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5749;
      std::complex<double> tmp_5750;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5750 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_5749 += tmp_5750;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5749;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5751;
      std::complex<double> tmp_5752;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5752 += Conj(ZE(gI2,j2))*ZE(gI1,j2);
      }
      tmp_5751 += tmp_5752;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5751;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5753;
      std::complex<double> tmp_5754;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5754 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_5753 += tmp_5754;
      result += (0.15*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5753;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5755;
      std::complex<double> tmp_5756;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5756 += Conj(ZE(gI2,3 + j2))*ZE(gI1,3 + j2);
      }
      tmp_5755 += tmp_5756;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5755;
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_5757;
      std::complex<double> tmp_5759;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5759 += hE(j1,gO1)*ZE(gI1,3 + j1);
      }
      tmp_5757 += tmp_5759;
      std::complex<double> tmp_5758;
      std::complex<double> tmp_5760;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_5760 += Conj(hE(j3,gO2))*Conj(ZE(gI2,3 + j3));
      }
      tmp_5758 += tmp_5760;
      result += (-1) * tmp_5757 * tmp_5758;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5761;
   std::complex<double> tmp_5763;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5763 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_5761 += tmp_5763;
   std::complex<double> tmp_5762;
   std::complex<double> tmp_5764;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5764 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5762 += tmp_5764;
   result += (-0.025*Sqr(g1)) * tmp_5761 * tmp_5762;
   std::complex<double> tmp_5765;
   std::complex<double> tmp_5767;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5767 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_5765 += tmp_5767;
   std::complex<double> tmp_5766;
   std::complex<double> tmp_5768;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5768 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5766 += tmp_5768;
   result += (0.025*Sqr(g1p)) * tmp_5765 * tmp_5766;
   std::complex<double> tmp_5769;
   std::complex<double> tmp_5771;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5771 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_5769 += tmp_5771;
   std::complex<double> tmp_5770;
   std::complex<double> tmp_5772;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5772 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5770 += tmp_5772;
   result += (-0.125*Sqr(g2)) * tmp_5769 * tmp_5770;
   std::complex<double> tmp_5773;
   std::complex<double> tmp_5775;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5775 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_5773 += tmp_5775;
   std::complex<double> tmp_5774;
   std::complex<double> tmp_5776;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5776 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5774 += tmp_5776;
   result += (0.1*Sqr(g1)) * tmp_5773 * tmp_5774;
   std::complex<double> tmp_5777;
   std::complex<double> tmp_5779;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5779 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_5777 += tmp_5779;
   std::complex<double> tmp_5778;
   std::complex<double> tmp_5780;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5780 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5778 += tmp_5780;
   result += (0.025*Sqr(g1p)) * tmp_5777 * tmp_5778;
   std::complex<double> tmp_5781;
   std::complex<double> tmp_5783;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5783 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5781 += tmp_5783;
   std::complex<double> tmp_5782;
   std::complex<double> tmp_5784;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5784 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_5782 += tmp_5784;
   result += (-0.025*Sqr(g1)) * tmp_5781 * tmp_5782;
   std::complex<double> tmp_5785;
   std::complex<double> tmp_5787;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5787 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5785 += tmp_5787;
   std::complex<double> tmp_5786;
   std::complex<double> tmp_5788;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5788 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_5786 += tmp_5788;
   result += (0.025*Sqr(g1p)) * tmp_5785 * tmp_5786;
   std::complex<double> tmp_5789;
   std::complex<double> tmp_5791;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5791 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5789 += tmp_5791;
   std::complex<double> tmp_5790;
   std::complex<double> tmp_5792;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5792 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
   }
   tmp_5790 += tmp_5792;
   result += (-0.125*Sqr(g2)) * tmp_5789 * tmp_5790;
   std::complex<double> tmp_5793;
   std::complex<double> tmp_5795;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5795 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5793 += tmp_5795;
   std::complex<double> tmp_5794;
   std::complex<double> tmp_5796;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5796 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_5794 += tmp_5796;
   result += (0.1*Sqr(g1)) * tmp_5793 * tmp_5794;
   std::complex<double> tmp_5797;
   std::complex<double> tmp_5799;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5799 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5797 += tmp_5799;
   std::complex<double> tmp_5798;
   std::complex<double> tmp_5800;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5800 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
   }
   tmp_5798 += tmp_5800;
   result += (0.025*Sqr(g1p)) * tmp_5797 * tmp_5798;
   if (gO1 < 2) {
      std::complex<double> tmp_5801;
      std::complex<double> tmp_5802;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5802 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_5801 += tmp_5802;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5801;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5803;
      std::complex<double> tmp_5804;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5804 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_5803 += tmp_5804;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5803;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5805;
      std::complex<double> tmp_5806;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5806 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
      }
      tmp_5805 += tmp_5806;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5805;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5807;
      std::complex<double> tmp_5808;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5808 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_5807 += tmp_5808;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5807;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5809;
      std::complex<double> tmp_5810;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5810 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
      }
      tmp_5809 += tmp_5810;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5809;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5811;
      std::complex<double> tmp_5812;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5812 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_5811 += tmp_5812;
      result += (0.025*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5811;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5813;
      std::complex<double> tmp_5814;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5814 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_5813 += tmp_5814;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5813;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5815;
      std::complex<double> tmp_5816;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5816 += Conj(ZU(gI2,j2))*ZU(gI1,j2);
      }
      tmp_5815 += tmp_5816;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5815;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5817;
      std::complex<double> tmp_5818;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5818 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_5817 += tmp_5818;
      result += (-0.1*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5817;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5819;
      std::complex<double> tmp_5820;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5820 += Conj(ZU(gI2,3 + j2))*ZU(gI1,3 + j2);
      }
      tmp_5819 += tmp_5820;
      result += (0.0375*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5819;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHIPMconjUSHIPMconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5821;
   std::complex<double> tmp_5823;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5823 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_5821 += tmp_5823;
   std::complex<double> tmp_5822;
   std::complex<double> tmp_5824;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5824 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5822 += tmp_5824;
   result += (-0.25*Sqr(g2)) * tmp_5821 * tmp_5822;
   std::complex<double> tmp_5825;
   std::complex<double> tmp_5827;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5827 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_5825 += tmp_5827;
   std::complex<double> tmp_5826;
   std::complex<double> tmp_5828;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5828 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5826 += tmp_5828;
   result += (0.075*Sqr(g1)) * tmp_5825 * tmp_5826;
   std::complex<double> tmp_5829;
   std::complex<double> tmp_5831;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5831 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_5829 += tmp_5831;
   std::complex<double> tmp_5830;
   std::complex<double> tmp_5832;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5832 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5830 += tmp_5832;
   result += (-0.075*Sqr(g1p)) * tmp_5829 * tmp_5830;
   std::complex<double> tmp_5833;
   std::complex<double> tmp_5835;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5835 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_5833 += tmp_5835;
   std::complex<double> tmp_5834;
   std::complex<double> tmp_5836;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5836 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5834 += tmp_5836;
   result += (-0.125*Sqr(g2)) * tmp_5833 * tmp_5834;
   std::complex<double> tmp_5837;
   std::complex<double> tmp_5839;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5839 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_5837 += tmp_5839;
   std::complex<double> tmp_5838;
   std::complex<double> tmp_5840;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5840 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5838 += tmp_5840;
   result += (-0.075*Sqr(g1)) * tmp_5837 * tmp_5838;
   std::complex<double> tmp_5841;
   std::complex<double> tmp_5843;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5843 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_5841 += tmp_5843;
   std::complex<double> tmp_5842;
   std::complex<double> tmp_5844;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5844 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5842 += tmp_5844;
   result += (-0.05*Sqr(g1p)) * tmp_5841 * tmp_5842;
   std::complex<double> tmp_5845;
   std::complex<double> tmp_5847;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5847 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_5845 += tmp_5847;
   std::complex<double> tmp_5846;
   std::complex<double> tmp_5848;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5848 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5846 += tmp_5848;
   result += (0.125*Sqr(g2)) * tmp_5845 * tmp_5846;
   std::complex<double> tmp_5849;
   std::complex<double> tmp_5851;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_5851 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_5849 += tmp_5851;
   std::complex<double> tmp_5850;
   std::complex<double> tmp_5852;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5852 += KroneckerDelta(gO1,2 + j2)*KroneckerDelta(gO2,2 + j2);
   }
   tmp_5850 += tmp_5852;
   result += (0.125*Sqr(g1p)) * tmp_5849 * tmp_5850;
   std::complex<double> tmp_5853;
   std::complex<double> tmp_5855;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5855 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5853 += tmp_5855;
   std::complex<double> tmp_5854;
   std::complex<double> tmp_5856;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5856 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_5854 += tmp_5856;
   result += (0.075*Sqr(g1)) * tmp_5853 * tmp_5854;
   std::complex<double> tmp_5857;
   std::complex<double> tmp_5859;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5859 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5857 += tmp_5859;
   std::complex<double> tmp_5858;
   std::complex<double> tmp_5860;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5860 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_5858 += tmp_5860;
   result += (-0.075*Sqr(g1p)) * tmp_5857 * tmp_5858;
   std::complex<double> tmp_5861;
   std::complex<double> tmp_5863;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5863 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5861 += tmp_5863;
   std::complex<double> tmp_5862;
   std::complex<double> tmp_5864;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5864 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
   }
   tmp_5862 += tmp_5864;
   result += (-0.125*Sqr(g2)) * tmp_5861 * tmp_5862;
   std::complex<double> tmp_5865;
   std::complex<double> tmp_5867;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5867 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5865 += tmp_5867;
   std::complex<double> tmp_5866;
   std::complex<double> tmp_5868;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5868 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_5866 += tmp_5868;
   result += (-0.075*Sqr(g1)) * tmp_5865 * tmp_5866;
   std::complex<double> tmp_5869;
   std::complex<double> tmp_5871;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5871 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5869 += tmp_5871;
   std::complex<double> tmp_5870;
   std::complex<double> tmp_5872;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5872 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_5870 += tmp_5872;
   result += (-0.05*Sqr(g1p)) * tmp_5869 * tmp_5870;
   std::complex<double> tmp_5873;
   std::complex<double> tmp_5875;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5875 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5873 += tmp_5875;
   std::complex<double> tmp_5874;
   std::complex<double> tmp_5876;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5876 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
   }
   tmp_5874 += tmp_5876;
   result += (0.125*Sqr(g2)) * tmp_5873 * tmp_5874;
   std::complex<double> tmp_5877;
   std::complex<double> tmp_5879;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5879 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5877 += tmp_5879;
   std::complex<double> tmp_5878;
   std::complex<double> tmp_5880;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      tmp_5880 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
   }
   tmp_5878 += tmp_5880;
   result += (-0.25*Sqr(g2)) * tmp_5877 * tmp_5878;
   std::complex<double> tmp_5881;
   std::complex<double> tmp_5883;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5883 += KroneckerDelta(gO1,2 + j1)*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5881 += tmp_5883;
   std::complex<double> tmp_5882;
   std::complex<double> tmp_5884;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      tmp_5884 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
   }
   tmp_5882 += tmp_5884;
   result += (0.125*Sqr(g1p)) * tmp_5881 * tmp_5882;
   std::complex<double> tmp_5885;
   std::complex<double> tmp_5887;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5888;
      std::complex<double> tmp_5889;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5889 += Conj(UHI0(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_5888 += tmp_5889;
      tmp_5887 += (KroneckerDelta(gO2,2 + j2)) * tmp_5888;
   }
   tmp_5885 += tmp_5887;
   std::complex<double> tmp_5886;
   std::complex<double> tmp_5890;
   for (unsigned j4 = 0; j4 < 2; ++j4) {
      std::complex<double> tmp_5891;
      std::complex<double> tmp_5892;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_5892 += Conj(fd(j3,j4))*UHI0(gI1,4 + j3);
      }
      tmp_5891 += tmp_5892;
      tmp_5890 += (KroneckerDelta(gO1,2 + j4)) * tmp_5891;
   }
   tmp_5886 += tmp_5890;
   result += (-1) * tmp_5885 * tmp_5886;
   if (gO1 < 2) {
      std::complex<double> tmp_5893;
      std::complex<double> tmp_5894;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5894 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_5893 += tmp_5894;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5893;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5895;
      std::complex<double> tmp_5896;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5896 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_5895 += tmp_5896;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5895;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5897;
      std::complex<double> tmp_5898;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5898 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
      }
      tmp_5897 += tmp_5898;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5897;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5899;
      std::complex<double> tmp_5900;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5900 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_5899 += tmp_5900;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5899;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5901;
      std::complex<double> tmp_5902;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5902 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_5901 += tmp_5902;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5901;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5903;
      std::complex<double> tmp_5904;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5904 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
      }
      tmp_5903 += tmp_5904;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5903;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5905;
      std::complex<double> tmp_5906;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5906 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
      }
      tmp_5905 += tmp_5906;
      result += (0.1875*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5905;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5907;
      std::complex<double> tmp_5908;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5908 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_5907 += tmp_5908;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5907;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5909;
      std::complex<double> tmp_5910;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5910 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_5909 += tmp_5910;
      result += (-0.1125*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5909;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5911;
      std::complex<double> tmp_5912;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5912 += Conj(UHI0(gI2,j2))*UHI0(gI1,j2);
      }
      tmp_5911 += tmp_5912;
      result += (0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5911;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5913;
      std::complex<double> tmp_5914;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5914 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_5913 += tmp_5914;
      result += (0.075*KroneckerDelta(gO1,gO2)*Sqr(g1)) * tmp_5913;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5915;
      std::complex<double> tmp_5916;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5916 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_5915 += tmp_5916;
      result += (-0.075*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5915;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5917;
      std::complex<double> tmp_5918;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5918 += Conj(UHI0(gI2,2 + j2))*UHI0(gI1,2 + j2);
      }
      tmp_5917 += tmp_5918;
      result += (-0.125*KroneckerDelta(gO1,gO2)*Sqr(g2)) * tmp_5917;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5919;
      std::complex<double> tmp_5920;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_5920 += Conj(UHI0(gI2,4 + j2))*UHI0(gI1,4 + j2);
      }
      tmp_5919 += tmp_5920;
      result += (0.1875*KroneckerDelta(gO1,gO2)*Sqr(g1p)) * tmp_5919;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5921;
      std::complex<double> tmp_5922;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5922 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
      }
      tmp_5921 += tmp_5922;
      result += (-0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_5921;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5923;
      std::complex<double> tmp_5924;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5924 += Conj(UHI0(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_5923 += tmp_5924;
      result += (Conj(Lambda12(gO2,gO2))*KroneckerDelta(gO1,2 + gO2)) *
         tmp_5923;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5925;
      std::complex<double> tmp_5926;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5926 += KroneckerDelta(gO1,2 + j2)*UHI0(gI1,2 + j2);
      }
      tmp_5925 += tmp_5926;
      result += (-0.25*Conj(UHI0(gI2,gO2))*Sqr(g2)) * tmp_5925;
   }
   if (gO1 < 2 && gO2 < 2) {
      std::complex<double> tmp_5927;
      std::complex<double> tmp_5929;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5929 += Conj(UHI0(gI2,4 + j1))*fu(j1,gO1);
      }
      tmp_5927 += tmp_5929;
      std::complex<double> tmp_5928;
      std::complex<double> tmp_5930;
      for (unsigned j3 = 0; j3 < 3; ++j3) {
         tmp_5930 += Conj(fu(j3,gO2))*UHI0(gI1,4 + j3);
      }
      tmp_5928 += tmp_5930;
      result += (-1) * tmp_5927 * tmp_5928;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5931;
      std::complex<double> tmp_5932;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5932 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
      }
      tmp_5931 += tmp_5932;
      result += (-0.25*Sqr(g2)*UHI0(gI1,gO1)) * tmp_5931;
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5933;
      std::complex<double> tmp_5934;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5934 += Conj(UHI0(gI2,2 + j2))*KroneckerDelta(gO2,2 + j2);
      }
      tmp_5933 += tmp_5934;
      result += (-0.25*Sqr(g2)*UHI0(gI1,gO1)) * tmp_5933;
   }
   if (gO1 < 2 && gO2 < 2) {
      result += -0.5*Conj(UHI0(gI2,gO2))*Sqr(g2)*UHI0(gI1,gO1);
   }
   if (gO1 < 2) {
      std::complex<double> tmp_5935;
      std::complex<double> tmp_5936;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_5936 += Conj(UHI0(gI2,2 + j2))*Conj(Lambda12(j2,j2))*UHI0(
            gI1,j2);
      }
      tmp_5935 += tmp_5936;
      result += (KroneckerDelta(2 + gO1,gO2)*Lambda12(gO1,gO1)) * tmp_5935;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMconjSHI0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5937;
   std::complex<double> tmp_5938;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_5939;
      std::complex<double> tmp_5940;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_5940 += Conj(fu(j2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(
            j1,j1);
      }
      tmp_5939 += tmp_5940;
      tmp_5938 += (UHI0(gI1,4 + j2)) * tmp_5939;
   }
   tmp_5937 += tmp_5938;
   result += (0.7071067811865475*vs*Conj(ZP(gI2,1))) * tmp_5937;
   std::complex<double> tmp_5941;
   std::complex<double> tmp_5942;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5943;
      std::complex<double> tmp_5944;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5945;
         std::complex<double> tmp_5946;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5946 += Conj(fu(j1,j3))*fd(j1,j2);
         }
         tmp_5945 += tmp_5946;
         tmp_5944 += (KroneckerDelta(gO2,2 + j2)) * tmp_5945;
      }
      tmp_5943 += tmp_5944;
      tmp_5942 += (UHI0(gI1,j3)) * tmp_5943;
   }
   tmp_5941 += tmp_5942;
   result += (0.7071067811865475*vu*Conj(ZP(gI2,0))) * tmp_5941;
   if (gO2 < 2) {
      std::complex<double> tmp_5947;
      std::complex<double> tmp_5948;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5948 += Conj(fu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5947 += tmp_5948;
      result += (0.7071067811865475*vs*Conj(ZP(gI2,0))*Lambdax) * tmp_5947;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5949;
      std::complex<double> tmp_5950;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5950 += Conj(Tfu(j1,gO2))*UHI0(gI1,4 + j1);
      }
      tmp_5949 += tmp_5950;
      result += (Conj(ZP(gI2,1))) * tmp_5949;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5951;
      std::complex<double> tmp_5952;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5953;
         std::complex<double> tmp_5954;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5954 += Conj(fu(j1,gO2))*fd(j1,j2);
         }
         tmp_5953 += tmp_5954;
         tmp_5952 += (UHI0(gI1,2 + j2)) * tmp_5953;
      }
      tmp_5951 += tmp_5952;
      result += (0.7071067811865475*vd*Conj(ZP(gI2,1))) * tmp_5951;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMSHI0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5955;
   std::complex<double> tmp_5956;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5956 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5955 += tmp_5956;
   result += (-0.35355339059327373*vd*Conj(ZP(gI2,0))*Sqr(g2)) * tmp_5955;
   std::complex<double> tmp_5957;
   std::complex<double> tmp_5958;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5958 += Conj(UHI0(gI1,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5957 += tmp_5958;
   result += (-0.35355339059327373*vu*Conj(ZP(gI2,1))*Sqr(g2)) * tmp_5957;
   std::complex<double> tmp_5959;
   std::complex<double> tmp_5960;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5961;
      std::complex<double> tmp_5962;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5962 += Conj(UHI0(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5961 += tmp_5962;
      tmp_5960 += (KroneckerDelta(gO2,2 + j2)) * tmp_5961;
   }
   tmp_5959 += tmp_5960;
   result += (0.7071067811865475*vs*Conj(Lambdax)*Conj(ZP(gI2,1))) * tmp_5959;
   std::complex<double> tmp_5963;
   std::complex<double> tmp_5964;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5965;
      std::complex<double> tmp_5966;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5966 += Conj(UHI0(gI1,4 + j1))*Tfd(j1,j2);
      }
      tmp_5965 += tmp_5966;
      tmp_5964 += (KroneckerDelta(gO2,2 + j2)) * tmp_5965;
   }
   tmp_5963 += tmp_5964;
   result += (Conj(ZP(gI2,0))) * tmp_5963;
   std::complex<double> tmp_5967;
   std::complex<double> tmp_5968;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_5969;
      std::complex<double> tmp_5970;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5971;
         std::complex<double> tmp_5972;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5972 += Conj(fd(j1,j3))*fd(j1,j2);
         }
         tmp_5971 += tmp_5972;
         tmp_5970 += (KroneckerDelta(gO2,2 + j2)) * tmp_5971;
      }
      tmp_5969 += tmp_5970;
      tmp_5968 += (Conj(UHI0(gI1,2 + j3))) * tmp_5969;
   }
   tmp_5967 += tmp_5968;
   result += (0.7071067811865475*vd*Conj(ZP(gI2,0))) * tmp_5967;
   if (gO2 < 2) {
      result += -0.35355339059327373*vd*Conj(UHI0(gI1,gO2))*Conj(ZP(gI2,0))*
         Sqr(g2);
   }
   if (gO2 < 2) {
      result += -0.35355339059327373*vu*Conj(UHI0(gI1,gO2))*Conj(ZP(gI2,1))*
         Sqr(g2);
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5973;
      std::complex<double> tmp_5974;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5974 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_5973 += tmp_5974;
      result += (0.7071067811865475*vs*Conj(ZP(gI2,0))*Conj(Lambda12(gO2,gO2
         ))) * tmp_5973;
   }
   if (gO2 < 2) {
      std::complex<double> tmp_5975;
      std::complex<double> tmp_5976;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_5977;
         std::complex<double> tmp_5978;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_5978 += Conj(fu(j1,gO2))*fu(j1,j2);
         }
         tmp_5977 += tmp_5978;
         tmp_5976 += (Conj(UHI0(gI1,j2))) * tmp_5977;
      }
      tmp_5975 += tmp_5976;
      result += (0.7071067811865475*vu*Conj(ZP(gI2,1))) * tmp_5975;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMChiIChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5979;
   std::complex<double> tmp_5980;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5980 += KroneckerDelta(gO2,2 + j1)*ZNI(gI1,2 + j1);
   }
   tmp_5979 += tmp_5980;
   result += (-(g2*UP(gI2,0))) * tmp_5979;
   if (gO2 < 2) {
      std::complex<double> tmp_5981;
      std::complex<double> tmp_5982;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5982 += Conj(fu(j1,gO2))*ZNI(gI1,4 + j1);
      }
      tmp_5981 += tmp_5982;
      result += (UP(gI2,1)) * tmp_5981;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMChiIChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5983;
   std::complex<double> tmp_5984;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_5985;
      std::complex<double> tmp_5986;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_5986 += Conj(ZNI(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_5985 += tmp_5986;
      tmp_5984 += (KroneckerDelta(gO1,2 + j2)) * tmp_5985;
   }
   tmp_5983 += tmp_5984;
   result += (Conj(UM(gI2,1))) * tmp_5983;
   if (gO1 < 2) {
      result += -(g2*Conj(UM(gI2,0))*Conj(ZNI(gI1,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMChiChaIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5987;
   std::complex<double> tmp_5988;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5988 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_5987 += tmp_5988;
   result += (-0.5477225575051661*g1*ZN(gI1,0)) * tmp_5987;
   std::complex<double> tmp_5989;
   std::complex<double> tmp_5990;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5990 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_5989 += tmp_5990;
   result += (-0.7071067811865475*g2*ZN(gI1,1)) * tmp_5989;
   std::complex<double> tmp_5991;
   std::complex<double> tmp_5992;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5992 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_5991 += tmp_5992;
   result += (0.4472135954999579*g1p*ZN(gI1,7)) * tmp_5991;
   if (gO2 < 2) {
      result += -(Conj(Lambda12(gO2,gO2))*ZN(gI1,4)*ZPI(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMChiChaIPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5993;
   std::complex<double> tmp_5994;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5994 += Conj(ZMI(gI2,j1))*KroneckerDelta(gO1,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_5993 += tmp_5994;
   result += (-Conj(ZN(gI1,4))) * tmp_5993;
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,0));
   }
   if (gO1 < 2) {
      result += 0.7071067811865475*g2*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,1));
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*g1p*Conj(ZMI(gI2,gO1))*Conj(ZN(gI1,7));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMVPSHIPM(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 4) {
      result += -0.3872983346207417*g1*Conj(UHIPM(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 4) {
      result += -0.5*g2*Conj(UHIPM(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMVZSHIPM(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_5995;
   std::complex<double> tmp_5996;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5996 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5995 += tmp_5996;
   result += (-0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_5995;
   std::complex<double> tmp_5997;
   std::complex<double> tmp_5998;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_5998 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5997 += tmp_5998;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_5997;
   std::complex<double> tmp_5999;
   std::complex<double> tmp_6000;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6000 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_5999 += tmp_6000;
   result += (0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_5999;
   if (gO2 < 2) {
      result += -0.5*g2*Conj(UHIPM(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHIPM(gI2,gO2))*Cos(ThetaWp())*
         Sin(ThetaW());
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Conj(UHIPM(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMVZpSHIPM(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6001;
   std::complex<double> tmp_6002;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6002 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_6001 += tmp_6002;
   result += (0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_6001;
   std::complex<double> tmp_6003;
   std::complex<double> tmp_6004;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6004 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_6003 += tmp_6004;
   result += (0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_6003;
   std::complex<double> tmp_6005;
   std::complex<double> tmp_6006;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6006 += Conj(UHIPM(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_6005 += tmp_6006;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6005;
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Conj(UHIPM(gI2,gO2))*Cos(ThetaWp());
   }
   if (gO2 < 2) {
      result += 0.5*g2*Conj(UHIPM(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHIPM(gI2,gO2))*Sin(ThetaW())*
         Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHIPMVWmSHI0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6007;
   std::complex<double> tmp_6008;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6008 += Conj(UHI0(gI2,2 + j1))*KroneckerDelta(gO2,2 + j1);
   }
   tmp_6007 += tmp_6008;
   result += (-0.7071067811865475*g2) * tmp_6007;
   if (gO2 < 2) {
      result += 0.7071067811865475*g2*Conj(UHI0(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0VZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*
      ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin
      (ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*
      g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0VZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(Conj(ZP(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) - 5*
      Sqr(g2))*ZP(gI1,0) + Conj(ZP(gI2,1))*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*
      ZP(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHp0(gI2,1))*(-2*KroneckerDelta(1,gO1)*KroneckerDelta(1,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,1) + KroneckerDelta(0,gO1
      )*(-20*AbsSqr(SigmaL) + 3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(
      1,gO2)*UHp0(gI1,0) + KroneckerDelta(0,gO2)*UHp0(gI1,1))) + Conj(UHp0(gI2,0))
      *(-2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5
      *Sqr(g2))*UHp0(gI1,0) + KroneckerDelta(1,gO1)*(-20*AbsSqr(SigmaL) + 3*Sqr(g1
      ) + 2*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1,gO2)*UHp0(gI1,0) +
      KroneckerDelta(0,gO2)*UHp0(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHpp(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) + KroneckerDelta(1,gO1
      )*(KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,0) +
      10*KroneckerDelta(0,gO2)*(-2*AbsSqr(SigmaL) + Sqr(g2))*UHpp(gI1,1)))) -
      Conj(UHpp(gI2,1))*(KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) +
      2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,1) + KroneckerDelta(0,gO1)*(10*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(SigmaL) + Sqr(g2))*UHpp(gI1,0) +
      KroneckerDelta(0,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0conjHpmSHpp(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) +
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2))*Sqr(g2)*(vd*ZP(gI1,0) + vu*ZP(gI1,1
      ));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0barChaIFePR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6009;
   std::complex<double> tmp_6010;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6011;
      std::complex<double> tmp_6012;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6012 += Conj(hE(j1,j2))*ZER(gI2,j1);
      }
      tmp_6011 += tmp_6012;
      tmp_6010 += (ZMI(gI1,j2)) * tmp_6011;
   }
   tmp_6009 += tmp_6010;
   result += (KroneckerDelta(0,gO2)) * tmp_6009;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHp0barChaIFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0SHp0Ah(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.5)*(-(Conj(Sigmax)*Conj(UHp0(gI1,0))*
      KroneckerDelta(1,gO2)*SigmaL*(vsb*ZA(gI2,2) + vs*ZA(gI2,3))) + (
      1.4142135623730951*Conj(TSigmaL)*Conj(UHp0(gI1,1))*KroneckerDelta(0,gO2) +
      1.4142135623730951*Conj(MuPr)*(Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) +
      Conj(UHp0(gI1,1))*KroneckerDelta(1,gO2))*SigmaL + Conj(UHp0(gI1,0))*
      KroneckerDelta(1,gO2)*(1.4142135623730951*Conj(MuPhi)*SigmaL + 2*vphi*Conj(
      KappaPr)*SigmaL - 1.4142135623730951*TSigmaL))*ZA(gI2,4) + Conj(SigmaL)*(
      -1.4142135623730951*Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2)*MuPr*ZA(gI2,4) +
      Conj(UHp0(gI1,1))*(-1.4142135623730951*KroneckerDelta(1,gO2)*MuPr*ZA(gI2,4)
      + KroneckerDelta(0,gO2)*(vsb*Sigmax*ZA(gI2,2) + vs*Sigmax*ZA(gI2,3) - (
      1.4142135623730951*MuPhi + 2*vphi*KappaPr)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0SHp0hh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHp0(gI1,1))*(-14.142135623730951*Conj(TSigmaL)*Conj(ZH(
      gI2,4))*KroneckerDelta(0,gO2) + 10*Conj(SigmaL)*(vsb*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*Sigmax + vs*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*
      Sigmax - Conj(ZH(gI2,4))*(KroneckerDelta(0,gO2)*(1.4142135623730951*MuPhi +
      2*vphi*KappaPr) + KroneckerDelta(1,gO2)*(-1.4142135623730951*MuPr + 2*vphi*
      SigmaL))) + KroneckerDelta(1,gO2)*(14.142135623730951*Conj(MuPr)*Conj(ZH(gI2
      ,4))*SigmaL + QS*vs*Conj(ZH(gI2,2))*Sqr(g1p) - QS*vsb*Conj(ZH(gI2,3))*Sqr(
      g1p) + vd*Conj(ZH(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2)) - vu*Conj(ZH(
      gI2,1))*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)))) + Conj(UHp0(gI1,0))*(-20*vphi
      *AbsSqr(SigmaL)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2) + 14.142135623730951*
      Conj(SigmaL)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*MuPr + 14.142135623730951
      *Conj(MuPr)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*SigmaL + 10*vsb*Conj(
      Sigmax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*SigmaL + 10*vs*Conj(Sigmax)*
      Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*SigmaL - 14.142135623730951*Conj(MuPhi
      )*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*SigmaL - 20*vphi*Conj(KappaPr)*Conj(
      ZH(gI2,4))*KroneckerDelta(1,gO2)*SigmaL - QS*vs*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*Sqr(g1p) + QS*vsb*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2
      )*Sqr(g1p) + vd*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2)*(-3*Sqr(g1) + 3*Sqr(
      g1p) - 5*Sqr(g2)) + vu*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 2*
      Sqr(g1p) + 5*Sqr(g2)) - 14.142135623730951*Conj(ZH(gI2,4))*KroneckerDelta(1,
      gO2)*TSigmaL));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0ChiPChiPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(10*Conj(SigmaL)*KroneckerDelta(0,gO2)*ZN(gI2,6) +
      KroneckerDelta(1,gO2)*(5.477225575051661*g1*ZN(gI2,0) - 7.0710678118654755*
      g2*ZN(gI2,1) - 4.47213595499958*g1p*ZN(gI2,7)))*ZNp(gI1,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0ChiPChiPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*Conj(ZNp(gI1,0))*(5.477225575051661*g1*Conj(ZN(gI2,0))*
      KroneckerDelta(0,gO1) - 7.0710678118654755*g2*Conj(ZN(gI2,1))*KroneckerDelta
      (0,gO1) - 2*(2.23606797749979*g1p*Conj(ZN(gI2,7))*KroneckerDelta(0,gO1) + 5*
      Conj(ZN(gI2,6))*KroneckerDelta(1,gO1)*SigmaL));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0barChaChaPPR(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UM(gI1,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0barChaChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*Conj(UP(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) + 2*Sqr(
      g1p) + 5*Sqr(g2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0barFdFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6013;
   std::complex<double> tmp_6014;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6015;
      std::complex<double> tmp_6016;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6016 += Conj(gD(j1,j2))*ZDL(gI1,j1);
      }
      tmp_6015 += tmp_6016;
      tmp_6014 += (ZDXR(gI2,j2)) * tmp_6015;
   }
   tmp_6013 += tmp_6014;
   result += (KroneckerDelta(0,gO2)) * tmp_6013;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHp0barFdFDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6017;
   std::complex<double> tmp_6018;
   std::complex<double> tmp_6019;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6019 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6018 += tmp_6019;
   tmp_6017 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6018;
   std::complex<double> tmp_6020;
   std::complex<double> tmp_6021;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6021 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6020 += tmp_6021;
   tmp_6017 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6020;
   std::complex<double> tmp_6022;
   std::complex<double> tmp_6023;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6023 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6022 += tmp_6023;
   tmp_6017 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6022;
   std::complex<double> tmp_6024;
   std::complex<double> tmp_6025;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6025 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6024 += tmp_6025;
   tmp_6017 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6024;
   std::complex<double> tmp_6026;
   std::complex<double> tmp_6027;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6027 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6026 += tmp_6027;
   tmp_6017 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6026;
   std::complex<double> tmp_6028;
   std::complex<double> tmp_6029;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6029 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6028 += tmp_6029;
   tmp_6017 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6028;
   std::complex<double> tmp_6030;
   std::complex<double> tmp_6031;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6031 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6030 += tmp_6031;
   tmp_6017 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6030;
   std::complex<double> tmp_6032;
   std::complex<double> tmp_6033;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6033 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6032 += tmp_6033;
   tmp_6017 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6032;
   std::complex<double> tmp_6034;
   std::complex<double> tmp_6035;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6035 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6034 += tmp_6035;
   tmp_6017 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6034;
   std::complex<double> tmp_6036;
   std::complex<double> tmp_6037;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6037 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6036 += tmp_6037;
   tmp_6017 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6036;
   std::complex<double> tmp_6038;
   std::complex<double> tmp_6039;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6039 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6038 += tmp_6039;
   tmp_6017 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6038;
   std::complex<double> tmp_6040;
   std::complex<double> tmp_6041;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6041 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6040 += tmp_6041;
   tmp_6017 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6040;
   std::complex<double> tmp_6042;
   std::complex<double> tmp_6043;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_6044;
      std::complex<double> tmp_6045;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_6046;
         std::complex<double> tmp_6047;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6047 += Conj(hE(j1,j3))*hE(j1,j2);
         }
         tmp_6046 += tmp_6047;
         tmp_6045 += (Conj(UHIPM(gI2,j2))) * tmp_6046;
      }
      tmp_6044 += tmp_6045;
      tmp_6043 += (UHIPM(gI1,j3)) * tmp_6044;
   }
   tmp_6042 += tmp_6043;
   tmp_6017 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6042;
   result += (std::complex<double>(0,-1)) * tmp_6017;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0conjSHIPMSe(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6048;
   std::complex<double> tmp_6049;
   std::complex<double> tmp_6050;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6051;
      std::complex<double> tmp_6052;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6052 += Conj(hE(j1,j2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_6051 += tmp_6052;
      tmp_6050 += (UHIPM(gI1,j2)) * tmp_6051;
   }
   tmp_6049 += tmp_6050;
   tmp_6048 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO2)*MuPr) *
      tmp_6049;
   std::complex<double> tmp_6053;
   std::complex<double> tmp_6054;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6055;
      std::complex<double> tmp_6056;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6056 += Conj(hE(j1,j2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_6055 += tmp_6056;
      tmp_6054 += (UHIPM(gI1,j2)) * tmp_6055;
   }
   tmp_6053 += tmp_6054;
   tmp_6048 += (std::complex<double>(0.,0.7071067811865475)*vphi*KroneckerDelta
      (1,gO2)*SigmaL) * tmp_6053;
   std::complex<double> tmp_6057;
   std::complex<double> tmp_6058;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6059;
      std::complex<double> tmp_6060;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6060 += Conj(ZE(gI2,3 + j1))*Conj(ThE(j1,j2));
      }
      tmp_6059 += tmp_6060;
      tmp_6058 += (UHIPM(gI1,j2)) * tmp_6059;
   }
   tmp_6057 += tmp_6058;
   tmp_6048 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_6057;
   std::complex<double> tmp_6061;
   std::complex<double> tmp_6062;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6063;
      std::complex<double> tmp_6064;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6064 += Conj(hE(j1,j2))*Conj(ZE(gI2,j1))*Ye(j1,j1);
      }
      tmp_6063 += tmp_6064;
      tmp_6062 += (UHIPM(gI1,j2)) * tmp_6063;
   }
   tmp_6061 += tmp_6062;
   tmp_6048 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_6061;
   std::complex<double> tmp_6065;
   std::complex<double> tmp_6066;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6067;
      std::complex<double> tmp_6068;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_6068 += Conj(hE(j2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_6067 += tmp_6068;
      tmp_6066 += (Conj(ZE(gI2,3 + j2))) * tmp_6067;
   }
   tmp_6065 += tmp_6066;
   tmp_6048 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(0
      ,gO2)) * tmp_6065;
   result += (std::complex<double>(0,-1)) * tmp_6048;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0AhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((-3*Sqr(g1) + 3
      *Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr
      (g2))*ZA(gI1,1)*ZA(gI2,1) - QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA
      (gI1,3)*ZA(gI2,3) - 20*AbsSqr(SigmaL)*ZA(gI1,4)*ZA(gI2,4)) - 10*
      KroneckerDelta(1,gO2)*SigmaL*(Conj(Sigmax)*(ZA(gI1,3)*ZA(gI2,2) + ZA(gI1,2)*
      ZA(gI2,3)) - 2*Conj(KappaPr)*ZA(gI1,4)*ZA(gI2,4))) + KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 3*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2
      ,0) - (3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + QS*Sqr(g1p)
      *ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3) - 20*AbsSqr(SigmaL)*
      ZA(gI1,4)*ZA(gI2,4)) - 10*Conj(SigmaL)*KroneckerDelta(0,gO2)*(Sigmax*ZA(gI1,
      3)*ZA(gI2,2) + Sigmax*ZA(gI1,2)*ZA(gI2,3) - 2*KappaPr*ZA(gI1,4)*ZA(gI2,4))))
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0hhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*AbsSqr(SigmaL)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 20*AbsSqr(SigmaL)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,4))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) - 20*Conj(
      SigmaL)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta
      (1,gO1)*KappaPr + 10*Conj(SigmaL)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax + 10*Conj(SigmaL)*Conj(ZH
      (gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax
      + 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*SigmaL + 10*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3
      ))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*SigmaL - 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      SigmaL - QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p) + QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) - QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) - Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(3*Sqr(
      g1) - 3*Sqr(g1p) + 5*Sqr(g2)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2))*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6069;
   std::complex<double> tmp_6070;
   std::complex<double> tmp_6071;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6071 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6070 += tmp_6071;
   tmp_6069 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6070;
   std::complex<double> tmp_6072;
   std::complex<double> tmp_6073;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6073 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6072 += tmp_6073;
   tmp_6069 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6072;
   std::complex<double> tmp_6074;
   std::complex<double> tmp_6075;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6075 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6074 += tmp_6075;
   tmp_6069 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6074;
   std::complex<double> tmp_6076;
   std::complex<double> tmp_6077;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6077 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6076 += tmp_6077;
   tmp_6069 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6076;
   std::complex<double> tmp_6078;
   std::complex<double> tmp_6079;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6079 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6078 += tmp_6079;
   tmp_6069 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6078;
   std::complex<double> tmp_6080;
   std::complex<double> tmp_6081;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6081 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6080 += tmp_6081;
   tmp_6069 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6080;
   std::complex<double> tmp_6082;
   std::complex<double> tmp_6083;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6083 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6082 += tmp_6083;
   tmp_6069 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6082;
   std::complex<double> tmp_6084;
   std::complex<double> tmp_6085;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6085 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6084 += tmp_6085;
   tmp_6069 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6084;
   std::complex<double> tmp_6086;
   std::complex<double> tmp_6087;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6087 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6086 += tmp_6087;
   tmp_6069 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6086;
   std::complex<double> tmp_6088;
   std::complex<double> tmp_6089;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6089 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6088 += tmp_6089;
   tmp_6069 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6088;
   std::complex<double> tmp_6090;
   std::complex<double> tmp_6091;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6092;
      std::complex<double> tmp_6093;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6094;
         std::complex<double> tmp_6095;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6095 += Conj(gD(j3,j1))*gD(j2,j1);
         }
         tmp_6094 += tmp_6095;
         tmp_6093 += (Conj(ZD(gI2,j2))) * tmp_6094;
      }
      tmp_6092 += tmp_6093;
      tmp_6091 += (ZD(gI1,j3)) * tmp_6092;
   }
   tmp_6090 += tmp_6091;
   tmp_6069 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6090;
   result += (std::complex<double>(0,-1)) * tmp_6069;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6096;
   std::complex<double> tmp_6097;
   std::complex<double> tmp_6098;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6098 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6097 += tmp_6098;
   tmp_6096 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6097;
   std::complex<double> tmp_6099;
   std::complex<double> tmp_6100;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6100 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6099 += tmp_6100;
   tmp_6096 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6099;
   std::complex<double> tmp_6101;
   std::complex<double> tmp_6102;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6102 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6101 += tmp_6102;
   tmp_6096 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6101;
   std::complex<double> tmp_6103;
   std::complex<double> tmp_6104;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6104 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6103 += tmp_6104;
   tmp_6096 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6103;
   std::complex<double> tmp_6105;
   std::complex<double> tmp_6106;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6106 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6105 += tmp_6106;
   tmp_6096 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6105;
   std::complex<double> tmp_6107;
   std::complex<double> tmp_6108;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6108 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6107 += tmp_6108;
   tmp_6096 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6107;
   std::complex<double> tmp_6109;
   std::complex<double> tmp_6110;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6110 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6109 += tmp_6110;
   tmp_6096 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6109;
   std::complex<double> tmp_6111;
   std::complex<double> tmp_6112;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6112 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6111 += tmp_6112;
   tmp_6096 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6111;
   std::complex<double> tmp_6113;
   std::complex<double> tmp_6114;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6115;
      std::complex<double> tmp_6116;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6117;
         std::complex<double> tmp_6118;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6118 += Conj(gD(j1,j3))*gD(j1,j2);
         }
         tmp_6117 += tmp_6118;
         tmp_6116 += (ZDX(gI1,3 + j2)) * tmp_6117;
      }
      tmp_6115 += tmp_6116;
      tmp_6114 += (Conj(ZDX(gI2,3 + j3))) * tmp_6115;
   }
   tmp_6113 += tmp_6114;
   tmp_6096 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6113;
   result += (std::complex<double>(0,-1)) * tmp_6096;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6119;
   std::complex<double> tmp_6120;
   std::complex<double> tmp_6121;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6121 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6120 += tmp_6121;
   tmp_6119 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6120;
   std::complex<double> tmp_6122;
   std::complex<double> tmp_6123;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6123 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6122 += tmp_6123;
   tmp_6119 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6122;
   std::complex<double> tmp_6124;
   std::complex<double> tmp_6125;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6125 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6124 += tmp_6125;
   tmp_6119 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6124;
   std::complex<double> tmp_6126;
   std::complex<double> tmp_6127;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6127 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6126 += tmp_6127;
   tmp_6119 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6126;
   std::complex<double> tmp_6128;
   std::complex<double> tmp_6129;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6129 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6128 += tmp_6129;
   tmp_6119 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6128;
   std::complex<double> tmp_6130;
   std::complex<double> tmp_6131;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6131 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6130 += tmp_6131;
   tmp_6119 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6130;
   std::complex<double> tmp_6132;
   std::complex<double> tmp_6133;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6133 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6132 += tmp_6133;
   tmp_6119 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6132;
   std::complex<double> tmp_6134;
   std::complex<double> tmp_6135;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6135 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6134 += tmp_6135;
   tmp_6119 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6134;
   std::complex<double> tmp_6136;
   std::complex<double> tmp_6137;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6137 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6136 += tmp_6137;
   tmp_6119 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6136;
   std::complex<double> tmp_6138;
   std::complex<double> tmp_6139;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6139 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6138 += tmp_6139;
   tmp_6119 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6138;
   std::complex<double> tmp_6140;
   std::complex<double> tmp_6141;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6142;
      std::complex<double> tmp_6143;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6144;
         std::complex<double> tmp_6145;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_6145 += Conj(hE(j3,j1))*hE(j2,j1);
         }
         tmp_6144 += tmp_6145;
         tmp_6143 += (ZE(gI1,3 + j2)) * tmp_6144;
      }
      tmp_6142 += tmp_6143;
      tmp_6141 += (Conj(ZE(gI2,3 + j3))) * tmp_6142;
   }
   tmp_6140 += tmp_6141;
   tmp_6119 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6140;
   result += (std::complex<double>(0,-1)) * tmp_6119;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6146;
   std::complex<double> tmp_6147;
   std::complex<double> tmp_6148;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6148 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6147 += tmp_6148;
   tmp_6146 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6147;
   std::complex<double> tmp_6149;
   std::complex<double> tmp_6150;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6150 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6149 += tmp_6150;
   tmp_6146 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6149;
   std::complex<double> tmp_6151;
   std::complex<double> tmp_6152;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6152 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6151 += tmp_6152;
   tmp_6146 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6151;
   std::complex<double> tmp_6153;
   std::complex<double> tmp_6154;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6154 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6153 += tmp_6154;
   tmp_6146 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6153;
   std::complex<double> tmp_6155;
   std::complex<double> tmp_6156;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6156 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6155 += tmp_6156;
   tmp_6146 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6155;
   std::complex<double> tmp_6157;
   std::complex<double> tmp_6158;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6158 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6157 += tmp_6158;
   tmp_6146 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6157;
   std::complex<double> tmp_6159;
   std::complex<double> tmp_6160;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6160 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6159 += tmp_6160;
   tmp_6146 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6159;
   std::complex<double> tmp_6161;
   std::complex<double> tmp_6162;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6162 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6161 += tmp_6162;
   tmp_6146 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6161;
   std::complex<double> tmp_6163;
   std::complex<double> tmp_6164;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6164 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6163 += tmp_6164;
   tmp_6146 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6163;
   std::complex<double> tmp_6165;
   std::complex<double> tmp_6166;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6166 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6165 += tmp_6166;
   tmp_6146 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6165;
   result += (std::complex<double>(0,-1)) * tmp_6146;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0conjSdSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6167;
   std::complex<double> tmp_6168;
   std::complex<double> tmp_6169;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6170;
      std::complex<double> tmp_6171;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6171 += Conj(gD(j1,j2))*ZD(gI1,j1);
      }
      tmp_6170 += tmp_6171;
      tmp_6169 += (Conj(ZDX(gI2,3 + j2))) * tmp_6170;
   }
   tmp_6168 += tmp_6169;
   tmp_6167 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO2)*MuPr) *
      tmp_6168;
   std::complex<double> tmp_6172;
   std::complex<double> tmp_6173;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6174;
      std::complex<double> tmp_6175;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6175 += Conj(gD(j1,j2))*ZD(gI1,j1);
      }
      tmp_6174 += tmp_6175;
      tmp_6173 += (Conj(ZDX(gI2,3 + j2))) * tmp_6174;
   }
   tmp_6172 += tmp_6173;
   tmp_6167 += (std::complex<double>(0.,0.7071067811865475)*vphi*KroneckerDelta
      (1,gO2)*SigmaL) * tmp_6172;
   std::complex<double> tmp_6176;
   std::complex<double> tmp_6177;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6178;
      std::complex<double> tmp_6179;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6179 += Conj(TgD(j1,j2))*ZD(gI1,j1);
      }
      tmp_6178 += tmp_6179;
      tmp_6177 += (Conj(ZDX(gI2,3 + j2))) * tmp_6178;
   }
   tmp_6176 += tmp_6177;
   tmp_6167 += (std::complex<double>(0,1)*KroneckerDelta(0,gO2)) * tmp_6176;
   std::complex<double> tmp_6180;
   std::complex<double> tmp_6181;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6182;
      std::complex<double> tmp_6183;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6183 += Conj(gD(j1,j2))*Yd(j1,j1)*ZD(gI1,3 + j1);
      }
      tmp_6182 += tmp_6183;
      tmp_6181 += (Conj(ZDX(gI2,3 + j2))) * tmp_6182;
   }
   tmp_6180 += tmp_6181;
   tmp_6167 += (std::complex<double>(0.,0.7071067811865475)*vd*KroneckerDelta(0
      ,gO2)) * tmp_6180;
   std::complex<double> tmp_6184;
   std::complex<double> tmp_6185;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6186;
      std::complex<double> tmp_6187;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6187 += Conj(gD(j2,j1))*Conj(ZDX(gI2,j1))*Kappa(j1,j1);
      }
      tmp_6186 += tmp_6187;
      tmp_6185 += (ZD(gI1,j2)) * tmp_6186;
   }
   tmp_6184 += tmp_6185;
   tmp_6167 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(0
      ,gO2)) * tmp_6184;
   result += (std::complex<double>(0,-1)) * tmp_6167;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHp0conjUSHp0conjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6188;
   std::complex<double> tmp_6189;
   std::complex<double> tmp_6190;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6190 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6189 += tmp_6190;
   tmp_6188 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6189;
   std::complex<double> tmp_6191;
   std::complex<double> tmp_6192;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6192 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6191 += tmp_6192;
   tmp_6188 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6191;
   std::complex<double> tmp_6193;
   std::complex<double> tmp_6194;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6194 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6193 += tmp_6194;
   tmp_6188 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6193;
   std::complex<double> tmp_6195;
   std::complex<double> tmp_6196;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6196 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6195 += tmp_6196;
   tmp_6188 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6195;
   std::complex<double> tmp_6197;
   std::complex<double> tmp_6198;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6198 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6197 += tmp_6198;
   tmp_6188 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6197;
   std::complex<double> tmp_6199;
   std::complex<double> tmp_6200;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6200 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6199 += tmp_6200;
   tmp_6188 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6199;
   std::complex<double> tmp_6201;
   std::complex<double> tmp_6202;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6202 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6201 += tmp_6202;
   tmp_6188 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6201;
   std::complex<double> tmp_6203;
   std::complex<double> tmp_6204;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6204 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6203 += tmp_6204;
   tmp_6188 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6203;
   std::complex<double> tmp_6205;
   std::complex<double> tmp_6206;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6206 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6205 += tmp_6206;
   tmp_6188 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6205;
   std::complex<double> tmp_6207;
   std::complex<double> tmp_6208;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6208 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6207 += tmp_6208;
   tmp_6188 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6207;
   std::complex<double> tmp_6209;
   std::complex<double> tmp_6210;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6210 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6209 += tmp_6210;
   tmp_6188 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6209;
   std::complex<double> tmp_6211;
   std::complex<double> tmp_6212;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6212 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6211 += tmp_6212;
   tmp_6188 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6211;
   std::complex<double> tmp_6213;
   std::complex<double> tmp_6214;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6214 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6213 += tmp_6214;
   tmp_6188 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6213;
   std::complex<double> tmp_6215;
   std::complex<double> tmp_6216;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6216 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6215 += tmp_6216;
   tmp_6188 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6215;
   result += (std::complex<double>(0,-1)) * tmp_6188;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0VZSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHp0(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0VZpSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHp0(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHp0(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHp0(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHp0conjVWmSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHpp(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppVZVZ(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()
      )) - 2*Cos(ThetaW())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()
      ) + 3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*
      Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + g1p*(2.449489742783178*g1*Sin(
      ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppVZpVZp(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.1*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*(-4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(
      ThetaW())*Sin(ThetaWp()) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(
      Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp())) + Cos(ThetaW())*(3.1622776601683795*g1p*g2*Sin(2*ThetaWp()) -
      7.745966692414834*g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjVWmVWm(unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result = 0.5*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) + KroneckerDelta(1
      ,gO1)*KroneckerDelta(1,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjHpmHpm(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*(Conj(ZP(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) + 5*
      Sqr(g2))*ZP(gI1,0) - Conj(ZP(gI2,1))*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*ZP
      (gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSHp0SHp0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(UHp0(gI2,0))*(KroneckerDelta(0,gO1)*KroneckerDelta(0,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) + KroneckerDelta(1,gO1
      )*(KroneckerDelta(1,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,0) +
      10*KroneckerDelta(0,gO2)*(-2*AbsSqr(SigmaL) + Sqr(g2))*UHp0(gI1,1)))) -
      Conj(UHp0(gI2,1))*(KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*(3*Sqr(g1) +
      2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,1) + KroneckerDelta(0,gO1)*(10*
      KroneckerDelta(1,gO2)*(-2*AbsSqr(SigmaL) + Sqr(g2))*UHp0(gI1,0) +
      KroneckerDelta(0,gO2)*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*UHp0(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSHppSHpp(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHpp(gI2,1))*(-2*KroneckerDelta(1,gO1)*KroneckerDelta(1,
      gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*UHpp(gI1,1) + KroneckerDelta(0,gO1
      )*(-20*AbsSqr(SigmaL) + 3*Sqr(g1) + 2*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(
      1,gO2)*UHpp(gI1,0) + KroneckerDelta(0,gO2)*UHpp(gI1,1))) + Conj(UHpp(gI2,0))
      *(-2*KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*(3*Sqr(g1) + 2*Sqr(g1p) + 5
      *Sqr(g2))*UHpp(gI1,0) + KroneckerDelta(1,gO1)*(-20*AbsSqr(SigmaL) + 3*Sqr(g1
      ) + 2*Sqr(g1p) + 5*Sqr(g2))*(KroneckerDelta(1,gO2)*UHpp(gI1,0) +
      KroneckerDelta(0,gO2)*UHpp(gI1,1))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppSHp0Hpm(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.35355339059327373*(vd*Conj(ZP(gI2,0)) + vu*Conj(ZP(gI2,1)))*(
      Conj(UHp0(gI1,0))*KroneckerDelta(0,gO2) + Conj(UHp0(gI1,1))*KroneckerDelta(1
      ,gO2))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppChiPChaPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)*ZNp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppChiPChaPL(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*Conj(ZNp(gI1,0))*KroneckerDelta(0,gO1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppSHppAh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*(-(Conj(Sigmax)*Conj(UHpp(gI1,0))*
      KroneckerDelta(1,gO2)*SigmaL*(vsb*ZA(gI2,2) + vs*ZA(gI2,3))) + (
      1.4142135623730951*Conj(TSigmaL)*Conj(UHpp(gI1,1))*KroneckerDelta(0,gO2) -
      1.4142135623730951*Conj(MuPr)*(Conj(UHpp(gI1,0))*KroneckerDelta(0,gO2) +
      Conj(UHpp(gI1,1))*KroneckerDelta(1,gO2))*SigmaL + Conj(UHpp(gI1,0))*
      KroneckerDelta(1,gO2)*(1.4142135623730951*Conj(MuPhi)*SigmaL + 2*vphi*Conj(
      KappaPr)*SigmaL - 1.4142135623730951*TSigmaL))*ZA(gI2,4) + Conj(SigmaL)*(
      1.4142135623730951*Conj(UHpp(gI1,0))*KroneckerDelta(0,gO2)*MuPr*ZA(gI2,4) +
      Conj(UHpp(gI1,1))*(1.4142135623730951*KroneckerDelta(1,gO2)*MuPr*ZA(gI2,4) +
      KroneckerDelta(0,gO2)*(vsb*Sigmax*ZA(gI2,2) + vs*Sigmax*ZA(gI2,3) - (
      1.4142135623730951*MuPhi + 2*vphi*KappaPr)*ZA(gI2,4)))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppSHpphh(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(UHpp(gI1,1))*(14.142135623730951*Conj(TSigmaL)*Conj(ZH(
      gI2,4))*KroneckerDelta(0,gO2) - 10*Conj(SigmaL)*(vsb*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*Sigmax + vs*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*
      Sigmax - Conj(ZH(gI2,4))*(KroneckerDelta(0,gO2)*(1.4142135623730951*MuPhi +
      2*vphi*KappaPr) + KroneckerDelta(1,gO2)*(1.4142135623730951*MuPr - 2*vphi*
      SigmaL))) + KroneckerDelta(1,gO2)*(14.142135623730951*Conj(MuPr)*Conj(ZH(gI2
      ,4))*SigmaL + QS*vs*Conj(ZH(gI2,2))*Sqr(g1p) - QS*vsb*Conj(ZH(gI2,3))*Sqr(
      g1p) + vd*Conj(ZH(gI2,0))*(3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2)) + vu*Conj(ZH(
      gI2,1))*(-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2)))) + Conj(UHpp(gI1,0))*(-20*
      vphi*AbsSqr(SigmaL)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2) +
      14.142135623730951*Conj(SigmaL)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*MuPr +
      14.142135623730951*Conj(MuPr)*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*SigmaL
      - 10*vsb*Conj(Sigmax)*Conj(ZH(gI2,2))*KroneckerDelta(1,gO2)*SigmaL - 10*vs*
      Conj(Sigmax)*Conj(ZH(gI2,3))*KroneckerDelta(1,gO2)*SigmaL +
      14.142135623730951*Conj(MuPhi)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*SigmaL
      + 20*vphi*Conj(KappaPr)*Conj(ZH(gI2,4))*KroneckerDelta(1,gO2)*SigmaL - QS*vs
      *Conj(ZH(gI2,2))*KroneckerDelta(0,gO2)*Sqr(g1p) + QS*vsb*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO2)*Sqr(g1p) + vu*Conj(ZH(gI2,1))*KroneckerDelta(0,gO2)*(3
      *Sqr(g1) + 2*Sqr(g1p) - 5*Sqr(g2)) + vd*Conj(ZH(gI2,0))*KroneckerDelta(0,gO2
      )*(-3*Sqr(g1) + 3*Sqr(g1p) + 5*Sqr(g2)) + 14.142135623730951*Conj(ZH(gI2,4))
      *KroneckerDelta(1,gO2)*TSigmaL));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSvSv(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.05*(KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta
      (1,gO1)*KroneckerDelta(1,gO2))*KroneckerDelta(gI1,gI2)*(3*Sqr(g1) + 2*Sqr(
      g1p) - 5*Sqr(g2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppbarFuFDXPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6217;
   std::complex<double> tmp_6218;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6219;
      std::complex<double> tmp_6220;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6220 += Conj(gD(j1,j2))*ZUL(gI1,j1);
      }
      tmp_6219 += tmp_6220;
      tmp_6218 += (ZDXR(gI2,j2)) * tmp_6219;
   }
   tmp_6217 += tmp_6218;
   result += (-KroneckerDelta(0,gO2)) * tmp_6217;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHppbarFuFDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppFeChiIPR(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6221;
   std::complex<double> tmp_6222;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6223;
      std::complex<double> tmp_6224;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6224 += Conj(hE(j1,j2))*ZER(gI1,j1);
      }
      tmp_6223 += tmp_6224;
      tmp_6222 += (ZNI(gI2,j2)) * tmp_6223;
   }
   tmp_6221 += tmp_6222;
   result += (-KroneckerDelta(0,gO2)) * tmp_6221;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjUSHppFeChiIPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSHIPMSHIPM(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6225;
   std::complex<double> tmp_6226;
   std::complex<double> tmp_6227;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6227 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6226 += tmp_6227;
   tmp_6225 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6226;
   std::complex<double> tmp_6228;
   std::complex<double> tmp_6229;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6229 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6228 += tmp_6229;
   tmp_6225 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6228;
   std::complex<double> tmp_6230;
   std::complex<double> tmp_6231;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6231 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6230 += tmp_6231;
   tmp_6225 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6230;
   std::complex<double> tmp_6232;
   std::complex<double> tmp_6233;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6233 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6232 += tmp_6233;
   tmp_6225 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6232;
   std::complex<double> tmp_6234;
   std::complex<double> tmp_6235;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6235 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6234 += tmp_6235;
   tmp_6225 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6234;
   std::complex<double> tmp_6236;
   std::complex<double> tmp_6237;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6237 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6236 += tmp_6237;
   tmp_6225 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6236;
   std::complex<double> tmp_6238;
   std::complex<double> tmp_6239;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6239 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6238 += tmp_6239;
   tmp_6225 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6238;
   std::complex<double> tmp_6240;
   std::complex<double> tmp_6241;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6241 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6240 += tmp_6241;
   tmp_6225 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6240;
   std::complex<double> tmp_6242;
   std::complex<double> tmp_6243;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6243 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6242 += tmp_6243;
   tmp_6225 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6242;
   std::complex<double> tmp_6244;
   std::complex<double> tmp_6245;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6245 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6244 += tmp_6245;
   tmp_6225 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6244;
   std::complex<double> tmp_6246;
   std::complex<double> tmp_6247;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6247 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6246 += tmp_6247;
   tmp_6225 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6246;
   std::complex<double> tmp_6248;
   std::complex<double> tmp_6249;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6249 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6248 += tmp_6249;
   tmp_6225 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6248;
   result += (std::complex<double>(0,-1)) * tmp_6225;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppAhAh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(0,gO1)*(KroneckerDelta(0,gO2)*((-3*Sqr(g1) + 3
      *Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2,0) + (3*Sqr(g1) + 2*Sqr(g1p) - 5*Sqr
      (g2))*ZA(gI1,1)*ZA(gI2,1) - QS*Sqr(g1p)*ZA(gI1,2)*ZA(gI2,2) + QS*Sqr(g1p)*ZA
      (gI1,3)*ZA(gI2,3) - 20*AbsSqr(SigmaL)*ZA(gI1,4)*ZA(gI2,4)) + 10*
      KroneckerDelta(1,gO2)*SigmaL*(Conj(Sigmax)*(ZA(gI1,3)*ZA(gI2,2) + ZA(gI1,2)*
      ZA(gI2,3)) - 2*Conj(KappaPr)*ZA(gI1,4)*ZA(gI2,4))) + KroneckerDelta(1,gO1)*(
      KroneckerDelta(1,gO2)*((3*Sqr(g1) - 3*Sqr(g1p) - 5*Sqr(g2))*ZA(gI1,0)*ZA(gI2
      ,0) + (-3*Sqr(g1) - 2*Sqr(g1p) + 5*Sqr(g2))*ZA(gI1,1)*ZA(gI2,1) + QS*Sqr(g1p
      )*ZA(gI1,2)*ZA(gI2,2) - QS*Sqr(g1p)*ZA(gI1,3)*ZA(gI2,3) - 20*AbsSqr(SigmaL)*
      ZA(gI1,4)*ZA(gI2,4)) + 10*Conj(SigmaL)*KroneckerDelta(0,gO2)*(Sigmax*ZA(gI1,
      3)*ZA(gI2,2) + Sigmax*ZA(gI1,2)*ZA(gI2,3) - 2*KappaPr*ZA(gI1,4)*ZA(gI2,4))))
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHpphhhh(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*AbsSqr(SigmaL)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - 20*AbsSqr(SigmaL)*Conj(ZH(gI1,
      4))*Conj(ZH(gI2,4))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2) + 20*Conj(
      SigmaL)*Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO2)*KroneckerDelta
      (1,gO1)*KappaPr - 10*Conj(SigmaL)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*
      KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax - 10*Conj(SigmaL)*Conj(ZH
      (gI1,2))*Conj(ZH(gI2,3))*KroneckerDelta(0,gO2)*KroneckerDelta(1,gO1)*Sigmax
      - 10*Conj(Sigmax)*Conj(ZH(gI1,3))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(1,gO2)*SigmaL - 10*Conj(Sigmax)*Conj(ZH(gI1,2))*Conj(ZH(gI2,3
      ))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*SigmaL + 20*Conj(KappaPr)*
      Conj(ZH(gI1,4))*Conj(ZH(gI2,4))*KroneckerDelta(0,gO1)*KroneckerDelta(1,gO2)*
      SigmaL - QS*Conj(ZH(gI1,2))*Conj(ZH(gI2,2))*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p) + QS*Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2)*Sqr(g1p) + QS*Conj(ZH(gI1,2))*
      Conj(ZH(gI2,2))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*Sqr(g1p) - QS*
      Conj(ZH(gI1,3))*Conj(ZH(gI2,3))*KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2)*
      Sqr(g1p) - Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2) - KroneckerDelta(1,gO1)*KroneckerDelta(1,gO2))*(3*Sqr(
      g1) - 3*Sqr(g1p) - 5*Sqr(g2)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(
      KroneckerDelta(0,gO1)*KroneckerDelta(0,gO2) - KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2))*(3*Sqr(g1) + 2*Sqr(g1p) - 5*Sqr(g2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSdSd(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6250;
   std::complex<double> tmp_6251;
   std::complex<double> tmp_6252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6252 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6251 += tmp_6252;
   tmp_6250 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6251;
   std::complex<double> tmp_6253;
   std::complex<double> tmp_6254;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6254 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6253 += tmp_6254;
   tmp_6250 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6253;
   std::complex<double> tmp_6255;
   std::complex<double> tmp_6256;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6256 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6255 += tmp_6256;
   tmp_6250 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6255;
   std::complex<double> tmp_6257;
   std::complex<double> tmp_6258;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6258 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6257 += tmp_6258;
   tmp_6250 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6257;
   std::complex<double> tmp_6259;
   std::complex<double> tmp_6260;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6260 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6259 += tmp_6260;
   tmp_6250 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6259;
   std::complex<double> tmp_6261;
   std::complex<double> tmp_6262;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6262 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6261 += tmp_6262;
   tmp_6250 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6261;
   std::complex<double> tmp_6263;
   std::complex<double> tmp_6264;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6264 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6263 += tmp_6264;
   tmp_6250 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6263;
   std::complex<double> tmp_6265;
   std::complex<double> tmp_6266;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6266 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6265 += tmp_6266;
   tmp_6250 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6265;
   std::complex<double> tmp_6267;
   std::complex<double> tmp_6268;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6268 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6267 += tmp_6268;
   tmp_6250 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6267;
   std::complex<double> tmp_6269;
   std::complex<double> tmp_6270;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6270 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6269 += tmp_6270;
   tmp_6250 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6269;
   result += (std::complex<double>(0,-1)) * tmp_6250;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSDXSDX(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6271;
   std::complex<double> tmp_6272;
   std::complex<double> tmp_6273;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6273 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6272 += tmp_6273;
   tmp_6271 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6272;
   std::complex<double> tmp_6274;
   std::complex<double> tmp_6275;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6275 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6274 += tmp_6275;
   tmp_6271 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6274;
   std::complex<double> tmp_6276;
   std::complex<double> tmp_6277;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6277 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6276 += tmp_6277;
   tmp_6271 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6276;
   std::complex<double> tmp_6278;
   std::complex<double> tmp_6279;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6279 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6278 += tmp_6279;
   tmp_6271 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6278;
   std::complex<double> tmp_6280;
   std::complex<double> tmp_6281;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6281 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6280 += tmp_6281;
   tmp_6271 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6280;
   std::complex<double> tmp_6282;
   std::complex<double> tmp_6283;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6283 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6282 += tmp_6283;
   tmp_6271 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6282;
   std::complex<double> tmp_6284;
   std::complex<double> tmp_6285;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6285 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6284 += tmp_6285;
   tmp_6271 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6284;
   std::complex<double> tmp_6286;
   std::complex<double> tmp_6287;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6287 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6286 += tmp_6287;
   tmp_6271 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6286;
   std::complex<double> tmp_6288;
   std::complex<double> tmp_6289;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6290;
      std::complex<double> tmp_6291;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6292;
         std::complex<double> tmp_6293;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6293 += Conj(gD(j1,j3))*gD(j1,j2);
         }
         tmp_6292 += tmp_6293;
         tmp_6291 += (ZDX(gI1,3 + j2)) * tmp_6292;
      }
      tmp_6290 += tmp_6291;
      tmp_6289 += (Conj(ZDX(gI2,3 + j3))) * tmp_6290;
   }
   tmp_6288 += tmp_6289;
   tmp_6271 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6288;
   result += (std::complex<double>(0,-1)) * tmp_6271;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSeSe(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6294;
   std::complex<double> tmp_6295;
   std::complex<double> tmp_6296;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6296 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6295 += tmp_6296;
   tmp_6294 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6295;
   std::complex<double> tmp_6297;
   std::complex<double> tmp_6298;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6298 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6297 += tmp_6298;
   tmp_6294 += (std::complex<double>(0,-0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6297;
   std::complex<double> tmp_6299;
   std::complex<double> tmp_6300;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6300 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6299 += tmp_6300;
   tmp_6294 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6299;
   std::complex<double> tmp_6301;
   std::complex<double> tmp_6302;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6302 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6301 += tmp_6302;
   tmp_6294 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6301;
   std::complex<double> tmp_6303;
   std::complex<double> tmp_6304;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6304 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6303 += tmp_6304;
   tmp_6294 += (std::complex<double>(0,0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6303;
   std::complex<double> tmp_6305;
   std::complex<double> tmp_6306;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6306 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6305 += tmp_6306;
   tmp_6294 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6305;
   std::complex<double> tmp_6307;
   std::complex<double> tmp_6308;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6308 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6307 += tmp_6308;
   tmp_6294 += (std::complex<double>(0,0.3)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6307;
   std::complex<double> tmp_6309;
   std::complex<double> tmp_6310;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6310 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6309 += tmp_6310;
   tmp_6294 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6309;
   std::complex<double> tmp_6311;
   std::complex<double> tmp_6312;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6312 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6311 += tmp_6312;
   tmp_6294 += (std::complex<double>(0,-0.3)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6311;
   std::complex<double> tmp_6313;
   std::complex<double> tmp_6314;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6314 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6313 += tmp_6314;
   tmp_6294 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6313;
   std::complex<double> tmp_6315;
   std::complex<double> tmp_6316;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6317;
      std::complex<double> tmp_6318;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6319;
         std::complex<double> tmp_6320;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_6320 += Conj(hE(j3,j1))*hE(j2,j1);
         }
         tmp_6319 += tmp_6320;
         tmp_6318 += (ZE(gI1,3 + j2)) * tmp_6319;
      }
      tmp_6317 += tmp_6318;
      tmp_6316 += (Conj(ZE(gI2,3 + j3))) * tmp_6317;
   }
   tmp_6315 += tmp_6316;
   tmp_6294 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6315;
   result += (std::complex<double>(0,-1)) * tmp_6294;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSuSu(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6321;
   std::complex<double> tmp_6322;
   std::complex<double> tmp_6323;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6323 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6322 += tmp_6323;
   tmp_6321 += (std::complex<double>(0,0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6322;
   std::complex<double> tmp_6324;
   std::complex<double> tmp_6325;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6325 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6324 += tmp_6325;
   tmp_6321 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6324;
   std::complex<double> tmp_6326;
   std::complex<double> tmp_6327;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6327 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6326 += tmp_6327;
   tmp_6321 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6326;
   std::complex<double> tmp_6328;
   std::complex<double> tmp_6329;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6329 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6328 += tmp_6329;
   tmp_6321 += (std::complex<double>(0,-0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6328;
   std::complex<double> tmp_6330;
   std::complex<double> tmp_6331;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6331 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6330 += tmp_6331;
   tmp_6321 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6330;
   std::complex<double> tmp_6332;
   std::complex<double> tmp_6333;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6333 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6332 += tmp_6333;
   tmp_6321 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6332;
   std::complex<double> tmp_6334;
   std::complex<double> tmp_6335;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6335 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6334 += tmp_6335;
   tmp_6321 += (std::complex<double>(0,-0.2)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6334;
   std::complex<double> tmp_6336;
   std::complex<double> tmp_6337;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6337 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6336 += tmp_6337;
   tmp_6321 += (std::complex<double>(0,-0.05)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6336;
   std::complex<double> tmp_6338;
   std::complex<double> tmp_6339;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6339 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6338 += tmp_6339;
   tmp_6321 += (std::complex<double>(0,0.2)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6338;
   std::complex<double> tmp_6340;
   std::complex<double> tmp_6341;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6341 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6340 += tmp_6341;
   tmp_6321 += (std::complex<double>(0,0.05)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6340;
   std::complex<double> tmp_6342;
   std::complex<double> tmp_6343;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6344;
      std::complex<double> tmp_6345;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6346;
         std::complex<double> tmp_6347;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6347 += Conj(gD(j3,j1))*gD(j2,j1);
         }
         tmp_6346 += tmp_6347;
         tmp_6345 += (Conj(ZU(gI2,j2))) * tmp_6346;
      }
      tmp_6344 += tmp_6345;
      tmp_6343 += (ZU(gI1,j3)) * tmp_6344;
   }
   tmp_6342 += tmp_6343;
   tmp_6321 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6342;
   result += (std::complex<double>(0,-1)) * tmp_6321;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppconjSuSDX(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6348;
   std::complex<double> tmp_6349;
   std::complex<double> tmp_6350;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6351;
      std::complex<double> tmp_6352;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6352 += Conj(gD(j1,j2))*ZU(gI1,j1);
      }
      tmp_6351 += tmp_6352;
      tmp_6350 += (Conj(ZDX(gI2,3 + j2))) * tmp_6351;
   }
   tmp_6349 += tmp_6350;
   tmp_6348 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO2)*MuPr) *
      tmp_6349;
   std::complex<double> tmp_6353;
   std::complex<double> tmp_6354;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6355;
      std::complex<double> tmp_6356;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6356 += Conj(gD(j1,j2))*ZU(gI1,j1);
      }
      tmp_6355 += tmp_6356;
      tmp_6354 += (Conj(ZDX(gI2,3 + j2))) * tmp_6355;
   }
   tmp_6353 += tmp_6354;
   tmp_6348 += (std::complex<double>(0.,0.7071067811865475)*vphi*KroneckerDelta
      (1,gO2)*SigmaL) * tmp_6353;
   std::complex<double> tmp_6357;
   std::complex<double> tmp_6358;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6359;
      std::complex<double> tmp_6360;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6360 += Conj(TgD(j1,j2))*ZU(gI1,j1);
      }
      tmp_6359 += tmp_6360;
      tmp_6358 += (Conj(ZDX(gI2,3 + j2))) * tmp_6359;
   }
   tmp_6357 += tmp_6358;
   tmp_6348 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO2)) * tmp_6357;
   std::complex<double> tmp_6361;
   std::complex<double> tmp_6362;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6363;
      std::complex<double> tmp_6364;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6364 += Conj(gD(j1,j2))*Yu(j1,j1)*ZU(gI1,3 + j1);
      }
      tmp_6363 += tmp_6364;
      tmp_6362 += (Conj(ZDX(gI2,3 + j2))) * tmp_6363;
   }
   tmp_6361 += tmp_6362;
   tmp_6348 += (std::complex<double>(0.,-0.7071067811865475)*vu*KroneckerDelta(
      0,gO2)) * tmp_6361;
   std::complex<double> tmp_6365;
   std::complex<double> tmp_6366;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6367;
      std::complex<double> tmp_6368;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6368 += Conj(gD(j2,j1))*Conj(ZDX(gI2,j1))*Kappa(j1,j1);
      }
      tmp_6367 += tmp_6368;
      tmp_6366 += (ZU(gI1,j2)) * tmp_6367;
   }
   tmp_6365 += tmp_6366;
   tmp_6348 += (std::complex<double>(0.,-0.7071067811865475)*vs*KroneckerDelta(
      0,gO2)) * tmp_6365;
   result += (std::complex<double>(0,-1)) * tmp_6348;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUSHppconjUSHppconjSHI0SHI0(unsigned gO1, unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6369;
   std::complex<double> tmp_6370;
   std::complex<double> tmp_6371;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6371 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6370 += tmp_6371;
   tmp_6369 += (std::complex<double>(0,-0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6370;
   std::complex<double> tmp_6372;
   std::complex<double> tmp_6373;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6373 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6372 += tmp_6373;
   tmp_6369 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6372;
   std::complex<double> tmp_6374;
   std::complex<double> tmp_6375;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6375 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6374 += tmp_6375;
   tmp_6369 += (std::complex<double>(0,0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6374;
   std::complex<double> tmp_6376;
   std::complex<double> tmp_6377;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6377 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6376 += tmp_6377;
   tmp_6369 += (std::complex<double>(0,0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6376;
   std::complex<double> tmp_6378;
   std::complex<double> tmp_6379;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6379 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6378 += tmp_6379;
   tmp_6369 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6378;
   std::complex<double> tmp_6380;
   std::complex<double> tmp_6381;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6381 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6380 += tmp_6381;
   tmp_6369 += (std::complex<double>(0,-0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6380;
   std::complex<double> tmp_6382;
   std::complex<double> tmp_6383;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6383 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6382 += tmp_6383;
   tmp_6369 += (std::complex<double>(0,0.15)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1)) * tmp_6382;
   std::complex<double> tmp_6384;
   std::complex<double> tmp_6385;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6385 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6384 += tmp_6385;
   tmp_6369 += (std::complex<double>(0,0.1)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6384;
   std::complex<double> tmp_6386;
   std::complex<double> tmp_6387;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6387 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6386 += tmp_6387;
   tmp_6369 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g2)) * tmp_6386;
   std::complex<double> tmp_6388;
   std::complex<double> tmp_6389;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6389 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6388 += tmp_6389;
   tmp_6369 += (std::complex<double>(0,-0.15)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1)) * tmp_6388;
   std::complex<double> tmp_6390;
   std::complex<double> tmp_6391;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6391 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6390 += tmp_6391;
   tmp_6369 += (std::complex<double>(0,-0.1)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6390;
   std::complex<double> tmp_6392;
   std::complex<double> tmp_6393;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6393 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6392 += tmp_6393;
   tmp_6369 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g2)) * tmp_6392;
   std::complex<double> tmp_6394;
   std::complex<double> tmp_6395;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6395 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6394 += tmp_6395;
   tmp_6369 += (std::complex<double>(0,-0.25)*KroneckerDelta(0,gO1)*
      KroneckerDelta(0,gO2)*Sqr(g1p)) * tmp_6394;
   std::complex<double> tmp_6396;
   std::complex<double> tmp_6397;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6397 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6396 += tmp_6397;
   tmp_6369 += (std::complex<double>(0,0.25)*KroneckerDelta(1,gO1)*
      KroneckerDelta(1,gO2)*Sqr(g1p)) * tmp_6396;
   std::complex<double> tmp_6398;
   std::complex<double> tmp_6399;
   for (unsigned j3 = 0; j3 < 2; ++j3) {
      std::complex<double> tmp_6400;
      std::complex<double> tmp_6401;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         std::complex<double> tmp_6402;
         std::complex<double> tmp_6403;
         for (unsigned j1 = 0; j1 < 3; ++j1) {
            tmp_6403 += Conj(hE(j1,j3))*hE(j1,j2);
         }
         tmp_6402 += tmp_6403;
         tmp_6401 += (Conj(UHI0(gI2,j2))) * tmp_6402;
      }
      tmp_6400 += tmp_6401;
      tmp_6399 += (UHI0(gI1,j3)) * tmp_6400;
   }
   tmp_6398 += tmp_6399;
   tmp_6369 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO1)*KroneckerDelta
      (0,gO2)) * tmp_6398;
   result += (std::complex<double>(0,-1)) * tmp_6369;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppconjSHI0Se(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6404;
   std::complex<double> tmp_6405;
   std::complex<double> tmp_6406;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6407;
      std::complex<double> tmp_6408;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6408 += Conj(hE(j1,j2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_6407 += tmp_6408;
      tmp_6406 += (UHI0(gI1,j2)) * tmp_6407;
   }
   tmp_6405 += tmp_6406;
   tmp_6404 += (std::complex<double>(0,-1)*KroneckerDelta(1,gO2)*MuPr) *
      tmp_6405;
   std::complex<double> tmp_6409;
   std::complex<double> tmp_6410;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6411;
      std::complex<double> tmp_6412;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6412 += Conj(hE(j1,j2))*Conj(ZE(gI2,3 + j1));
      }
      tmp_6411 += tmp_6412;
      tmp_6410 += (UHI0(gI1,j2)) * tmp_6411;
   }
   tmp_6409 += tmp_6410;
   tmp_6404 += (std::complex<double>(0.,0.7071067811865475)*vphi*KroneckerDelta
      (1,gO2)*SigmaL) * tmp_6409;
   std::complex<double> tmp_6413;
   std::complex<double> tmp_6414;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6415;
      std::complex<double> tmp_6416;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6416 += Conj(ZE(gI2,3 + j1))*Conj(ThE(j1,j2));
      }
      tmp_6415 += tmp_6416;
      tmp_6414 += (UHI0(gI1,j2)) * tmp_6415;
   }
   tmp_6413 += tmp_6414;
   tmp_6404 += (std::complex<double>(0,-1)*KroneckerDelta(0,gO2)) * tmp_6413;
   std::complex<double> tmp_6417;
   std::complex<double> tmp_6418;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6419;
      std::complex<double> tmp_6420;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6420 += Conj(hE(j1,j2))*Conj(ZE(gI2,j1))*Ye(j1,j1);
      }
      tmp_6419 += tmp_6420;
      tmp_6418 += (UHI0(gI1,j2)) * tmp_6419;
   }
   tmp_6417 += tmp_6418;
   tmp_6404 += (std::complex<double>(0.,-0.7071067811865475)*vd*KroneckerDelta(
      0,gO2)) * tmp_6417;
   std::complex<double> tmp_6421;
   std::complex<double> tmp_6422;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_6423;
      std::complex<double> tmp_6424;
      for (unsigned j1 = 0; j1 < 2; ++j1) {
         tmp_6424 += Conj(hE(j2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
      }
      tmp_6423 += tmp_6424;
      tmp_6422 += (Conj(ZE(gI2,3 + j2))) * tmp_6423;
   }
   tmp_6421 += tmp_6422;
   tmp_6404 += (std::complex<double>(0.,0.7071067811865475)*vs*KroneckerDelta(0
      ,gO2)) * tmp_6421;
   result += (std::complex<double>(0,-1)) * tmp_6404;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppSHI0Se(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6425;
   std::complex<double> tmp_6426;
   for (unsigned j3 = 0; j3 < 3; ++j3) {
      std::complex<double> tmp_6427;
      std::complex<double> tmp_6428;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         std::complex<double> tmp_6429;
         std::complex<double> tmp_6430;
         for (unsigned j1 = 0; j1 < 2; ++j1) {
            tmp_6430 += Conj(hE(j3,j1))*fu(j2,j1);
         }
         tmp_6429 += tmp_6430;
         tmp_6428 += (Conj(UHI0(gI1,4 + j2))) * tmp_6429;
      }
      tmp_6427 += tmp_6428;
      tmp_6426 += (Conj(ZE(gI2,3 + j3))) * tmp_6427;
   }
   tmp_6425 += tmp_6426;
   result += (-0.7071067811865475*vu*KroneckerDelta(0,gO2)) * tmp_6425;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppChiChaPPR(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = Conj(SigmaL)*KroneckerDelta(0,gO2)*ZN(gI1,6) - 0.1*KroneckerDelta(1
      ,gO2)*(5.477225575051661*g1*ZN(gI1,0) + 7.0710678118654755*g2*ZN(gI1,1) -
      4.47213595499958*g1p*ZN(gI1,7));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppChiChaPPL(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = 0.5477225575051661*g1*Conj(ZN(gI1,0))*KroneckerDelta(0,gO1) +
      0.7071067811865475*g2*Conj(ZN(gI1,1))*KroneckerDelta(0,gO1) -
      0.4472135954999579*g1p*Conj(ZN(gI1,7))*KroneckerDelta(0,gO1) + Conj(ZN(gI1,6
      ))*KroneckerDelta(1,gO1)*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppVWmSHp0(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHp0(gI2,0))*KroneckerDelta(0,gO2) -
      Conj(UHp0(gI2,1))*KroneckerDelta(1,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppVPSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppVZSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHpp(gI2,gO2))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjUSHppVZpSHpp(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.31622776601683794*g1p*Conj(UHpp(gI2,gO2))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.5*g2*Conj(UHpp(gI2,gO2))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(UHpp(gI2,gO2))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbargWmgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbargWmCgWmC() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZconjVWmVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarChaPChaPPL() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarChaPChaPPR() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-14.696938456699067*g1*g1p*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp
      ())) + Cos(ThetaW())*(18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()
      ) - 15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*
      Sqr(Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZP(
      gI1,0) + 2*Conj(ZP(gI2,1))*(2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(2*
      ThetaWp()) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(ThetaW
      ())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 2*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZP(gI1,
      1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + g1*
      Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*Sqr(
      Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p*(
      2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp(
      )))))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) - 2*Cos(
      ThetaW())*(3.1622776601683795*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      3.872983346207417*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 3*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + g1p*(2.449489742783178*g1*Sin(ThetaW())
      *Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(ThetaWp()))))*(Conj(UHpp(gI2,0))*UHpp(gI1,
      0) + Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZP(gI1,0) + 2*Conj(ZP(gI2,1))*(-5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZP(gI1,1));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(2*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*UM(gI1,0) +
      Conj(UM(gI2,1))*(g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos
      (ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp()))*UM(gI1,1)
      );

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(2*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Cos(ThetaWp())*UP(gI2,0) +
      Conj(UP(gI1,1))*(g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos
      (ThetaWp())*Sin(ThetaW()) - 0.6324555320336759*g1p*Sin(ThetaWp()))*UP(gI2,1)
      );

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarChaIChaIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(g2*Cos(ThetaW())*Cos(ThetaWp()) -
      0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarChaIChaIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(Conj(ZNp(
      gI2,0))*ZNp(gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(Conj(ZNp(
      gI1,0))*ZNp(gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*g2*Cos(ThetaW()
      )*Sin(2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) +
      3*g1*Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(
      Cos(ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) +
      2*g1p*Sqr(Sin(ThetaWp()))));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.16666666666666666*KroneckerDelta(gI1,gI2)*(3*g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(15.491933384829668*
      g1*Cos(ThetaWp())*Sin(ThetaW()) + 28.460498941515414*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI1,gI2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSHIPMSHIPM(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6431;
   std::complex<double> tmp_6432;
   std::complex<double> tmp_6433;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6433 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6432 += tmp_6433;
   tmp_6431 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6432;
   std::complex<double> tmp_6434;
   std::complex<double> tmp_6435;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6435 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6434 += tmp_6435;
   tmp_6431 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6434;
   std::complex<double> tmp_6436;
   std::complex<double> tmp_6437;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6437 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6436 += tmp_6437;
   tmp_6431 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6436;
   std::complex<double> tmp_6438;
   std::complex<double> tmp_6439;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6439 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6438 += tmp_6439;
   tmp_6431 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6438;
   std::complex<double> tmp_6440;
   std::complex<double> tmp_6441;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6441 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6440 += tmp_6441;
   tmp_6431 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6440;
   std::complex<double> tmp_6442;
   std::complex<double> tmp_6443;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6443 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6442 += tmp_6443;
   tmp_6431 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6442;
   std::complex<double> tmp_6444;
   std::complex<double> tmp_6445;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6445 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6444 += tmp_6445;
   tmp_6431 += (std::complex<double>(0.,0.9486832980505138)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6444;
   std::complex<double> tmp_6446;
   std::complex<double> tmp_6447;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6447 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6446 += tmp_6447;
   tmp_6431 += (std::complex<double>(0.,-0.6324555320336759)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6446;
   std::complex<double> tmp_6448;
   std::complex<double> tmp_6449;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6449 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6448 += tmp_6449;
   tmp_6431 += (std::complex<double>(0.,-0.7348469228349533)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6448;
   std::complex<double> tmp_6450;
   std::complex<double> tmp_6451;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6451 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6450 += tmp_6451;
   tmp_6431 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6450;
   std::complex<double> tmp_6452;
   std::complex<double> tmp_6453;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6453 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6452 += tmp_6453;
   tmp_6431 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6452;
   std::complex<double> tmp_6454;
   std::complex<double> tmp_6455;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6455 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6454 += tmp_6455;
   tmp_6431 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6454;
   result += (std::complex<double>(0,-1)) * tmp_6431;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSHIPMSHIPM(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6456;
   std::complex<double> tmp_6457;
   std::complex<double> tmp_6458;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6458 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6457 += tmp_6458;
   tmp_6456 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_6457
      ;
   std::complex<double> tmp_6459;
   std::complex<double> tmp_6460;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6460 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6459 += tmp_6460;
   tmp_6456 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6459
      ;
   result += (0.5) * tmp_6456;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((-14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW(
      ))*(-18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp())))*ZA(gI1,
      0)*ZA(gI2,0) + 2*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) +
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW()))*
      Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + g1p
      *(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*g1p*Sqr(Sin(
      ThetaWp()))))*ZA(gI1,1)*ZA(gI2,1) + Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp()))*(ZA
      (gI1,2)*ZA(gI2,2) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZhhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) + Conj(ZH(gI1,3))*Conj(ZH(
      gI2,3)))*Sqr(g1p)*Sqr(QS)*Sqr(Sin(ThetaWp())) + Conj(ZH(gI1,0))*Conj(ZH(gI2,
      0))*(-14.696938456699067*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())
      + 10*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp())) + Cos(ThetaW())*(
      -18.973665961010276*g1p*g2*Cos(ThetaWp())*Sin(ThetaWp()) +
      15.491933384829668*g1*g2*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) + 6*Sqr(g1)*Sqr(
      Cos(ThetaWp()))*Sqr(Sin(ThetaW())) + 9*Sqr(g1p)*Sqr(Sin(ThetaWp()))) + 2*
      Conj(ZH(gI1,1))*Conj(ZH(gI2,1))*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin
      (2*ThetaWp()) + g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*
      Sin(ThetaW()))*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp())) + g1p*(2.449489742783178*g1*Sin(ThetaW())*Sin(2*ThetaWp()) + 2*
      g1p*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZhhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*(Conj(ZH(gI1,0))*(g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()))*ZA(gI2,0) - Conj(ZH(gI1,1))*(g2*Cos(
      ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()
      ) + 0.6324555320336759*g1p*Sin(ThetaWp()))*ZA(gI2,1) + 0.31622776601683794*
      g1p*QS*Sin(ThetaWp())*(Conj(ZH(gI1,2))*ZA(gI2,2) - Conj(ZH(gI1,3))*ZA(gI2,3)
      ));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6461;
   std::complex<double> tmp_6462;
   std::complex<double> tmp_6463;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6463 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6462 += tmp_6463;
   tmp_6461 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6462;
   std::complex<double> tmp_6464;
   std::complex<double> tmp_6465;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6465 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6464 += tmp_6465;
   tmp_6461 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6464;
   std::complex<double> tmp_6466;
   std::complex<double> tmp_6467;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6467 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6466 += tmp_6467;
   tmp_6461 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6466;
   std::complex<double> tmp_6468;
   std::complex<double> tmp_6469;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6469 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6468 += tmp_6469;
   tmp_6461 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6468;
   std::complex<double> tmp_6470;
   std::complex<double> tmp_6471;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6471 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6470 += tmp_6471;
   tmp_6461 += (std::complex<double>(0.,-0.31622776601683794)*g1p*g2*Cos(ThetaW
      ())*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6470;
   std::complex<double> tmp_6472;
   std::complex<double> tmp_6473;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6473 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6472 += tmp_6473;
   tmp_6461 += (std::complex<double>(0.,-0.08164965809277262)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6472;
   std::complex<double> tmp_6474;
   std::complex<double> tmp_6475;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6475 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6474 += tmp_6475;
   tmp_6461 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6474;
   std::complex<double> tmp_6476;
   std::complex<double> tmp_6477;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6477 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6476 += tmp_6477;
   tmp_6461 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6476;
   std::complex<double> tmp_6478;
   std::complex<double> tmp_6479;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6479 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6478 += tmp_6479;
   tmp_6461 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6478;
   result += (std::complex<double>(0,-1)) * tmp_6461;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6480;
   std::complex<double> tmp_6481;
   std::complex<double> tmp_6482;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6482 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6481 += tmp_6482;
   tmp_6480 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6481;
   std::complex<double> tmp_6483;
   std::complex<double> tmp_6484;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6484 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6483 += tmp_6484;
   tmp_6480 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6483;
   std::complex<double> tmp_6485;
   std::complex<double> tmp_6486;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6486 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6485 += tmp_6486;
   tmp_6480 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6485;
   std::complex<double> tmp_6487;
   std::complex<double> tmp_6488;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6488 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6487 += tmp_6488;
   tmp_6480 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6487;
   std::complex<double> tmp_6489;
   std::complex<double> tmp_6490;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6490 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6489 += tmp_6490;
   tmp_6480 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6489;
   std::complex<double> tmp_6491;
   std::complex<double> tmp_6492;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6492 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6491 += tmp_6492;
   tmp_6480 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6491;
   result += (std::complex<double>(0,-1)) * tmp_6480;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6493;
   std::complex<double> tmp_6494;
   std::complex<double> tmp_6495;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6495 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6494 += tmp_6495;
   tmp_6493 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6494;
   std::complex<double> tmp_6496;
   std::complex<double> tmp_6497;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6497 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6496 += tmp_6497;
   tmp_6493 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6496;
   std::complex<double> tmp_6498;
   std::complex<double> tmp_6499;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6499 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6498 += tmp_6499;
   tmp_6493 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6498;
   std::complex<double> tmp_6500;
   std::complex<double> tmp_6501;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6501 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6500 += tmp_6501;
   tmp_6493 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6500;
   std::complex<double> tmp_6502;
   std::complex<double> tmp_6503;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6503 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6502 += tmp_6503;
   tmp_6493 += (std::complex<double>(0.,-0.6324555320336759)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6502;
   std::complex<double> tmp_6504;
   std::complex<double> tmp_6505;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6505 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6504 += tmp_6505;
   tmp_6493 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6504;
   std::complex<double> tmp_6506;
   std::complex<double> tmp_6507;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6507 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6506 += tmp_6507;
   tmp_6493 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6506;
   std::complex<double> tmp_6508;
   std::complex<double> tmp_6509;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6509 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6508 += tmp_6509;
   tmp_6493 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6508;
   std::complex<double> tmp_6510;
   std::complex<double> tmp_6511;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6511 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6510 += tmp_6511;
   tmp_6493 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6510;
   result += (std::complex<double>(0,-1)) * tmp_6493;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6512;
   std::complex<double> tmp_6513;
   std::complex<double> tmp_6514;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6514 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6513 += tmp_6514;
   tmp_6512 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6513;
   std::complex<double> tmp_6515;
   std::complex<double> tmp_6516;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6516 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6515 += tmp_6516;
   tmp_6512 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6515;
   std::complex<double> tmp_6517;
   std::complex<double> tmp_6518;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6518 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6517 += tmp_6518;
   tmp_6512 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6517;
   std::complex<double> tmp_6519;
   std::complex<double> tmp_6520;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6520 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6519 += tmp_6520;
   tmp_6512 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Cos(
      ThetaWp()))*Sqr(Sin(ThetaW()))) * tmp_6519;
   std::complex<double> tmp_6521;
   std::complex<double> tmp_6522;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6522 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6521 += tmp_6522;
   tmp_6512 += (std::complex<double>(0.,0.31622776601683794)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6521;
   std::complex<double> tmp_6523;
   std::complex<double> tmp_6524;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6524 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6523 += tmp_6524;
   tmp_6512 += (std::complex<double>(0.,-0.08164965809277262)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6523;
   std::complex<double> tmp_6525;
   std::complex<double> tmp_6526;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6526 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6525 += tmp_6526;
   tmp_6512 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6525;
   std::complex<double> tmp_6527;
   std::complex<double> tmp_6528;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6528 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6527 += tmp_6528;
   tmp_6512 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6527;
   std::complex<double> tmp_6529;
   std::complex<double> tmp_6530;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6530 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6529 += tmp_6530;
   tmp_6512 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6529;
   result += (std::complex<double>(0,-1)) * tmp_6512;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6531;
   std::complex<double> tmp_6532;
   std::complex<double> tmp_6533;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6533 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6532 += tmp_6533;
   tmp_6531 += (2*(0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()))) * tmp_6532;
   std::complex<double> tmp_6534;
   std::complex<double> tmp_6535;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6535 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6534 += tmp_6535;
   tmp_6531 += (-3*g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6534
      ;
   result += (0.16666666666666666) * tmp_6531;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6536;
   std::complex<double> tmp_6537;
   std::complex<double> tmp_6538;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6538 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6537 += tmp_6538;
   tmp_6536 += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6537;
   std::complex<double> tmp_6539;
   std::complex<double> tmp_6540;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6540 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6539 += tmp_6540;
   tmp_6536 += (0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      1.4230249470757708*g1p*Sin(ThetaWp())) * tmp_6539;
   result += (0.3333333333333333) * tmp_6536;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6541;
   std::complex<double> tmp_6542;
   std::complex<double> tmp_6543;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6543 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6542 += tmp_6543;
   tmp_6541 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_6542
      ;
   std::complex<double> tmp_6544;
   std::complex<double> tmp_6545;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6545 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6544 += tmp_6545;
   tmp_6541 += (-2*(-0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      0.15811388300841897*g1p*Sin(ThetaWp()))) * tmp_6544;
   result += (0.5) * tmp_6541;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6546;
   std::complex<double> tmp_6547;
   std::complex<double> tmp_6548;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6548 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6547 += tmp_6548;
   tmp_6546 += (-2*(1.5491933384829668*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      0.4743416490252569*g1p*Sin(ThetaWp()))) * tmp_6547;
   std::complex<double> tmp_6549;
   std::complex<double> tmp_6550;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6550 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6549 += tmp_6550;
   tmp_6546 += (3*g2*Cos(ThetaW())*Cos(ThetaWp()) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6549
      ;
   result += (0.16666666666666666) * tmp_6546;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6551;
   std::complex<double> tmp_6552;
   std::complex<double> tmp_6553;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6553 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6552 += tmp_6553;
   tmp_6551 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6552;
   std::complex<double> tmp_6554;
   std::complex<double> tmp_6555;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6555 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6554 += tmp_6555;
   tmp_6551 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(
      ThetaWp()))) * tmp_6554;
   std::complex<double> tmp_6556;
   std::complex<double> tmp_6557;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6557 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6556 += tmp_6557;
   tmp_6551 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6556;
   std::complex<double> tmp_6558;
   std::complex<double> tmp_6559;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6559 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6558 += tmp_6559;
   tmp_6551 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Cos(ThetaWp()))) * tmp_6558;
   std::complex<double> tmp_6560;
   std::complex<double> tmp_6561;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6561 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6560 += tmp_6561;
   tmp_6551 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6560;
   std::complex<double> tmp_6562;
   std::complex<double> tmp_6563;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6563 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6562 += tmp_6563;
   tmp_6551 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Cos(ThetaWp()))*Sqr(Sin
      (ThetaW()))) * tmp_6562;
   std::complex<double> tmp_6564;
   std::complex<double> tmp_6565;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6565 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6564 += tmp_6565;
   tmp_6551 += (std::complex<double>(0.,-0.9486832980505138)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6564;
   std::complex<double> tmp_6566;
   std::complex<double> tmp_6567;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6567 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6566 += tmp_6567;
   tmp_6551 += (std::complex<double>(0.,0.6324555320336759)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6566;
   std::complex<double> tmp_6568;
   std::complex<double> tmp_6569;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6569 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6568 += tmp_6569;
   tmp_6551 += (std::complex<double>(0.,-0.7348469228349533)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6568;
   std::complex<double> tmp_6570;
   std::complex<double> tmp_6571;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6571 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6570 += tmp_6571;
   tmp_6551 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6570;
   std::complex<double> tmp_6572;
   std::complex<double> tmp_6573;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6573 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6572 += tmp_6573;
   tmp_6551 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6572;
   std::complex<double> tmp_6574;
   std::complex<double> tmp_6575;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6575 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6574 += tmp_6575;
   tmp_6551 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6574;
   std::complex<double> tmp_6576;
   std::complex<double> tmp_6577;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6577 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6576 += tmp_6577;
   tmp_6551 += (std::complex<double>(0,1.25)*Sqr(g1p)*Sqr(Sin(ThetaWp()))) *
      tmp_6576;
   result += (std::complex<double>(0,-1)) * tmp_6551;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6578;
   std::complex<double> tmp_6579;
   std::complex<double> tmp_6580;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6580 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6579 += tmp_6580;
   tmp_6578 += (1.5811388300841898*g1p*Sin(ThetaWp())) * tmp_6579;
   std::complex<double> tmp_6581;
   std::complex<double> tmp_6582;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6582 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6581 += tmp_6582;
   tmp_6578 += (g2*Cos(ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_6581
      ;
   std::complex<double> tmp_6583;
   std::complex<double> tmp_6584;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6584 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6583 += tmp_6584;
   tmp_6578 += (g2*Cos(ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6583
      ;
   result += (0.5) * tmp_6578;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiIChiIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6585;
   std::complex<double> tmp_6586;
   std::complex<double> tmp_6587;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6587 += Conj(ZNI(gI2,4 + j1))*ZNI(gI1,4 + j1);
   }
   tmp_6586 += tmp_6587;
   tmp_6585 += (-1.5811388300841898*g1p*Sin(ThetaWp())) * tmp_6586;
   std::complex<double> tmp_6588;
   std::complex<double> tmp_6589;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6589 += Conj(ZNI(gI2,2 + j1))*ZNI(gI1,2 + j1);
   }
   tmp_6588 += tmp_6589;
   tmp_6585 += (g2*Cos(ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_6588
      ;
   std::complex<double> tmp_6590;
   std::complex<double> tmp_6591;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6591 += Conj(ZNI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_6590 += tmp_6591;
   tmp_6585 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6590
      ;
   result += (0.5) * tmp_6585;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiIChiIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6592;
   std::complex<double> tmp_6593;
   std::complex<double> tmp_6594;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6594 += Conj(ZNI(gI1,4 + j1))*ZNI(gI2,4 + j1);
   }
   tmp_6593 += tmp_6594;
   tmp_6592 += (1.5811388300841898*g1p*Sin(ThetaWp())) * tmp_6593;
   std::complex<double> tmp_6595;
   std::complex<double> tmp_6596;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6596 += Conj(ZNI(gI1,2 + j1))*ZNI(gI2,2 + j1);
   }
   tmp_6595 += tmp_6596;
   tmp_6592 += (-(g2*Cos(ThetaW())*Cos(ThetaWp())) - 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 0.6324555320336759*g1p*Sin(ThetaWp())) * tmp_6595
      ;
   std::complex<double> tmp_6597;
   std::complex<double> tmp_6598;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6598 += Conj(ZNI(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_6597 += tmp_6598;
   tmp_6592 += (g2*Cos(ThetaW())*Cos(ThetaWp()) + 0.7745966692414834*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) * tmp_6597
      ;
   result += (0.5) * tmp_6592;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZN(gI2,2))*(-10*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI1,2) + 2*Conj(ZN(gI2,3))*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZN(gI1,3) + 3.1622776601683795*g1p*QS
      *Sin(ThetaWp())*(-(Conj(ZN(gI2,4))*ZN(gI1,4)) + Conj(ZN(gI2,5))*ZN(gI1,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZChiChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(Conj(ZN(gI1,2))*(g2*Cos(ThetaW())*Cos(ThetaWp()) +
      0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 0.9486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI2,2) - Conj(ZN(gI1,3))*(g2*Cos(ThetaW())*Cos(ThetaWp())
      + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*
      g1p*Sin(ThetaWp()))*ZN(gI2,3) + 0.31622776601683794*g1p*QS*Sin(ThetaWp())*(
      Conj(ZN(gI1,4))*ZN(gI2,4) - Conj(ZN(gI1,5))*ZN(gI2,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(vd*Conj(ZP(gI2,0))*(0.7745966692414834*g1*Cos(ThetaWp())*
      Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) - 0.2*vu*Conj(ZP(gI2,
      1))*(3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(0.1*(vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sqr(g1p)*Sqr(QS
      )*Sqr(Sin(ThetaWp())) + vd*Conj(ZH(gI2,0))*Sqr(g2*Cos(ThetaW())*Cos(ThetaWp(
      )) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 0.9486832980505138
      *g1p*Sin(ThetaWp())) + vu*Conj(ZH(gI2,1))*Sqr(g2*Cos(ThetaW())*Cos(ThetaWp()
      ) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) + 0.6324555320336759*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZVZphh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*((vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sin(2*ThetaWp())*
      Sqr(g1p)*Sqr(QS) - vd*Conj(ZH(gI2,0))*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos
      (ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*
      g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(
      Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))
      + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) -
      18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*Conj(ZH(gI2,1))*(2*
      Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) - 3*Sin(2*ThetaWp
      ())*Sqr(g1)*Sqr(Sin(ThetaW())) - 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 2*Cos(ThetaW())*(-7.745966692414834*g1*g2*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp()))
      - 3.1622776601683795*g1p*g2*Sqr(Sin(ThetaWp())))));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZVZconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZVZconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZVZconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbargWmgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbargWmCgWmC() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpconjVWmVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarChaPChaPPL() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarChaPChaPPR() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(Cos(ThetaWp())*(-18.973665961010276*g1p*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 14.696938456699067*g1*g1p*Sin(ThetaW())*Sin(
      ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(-7.745966692414834*g1*g2*
      Cos(ThetaW())*Sin(ThetaW()) + 5*Sqr(g2)*Sqr(Cos(ThetaW())) + 3*Sqr(g1)*Sqr(
      Sin(ThetaW())))*Sqr(Sin(ThetaWp())))*ZP(gI1,0) + 2*Conj(ZP(gI2,1))*(
      -4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(ThetaWp()) +
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(2*ThetaWp()) + 2*Sqr(g1p)*Sqr(
      Cos(ThetaWp())) - 7.745966692414834*g1*g2*Cos(ThetaW())*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp())) + 3*Sqr(
      g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())))*ZP(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin
      (ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr
      (g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(
      ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp())))*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0(gI1,1))
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-4.898979485566356*g1*g1p*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 5*Sqr(g2)*Sqr(Cos(ThetaW()))*
      Sqr(Sin(ThetaWp())) + 3*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(ThetaWp())) + Cos
      (ThetaW())*(3.1622776601683795*g1p*g2*Sin(2*ThetaWp()) - 7.745966692414834*
      g1*g2*Sin(ThetaW())*Sqr(Sin(ThetaWp()))))*(Conj(UHpp(gI2,0))*UHpp(gI1,0) +
      Conj(UHpp(gI2,1))*UHpp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(Conj(ZP(gI2,0))*(-9.486832980505138*g1p*Cos(ThetaWp()) + 2*(5
      *g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(
      gI1,0) + 2*Conj(ZP(gI2,1))*(3.1622776601683795*g1p*Cos(ThetaWp()) + (5*g2*
      Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZP(gI1,1
      ));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpbarChaChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Sin(ThetaWp())*UM(gI1,0)
      + Conj(UM(gI2,1))*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(-5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UM(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpbarChaChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(-2*g2*Conj(UP(gI1,0))*Cos(ThetaW())*Sin(ThetaWp())*UP(gI2,0) -
      Conj(UP(gI1,1))*(0.6324555320336759*g1p*Cos(ThetaWp()) + g2*Cos(ThetaW())*
      Sin(ThetaWp()) - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp()))*UP(gI2,
      1));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarChaIChaIPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(0.9486832980505138*g1p*Cos(ThetaWp())
      - g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*Sin(
      ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarChaIChaIPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiPChiPPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.25*(-1.2649110640673518*g1p*Cos(ThetaWp()) + 2*(g2*Cos(ThetaW())
      + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI2,0))*ZNp
      (gI1,0) - Conj(ZNp(gI2,1))*ZNp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiPChiPPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(0.6324555320336759*g1p*Cos(ThetaWp()) - (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(Conj(ZNp(gI1,0))*ZNp(
      gI2,0) - Conj(ZNp(gI1,1))*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(gI1,gI2)*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFdFdPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI1,gI2)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) + 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFdFdPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFDXFDXPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI1,gI2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFDXFDXPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI1,gI2)*(28.460498941515414*
      g1p*Cos(ThetaWp()) - 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFeFePL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      ;

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFeFePR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI1,gI2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFuFuPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI1,gI2)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) - 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFuFuPR(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI1,gI2)*(9.486832980505138*g1p
      *Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFvFvPL(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.5*KroneckerDelta(gI1,gI2)*(0.6324555320336759*g1p*Cos(ThetaWp())
      - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpbarFvFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSHIPMSHIPM(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6599;
   std::complex<double> tmp_6600;
   std::complex<double> tmp_6601;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6601 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6600 += tmp_6601;
   tmp_6599 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6600;
   std::complex<double> tmp_6602;
   std::complex<double> tmp_6603;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6603 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6602 += tmp_6603;
   tmp_6599 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6602;
   std::complex<double> tmp_6604;
   std::complex<double> tmp_6605;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6605 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6604 += tmp_6605;
   tmp_6599 += (std::complex<double>(0.,-0.9486832980505138)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6604;
   std::complex<double> tmp_6606;
   std::complex<double> tmp_6607;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6607 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6606 += tmp_6607;
   tmp_6599 += (std::complex<double>(0.,0.6324555320336759)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6606;
   std::complex<double> tmp_6608;
   std::complex<double> tmp_6609;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6609 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6608 += tmp_6609;
   tmp_6599 += (std::complex<double>(0.,0.7348469228349533)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6608;
   std::complex<double> tmp_6610;
   std::complex<double> tmp_6611;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6611 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6610 += tmp_6611;
   tmp_6599 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6610;
   std::complex<double> tmp_6612;
   std::complex<double> tmp_6613;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6613 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6612 += tmp_6613;
   tmp_6599 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6612;
   std::complex<double> tmp_6614;
   std::complex<double> tmp_6615;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6615 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6614 += tmp_6615;
   tmp_6599 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6614;
   std::complex<double> tmp_6616;
   std::complex<double> tmp_6617;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6617 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6616 += tmp_6617;
   tmp_6599 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6616;
   std::complex<double> tmp_6618;
   std::complex<double> tmp_6619;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6619 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6618 += tmp_6619;
   tmp_6599 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6618;
   std::complex<double> tmp_6620;
   std::complex<double> tmp_6621;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6621 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6620 += tmp_6621;
   tmp_6599 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6620;
   std::complex<double> tmp_6622;
   std::complex<double> tmp_6623;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6623 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6622 += tmp_6623;
   tmp_6599 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6622;
   result += (std::complex<double>(0,-1)) * tmp_6599;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSHIPMSHIPM(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6624;
   std::complex<double> tmp_6625;
   std::complex<double> tmp_6626;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6626 += Conj(UHIPM(gI2,2 + j1))*UHIPM(gI1,2 + j1);
   }
   tmp_6625 += tmp_6626;
   tmp_6624 += (0.6324555320336759*g1p*Cos(ThetaWp()) - (-(g2*Cos(ThetaW())) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6625;
   std::complex<double> tmp_6627;
   std::complex<double> tmp_6628;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6628 += Conj(UHIPM(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6627 += tmp_6628;
   tmp_6624 += (-0.9486832980505138*g1p*Cos(ThetaWp()) - (-(g2*Cos(ThetaW())) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6627;
   result += (0.5) * tmp_6624;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((6*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 9*
      Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(g1*Sin(ThetaW())*(7.745966692414834*g2*Cos
      (ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp())))*ZA(gI1,0)*ZA(gI2,0) + 2*(-2*Cos(ThetaWp())*(3.1622776601683795*
      g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())
      *Sin(ThetaWp())) + 2*Sqr(g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(
      7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos
      (ThetaW())))*Sqr(Sin(ThetaWp())))*ZA(gI1,1)*ZA(gI2,1) + Sqr(g1p)*Sqr(QS)*Sqr
      (Cos(ThetaWp()))*(ZA(gI1,2)*ZA(gI2,2) + ZA(gI1,3)*ZA(gI2,3)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZphhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*((Conj(ZH(gI1,2))*Conj(ZH(gI2,2)) + Conj(ZH(gI1,3))*Conj(ZH(
      gI2,3)))*Sqr(g1p)*Sqr(QS)*Sqr(Cos(ThetaWp())) + 2*Conj(ZH(gI1,1))*Conj(ZH(
      gI2,1))*(-2*Cos(ThetaWp())*(3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(
      ThetaWp()) + 2.449489742783178*g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 2*Sqr(
      g1p)*Sqr(Cos(ThetaWp())) + (g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(
      ThetaW()) + 3*g1*Sin(ThetaW())) + 5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(
      ThetaWp()))) + Conj(ZH(gI1,0))*Conj(ZH(gI2,0))*(6*Cos(ThetaWp())*(
      3.1622776601683795*g1p*g2*Cos(ThetaW())*Sin(ThetaWp()) + 2.449489742783178*
      g1*g1p*Sin(ThetaW())*Sin(ThetaWp())) + 9*Sqr(g1p)*Sqr(Cos(ThetaWp())) + 2*(
      g1*Sin(ThetaW())*(7.745966692414834*g2*Cos(ThetaW()) + 3*g1*Sin(ThetaW())) +
      5*Sqr(g2)*Sqr(Cos(ThetaW())))*Sqr(Sin(ThetaWp()))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZphhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(Conj(ZH(gI1,0))*(9.486832980505138*
      g1p*Cos(ThetaWp()) + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW
      ()))*Sin(ThetaWp()))*ZA(gI2,0) + 2*Conj(ZH(gI1,1))*(3.1622776601683795*g1p*
      Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*
      Sin(ThetaWp()))*ZA(gI2,1) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(Conj
      (ZH(gI1,2))*ZA(gI2,2)) + Conj(ZH(gI1,3))*ZA(gI2,3)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6629;
   std::complex<double> tmp_6630;
   std::complex<double> tmp_6631;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6631 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6630 += tmp_6631;
   tmp_6629 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6630;
   std::complex<double> tmp_6632;
   std::complex<double> tmp_6633;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6633 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6632 += tmp_6633;
   tmp_6629 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6632;
   std::complex<double> tmp_6634;
   std::complex<double> tmp_6635;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6635 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6634 += tmp_6635;
   tmp_6629 += (std::complex<double>(0.,0.31622776601683794)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6634;
   std::complex<double> tmp_6636;
   std::complex<double> tmp_6637;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6637 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6636 += tmp_6637;
   tmp_6629 += (std::complex<double>(0.,0.08164965809277262)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6636;
   std::complex<double> tmp_6638;
   std::complex<double> tmp_6639;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6639 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6638 += tmp_6639;
   tmp_6629 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6638;
   std::complex<double> tmp_6640;
   std::complex<double> tmp_6641;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6641 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6640 += tmp_6641;
   tmp_6629 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6640;
   std::complex<double> tmp_6642;
   std::complex<double> tmp_6643;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6643 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6642 += tmp_6643;
   tmp_6629 += (std::complex<double>(0.,0.2581988897471611)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6642;
   std::complex<double> tmp_6644;
   std::complex<double> tmp_6645;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6645 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6644 += tmp_6645;
   tmp_6629 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6644;
   std::complex<double> tmp_6646;
   std::complex<double> tmp_6647;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6647 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6646 += tmp_6647;
   tmp_6629 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6646;
   result += (std::complex<double>(0,-1)) * tmp_6629;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6648;
   std::complex<double> tmp_6649;
   std::complex<double> tmp_6650;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6650 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6649 += tmp_6650;
   tmp_6648 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6649;
   std::complex<double> tmp_6651;
   std::complex<double> tmp_6652;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6652 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6651 += tmp_6652;
   tmp_6648 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6651;
   std::complex<double> tmp_6653;
   std::complex<double> tmp_6654;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6654 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6653 += tmp_6654;
   tmp_6648 += (std::complex<double>(0.,0.32659863237109044)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6653;
   std::complex<double> tmp_6655;
   std::complex<double> tmp_6656;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6656 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6655 += tmp_6656;
   tmp_6648 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6655;
   std::complex<double> tmp_6657;
   std::complex<double> tmp_6658;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6658 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6657 += tmp_6658;
   tmp_6648 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6657;
   std::complex<double> tmp_6659;
   std::complex<double> tmp_6660;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6660 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6659 += tmp_6660;
   tmp_6648 += (std::complex<double>(0,0.13333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6659;
   result += (std::complex<double>(0,-1)) * tmp_6648;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6661;
   std::complex<double> tmp_6662;
   std::complex<double> tmp_6663;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6663 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6662 += tmp_6663;
   tmp_6661 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6662;
   std::complex<double> tmp_6664;
   std::complex<double> tmp_6665;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6665 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6664 += tmp_6665;
   tmp_6661 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6664;
   std::complex<double> tmp_6666;
   std::complex<double> tmp_6667;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6667 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6666 += tmp_6667;
   tmp_6661 += (std::complex<double>(0.,0.6324555320336759)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6666;
   std::complex<double> tmp_6668;
   std::complex<double> tmp_6669;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6669 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6668 += tmp_6669;
   tmp_6661 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6668;
   std::complex<double> tmp_6670;
   std::complex<double> tmp_6671;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6671 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6670 += tmp_6671;
   tmp_6661 += (std::complex<double>(0.,0.4898979485566356)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6670;
   std::complex<double> tmp_6672;
   std::complex<double> tmp_6673;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6673 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6672 += tmp_6673;
   tmp_6661 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6672;
   std::complex<double> tmp_6674;
   std::complex<double> tmp_6675;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6675 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6674 += tmp_6675;
   tmp_6661 += (std::complex<double>(0.,-0.7745966692414834)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6674;
   std::complex<double> tmp_6676;
   std::complex<double> tmp_6677;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6677 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6676 += tmp_6677;
   tmp_6661 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6676;
   std::complex<double> tmp_6678;
   std::complex<double> tmp_6679;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6679 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6678 += tmp_6679;
   tmp_6661 += (std::complex<double>(0,1.2)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6678;
   result += (std::complex<double>(0,-1)) * tmp_6661;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6680;
   std::complex<double> tmp_6681;
   std::complex<double> tmp_6682;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6682 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6681 += tmp_6682;
   tmp_6680 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6681;
   std::complex<double> tmp_6683;
   std::complex<double> tmp_6684;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6684 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6683 += tmp_6684;
   tmp_6680 += (std::complex<double>(0,0.05)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6683;
   std::complex<double> tmp_6685;
   std::complex<double> tmp_6686;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6686 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6685 += tmp_6686;
   tmp_6680 += (std::complex<double>(0.,-0.31622776601683794)*g1p*g2*Cos(ThetaW
      ())*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6685;
   std::complex<double> tmp_6687;
   std::complex<double> tmp_6688;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6688 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6687 += tmp_6688;
   tmp_6680 += (std::complex<double>(0.,0.08164965809277262)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6687;
   std::complex<double> tmp_6689;
   std::complex<double> tmp_6690;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6690 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6689 += tmp_6690;
   tmp_6680 += (std::complex<double>(0.,-0.32659863237109044)*g1*g1p*Cos(
      ThetaWp())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6689;
   std::complex<double> tmp_6691;
   std::complex<double> tmp_6692;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6692 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6691 += tmp_6692;
   tmp_6680 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6691;
   std::complex<double> tmp_6693;
   std::complex<double> tmp_6694;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6694 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6693 += tmp_6694;
   tmp_6680 += (std::complex<double>(0.,-0.2581988897471611)*g1*g2*Cos(ThetaW()
      )*Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6693;
   std::complex<double> tmp_6695;
   std::complex<double> tmp_6696;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6696 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6695 += tmp_6696;
   tmp_6680 += (std::complex<double>(0,0.03333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6695;
   std::complex<double> tmp_6697;
   std::complex<double> tmp_6698;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6698 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6697 += tmp_6698;
   tmp_6680 += (std::complex<double>(0,0.5333333333333333)*Sqr(g1)*Sqr(Sin(
      ThetaW()))*Sqr(Sin(ThetaWp()))) * tmp_6697;
   result += (std::complex<double>(0,-1)) * tmp_6680;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6699;
   std::complex<double> tmp_6700;
   std::complex<double> tmp_6701;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6701 += Conj(ZD(gI2,3 + j1))*ZD(gI1,3 + j1);
   }
   tmp_6700 += tmp_6701;
   tmp_6699 += (-2*(0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_6700;
   std::complex<double> tmp_6702;
   std::complex<double> tmp_6703;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6703 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6702 += tmp_6703;
   tmp_6699 += (0.9486832980505138*g1p*Cos(ThetaWp()) + (3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6702;
   result += (0.16666666666666666) * tmp_6699;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSDXSDX(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6704;
   std::complex<double> tmp_6705;
   std::complex<double> tmp_6706;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6706 += Conj(ZDX(gI2,3 + j1))*ZDX(gI1,3 + j1);
   }
   tmp_6705 += tmp_6706;
   tmp_6704 += (1.4230249470757708*g1p*Cos(ThetaWp()) - 0.7745966692414834*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_6705;
   std::complex<double> tmp_6707;
   std::complex<double> tmp_6708;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6708 += Conj(ZDX(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6707 += tmp_6708;
   tmp_6704 += (-0.9486832980505138*g1p*Cos(ThetaWp()) - 0.7745966692414834*g1*
      Sin(ThetaW())*Sin(ThetaWp())) * tmp_6707;
   result += (0.3333333333333333) * tmp_6704;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6709;
   std::complex<double> tmp_6710;
   std::complex<double> tmp_6711;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6711 += Conj(ZE(gI2,3 + j1))*ZE(gI1,3 + j1);
   }
   tmp_6710 += tmp_6711;
   tmp_6709 += (-2*(0.15811388300841897*g1p*Cos(ThetaWp()) + 0.7745966692414834
      *g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_6710;
   std::complex<double> tmp_6712;
   std::complex<double> tmp_6713;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6713 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6712 += tmp_6713;
   tmp_6709 += (0.6324555320336759*g1p*Cos(ThetaWp()) + (g2*Cos(ThetaW()) -
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6712;
   result += (0.5) * tmp_6709;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6714;
   std::complex<double> tmp_6715;
   std::complex<double> tmp_6716;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6716 += Conj(ZU(gI2,3 + j1))*ZU(gI1,3 + j1);
   }
   tmp_6715 += tmp_6716;
   tmp_6714 += (2*(-0.4743416490252569*g1p*Cos(ThetaWp()) + 1.5491933384829668*
      g1*Sin(ThetaW())*Sin(ThetaWp()))) * tmp_6715;
   std::complex<double> tmp_6717;
   std::complex<double> tmp_6718;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6718 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6717 += tmp_6718;
   tmp_6714 += (0.9486832980505138*g1p*Cos(ThetaWp()) + (-3*g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6717;
   result += (0.16666666666666666) * tmp_6714;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZpconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6719;
   std::complex<double> tmp_6720;
   std::complex<double> tmp_6721;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6721 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6720 += tmp_6721;
   tmp_6719 += (std::complex<double>(0,0.45)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6720;
   std::complex<double> tmp_6722;
   std::complex<double> tmp_6723;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6723 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6722 += tmp_6723;
   tmp_6719 += (std::complex<double>(0,0.2)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6722;
   std::complex<double> tmp_6724;
   std::complex<double> tmp_6725;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6725 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6724 += tmp_6725;
   tmp_6719 += (std::complex<double>(0,1.25)*Sqr(g1p)*Sqr(Cos(ThetaWp()))) *
      tmp_6724;
   std::complex<double> tmp_6726;
   std::complex<double> tmp_6727;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6727 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6726 += tmp_6727;
   tmp_6719 += (std::complex<double>(0.,0.9486832980505138)*g1p*g2*Cos(ThetaW()
      )*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6726;
   std::complex<double> tmp_6728;
   std::complex<double> tmp_6729;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6729 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6728 += tmp_6729;
   tmp_6719 += (std::complex<double>(0.,-0.6324555320336759)*g1p*g2*Cos(ThetaW(
      ))*Cos(ThetaWp())*Sin(ThetaWp())) * tmp_6728;
   std::complex<double> tmp_6730;
   std::complex<double> tmp_6731;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6731 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6730 += tmp_6731;
   tmp_6719 += (std::complex<double>(0.,0.7348469228349533)*g1*g1p*Cos(ThetaWp(
      ))*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6730;
   std::complex<double> tmp_6732;
   std::complex<double> tmp_6733;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6733 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6732 += tmp_6733;
   tmp_6719 += (std::complex<double>(0.,-0.4898979485566356)*g1*g1p*Cos(ThetaWp
      ())*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6732;
   std::complex<double> tmp_6734;
   std::complex<double> tmp_6735;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6735 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6734 += tmp_6735;
   tmp_6719 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6734;
   std::complex<double> tmp_6736;
   std::complex<double> tmp_6737;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6737 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6736 += tmp_6737;
   tmp_6719 += (std::complex<double>(0,0.5)*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6736;
   std::complex<double> tmp_6738;
   std::complex<double> tmp_6739;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6739 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6738 += tmp_6739;
   tmp_6719 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6738;
   std::complex<double> tmp_6740;
   std::complex<double> tmp_6741;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6741 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6740 += tmp_6741;
   tmp_6719 += (std::complex<double>(0.,0.7745966692414834)*g1*g2*Cos(ThetaW())
      *Sin(ThetaW())*Sqr(Sin(ThetaWp()))) * tmp_6740;
   std::complex<double> tmp_6742;
   std::complex<double> tmp_6743;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6743 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6742 += tmp_6743;
   tmp_6719 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6742;
   std::complex<double> tmp_6744;
   std::complex<double> tmp_6745;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6745 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6744 += tmp_6745;
   tmp_6719 += (std::complex<double>(0,0.3)*Sqr(g1)*Sqr(Sin(ThetaW()))*Sqr(Sin(
      ThetaWp()))) * tmp_6744;
   result += (std::complex<double>(0,-1)) * tmp_6719;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6746;
   std::complex<double> tmp_6747;
   std::complex<double> tmp_6748;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6748 += Conj(UHI0(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6747 += tmp_6748;
   tmp_6746 += (1.5811388300841898*g1p*Cos(ThetaWp())) * tmp_6747;
   std::complex<double> tmp_6749;
   std::complex<double> tmp_6750;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6750 += Conj(UHI0(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6749 += tmp_6750;
   tmp_6746 += (0.6324555320336759*g1p*Cos(ThetaWp()) - g2*Cos(ThetaW())*Sin(
      ThetaWp()) - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_6749;
   std::complex<double> tmp_6751;
   std::complex<double> tmp_6752;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6752 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6751 += tmp_6752;
   tmp_6746 += (-0.9486832980505138*g1p*Cos(ThetaWp()) - (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6751;
   result += (0.5) * tmp_6746;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiIChiIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6753;
   std::complex<double> tmp_6754;
   std::complex<double> tmp_6755;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6755 += Conj(ZNI(gI2,4 + j1))*ZNI(gI1,4 + j1);
   }
   tmp_6754 += tmp_6755;
   tmp_6753 += (-1.5811388300841898*g1p*Cos(ThetaWp())) * tmp_6754;
   std::complex<double> tmp_6756;
   std::complex<double> tmp_6757;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6757 += Conj(ZNI(gI2,2 + j1))*ZNI(gI1,2 + j1);
   }
   tmp_6756 += tmp_6757;
   tmp_6753 += (0.6324555320336759*g1p*Cos(ThetaWp()) - (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6756;
   std::complex<double> tmp_6758;
   std::complex<double> tmp_6759;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6759 += Conj(ZNI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_6758 += tmp_6759;
   tmp_6753 += (0.9486832980505138*g1p*Cos(ThetaWp()) + (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6758;
   result += (0.5) * tmp_6753;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiIChiIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6760;
   std::complex<double> tmp_6761;
   std::complex<double> tmp_6762;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6762 += Conj(ZNI(gI1,4 + j1))*ZNI(gI2,4 + j1);
   }
   tmp_6761 += tmp_6762;
   tmp_6760 += (1.5811388300841898*g1p*Cos(ThetaWp())) * tmp_6761;
   std::complex<double> tmp_6763;
   std::complex<double> tmp_6764;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6764 += Conj(ZNI(gI1,2 + j1))*ZNI(gI2,2 + j1);
   }
   tmp_6763 += tmp_6764;
   tmp_6760 += (-0.6324555320336759*g1p*Cos(ThetaWp()) + (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6763;
   std::complex<double> tmp_6765;
   std::complex<double> tmp_6766;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6766 += Conj(ZNI(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_6765 += tmp_6766;
   tmp_6760 += (-0.9486832980505138*g1p*Cos(ThetaWp()) - (g2*Cos(ThetaW()) +
      0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())) * tmp_6765;
   result += (0.5) * tmp_6760;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(Conj(ZN(gI2,2))*(0.9486832980505138*g1p*Cos(ThetaWp()) + g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*Sin(
      ThetaWp()))*ZN(gI1,2) + Conj(ZN(gI2,3))*(0.6324555320336759*g1p*Cos(ThetaWp(
      )) - (g2*Cos(ThetaW()) + 0.7745966692414834*g1*Sin(ThetaW()))*Sin(ThetaWp())
      )*ZN(gI1,3) + 0.31622776601683794*g1p*QS*Cos(ThetaWp())*(-(Conj(ZN(gI2,4))*
      ZN(gI1,4)) + Conj(ZN(gI2,5))*ZN(gI1,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpChiChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(Conj(ZN(gI1,2))*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(
      5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*ZN(
      gI2,2)) + 2*Conj(ZN(gI1,3))*(-3.1622776601683795*g1p*Cos(ThetaWp()) + 5*g2*
      Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(
      ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(Conj(ZN(
      gI1,4))*ZN(gI2,4) - Conj(ZN(gI1,5))*ZN(gI2,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpconjVWmHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(vu*Conj(ZP(gI2,1))*(0.6324555320336759*g1p*Cos(ThetaWp())
      - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) + vd*Conj(ZP(gI2,0))*(
      0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*
      Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.025*((vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sin(2*ThetaWp())*
      Sqr(g1p)*Sqr(QS) - vd*Conj(ZH(gI2,0))*(-9*Sin(2*ThetaWp())*Sqr(g1p) + 20*Cos
      (ThetaWp())*Sin(ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) + 14.696938456699067*
      g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) + 6*Sin(2*ThetaWp())*Sqr(g1)*Sqr(
      Sin(ThetaW())) - 14.696938456699067*g1*g1p*Sin(ThetaW())*Sqr(Sin(ThetaWp()))
      + Cos(ThetaW())*(30.983866769659336*g1*g2*Cos(ThetaWp())*Sin(ThetaW())*Sin(
      ThetaWp()) + 18.973665961010276*g1p*g2*Sqr(Cos(ThetaWp())) -
      18.973665961010276*g1p*g2*Sqr(Sin(ThetaWp())))) + 2*vu*Conj(ZH(gI2,1))*(2*
      Sin(2*ThetaWp())*Sqr(g1p) - 5*Sin(2*ThetaWp())*Sqr(g2)*Sqr(Cos(ThetaW())) +
      4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(Cos(ThetaWp())) - 3*Sin(2*ThetaWp
      ())*Sqr(g1)*Sqr(Sin(ThetaW())) - 4.898979485566356*g1*g1p*Sin(ThetaW())*Sqr(
      Sin(ThetaWp())) + 2*Cos(ThetaW())*(-7.745966692414834*g1*g2*Cos(ThetaWp())*
      Sin(ThetaW())*Sin(ThetaWp()) + 3.1622776601683795*g1p*g2*Sqr(Cos(ThetaWp()))
      - 3.1622776601683795*g1p*g2*Sqr(Sin(ThetaWp())))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVZpVZphh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(0.1*(vs*Conj(ZH(gI2,2)) + vsb*Conj(ZH(gI2,3)))*Sqr(g1p)*Sqr(QS
      )*Sqr(Cos(ThetaWp())) + vu*Conj(ZH(gI2,1))*Sqr(-0.6324555320336759*g1p*Cos(
      ThetaWp()) + g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin(
      ThetaW())*Sin(ThetaWp())) + vd*Conj(ZH(gI2,0))*Sqr(0.9486832980505138*g1p*
      Cos(ThetaWp()) + g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*g1*Sin
      (ThetaW())*Sin(ThetaWp())));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpVZpconjVWmVWm1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpVZpconjVWmVWm2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVZpVZpconjVWmVWm3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargPgWm() const
{
   double result = 0.0;

   result = g2*Sin(ThetaW());

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargWmCgP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargWmCgZ() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargWmCgZp() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Sin(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargZgWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbargZpgWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmVWmVP() const
{
   double result = 0.0;

   result = -(g2*Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmVZVWm() const
{
   double result = 0.0;

   result = g2*Cos(ThetaW())*Cos(ThetaWp());

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmVZpVWm() const
{
   double result = 0.0;

   result = -(g2*Cos(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjHpmHpm(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(ZP(gI2,0))*ZP(gI1,0) + Conj(ZP(gI2,1))*ZP(gI1,1))
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSHp0SHp0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHp0(gI2,0))*UHp0(gI1,0) + Conj(UHp0(gI2,1))*UHp0
      (gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSHppSHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(Conj(UHpp(gI2,0))*UHpp(gI1,0) + Conj(UHpp(gI2,1))*UHpp
      (gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmconjSHp0SHpp(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*(Conj(UHpp(gI2,0))*UHp0(gI1,0) - Conj(UHpp(
      gI2,1))*UHp0(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmHpmAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,-0.5)*g2*(Conj(ZP(gI1,0))*ZA(gI2,0) + Conj(
      ZP(gI1,1))*ZA(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmHpmhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(Conj(ZH(gI2,0))*Conj(ZP(gI1,0)) - Conj(ZH(gI2,1))*Conj(ZP(
      gI1,1)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiPChaPPL(unsigned gI1) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*ZNp(gI1,0);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiPChaPPR(unsigned gI1) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*Conj(ZNp(gI1,1));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSvSv(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmbarFuFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6767;
   std::complex<double> tmp_6768;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6768 += Conj(ZDL(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_6767 += tmp_6768;
   result += (-0.7071067811865475*g2) * tmp_6767;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbarFuFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmbarFvFePL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZEL(gI2,gI1));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbarFvFePR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmconjSvSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6769;
   std::complex<double> tmp_6770;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6770 += Conj(ZE(gI2,j1))*ZV(gI1,j1);
   }
   tmp_6769 += tmp_6770;
   result += (0.7071067811865475*g2) * tmp_6769;

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSHIPMSHIPM(unsigned gI1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.5*KroneckerDelta(gI1,gI2)*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmAhAh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*Sqr(g2)*(ZA(gI1,0)*ZA(gI2,0) + ZA(gI1,1)*ZA(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmhhhh(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(Conj(ZH(gI1,0))*Conj(ZH(gI2,0)) + Conj(ZH(gI1,1))*Conj(ZH(gI2,
      1)))*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSdSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6771;
   std::complex<double> tmp_6772;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6772 += Conj(ZD(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6771 += tmp_6772;
   result += (0.5*Sqr(g2)) * tmp_6771;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSeSe(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6773;
   std::complex<double> tmp_6774;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6774 += Conj(ZE(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6773 += tmp_6774;
   result += (0.5*Sqr(g2)) * tmp_6773;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSuSu(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6775;
   std::complex<double> tmp_6776;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6776 += Conj(ZU(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6775 += tmp_6776;
   result += (0.5*Sqr(g2)) * tmp_6775;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmconjSuSd(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6777;
   std::complex<double> tmp_6778;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6778 += Conj(ZD(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6777 += tmp_6778;
   result += (0.7071067811865475*g2) * tmp_6777;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpVWmconjVWmconjSHI0SHI0(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6779;
   std::complex<double> tmp_6780;
   for (unsigned j1 = 0; j1 < 4; ++j1) {
      tmp_6780 += Conj(UHI0(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6779 += tmp_6780;
   result += (0.5*Sqr(g2)) * tmp_6779;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiIChaIPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6781;
   std::complex<double> tmp_6782;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6782 += Conj(ZMI(gI2,j1))*ZNI(gI1,j1);
   }
   tmp_6781 += tmp_6782;
   result += (-0.7071067811865475*g2) * tmp_6781;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiIChaIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6783;
   std::complex<double> tmp_6784;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6784 += Conj(ZNI(gI1,2 + j1))*ZPI(gI2,j1);
   }
   tmp_6783 += tmp_6784;
   result += (0.7071067811865475*g2) * tmp_6783;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmconjSHI0SHIPM(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6785;
   std::complex<double> tmp_6786;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6786 += Conj(UHIPM(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6785 += tmp_6786;
   std::complex<double> tmp_6787;
   std::complex<double> tmp_6788;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6788 += Conj(UHIPM(gI2,2 + j1))*UHI0(gI1,2 + j1);
   }
   tmp_6787 += tmp_6788;
   tmp_6785 += (-1) * tmp_6787;
   result += (0.7071067811865475*g2) * tmp_6785;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*ZN(gI1,1) + 1.4142135623730951*Conj(UM(
      gI2,1))*ZN(gI1,2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmChiChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(ZN(gI1,1))*UP(gI2,0)) + 0.7071067811865475*g2*Conj(ZN(gI1
      ,3))*UP(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmVPHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.3872983346207417*g1*g2*(vd*Conj(ZP(gI2,0)) - vu*Conj(ZP(gI2,1)))
      *Cos(ThetaW());

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmVZHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*g2*(vd*Conj(ZP(gI2,0))*(0.7745966692414834*g1*Cos(ThetaWp())*
      Sin(ThetaW()) - 0.9486832980505138*g1p*Sin(ThetaWp())) - 0.2*vu*Conj(ZP(gI2,
      1))*(3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*
      g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmVZpHpm(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(vu*Conj(ZP(gI2,1))*(0.6324555320336759*g1p*Cos(ThetaWp())
      - 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())) + vd*Conj(ZP(gI2,0))*(
      0.9486832980505138*g1p*Cos(ThetaWp()) + 0.7745966692414834*g1*Sin(ThetaW())*
      Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpconjVWmVWmhh(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.5*(vd*Conj(ZH(gI2,0)) + vu*Conj(ZH(gI2,1)))*Sqr(g2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVPVP1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVPVP2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVPVP3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZVZ1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZVZ2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZVZ3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Cos(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZpVZp1() const
{
   double result = 0.0;

   result = -2*Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZpVZp2() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmVZpVZp3() const
{
   double result = 0.0;

   result = Sqr(g2)*Sqr(Cos(ThetaW()))*Sqr(Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmconjVWmVWm1() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmconjVWmVWm2() const
{
   double result = 0.0;

   result = -Sqr(g2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpVWmconjVWmconjVWmVWm3() const
{
   double result = 0.0;

   result = 2*Sqr(g2);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjHpmChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(2,gO2)*ZP(gI1,0)) + 0.1*Conj(UM
      (gI2,1))*(5.477225575051661*g1*KroneckerDelta(0,gO2)*ZP(gI1,0) +
      7.0710678118654755*g2*KroneckerDelta(1,gO2)*ZP(gI1,0) + 6.708203932499369*
      g1p*KroneckerDelta(7,gO2)*ZP(gI1,0) - 10*KroneckerDelta(4,gO2)*Lambdax*ZP(
      gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjHpmChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*KroneckerDelta(4,gO1)*UP(gI2,1)*ZP(gI1,0)) - 0.1*(
      10*g2*KroneckerDelta(3,gO1)*UP(gI2,0) + (5.477225575051661*g1*KroneckerDelta
      (0,gO1) + 7.0710678118654755*g2*KroneckerDelta(1,gO1) - 4.47213595499958*g1p
      *KroneckerDelta(7,gO1))*UP(gI2,1))*ZP(gI1,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHp0ChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*Conj(ZNp(gI2,0))*(5.477225575051661*g1*KroneckerDelta(0,gO2)*
      UHp0(gI1,0) - 7.0710678118654755*g2*KroneckerDelta(1,gO2)*UHp0(gI1,0) - 2*(
      2.23606797749979*g1p*KroneckerDelta(7,gO2)*UHp0(gI1,0) + 5*KroneckerDelta(6,
      gO2)*SigmaL*UHp0(gI1,1)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHp0ChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(10*Conj(SigmaL)*KroneckerDelta(6,gO1)*UHp0(gI1,0) + (
      5.477225575051661*g1*KroneckerDelta(0,gO1) - 7.0710678118654755*g2*
      KroneckerDelta(1,gO1) - 4.47213595499958*g1p*KroneckerDelta(7,gO1))*UHp0(gI1
      ,1))*ZNp(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHppChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = 0.5477225575051661*g1*KroneckerDelta(0,gO2)*UHpp(gI1,0) +
      0.7071067811865475*g2*KroneckerDelta(1,gO2)*UHpp(gI1,0) - 0.4472135954999579
      *g1p*KroneckerDelta(7,gO2)*UHpp(gI1,0) + KroneckerDelta(6,gO2)*SigmaL*UHpp(
      gI1,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHppChaPPR(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = Conj(SigmaL)*KroneckerDelta(6,gO1)*UHpp(gI1,0) - 0.1*(
      5.477225575051661*g1*KroneckerDelta(0,gO1) + 7.0710678118654755*g2*
      KroneckerDelta(1,gO1) - 4.47213595499958*g1p*KroneckerDelta(7,gO1))*UHpp(gI1
      ,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSvFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5477225575051661*g1*KroneckerDelta(0,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(1,gO2)*ZV(gI1,gI2);
   }
   if (gI2 < 3) {
      result += -0.4472135954999579*g1p*KroneckerDelta(7,gO2)*ZV(gI1,gI2);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiconjSvFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHIPMChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6789;
   std::complex<double> tmp_6790;
   std::complex<double> tmp_6791;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6791 += Conj(ZMI(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6790 += tmp_6791;
   tmp_6789 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_6790;
   std::complex<double> tmp_6792;
   std::complex<double> tmp_6793;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6793 += Conj(ZMI(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6792 += tmp_6793;
   tmp_6789 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_6792;
   std::complex<double> tmp_6794;
   std::complex<double> tmp_6795;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6795 += Conj(ZMI(gI2,j1))*UHIPM(gI1,j1);
   }
   tmp_6794 += tmp_6795;
   tmp_6789 += (std::complex<double>(0.,0.6708203932499369)*g1p*KroneckerDelta(
      7,gO2)) * tmp_6794;
   std::complex<double> tmp_6796;
   std::complex<double> tmp_6797;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6797 += Conj(ZMI(gI2,j1))*UHIPM(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_6796 += tmp_6797;
   tmp_6789 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO2)) * tmp_6796;
   result += (std::complex<double>(0,-1)) * tmp_6789;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHIPMChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6798;
   std::complex<double> tmp_6799;
   std::complex<double> tmp_6800;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6800 += Conj(Lambda12(j1,j1))*UHIPM(gI1,j1)*ZPI(gI2,j1);
   }
   tmp_6799 += tmp_6800;
   tmp_6798 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO1)) * tmp_6799;
   std::complex<double> tmp_6801;
   std::complex<double> tmp_6802;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6802 += UHIPM(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_6801 += tmp_6802;
   tmp_6798 += (std::complex<double>(0.,-0.5477225575051661)*g1*KroneckerDelta(
      0,gO1)) * tmp_6801;
   std::complex<double> tmp_6803;
   std::complex<double> tmp_6804;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6804 += UHIPM(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_6803 += tmp_6804;
   tmp_6798 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO1)) * tmp_6803;
   std::complex<double> tmp_6805;
   std::complex<double> tmp_6806;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6806 += UHIPM(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_6805 += tmp_6806;
   tmp_6798 += (std::complex<double>(0.,0.4472135954999579)*g1p*KroneckerDelta(
      7,gO1)) * tmp_6805;
   result += (std::complex<double>(0,-1)) * tmp_6798;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChihhChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-2*Conj(ZH(gI1,1))*(3.872983346207417*g1*Conj(ZN(gI2,0))*
      KroneckerDelta(3,gO2) - 5*g2*Conj(ZN(gI2,1))*KroneckerDelta(3,gO2) -
      3.1622776601683795*g1p*Conj(ZN(gI2,7))*KroneckerDelta(3,gO2) + Conj(ZN(gI2,3
      ))*(3.872983346207417*g1*KroneckerDelta(0,gO2) - 5*g2*KroneckerDelta(1,gO2)
      - 3.1622776601683795*g1p*KroneckerDelta(7,gO2)) - 7.0710678118654755*Conj(ZN
      (gI2,4))*KroneckerDelta(2,gO2)*Lambdax - 7.0710678118654755*Conj(ZN(gI2,2))*
      KroneckerDelta(4,gO2)*Lambdax) + Conj(ZH(gI1,0))*(7.745966692414834*g1*Conj(
      ZN(gI2,0))*KroneckerDelta(2,gO2) - 10*g2*Conj(ZN(gI2,1))*KroneckerDelta(2,
      gO2) + 9.486832980505138*g1p*Conj(ZN(gI2,7))*KroneckerDelta(2,gO2) + Conj(ZN
      (gI2,2))*(7.745966692414834*g1*KroneckerDelta(0,gO2) - 10*g2*KroneckerDelta(
      1,gO2) + 9.486832980505138*g1p*KroneckerDelta(7,gO2)) + 14.142135623730951*
      Conj(ZN(gI2,4))*KroneckerDelta(3,gO2)*Lambdax + 14.142135623730951*Conj(ZN(
      gI2,3))*KroneckerDelta(4,gO2)*Lambdax) + 1.4142135623730951*(10*Conj(ZH(gI1,
      4))*(-2*Conj(ZN(gI2,6))*KroneckerDelta(6,gO2)*KappaPr + Conj(ZN(gI2,5))*
      KroneckerDelta(4,gO2)*Sigmax + Conj(ZN(gI2,4))*KroneckerDelta(5,gO2)*Sigmax)
      + Conj(ZH(gI1,3))*(2.23606797749979*g1p*QS*Conj(ZN(gI2,7))*KroneckerDelta(5
      ,gO2) + 2.23606797749979*g1p*QS*Conj(ZN(gI2,5))*KroneckerDelta(7,gO2) + 10*
      Conj(ZN(gI2,6))*KroneckerDelta(4,gO2)*Sigmax + 10*Conj(ZN(gI2,4))*
      KroneckerDelta(6,gO2)*Sigmax) + Conj(ZH(gI1,2))*(-2.23606797749979*g1p*QS*
      Conj(ZN(gI2,7))*KroneckerDelta(4,gO2) - 2.23606797749979*g1p*QS*Conj(ZN(gI2,
      4))*KroneckerDelta(7,gO2) + 10*Conj(ZN(gI2,3))*KroneckerDelta(2,gO2)*Lambdax
      + 10*Conj(ZN(gI2,2))*KroneckerDelta(3,gO2)*Lambdax + 10*Conj(ZN(gI2,6))*
      KroneckerDelta(5,gO2)*Sigmax + 10*Conj(ZN(gI2,5))*KroneckerDelta(6,gO2)*
      Sigmax)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChihhChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(1.4142135623730951*(10*Conj(Lambdax)*Conj(ZH(gI1,2))*(
      KroneckerDelta(3,gO1)*ZN(gI2,2) + KroneckerDelta(2,gO1)*ZN(gI2,3)) -
      2.23606797749979*g1p*QS*Conj(ZH(gI1,2))*KroneckerDelta(7,gO1)*ZN(gI2,4) +
      2.23606797749979*g1p*QS*Conj(ZH(gI1,3))*KroneckerDelta(7,gO1)*ZN(gI2,5) - 20
      *Conj(KappaPr)*Conj(ZH(gI1,4))*KroneckerDelta(6,gO1)*ZN(gI2,6) + 10*Conj(
      Sigmax)*(Conj(ZH(gI1,4))*(KroneckerDelta(5,gO1)*ZN(gI2,4) + KroneckerDelta(4
      ,gO1)*ZN(gI2,5)) + Conj(ZH(gI1,3))*(KroneckerDelta(6,gO1)*ZN(gI2,4) +
      KroneckerDelta(4,gO1)*ZN(gI2,6)) + Conj(ZH(gI1,2))*(KroneckerDelta(6,gO1)*ZN
      (gI2,5) + KroneckerDelta(5,gO1)*ZN(gI2,6))) - 2.23606797749979*g1p*QS*Conj(
      ZH(gI1,2))*KroneckerDelta(4,gO1)*ZN(gI2,7) + 2.23606797749979*g1p*QS*Conj(ZH
      (gI1,3))*KroneckerDelta(5,gO1)*ZN(gI2,7)) + 2*Conj(ZH(gI1,1))*((
      -3.872983346207417*g1*KroneckerDelta(0,gO1) + 5*g2*KroneckerDelta(1,gO1) +
      3.1622776601683795*g1p*KroneckerDelta(7,gO1))*ZN(gI2,3) + 7.0710678118654755
      *Conj(Lambdax)*(KroneckerDelta(4,gO1)*ZN(gI2,2) + KroneckerDelta(2,gO1)*ZN(
      gI2,4)) + KroneckerDelta(3,gO1)*(-3.872983346207417*g1*ZN(gI2,0) + 5*g2*ZN(
      gI2,1) + 3.1622776601683795*g1p*ZN(gI2,7))) + Conj(ZH(gI1,0))*(
      7.745966692414834*g1*KroneckerDelta(0,gO1)*ZN(gI2,2) - 10*g2*KroneckerDelta(
      1,gO1)*ZN(gI2,2) + 9.486832980505138*g1p*KroneckerDelta(7,gO1)*ZN(gI2,2) +
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZN(gI2,3) +
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(3,gO1)*ZN(gI2,4) +
      KroneckerDelta(2,gO1)*(7.745966692414834*g1*ZN(gI2,0) - 10*g2*ZN(gI2,1) +
      9.486832980505138*g1p*ZN(gI2,7))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSdFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6807;
   std::complex<double> tmp_6808;
   std::complex<double> tmp_6809;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6809 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6808 += tmp_6809;
   tmp_6807 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_6808;
   std::complex<double> tmp_6810;
   std::complex<double> tmp_6811;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6811 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6810 += tmp_6811;
   tmp_6807 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_6810;
   std::complex<double> tmp_6812;
   std::complex<double> tmp_6813;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6813 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_6812 += tmp_6813;
   tmp_6807 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO2)) * tmp_6812;
   std::complex<double> tmp_6814;
   std::complex<double> tmp_6815;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6815 += Conj(ZDL(gI2,j1))*Yd(j1,j1)*ZD(gI1,3 + j1);
   }
   tmp_6814 += tmp_6815;
   tmp_6807 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_6814;
   result += (std::complex<double>(0,-1)) * tmp_6807;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSdFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6816;
   std::complex<double> tmp_6817;
   std::complex<double> tmp_6818;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6818 += Conj(Yd(j1,j1))*ZD(gI1,j1)*ZDR(gI2,j1);
   }
   tmp_6817 += tmp_6818;
   tmp_6816 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_6817;
   std::complex<double> tmp_6819;
   std::complex<double> tmp_6820;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6820 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_6819 += tmp_6820;
   tmp_6816 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_6819;
   std::complex<double> tmp_6821;
   std::complex<double> tmp_6822;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6822 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_6821 += tmp_6822;
   tmp_6816 += (std::complex<double>(0.,-0.4472135954999579)*g1p*KroneckerDelta
      (7,gO1)) * tmp_6821;
   result += (std::complex<double>(0,-1)) * tmp_6816;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSDXFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6823;
   std::complex<double> tmp_6824;
   std::complex<double> tmp_6825;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6825 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6824 += tmp_6825;
   tmp_6823 += (std::complex<double>(0.,0.3651483716701107)*g1*KroneckerDelta(0
      ,gO2)) * tmp_6824;
   std::complex<double> tmp_6826;
   std::complex<double> tmp_6827;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6827 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_6826 += tmp_6827;
   tmp_6823 += (std::complex<double>(0.,0.4472135954999579)*g1p*KroneckerDelta(
      7,gO2)) * tmp_6826;
   std::complex<double> tmp_6828;
   std::complex<double> tmp_6829;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6829 += Conj(ZDXL(gI2,j1))*ZDX(gI1,3 + j1)*Kappa(j1,j1);
   }
   tmp_6828 += tmp_6829;
   tmp_6823 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO2)) * tmp_6828;
   result += (std::complex<double>(0,-1)) * tmp_6823;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSDXFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6830;
   std::complex<double> tmp_6831;
   std::complex<double> tmp_6832;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6832 += Conj(Kappa(j1,j1))*ZDX(gI1,j1)*ZDXR(gI2,j1);
   }
   tmp_6831 += tmp_6832;
   tmp_6830 += (std::complex<double>(0,-1)*KroneckerDelta(4,gO1)) * tmp_6831;
   std::complex<double> tmp_6833;
   std::complex<double> tmp_6834;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6834 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_6833 += tmp_6834;
   tmp_6830 += (std::complex<double>(0.,-0.3651483716701107)*g1*KroneckerDelta(
      0,gO1)) * tmp_6833;
   std::complex<double> tmp_6835;
   std::complex<double> tmp_6836;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6836 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_6835 += tmp_6836;
   tmp_6830 += (std::complex<double>(0.,0.6708203932499369)*g1p*KroneckerDelta(
      7,gO1)) * tmp_6835;
   result += (std::complex<double>(0,-1)) * tmp_6830;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSeFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6837;
   std::complex<double> tmp_6838;
   std::complex<double> tmp_6839;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6839 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6838 += tmp_6839;
   tmp_6837 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_6838;
   std::complex<double> tmp_6840;
   std::complex<double> tmp_6841;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6841 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6840 += tmp_6841;
   tmp_6837 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO2)) * tmp_6840;
   std::complex<double> tmp_6842;
   std::complex<double> tmp_6843;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6843 += Conj(ZEL(gI2,j1))*ZE(gI1,j1);
   }
   tmp_6842 += tmp_6843;
   tmp_6837 += (std::complex<double>(0.,-0.4472135954999579)*g1p*KroneckerDelta
      (7,gO2)) * tmp_6842;
   std::complex<double> tmp_6844;
   std::complex<double> tmp_6845;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6845 += Conj(ZEL(gI2,j1))*Ye(j1,j1)*ZE(gI1,3 + j1);
   }
   tmp_6844 += tmp_6845;
   tmp_6837 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_6844;
   result += (std::complex<double>(0,-1)) * tmp_6837;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSeFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6846;
   std::complex<double> tmp_6847;
   std::complex<double> tmp_6848;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6848 += Conj(Ye(j1,j1))*ZE(gI1,j1)*ZER(gI2,j1);
   }
   tmp_6847 += tmp_6848;
   tmp_6846 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_6847;
   std::complex<double> tmp_6849;
   std::complex<double> tmp_6850;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6850 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_6849 += tmp_6850;
   tmp_6846 += (std::complex<double>(0.,-1.0954451150103321)*g1*KroneckerDelta(
      0,gO1)) * tmp_6849;
   std::complex<double> tmp_6851;
   std::complex<double> tmp_6852;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6852 += ZE(gI1,3 + j1)*ZER(gI2,j1);
   }
   tmp_6851 += tmp_6852;
   tmp_6846 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO1)) * tmp_6851;
   result += (std::complex<double>(0,-1)) * tmp_6846;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSuFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6853;
   std::complex<double> tmp_6854;
   std::complex<double> tmp_6855;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6855 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6854 += tmp_6855;
   tmp_6853 += (std::complex<double>(0.,-0.18257418583505536)*g1*KroneckerDelta
      (0,gO2)) * tmp_6854;
   std::complex<double> tmp_6856;
   std::complex<double> tmp_6857;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6857 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6856 += tmp_6857;
   tmp_6853 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO2)) * tmp_6856;
   std::complex<double> tmp_6858;
   std::complex<double> tmp_6859;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6859 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6858 += tmp_6859;
   tmp_6853 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO2)) * tmp_6858;
   std::complex<double> tmp_6860;
   std::complex<double> tmp_6861;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6861 += Conj(ZUL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_6860 += tmp_6861;
   tmp_6853 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO2)) * tmp_6860;
   result += (std::complex<double>(0,-1)) * tmp_6853;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSuFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6862;
   std::complex<double> tmp_6863;
   std::complex<double> tmp_6864;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6864 += Conj(Yu(j1,j1))*ZU(gI1,j1)*ZUR(gI2,j1);
   }
   tmp_6863 += tmp_6864;
   tmp_6862 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO1)) * tmp_6863;
   std::complex<double> tmp_6865;
   std::complex<double> tmp_6866;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6866 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_6865 += tmp_6866;
   tmp_6862 += (std::complex<double>(0.,0.7302967433402214)*g1*KroneckerDelta(0
      ,gO1)) * tmp_6865;
   std::complex<double> tmp_6867;
   std::complex<double> tmp_6868;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6868 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_6867 += tmp_6868;
   tmp_6862 += (std::complex<double>(0.,-0.22360679774997896)*g1p*
      KroneckerDelta(7,gO1)) * tmp_6867;
   result += (std::complex<double>(0,-1)) * tmp_6862;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHI0ChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6869;
   std::complex<double> tmp_6870;
   std::complex<double> tmp_6871;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6871 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6870 += tmp_6871;
   tmp_6869 += (std::complex<double>(0.,0.5477225575051661)*g1*KroneckerDelta(0
      ,gO2)) * tmp_6870;
   std::complex<double> tmp_6872;
   std::complex<double> tmp_6873;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6873 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6872 += tmp_6873;
   tmp_6869 += (std::complex<double>(0.,-0.7071067811865475)*g2*KroneckerDelta(
      1,gO2)) * tmp_6872;
   std::complex<double> tmp_6874;
   std::complex<double> tmp_6875;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6875 += Conj(ZNI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6874 += tmp_6875;
   tmp_6869 += (std::complex<double>(0.,0.6708203932499369)*g1p*KroneckerDelta(
      7,gO2)) * tmp_6874;
   std::complex<double> tmp_6876;
   std::complex<double> tmp_6877;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6877 += Conj(ZNI(gI2,j1))*UHI0(gI1,2 + j1)*Lambda12(j1,j1);
   }
   tmp_6876 += tmp_6877;
   tmp_6869 += (std::complex<double>(0,1)*KroneckerDelta(4,gO2)) * tmp_6876;
   std::complex<double> tmp_6878;
   std::complex<double> tmp_6879;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6879 += Conj(ZNI(gI2,4 + j1))*UHI0(gI1,4 + j1);
   }
   tmp_6878 += tmp_6879;
   tmp_6869 += (std::complex<double>(0.,-1.118033988749895)*g1p*KroneckerDelta(
      7,gO2)) * tmp_6878;
   std::complex<double> tmp_6880;
   std::complex<double> tmp_6881;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6882;
      std::complex<double> tmp_6883;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6883 += Conj(ZNI(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_6882 += tmp_6883;
      tmp_6881 += (UHI0(gI1,2 + j2)) * tmp_6882;
   }
   tmp_6880 += tmp_6881;
   tmp_6869 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO2)) * tmp_6880;
   result += (std::complex<double>(0,-1)) * tmp_6869;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjSHI0ChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6884;
   std::complex<double> tmp_6885;
   std::complex<double> tmp_6886;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6886 += Conj(Lambda12(j1,j1))*UHI0(gI1,j1)*ZNI(gI2,2 + j1);
   }
   tmp_6885 += tmp_6886;
   tmp_6884 += (std::complex<double>(0,1)*KroneckerDelta(4,gO1)) * tmp_6885;
   std::complex<double> tmp_6887;
   std::complex<double> tmp_6888;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6888 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_6887 += tmp_6888;
   tmp_6884 += (std::complex<double>(0.,-0.5477225575051661)*g1*KroneckerDelta(
      0,gO1)) * tmp_6887;
   std::complex<double> tmp_6889;
   std::complex<double> tmp_6890;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6890 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_6889 += tmp_6890;
   tmp_6884 += (std::complex<double>(0.,0.7071067811865475)*g2*KroneckerDelta(1
      ,gO1)) * tmp_6889;
   std::complex<double> tmp_6891;
   std::complex<double> tmp_6892;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6892 += UHI0(gI1,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_6891 += tmp_6892;
   tmp_6884 += (std::complex<double>(0.,0.4472135954999579)*g1p*KroneckerDelta(
      7,gO1)) * tmp_6891;
   std::complex<double> tmp_6893;
   std::complex<double> tmp_6894;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6895;
      std::complex<double> tmp_6896;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6896 += Conj(fu(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_6895 += tmp_6896;
      tmp_6894 += (UHI0(gI1,j2)) * tmp_6895;
   }
   tmp_6893 += tmp_6894;
   tmp_6884 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO1)) * tmp_6893;
   std::complex<double> tmp_6897;
   std::complex<double> tmp_6898;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6899;
      std::complex<double> tmp_6900;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6900 += Conj(fu(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_6899 += tmp_6900;
      tmp_6898 += (ZNI(gI2,j2)) * tmp_6899;
   }
   tmp_6897 += tmp_6898;
   tmp_6884 += (std::complex<double>(0,-1)*KroneckerDelta(3,gO1)) * tmp_6897;
   std::complex<double> tmp_6901;
   std::complex<double> tmp_6902;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6903;
      std::complex<double> tmp_6904;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6904 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_6903 += tmp_6904;
      tmp_6902 += (ZNI(gI2,2 + j2)) * tmp_6903;
   }
   tmp_6901 += tmp_6902;
   tmp_6884 += (std::complex<double>(0,-1)*KroneckerDelta(2,gO1)) * tmp_6901;
   result += (std::complex<double>(0,-1)) * tmp_6884;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiChiAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(10*g2*Conj(ZN(gI1,1))*KroneckerDelta(
      2,gO2)*ZA(gI2,0) - 9.486832980505138*g1p*Conj(ZN(gI1,7))*KroneckerDelta(2,
      gO2)*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(3,gO2)*
      Lambdax*ZA(gI2,0) + 14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(4,gO2)
      *Lambdax*ZA(gI2,0) + 7.745966692414834*g1*Conj(ZN(gI1,3))*KroneckerDelta(0,
      gO2)*ZA(gI2,1) - 10*g2*Conj(ZN(gI1,3))*KroneckerDelta(1,gO2)*ZA(gI2,1) - 10*
      g2*Conj(ZN(gI1,1))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*g1p*
      Conj(ZN(gI1,7))*KroneckerDelta(3,gO2)*ZA(gI2,1) - 6.324555320336759*g1p*Conj
      (ZN(gI1,3))*KroneckerDelta(7,gO2)*ZA(gI2,1) + 14.142135623730951*Conj(ZN(gI1
      ,4))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2,1) + 7.745966692414834*g1*Conj(ZN(
      gI1,0))*(-(KroneckerDelta(2,gO2)*ZA(gI2,0)) + KroneckerDelta(3,gO2)*ZA(gI2,1
      )) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*KroneckerDelta(4,gO2)*ZA(gI2,
      2) + 3.1622776601683795*g1p*QS*Conj(ZN(gI1,4))*KroneckerDelta(7,gO2)*ZA(gI2,
      2) + 14.142135623730951*Conj(ZN(gI1,3))*KroneckerDelta(2,gO2)*Lambdax*ZA(gI2
      ,2) + 14.142135623730951*Conj(ZN(gI1,6))*KroneckerDelta(5,gO2)*Sigmax*ZA(gI2
      ,2) + 14.142135623730951*Conj(ZN(gI1,5))*KroneckerDelta(6,gO2)*Sigmax*ZA(gI2
      ,2) + Conj(ZN(gI1,2))*(-7.745966692414834*g1*KroneckerDelta(0,gO2)*ZA(gI2,0)
      + 10*g2*KroneckerDelta(1,gO2)*ZA(gI2,0) + 1.4142135623730951*(
      -6.708203932499369*g1p*KroneckerDelta(7,gO2)*ZA(gI2,0) + 10*Lambdax*(
      KroneckerDelta(4,gO2)*ZA(gI2,1) + KroneckerDelta(3,gO2)*ZA(gI2,2)))) -
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,7))*KroneckerDelta(5,gO2)*ZA(gI2,3) -
      3.1622776601683795*g1p*QS*Conj(ZN(gI1,5))*KroneckerDelta(7,gO2)*ZA(gI2,3) +
      14.142135623730951*Conj(ZN(gI1,6))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,3) +
      14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(6,gO2)*Sigmax*ZA(gI2,3) -
      28.284271247461902*Conj(ZN(gI1,6))*KroneckerDelta(6,gO2)*KappaPr*ZA(gI2,4) +
      14.142135623730951*Conj(ZN(gI1,5))*KroneckerDelta(4,gO2)*Sigmax*ZA(gI2,4) +
      14.142135623730951*Conj(ZN(gI1,4))*KroneckerDelta(5,gO2)*Sigmax*ZA(gI2,4));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiChiAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0,0.05)*(7.745966692414834*g1*KroneckerDelta(0
      ,gO1)*ZA(gI2,0)*ZN(gI1,2) - 10*g2*KroneckerDelta(1,gO1)*ZA(gI2,0)*ZN(gI1,2)
      + 9.486832980505138*g1p*KroneckerDelta(7,gO1)*ZA(gI2,0)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,1)*ZN(gI1,2) -
      14.142135623730951*Conj(Lambdax)*KroneckerDelta(4,gO1)*ZA(gI2,0)*ZN(gI1,3)
      - 7.745966692414834*g1*KroneckerDelta(0,gO1)*ZA(gI2,1)*ZN(gI1,3) + 10*g2*
      KroneckerDelta(1,gO1)*ZA(gI2,1)*ZN(gI1,3) + 6.324555320336759*g1p*
      KroneckerDelta(7,gO1)*ZA(gI2,1)*ZN(gI1,3) - 3.1622776601683795*g1p*QS*
      KroneckerDelta(7,gO1)*ZA(gI2,2)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(6,gO1)*ZA(gI2,3)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(5,gO1)*ZA(gI2,4)*ZN(gI1,4) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(6,gO1)*ZA(gI2,2)*ZN(gI1,5) + 3.1622776601683795*g1p*QS*
      KroneckerDelta(7,gO1)*ZA(gI2,3)*ZN(gI1,5) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*ZA(gI2,4)*ZN(gI1,5) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(5,gO1)*ZA(gI2,2)*ZN(gI1,6) - 14.142135623730951*Conj(Sigmax)*
      KroneckerDelta(4,gO1)*ZA(gI2,3)*ZN(gI1,6) + 28.284271247461902*Conj(KappaPr)
      *KroneckerDelta(6,gO1)*ZA(gI2,4)*ZN(gI1,6) - 3.1622776601683795*g1p*QS*
      KroneckerDelta(4,gO1)*ZA(gI2,2)*ZN(gI1,7) + 3.1622776601683795*g1p*QS*
      KroneckerDelta(5,gO1)*ZA(gI2,3)*ZN(gI1,7) - 2*KroneckerDelta(3,gO1)*(
      7.0710678118654755*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,2) + ZA(gI2,0)*ZN(gI1,4))
      + ZA(gI2,1)*(3.872983346207417*g1*ZN(gI1,0) - 5*g2*ZN(gI1,1) -
      3.1622776601683795*g1p*ZN(gI1,7))) + KroneckerDelta(2,gO1)*(
      -14.142135623730951*Conj(Lambdax)*(ZA(gI2,2)*ZN(gI1,3) + ZA(gI2,1)*ZN(gI1,4)
      ) + ZA(gI2,0)*(7.745966692414834*g1*ZN(gI1,0) - 10*g2*ZN(gI1,1) +
      9.486832980505138*g1p*ZN(gI1,7))));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjVWmChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO2)*UP(gI2,0)) + 0.7071067811865475*g2*
      KroneckerDelta(3,gO2)*UP(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiconjVWmChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(UM(gI2,0))*KroneckerDelta(1,gO1) +
      1.4142135623730951*Conj(UM(gI2,1))*KroneckerDelta(2,gO1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiVZChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(KroneckerDelta(2,gO2)*(10*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) - 9.486832980505138*g1p*
      Sin(ThetaWp()))*ZN(gI2,2) - 2*KroneckerDelta(3,gO2)*(5*g2*Cos(ThetaW())*Cos(
      ThetaWp()) + 3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      3.1622776601683795*g1p*Sin(ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS
      *Sin(ThetaWp())*(KroneckerDelta(4,gO2)*ZN(gI2,4) - KroneckerDelta(5,gO2)*ZN(
      gI2,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiVZChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(3.1622776601683795*g1p*QS*(-(Conj(ZN(gI2,4))*KroneckerDelta(4
      ,gO1)) + Conj(ZN(gI2,5))*KroneckerDelta(5,gO1))*Sin(ThetaWp()) + 2*Conj(ZN(
      gI2,3))*KroneckerDelta(3,gO1)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp())) + Conj(ZN(gI2,2))*KroneckerDelta(2,gO1)*(-10*g2*Cos(ThetaW()
      )*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiVZpChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-(KroneckerDelta(2,gO2)*(9.486832980505138*g1p*Cos(ThetaWp())
      + 2*(5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()
      ))*ZN(gI2,2)) + 2*KroneckerDelta(3,gO2)*(-3.1622776601683795*g1p*Cos(ThetaWp
      ()) + 5*g2*Cos(ThetaW())*Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())
      *Sin(ThetaWp()))*ZN(gI2,3) + 3.1622776601683795*g1p*QS*Cos(ThetaWp())*(
      KroneckerDelta(4,gO2)*ZN(gI2,4) - KroneckerDelta(5,gO2)*ZN(gI2,5)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiVZpChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(3.1622776601683795*g1p*QS*Cos(ThetaWp())*(-(Conj(ZN(gI2,4))*
      KroneckerDelta(4,gO1)) + Conj(ZN(gI2,5))*KroneckerDelta(5,gO1)) + 2*Conj(ZN(
      gI2,3))*KroneckerDelta(3,gO1)*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2
      *Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())) + Conj(
      ZN(gI2,2))*KroneckerDelta(2,gO1)*(9.486832980505138*g1p*Cos(ThetaWp()) + 2*(
      5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaSHppChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,1))*Conj(ZNp(gI2,1))*KroneckerDelta(0,gO2));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaSHppChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHpp(gI1,0))*KroneckerDelta(0,gO1)*ZNp(gI2,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaChaAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*(g2*Conj(UM(gI1,0))*
      KroneckerDelta(1,gO2)*ZA(gI2,1) + Conj(UM(gI1,1))*(g2*KroneckerDelta(0,gO2)*
      ZA(gI2,0) - KroneckerDelta(1,gO2)*Lambdax*ZA(gI2,2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaChaAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(g2*KroneckerDelta(0,
      gO1)*UP(gI1,1)*ZA(gI2,1) + KroneckerDelta(1,gO1)*(g2*UP(gI1,0)*ZA(gI2,0) -
      Conj(Lambdax)*UP(gI1,1)*ZA(gI2,2)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaHpmChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(ZN(gI2,3))*Conj(ZP(gI1,1))*KroneckerDelta(0,gO2)) - 0.1*
      KroneckerDelta(1,gO2)*((5.477225575051661*g1*Conj(ZN(gI2,0)) +
      7.0710678118654755*g2*Conj(ZN(gI2,1)) - 4.47213595499958*g1p*Conj(ZN(gI2,7))
      )*Conj(ZP(gI1,1)) + 10*Conj(ZN(gI2,4))*Conj(ZP(gI1,0))*Lambdax);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaHpmChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(Conj(Lambdax)*Conj(ZP(gI1,1))*KroneckerDelta(1,gO1)*ZN(gI2,4)) +
      0.1*Conj(ZP(gI1,0))*(-10*g2*KroneckerDelta(0,gO1)*ZN(gI2,2) + KroneckerDelta
      (1,gO1)*(5.477225575051661*g1*ZN(gI2,0) + 7.0710678118654755*g2*ZN(gI2,1) +
      6.708203932499369*g1p*ZN(gI2,7)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSHp0ChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*UHp0(gI1,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSHp0ChaPPR(unsigned gO1, unsigned gI1) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO1)*UHp0(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSvFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6905;
   std::complex<double> tmp_6906;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6906 += Conj(ZEL(gI2,j1))*ZV(gI1,j1);
   }
   tmp_6905 += tmp_6906;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_6905;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSvFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6907;
   std::complex<double> tmp_6908;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6908 += Conj(Ye(j1,j1))*ZER(gI2,j1)*ZV(gI1,j1);
   }
   tmp_6907 += tmp_6908;
   result += (KroneckerDelta(1,gO1)) * tmp_6907;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChabarFuSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6909;
   std::complex<double> tmp_6910;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6910 += Conj(ZD(gI2,j1))*Conj(ZUR(gI1,j1))*Yu(j1,j1);
   }
   tmp_6909 += tmp_6910;
   result += (KroneckerDelta(1,gO2)) * tmp_6909;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChabarFuSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6911;
   std::complex<double> tmp_6912;
   std::complex<double> tmp_6913;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6913 += Conj(ZD(gI2,j1))*ZUL(gI1,j1);
   }
   tmp_6912 += tmp_6913;
   tmp_6911 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO1)) * tmp_6912
      ;
   std::complex<double> tmp_6914;
   std::complex<double> tmp_6915;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6915 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gI1,j1);
   }
   tmp_6914 += tmp_6915;
   tmp_6911 += (std::complex<double>(0,1)*KroneckerDelta(1,gO1)) * tmp_6914;
   result += (std::complex<double>(0,-1)) * tmp_6911;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUChabarFvSePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChabarFvSePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI1 < 3) {
      result += -(g2*Conj(ZE(gI2,gI1))*KroneckerDelta(0,gO1));
   }
   if (gI1 < 3) {
      result += Conj(Ye(gI1,gI1))*Conj(ZE(gI2,3 + gI1))*KroneckerDelta(1,gO1
         );
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaSHIPMChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6916;
   std::complex<double> tmp_6917;
   std::complex<double> tmp_6918;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6918 += Conj(UHIPM(gI1,2 + j1))*Conj(ZNI(gI2,2 + j1));
   }
   tmp_6917 += tmp_6918;
   tmp_6916 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO2)) * tmp_6917
      ;
   std::complex<double> tmp_6919;
   std::complex<double> tmp_6920;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6921;
      std::complex<double> tmp_6922;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6922 += Conj(ZNI(gI2,4 + j1))*fu(j1,j2);
      }
      tmp_6921 += tmp_6922;
      tmp_6920 += (Conj(UHIPM(gI1,j2))) * tmp_6921;
   }
   tmp_6919 += tmp_6920;
   tmp_6916 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_6919;
   result += (std::complex<double>(0,-1)) * tmp_6916;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaSHIPMChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6923;
   std::complex<double> tmp_6924;
   std::complex<double> tmp_6925;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6925 += Conj(UHIPM(gI1,j1))*ZNI(gI2,j1);
   }
   tmp_6924 += tmp_6925;
   tmp_6923 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO1)) * tmp_6924
      ;
   std::complex<double> tmp_6926;
   std::complex<double> tmp_6927;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6928;
      std::complex<double> tmp_6929;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6929 += Conj(fd(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_6928 += tmp_6929;
      tmp_6927 += (Conj(UHIPM(gI1,2 + j2))) * tmp_6928;
   }
   tmp_6926 += tmp_6927;
   tmp_6923 += (std::complex<double>(0,1)*KroneckerDelta(1,gO1)) * tmp_6926;
   result += (std::complex<double>(0,-1)) * tmp_6923;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChahhChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(UM(gI2,0))*Conj(ZH(gI1,1))*
      KroneckerDelta(1,gO2) + Conj(UM(gI2,1))*(g2*Conj(ZH(gI1,0))*KroneckerDelta(0
      ,gO2) + Conj(ZH(gI1,2))*KroneckerDelta(1,gO2)*Lambdax));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChahhChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*(g2*Conj(ZH(gI1,0))*KroneckerDelta(1,gO1)*UP(
      gI2,0) + (g2*Conj(ZH(gI1,1))*KroneckerDelta(0,gO1) + Conj(Lambdax)*Conj(ZH(
      gI1,2))*KroneckerDelta(1,gO1))*UP(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSuFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6930;
   std::complex<double> tmp_6931;
   std::complex<double> tmp_6932;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6932 += Conj(ZDL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_6931 += tmp_6932;
   tmp_6930 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO2)) * tmp_6931
      ;
   std::complex<double> tmp_6933;
   std::complex<double> tmp_6934;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6934 += Conj(ZDL(gI2,j1))*Yu(j1,j1)*ZU(gI1,3 + j1);
   }
   tmp_6933 += tmp_6934;
   tmp_6930 += (std::complex<double>(0,1)*KroneckerDelta(1,gO2)) * tmp_6933;
   result += (std::complex<double>(0,-1)) * tmp_6930;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSuFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6935;
   std::complex<double> tmp_6936;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_6936 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZU(gI1,j1);
   }
   tmp_6935 += tmp_6936;
   result += (KroneckerDelta(1,gO1)) * tmp_6935;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSHI0ChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6937;
   std::complex<double> tmp_6938;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6938 += Conj(ZMI(gI2,j1))*UHI0(gI1,j1);
   }
   tmp_6937 += tmp_6938;
   result += (-(g2*KroneckerDelta(0,gO2))) * tmp_6937;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaconjSHI0ChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6939;
   std::complex<double> tmp_6940;
   std::complex<double> tmp_6941;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_6941 += UHI0(gI1,2 + j1)*ZPI(gI2,j1);
   }
   tmp_6940 += tmp_6941;
   tmp_6939 += (std::complex<double>(0,-1)*g2*KroneckerDelta(0,gO1)) * tmp_6940
      ;
   std::complex<double> tmp_6942;
   std::complex<double> tmp_6943;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6944;
      std::complex<double> tmp_6945;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6945 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_6944 += tmp_6945;
      tmp_6943 += (ZPI(gI2,j2)) * tmp_6944;
   }
   tmp_6942 += tmp_6943;
   tmp_6939 += (std::complex<double>(0,1)*KroneckerDelta(1,gO1)) * tmp_6942;
   result += (std::complex<double>(0,-1)) * tmp_6939;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaSHI0ChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6946;
   std::complex<double> tmp_6947;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6948;
      std::complex<double> tmp_6949;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6949 += Conj(UHI0(gI1,4 + j1))*fu(j1,j2);
      }
      tmp_6948 += tmp_6949;
      tmp_6947 += (Conj(ZMI(gI2,j2))) * tmp_6948;
   }
   tmp_6946 += tmp_6947;
   result += (KroneckerDelta(1,gO2)) * tmp_6946;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUChaSHI0ChaIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVPChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*KroneckerDelta(0,gO2)*Sin(ThetaW())*UP(gI2,0) + 0.1*
      KroneckerDelta(1,gO2)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*Sin(ThetaW(
      )))*UP(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVPChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO1)*Sin(ThetaW()) + 0.1*Conj(
      UM(gI2,1))*KroneckerDelta(1,gO1)*(3.872983346207417*g1*Cos(ThetaW()) + 5*g2*
      Sin(ThetaW()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVZChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = g2*Cos(ThetaW())*Cos(ThetaWp())*KroneckerDelta(0,gO2)*UP(gI2,0) +
      0.1*KroneckerDelta(1,gO2)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()))*UP(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVZChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*Cos(ThetaWp())*
      KroneckerDelta(0,gO1) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(10*g2*Cos(
      ThetaW())*Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())
      + 9.486832980505138*g1p*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVZpChaPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(-10*g2*Cos(ThetaW())*KroneckerDelta(0,gO2)*Sin(ThetaWp())*UP(
      gI2,0) + KroneckerDelta(1,gO2)*(-3.1622776601683795*g1p*Cos(ThetaWp()) + (-5
      *g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*UP(
      gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVZpChaPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.05*(-20*g2*Conj(UM(gI2,0))*Cos(ThetaW())*KroneckerDelta(0,gO1)*
      Sin(ThetaWp()) + Conj(UM(gI2,1))*KroneckerDelta(1,gO1)*(9.486832980505138*
      g1p*Cos(ThetaWp()) + 2*(-5*g2*Cos(ThetaW()) + 3.872983346207417*g1*Sin(
      ThetaW()))*Sin(ThetaWp())));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVWmChiPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(0,gO2)*ZN(gI2,1)) + 0.7071067811865475*g2*
      KroneckerDelta(1,gO2)*ZN(gI2,3);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaVWmChiPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.5*g2*(2*Conj(ZN(gI2,1))*KroneckerDelta(0,gO1) +
      1.4142135623730951*Conj(ZN(gI2,2))*KroneckerDelta(1,gO1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSHp0ChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6950;
      std::complex<double> tmp_6951;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_6951 += Conj(ZMI(gI2,j2))*hE(gO2,j2);
      }
      tmp_6950 += tmp_6951;
      result += (Conj(UHp0(gI1,0))) * tmp_6950;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeSHp0ChaIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += Conj(ZP(gI1,0))*KroneckerDelta(gI2,gO2)*Ye(gI2,gI2);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSHppChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6952;
      std::complex<double> tmp_6953;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_6953 += Conj(ZNI(gI2,j2))*hE(gO2,j2);
      }
      tmp_6952 += tmp_6953;
      result += (-Conj(UHpp(gI1,0))) * tmp_6952;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeSHppChiIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZV(gI1,gO2))*Ye(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZV(gI1,gO1))*UP(gI2,0));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZEL(gI1,
         gO2))*Ye(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Ye(gO1,gO1)
         )*ZA(gI2,0)*ZER(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSHIPMChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6954;
      std::complex<double> tmp_6955;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_6955 += Conj(UHIPM(gI1,j2))*hE(gO2,j2);
      }
      tmp_6954 += tmp_6955;
      result += (Conj(ZNp(gI2,0))) * tmp_6954;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeSHIPMChiPPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZEL(gI2,gO2))*Conj(ZH(gI1,0))*Ye(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Ye(gO1,gO1))*Conj(ZH(gI1,0))*ZER(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -1.0954451150103321*g1*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZE(gI1,3 + gO2))*Conj(ZN(gI2,7
         ));
   }
   if (gO2 < 3) {
      result += -(Conj(ZE(gI1,gO2))*Conj(ZN(gI2,2))*Ye(gO2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(Conj(Ye(gO1,gO1))*Conj(ZE(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += 0.5477225575051661*g1*Conj(ZE(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZE(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZE(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeSHI0ChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6956;
      std::complex<double> tmp_6957;
      for (unsigned j2 = 0; j2 < 2; ++j2) {
         tmp_6957 += Conj(UHI0(gI1,j2))*hE(gO2,j2);
      }
      tmp_6956 += tmp_6957;
      result += (-1) * tmp_6956;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeSHI0ChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVPFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Cos(ThetaW())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVPFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*KroneckerDelta(gI2,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVZFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW())*ZER(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Sin(ThetaWp())*ZER(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVZFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZEL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Cos(ThetaWp())*ZER(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.7745966692414834*g1*Sin(ThetaW())*Sin(ThetaWp())*ZER(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.31622776601683794*g1p*Conj(ZEL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZEL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.3872983346207417*g1*Conj(ZEL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFdconjSHp0FDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdconjSHp0FDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      std::complex<double> tmp_6958;
      std::complex<double> tmp_6959;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_6959 += Conj(gD(gO1,j2))*ZDXR(gI2,j2);
      }
      tmp_6958 += tmp_6959;
      result += (UHp0(gI1,0)) * tmp_6958;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZP(gI1,0))*Conj(ZUL(gI2,gO2))*Yd(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*Conj(ZP(gI1,1))*ZUR(gI2,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDL(gI1,
         gO2))*Yd(gO2,gO2)*ZA(gI2,0);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yd(gO1,gO1)
         )*ZA(gI2,0)*ZDR(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDL(gI2,gO2))*Conj(ZH(gI1,0))*Yd(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yd(gO1,gO1))*Conj(ZH(gI1,0))*ZDR(
         gI2,gO1);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFdSDXChiPPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSDXChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      std::complex<double> tmp_6960;
      std::complex<double> tmp_6961;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_6961 += Conj(gD(gO1,j2))*Conj(ZDX(gI1,3 + j2));
      }
      tmp_6960 += tmp_6961;
      result += (ZNp(gI2,0)) * tmp_6960;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UM(gI2,1))*Conj(ZU(gI1,gO2))*Yd(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZU(gI1,gO1))*UP(gI2,0));
   }
   if (gO1 < 3) {
      result += Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*UP(gI2,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,0))
         ;
   }
   if (gO2 < 3) {
      result += -0.4472135954999579*g1p*Conj(ZD(gI1,3 + gO2))*Conj(ZN(gI2,7)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZD(gI1,gO2))*Conj(ZN(gI2,2))*Yd(gO2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZD(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += 0.7071067811865475*g2*Conj(ZD(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yd(gO1,gO1))*Conj(ZD(gI1,3 + gO1))*ZN(gI2,2));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZD(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZD(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZD(gI1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVGFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDR(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVGFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVPFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVPFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZUL(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Sin(ThetaWp())*ZDR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZDL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Cos(ThetaWp())*ZDR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZDL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZDL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZDL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(ZDL(gI2,gO2))*Yu(gO2,gO2)*ZP(gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*ZDR(gI2,gO1)*ZP(gI1,0);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFuconjSHppFDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuconjSHppFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      std::complex<double> tmp_6962;
      std::complex<double> tmp_6963;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_6963 += Conj(gD(gO1,j2))*ZDXR(gI2,j2);
      }
      tmp_6962 += tmp_6963;
      result += (-UHpp(gI1,0)) * tmp_6962;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += Conj(UP(gI1,1))*Conj(ZD(gI2,gO2))*Yu(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -(g2*Conj(ZD(gI2,gO1))*UM(gI1,0));
   }
   if (gO1 < 3) {
      result += Conj(Yd(gO1,gO1))*Conj(ZD(gI2,3 + gO1))*UM(gI1,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZUL(gI1,
         gO2))*Yu(gO2,gO2)*ZA(gI2,1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Yu(gO1,gO1)
         )*ZA(gI2,1)*ZUR(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI1,1))*Conj(ZUL(gI2,gO2))*Yu(
         gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(Yu(gO1,gO1))*Conj(ZH(gI1,1))*ZUR(
         gI2,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 0.7302967433402214*g1*Conj(ZN(gI2,0))*Conj(ZU(gI1,3 + gO2));
   }
   if (gO2 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZN(gI2,7))*Conj(ZU(gI1,3 + gO2
         ));
   }
   if (gO2 < 3) {
      result += -(Conj(ZN(gI2,3))*Conj(ZU(gI1,gO2))*Yu(gO2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.18257418583505536*g1*Conj(ZU(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZU(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 3) {
      result += -(Conj(Yu(gO1,gO1))*Conj(ZU(gI1,3 + gO1))*ZN(gI2,3));
   }
   if (gO1 < 3) {
      result += -0.22360679774997896*g1p*Conj(ZU(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZU(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZU(gI1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVGFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZUR(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVGFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZUL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Cos(ThetaW())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.5163977794943222*g1*Cos(ThetaWp())*Sin(ThetaW())*ZUR(gI2,
         gO2);
   }
   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Sin(ThetaWp())*ZUR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZUL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.15811388300841897*g1p*Cos(ThetaWp())*ZUR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += -0.5163977794943222*g1*Sin(ThetaW())*Sin(ThetaWp())*ZUR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.15811388300841897*g1p*Conj(ZUL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.5*g2*Conj(ZUL(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 3) {
      result += -0.12909944487358055*g1*Conj(ZUL(gI2,gO1))*Sin(ThetaW())*Sin
         (ThetaWp());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*g2*Conj(ZDL(gI2,gO1));
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFubarChaPSDXPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFubarChaPSDXPR(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      std::complex<double> tmp_6964;
      std::complex<double> tmp_6965;
      for (unsigned j2 = 0; j2 < 3; ++j2) {
         tmp_6965 += Conj(gD(gO1,j2))*Conj(ZDX(gI2,3 + j2));
      }
      tmp_6964 += tmp_6965;
      result += (-1) * tmp_6964;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSHp0FdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6966;
      std::complex<double> tmp_6967;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6967 += Conj(ZDL(gI2,j1))*gD(j1,gO2);
      }
      tmp_6966 += tmp_6967;
      result += (Conj(UHp0(gI1,0))) * tmp_6966;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFDXSHp0FdPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSHppFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6968;
      std::complex<double> tmp_6969;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6969 += Conj(ZUL(gI2,j1))*gD(j1,gO2);
      }
      tmp_6968 += tmp_6969;
      result += (-Conj(UHpp(gI1,0))) * tmp_6968;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFDXSHppFuPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXFDXAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZDXL(gI1,
         gO2))*ZA(gI2,2)*Kappa(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXFDXAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Kappa(gO1,
         gO1))*ZA(gI2,2)*ZDXR(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXhhFDXPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.7071067811865475*Conj(ZDXL(gI2,gO2))*Conj(ZH(gI1,2))*
         Kappa(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXhhFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -0.7071067811865475*Conj(ZH(gI1,2))*Conj(Kappa(gO1,gO1))*
         ZDXR(gI2,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSdChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6970;
      std::complex<double> tmp_6971;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6971 += Conj(ZD(gI1,j1))*gD(j1,gO2);
      }
      tmp_6970 += tmp_6971;
      result += (Conj(ZNp(gI2,0))) * tmp_6970;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFDXSdChiPPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSDXChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += -0.3651483716701107*g1*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,0)
         );
   }
   if (gO2 < 3) {
      result += 0.6708203932499369*g1p*Conj(ZDX(gI1,3 + gO2))*Conj(ZN(gI2,7)
         );
   }
   if (gO2 < 3) {
      result += -(Conj(ZDX(gI1,gO2))*Conj(ZN(gI2,4))*Kappa(gO2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSDXChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += 0.3651483716701107*g1*Conj(ZDX(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 3) {
      result += -(Conj(ZDX(gI1,3 + gO1))*Conj(Kappa(gO1,gO1))*ZN(gI2,4));
   }
   if (gO1 < 3) {
      result += 0.4472135954999579*g1p*Conj(ZDX(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSDXGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      result += 1.4142135623730951*g3*PhaseGlu*Conj(ZDX(gI1,3 + gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSDXGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   if (gO1 < 3) {
      result += -1.4142135623730951*g3*Conj(PhaseGlu)*Conj(ZDX(gI1,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXSuChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   if (gO2 < 3) {
      std::complex<double> tmp_6972;
      std::complex<double> tmp_6973;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6973 += Conj(ZU(gI1,j1))*gD(j1,gO2);
      }
      tmp_6972 += tmp_6973;
      result += (-1) * tmp_6972;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUFDXSuChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVGFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*ZDXR(gI2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVGFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -(g3*Conj(ZDXL(gI2,gO1)));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVPFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Cos(ThetaW())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVPFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVZFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Cos(ThetaWp())*Sin(ThetaW())*ZDXR(gI2
         ,gO2);
   }
   if (gI2 < 3) {
      result += -0.4743416490252569*g1p*Sin(ThetaWp())*ZDXR(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVZFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp())*
         Sin(ThetaW());
   }
   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZDXL(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVZpFDXPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.4743416490252569*g1p*Cos(ThetaWp())*ZDXR(gI2,gO2);
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp())*ZDXR(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUFDXVZpFDXPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += 0.31622776601683794*g1p*Conj(ZDXL(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 3) {
      result += 0.2581988897471611*g1*Conj(ZDXL(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUChaIconjSHp0FePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIconjSHp0FePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      std::complex<double> tmp_6974;
      std::complex<double> tmp_6975;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6975 += Conj(hE(j1,gO1))*ZER(gI2,j1);
      }
      tmp_6974 += tmp_6975;
      result += (UHp0(gI1,0)) * tmp_6974;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIChaIAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(ZMI(gI1,
         gO2))*ZA(gI2,2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIChaIAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(Lambda12(
         gO1,gO1))*ZA(gI2,2)*ZPI(gI1,gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIHpmChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      std::complex<double> tmp_6976;
      std::complex<double> tmp_6977;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6977 += Conj(ZNI(gI2,4 + j1))*fd(j1,gO2);
      }
      tmp_6976 += tmp_6977;
      result += (Conj(ZP(gI1,0))) * tmp_6976;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIHpmChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      std::complex<double> tmp_6978;
      std::complex<double> tmp_6979;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6979 += Conj(fu(j1,gO1))*ZNI(gI2,4 + j1);
      }
      tmp_6978 += tmp_6979;
      result += (Conj(ZP(gI1,1))) * tmp_6978;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaISHIPMChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -0.5477225575051661*g1*Conj(UHIPM(gI1,2 + gO2))*Conj(ZN(gI2,
         0));
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*g2*Conj(UHIPM(gI1,2 + gO2))*Conj(ZN(gI2,
         1));
   }
   if (gO2 < 2) {
      result += 0.4472135954999579*g1p*Conj(UHIPM(gI1,2 + gO2))*Conj(ZN(gI2,
         7));
   }
   if (gO2 < 2) {
      result += -(Conj(UHIPM(gI1,gO2))*Conj(ZN(gI2,4))*Lambda12(gO2,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaISHIPMChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(Conj(UHIPM(gI1,2 + gO1))*Conj(Lambda12(gO1,gO1))*ZN(gI2,4)
         );
   }
   if (gO1 < 2) {
      result += 0.5477225575051661*g1*Conj(UHIPM(gI1,gO1))*ZN(gI2,0);
   }
   if (gO1 < 2) {
      result += 0.7071067811865475*g2*Conj(UHIPM(gI1,gO1))*ZN(gI2,1);
   }
   if (gO1 < 2) {
      result += 0.6708203932499369*g1p*Conj(UHIPM(gI1,gO1))*ZN(gI2,7);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIhhChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -0.7071067811865475*Conj(ZH(gI1,2))*Conj(ZMI(gI2,gO2))*
         Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIhhChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*Conj(ZH(gI1,2))*Conj(Lambda12(gO1,gO1))*
         ZPI(gI2,gO1);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUChaISeChiPPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaISeChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      std::complex<double> tmp_6980;
      std::complex<double> tmp_6981;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6981 += Conj(hE(j1,gO1))*Conj(ZE(gI1,3 + j1));
      }
      tmp_6980 += tmp_6981;
      result += (ZNp(gI2,0)) * tmp_6980;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarUChaIconjSHI0ChaPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIconjSHI0ChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      std::complex<double> tmp_6982;
      std::complex<double> tmp_6983;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6983 += Conj(fu(j1,gO1))*UHI0(gI1,4 + j1);
      }
      tmp_6982 += tmp_6983;
      result += (UP(gI2,1)) * tmp_6982;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaISHI0ChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += -(g2*Conj(UHI0(gI1,2 + gO2))*Conj(UM(gI2,0)));
   }
   if (gO2 < 2) {
      std::complex<double> tmp_6984;
      std::complex<double> tmp_6985;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6985 += Conj(UHI0(gI1,4 + j1))*fd(j1,gO2);
      }
      tmp_6984 += tmp_6985;
      result += (Conj(UM(gI2,1))) * tmp_6984;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaISHI0ChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -(g2*Conj(UHI0(gI1,gO1))*UP(gI2,0));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVPChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Cos(ThetaW())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += 0.5*g2*Sin(ThetaW())*ZPI(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVPChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Cos(ThetaW());
   }
   if (gI2 < 2) {
      result += 0.5*g2*Conj(ZMI(gI2,gO1))*Sin(ThetaW());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVZChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Cos(ThetaW())*Cos(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())*ZPI(gI2,
         gO2);
   }
   if (gI2 < 2) {
      result += -0.31622776601683794*g1p*Sin(ThetaWp())*ZPI(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVZChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.5*g2*Conj(ZMI(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gI2 < 2) {
      result += 0.4743416490252569*g1p*Conj(ZMI(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVZpChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += -0.31622776601683794*g1p*Cos(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += -0.5*g2*Cos(ThetaW())*Sin(ThetaWp())*ZPI(gI2,gO2);
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())*ZPI(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVZpChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 2) {
      result += 0.4743416490252569*g1p*Conj(ZMI(gI2,gO1))*Cos(ThetaWp());
   }
   if (gI2 < 2) {
      result += -0.5*g2*Conj(ZMI(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gI2 < 2) {
      result += 0.3872983346207417*g1*Conj(ZMI(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVWmChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      result += 0.7071067811865475*g2*ZNI(gI2,2 + gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarUChaIVWmChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZNI(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjHpmChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6986;
   std::complex<double> tmp_6987;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6988;
      std::complex<double> tmp_6989;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6989 += KroneckerDelta(gO2,4 + j1)*fu(j1,j2);
      }
      tmp_6988 += tmp_6989;
      tmp_6987 += (Conj(ZMI(gI2,j2))) * tmp_6988;
   }
   tmp_6986 += tmp_6987;
   result += (ZP(gI1,1)) * tmp_6986;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjHpmChaIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6990;
   std::complex<double> tmp_6991;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6992;
      std::complex<double> tmp_6993;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6993 += Conj(fd(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_6992 += tmp_6993;
      tmp_6991 += (ZPI(gI2,j2)) * tmp_6992;
   }
   tmp_6990 += tmp_6991;
   result += (ZP(gI1,0)) * tmp_6990;

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiIconjSHppFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSHppFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      std::complex<double> tmp_6994;
      std::complex<double> tmp_6995;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6995 += Conj(hE(j1,gO1))*ZER(gI2,j1);
      }
      tmp_6994 += tmp_6995;
      result += (-UHpp(gI1,0)) * tmp_6994;
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSHIPMChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_6996;
   std::complex<double> tmp_6997;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_6998;
      std::complex<double> tmp_6999;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_6999 += fd(j1,j2)*KroneckerDelta(gO2,4 + j1);
      }
      tmp_6998 += tmp_6999;
      tmp_6997 += (UHIPM(gI1,2 + j2)) * tmp_6998;
   }
   tmp_6996 += tmp_6997;
   result += (Conj(UM(gI2,1))) * tmp_6996;
   if (gO2 < 2) {
      result += -(g2*Conj(UM(gI2,0))*UHIPM(gI1,gO2));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSHIPMChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7000;
   std::complex<double> tmp_7001;
   std::complex<double> tmp_7002;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7002 += KroneckerDelta(gO1,2 + j1)*UHIPM(gI1,2 + j1);
   }
   tmp_7001 += tmp_7002;
   tmp_7000 += (std::complex<double>(0,-1)*g2*UP(gI2,0)) * tmp_7001;
   std::complex<double> tmp_7003;
   std::complex<double> tmp_7004;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7005;
      std::complex<double> tmp_7006;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7006 += Conj(fu(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7005 += tmp_7006;
      tmp_7004 += (UHIPM(gI1,j2)) * tmp_7005;
   }
   tmp_7003 += tmp_7004;
   tmp_7000 += (std::complex<double>(0,1)*UP(gI2,1)) * tmp_7003;
   result += (std::complex<double>(0,-1)) * tmp_7000;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIhhChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7007;
   std::complex<double> tmp_7008;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7008 += Conj(ZNI(gI2,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_7007 += tmp_7008;
   result += (0.7071067811865475*Conj(ZH(gI1,2))) * tmp_7007;
   std::complex<double> tmp_7009;
   std::complex<double> tmp_7010;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7011;
      std::complex<double> tmp_7012;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7012 += Conj(ZNI(gI2,4 + j1))*fd(j1,j2);
      }
      tmp_7011 += tmp_7012;
      tmp_7010 += (KroneckerDelta(gO2,2 + j2)) * tmp_7011;
   }
   tmp_7009 += tmp_7010;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7009;
   std::complex<double> tmp_7013;
   std::complex<double> tmp_7014;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7015;
      std::complex<double> tmp_7016;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7016 += fd(j1,j2)*KroneckerDelta(gO2,4 + j1);
      }
      tmp_7015 += tmp_7016;
      tmp_7014 += (Conj(ZNI(gI2,2 + j2))) * tmp_7015;
   }
   tmp_7013 += tmp_7014;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7013;
   std::complex<double> tmp_7017;
   std::complex<double> tmp_7018;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7019;
      std::complex<double> tmp_7020;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7020 += KroneckerDelta(gO2,4 + j1)*fu(j1,j2);
      }
      tmp_7019 += tmp_7020;
      tmp_7018 += (Conj(ZNI(gI2,j2))) * tmp_7019;
   }
   tmp_7017 += tmp_7018;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7017;
   if (gO2 < 2) {
      std::complex<double> tmp_7021;
      std::complex<double> tmp_7022;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7022 += Conj(ZNI(gI2,4 + j1))*fu(j1,gO2);
      }
      tmp_7021 += tmp_7022;
      result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7021;
   }
   if (gO2 < 2) {
      result += 0.7071067811865475*Conj(ZH(gI1,2))*Conj(ZNI(gI2,2 + gO2))*
         Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIhhChiIPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7023;
   std::complex<double> tmp_7024;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7024 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*ZNI(gI2,
         j1);
   }
   tmp_7023 += tmp_7024;
   result += (0.7071067811865475*Conj(ZH(gI1,2))) * tmp_7023;
   std::complex<double> tmp_7025;
   std::complex<double> tmp_7026;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7027;
      std::complex<double> tmp_7028;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7028 += Conj(fd(j1,j2))*ZNI(gI2,4 + j1);
      }
      tmp_7027 += tmp_7028;
      tmp_7026 += (KroneckerDelta(gO1,2 + j2)) * tmp_7027;
   }
   tmp_7025 += tmp_7026;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7025;
   std::complex<double> tmp_7029;
   std::complex<double> tmp_7030;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7031;
      std::complex<double> tmp_7032;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7032 += Conj(fu(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7031 += tmp_7032;
      tmp_7030 += (ZNI(gI2,j2)) * tmp_7031;
   }
   tmp_7029 += tmp_7030;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7029;
   std::complex<double> tmp_7033;
   std::complex<double> tmp_7034;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7035;
      std::complex<double> tmp_7036;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7036 += Conj(fd(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7035 += tmp_7036;
      tmp_7034 += (ZNI(gI2,2 + j2)) * tmp_7035;
   }
   tmp_7033 += tmp_7034;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7033;
   if (gO1 < 2) {
      std::complex<double> tmp_7037;
      std::complex<double> tmp_7038;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7038 += Conj(fu(j1,gO1))*ZNI(gI2,4 + j1);
      }
      tmp_7037 += tmp_7038;
      result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7037;
   }
   if (gO1 < 2) {
      result += 0.7071067811865475*Conj(ZH(gI1,2))*Conj(Lambda12(gO1,gO1))*
         ZNI(gI2,2 + gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSeChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   if (gO2 < 2) {
      std::complex<double> tmp_7039;
      std::complex<double> tmp_7040;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7040 += hE(j1,gO2)*ZE(gI1,3 + j1);
      }
      tmp_7039 += tmp_7040;
      result += (-1) * tmp_7039;
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiIconjSeChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIChiIAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7041;
   std::complex<double> tmp_7042;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7043;
      std::complex<double> tmp_7044;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7044 += Conj(ZNI(gI1,4 + j1))*fd(j1,j2);
      }
      tmp_7043 += tmp_7044;
      tmp_7042 += (KroneckerDelta(gO2,2 + j2)) * tmp_7043;
   }
   tmp_7041 += tmp_7042;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_7041;
   std::complex<double> tmp_7045;
   std::complex<double> tmp_7046;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7047;
      std::complex<double> tmp_7048;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7048 += fd(j1,j2)*KroneckerDelta(gO2,4 + j1);
      }
      tmp_7047 += tmp_7048;
      tmp_7046 += (Conj(ZNI(gI1,2 + j2))) * tmp_7047;
   }
   tmp_7045 += tmp_7046;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_7045;
   std::complex<double> tmp_7049;
   std::complex<double> tmp_7050;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7051;
      std::complex<double> tmp_7052;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7052 += KroneckerDelta(gO2,4 + j1)*fu(j1,j2);
      }
      tmp_7051 += tmp_7052;
      tmp_7050 += (Conj(ZNI(gI1,j2))) * tmp_7051;
   }
   tmp_7049 += tmp_7050;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_7049;
   if (gO2 < 2) {
      std::complex<double> tmp_7053;
      std::complex<double> tmp_7054;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7054 += Conj(ZNI(gI1,4 + j1))*fu(j1,gO2);
      }
      tmp_7053 += tmp_7054;
      result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
         tmp_7053;
   }
   std::complex<double> tmp_7055;
   std::complex<double> tmp_7056;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7056 += Conj(ZNI(gI1,j1))*KroneckerDelta(gO2,2 + j1)*Lambda12(j1,
         j1);
   }
   tmp_7055 += tmp_7056;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,2)) * tmp_7055
      ;
   if (gO2 < 2) {
      result += std::complex<double>(0.,0.7071067811865475)*Conj(ZNI(gI1,2 +
         gO2))*ZA(gI2,2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIChiIAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7057;
   std::complex<double> tmp_7058;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7059;
      std::complex<double> tmp_7060;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7060 += Conj(fd(j1,j2))*ZNI(gI1,4 + j1);
      }
      tmp_7059 += tmp_7060;
      tmp_7058 += (KroneckerDelta(gO1,2 + j2)) * tmp_7059;
   }
   tmp_7057 += tmp_7058;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_7057
      ;
   std::complex<double> tmp_7061;
   std::complex<double> tmp_7062;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7063;
      std::complex<double> tmp_7064;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7064 += Conj(fd(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7063 += tmp_7064;
      tmp_7062 += (ZNI(gI1,2 + j2)) * tmp_7063;
   }
   tmp_7061 += tmp_7062;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_7061
      ;
   std::complex<double> tmp_7065;
   std::complex<double> tmp_7066;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7067;
      std::complex<double> tmp_7068;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7068 += Conj(fu(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7067 += tmp_7068;
      tmp_7066 += (ZNI(gI1,j2)) * tmp_7067;
   }
   tmp_7065 += tmp_7066;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) * tmp_7065
      ;
   if (gO1 < 2) {
      std::complex<double> tmp_7069;
      std::complex<double> tmp_7070;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7070 += Conj(fu(j1,gO1))*ZNI(gI1,4 + j1);
      }
      tmp_7069 += tmp_7070;
      result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) *
         tmp_7069;
   }
   std::complex<double> tmp_7071;
   std::complex<double> tmp_7072;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7072 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*ZNI(gI1,
         j1);
   }
   tmp_7071 += tmp_7072;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,2)) *
      tmp_7071;
   if (gO1 < 2) {
      result += std::complex<double>(0.,-0.7071067811865475)*Conj(Lambda12(
         gO1,gO1))*ZA(gI2,2)*ZNI(gI1,2 + gO1);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSHI0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7073;
   std::complex<double> tmp_7074;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7074 += KroneckerDelta(gO2,4 + j1)*UHI0(gI1,4 + j1);
   }
   tmp_7073 += tmp_7074;
   result += (-1.118033988749895*g1p*Conj(ZN(gI2,7))) * tmp_7073;
   std::complex<double> tmp_7075;
   std::complex<double> tmp_7076;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7077;
      std::complex<double> tmp_7078;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7078 += fd(j1,j2)*KroneckerDelta(gO2,4 + j1);
      }
      tmp_7077 += tmp_7078;
      tmp_7076 += (UHI0(gI1,2 + j2)) * tmp_7077;
   }
   tmp_7075 += tmp_7076;
   result += (-Conj(ZN(gI2,2))) * tmp_7075;
   if (gO2 < 2) {
      result += 0.5477225575051661*g1*Conj(ZN(gI2,0))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += -0.7071067811865475*g2*Conj(ZN(gI2,1))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += 0.6708203932499369*g1p*Conj(ZN(gI2,7))*UHI0(gI1,gO2);
   }
   if (gO2 < 2) {
      result += Conj(ZN(gI2,4))*UHI0(gI1,2 + gO2)*Lambda12(gO2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjSHI0ChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7079;
   std::complex<double> tmp_7080;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7080 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_7079 += tmp_7080;
   result += (-0.5477225575051661*g1*ZN(gI2,0)) * tmp_7079;
   std::complex<double> tmp_7081;
   std::complex<double> tmp_7082;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7082 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_7081 += tmp_7082;
   result += (0.7071067811865475*g2*ZN(gI2,1)) * tmp_7081;
   std::complex<double> tmp_7083;
   std::complex<double> tmp_7084;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7085;
      std::complex<double> tmp_7086;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7086 += Conj(fd(j1,j2))*UHI0(gI1,4 + j1);
      }
      tmp_7085 += tmp_7086;
      tmp_7084 += (KroneckerDelta(gO1,2 + j2)) * tmp_7085;
   }
   tmp_7083 += tmp_7084;
   result += (-ZN(gI2,2)) * tmp_7083;
   std::complex<double> tmp_7087;
   std::complex<double> tmp_7088;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7089;
      std::complex<double> tmp_7090;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7090 += Conj(fu(j1,j2))*KroneckerDelta(gO1,4 + j1);
      }
      tmp_7089 += tmp_7090;
      tmp_7088 += (UHI0(gI1,j2)) * tmp_7089;
   }
   tmp_7087 += tmp_7088;
   result += (-ZN(gI2,3)) * tmp_7087;
   if (gO1 < 2) {
      std::complex<double> tmp_7091;
      std::complex<double> tmp_7092;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7092 += Conj(fu(j1,gO1))*UHI0(gI1,4 + j1);
      }
      tmp_7091 += tmp_7092;
      result += (-ZN(gI2,3)) * tmp_7091;
   }
   std::complex<double> tmp_7093;
   std::complex<double> tmp_7094;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7094 += Conj(Lambda12(j1,j1))*KroneckerDelta(gO1,2 + j1)*UHI0(gI1,
         j1);
   }
   tmp_7093 += tmp_7094;
   result += (ZN(gI2,4)) * tmp_7093;
   std::complex<double> tmp_7095;
   std::complex<double> tmp_7096;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7096 += KroneckerDelta(gO1,2 + j1)*UHI0(gI1,2 + j1);
   }
   tmp_7095 += tmp_7096;
   result += (0.4472135954999579*g1p*ZN(gI2,7)) * tmp_7095;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjVWmChaIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7097;
   std::complex<double> tmp_7098;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7098 += KroneckerDelta(gO2,2 + j1)*ZPI(gI2,j1);
   }
   tmp_7097 += tmp_7098;
   result += (0.7071067811865475*g2) * tmp_7097;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIconjVWmChaIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gO1 < 2) {
      result += -0.7071067811865475*g2*Conj(ZMI(gI2,gO1));
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIVZChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7099;
   std::complex<double> tmp_7100;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7100 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7099 += tmp_7100;
   result += (-0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_7099;
   std::complex<double> tmp_7101;
   std::complex<double> tmp_7102;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7102 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7101 += tmp_7102;
   result += (-0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_7101;
   std::complex<double> tmp_7103;
   std::complex<double> tmp_7104;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7104 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7103 += tmp_7104;
   result += (-0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_7103;
   std::complex<double> tmp_7105;
   std::complex<double> tmp_7106;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7106 += KroneckerDelta(gO2,4 + j1)*ZNI(gI2,4 + j1);
   }
   tmp_7105 += tmp_7106;
   result += (0.7905694150420949*g1p*Sin(ThetaWp())) * tmp_7105;
   if (gO2 < 2) {
      result += 0.5*g2*Cos(ThetaW())*Cos(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += 0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())*ZNI(gI2,
         gO2);
   }
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Sin(ThetaWp())*ZNI(gI2,gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIVZChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7107;
   std::complex<double> tmp_7108;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7108 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7107 += tmp_7108;
   result += (0.5*g2*Cos(ThetaW())*Cos(ThetaWp())) * tmp_7107;
   std::complex<double> tmp_7109;
   std::complex<double> tmp_7110;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7110 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7109 += tmp_7110;
   result += (0.3872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW())) * tmp_7109;
   std::complex<double> tmp_7111;
   std::complex<double> tmp_7112;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7112 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7111 += tmp_7112;
   result += (0.31622776601683794*g1p*Sin(ThetaWp())) * tmp_7111;
   std::complex<double> tmp_7113;
   std::complex<double> tmp_7114;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7114 += Conj(ZNI(gI2,4 + j1))*KroneckerDelta(gO1,4 + j1);
   }
   tmp_7113 += tmp_7114;
   result += (-0.7905694150420949*g1p*Sin(ThetaWp())) * tmp_7113;
   if (gO1 < 2) {
      result += -0.5*g2*Conj(ZNI(gI2,gO1))*Cos(ThetaW())*Cos(ThetaWp());
   }
   if (gO1 < 2) {
      result += -0.3872983346207417*g1*Conj(ZNI(gI2,gO1))*Cos(ThetaWp())*Sin
         (ThetaW());
   }
   if (gO1 < 2) {
      result += 0.4743416490252569*g1p*Conj(ZNI(gI2,gO1))*Sin(ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIVZpChiIPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7115;
   std::complex<double> tmp_7116;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7116 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7115 += tmp_7116;
   result += (-0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_7115;
   std::complex<double> tmp_7117;
   std::complex<double> tmp_7118;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7118 += KroneckerDelta(gO2,4 + j1)*ZNI(gI2,4 + j1);
   }
   tmp_7117 += tmp_7118;
   result += (0.7905694150420949*g1p*Cos(ThetaWp())) * tmp_7117;
   std::complex<double> tmp_7119;
   std::complex<double> tmp_7120;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7120 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7119 += tmp_7120;
   result += (0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_7119;
   std::complex<double> tmp_7121;
   std::complex<double> tmp_7122;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7122 += KroneckerDelta(gO2,2 + j1)*ZNI(gI2,2 + j1);
   }
   tmp_7121 += tmp_7122;
   result += (0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_7121;
   if (gO2 < 2) {
      result += -0.4743416490252569*g1p*Cos(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += -0.5*g2*Cos(ThetaW())*Sin(ThetaWp())*ZNI(gI2,gO2);
   }
   if (gO2 < 2) {
      result += -0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())*ZNI(gI2,
         gO2);
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiIVZpChiIPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7123;
   std::complex<double> tmp_7124;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7124 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7123 += tmp_7124;
   result += (0.31622776601683794*g1p*Cos(ThetaWp())) * tmp_7123;
   std::complex<double> tmp_7125;
   std::complex<double> tmp_7126;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7126 += Conj(ZNI(gI2,4 + j1))*KroneckerDelta(gO1,4 + j1);
   }
   tmp_7125 += tmp_7126;
   result += (-0.7905694150420949*g1p*Cos(ThetaWp())) * tmp_7125;
   std::complex<double> tmp_7127;
   std::complex<double> tmp_7128;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7128 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7127 += tmp_7128;
   result += (-0.5*g2*Cos(ThetaW())*Sin(ThetaWp())) * tmp_7127;
   std::complex<double> tmp_7129;
   std::complex<double> tmp_7130;
   for (unsigned j1 = 0; j1 < 2; ++j1) {
      tmp_7130 += Conj(ZNI(gI2,2 + j1))*KroneckerDelta(gO1,2 + j1);
   }
   tmp_7129 += tmp_7130;
   result += (-0.3872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp())) * tmp_7129;
   if (gO1 < 2) {
      result += 0.4743416490252569*g1p*Conj(ZNI(gI2,gO1))*Cos(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.5*g2*Conj(ZNI(gI2,gO1))*Cos(ThetaW())*Sin(ThetaWp());
   }
   if (gO1 < 2) {
      result += 0.3872983346207417*g1*Conj(ZNI(gI2,gO1))*Sin(ThetaW())*Sin(
         ThetaWp());
   }

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSHppChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UM(gI2,0))*KroneckerDelta(0,gO2)*UHpp(gI1,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSHppChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*KroneckerDelta(1,gO1)*UHpp(gI1,1)*UP(gI2,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPChiPAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*(Conj(ZNp(gI1,1))*
      KroneckerDelta(0,gO2) + Conj(ZNp(gI1,0))*KroneckerDelta(1,gO2))*SigmaL*ZA(
      gI2,4);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPChiPAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*Conj(SigmaL)*ZA(gI2,4)*
      (KroneckerDelta(1,gO1)*ZNp(gI1,0) + KroneckerDelta(0,gO1)*ZNp(gI1,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSHp0ChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*KroneckerDelta(0,gO2)*(5.477225575051661*g1*Conj(ZN(gI2,0))*
      UHp0(gI1,0) - 7.0710678118654755*g2*Conj(ZN(gI2,1))*UHp0(gI1,0) - 2*(
      2.23606797749979*g1p*Conj(ZN(gI2,7))*UHp0(gI1,0) + 5*Conj(ZN(gI2,6))*SigmaL*
      UHp0(gI1,1)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSHp0ChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*KroneckerDelta(1,gO1)*(10*Conj(SigmaL)*UHp0(gI1,0)*ZN(gI2,6) +
      UHp0(gI1,1)*(5.477225575051661*g1*ZN(gI2,0) - 7.0710678118654755*g2*ZN(gI2,
      1) - 4.47213595499958*g1p*ZN(gI2,7)));

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjSHIPMFePL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSHIPMFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7131;
   std::complex<double> tmp_7132;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7133;
      std::complex<double> tmp_7134;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7134 += Conj(hE(j1,j2))*ZER(gI2,j1);
      }
      tmp_7133 += tmp_7134;
      tmp_7132 += (UHIPM(gI1,j2)) * tmp_7133;
   }
   tmp_7131 += tmp_7132;
   result += (KroneckerDelta(0,gO1)) * tmp_7131;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPhhChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*Conj(ZH(gI1,4))*(Conj(ZNp(gI2,1))*
      KroneckerDelta(0,gO2) + Conj(ZNp(gI2,0))*KroneckerDelta(1,gO2))*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPhhChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*Conj(SigmaL)*Conj(ZH(gI1,4))*(KroneckerDelta(1,
      gO1)*ZNp(gI2,0) + KroneckerDelta(0,gO1)*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSeChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7135;
   std::complex<double> tmp_7136;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7137;
      std::complex<double> tmp_7138;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7138 += hE(j1,j2)*ZE(gI1,3 + j1);
      }
      tmp_7137 += tmp_7138;
      tmp_7136 += (Conj(ZMI(gI2,j2))) * tmp_7137;
   }
   tmp_7135 += tmp_7136;
   result += (KroneckerDelta(0,gO2)) * tmp_7135;

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjSeChaIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjSdFDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSdFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7139;
   std::complex<double> tmp_7140;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7141;
      std::complex<double> tmp_7142;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7142 += Conj(gD(j1,j2))*ZD(gI1,j1);
      }
      tmp_7141 += tmp_7142;
      tmp_7140 += (ZDXR(gI2,j2)) * tmp_7141;
   }
   tmp_7139 += tmp_7140;
   result += (KroneckerDelta(0,gO1)) * tmp_7139;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPconjSDXFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7143;
   std::complex<double> tmp_7144;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7145;
      std::complex<double> tmp_7146;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7146 += Conj(ZDL(gI2,j1))*gD(j1,j2);
      }
      tmp_7145 += tmp_7146;
      tmp_7144 += (ZDX(gI1,3 + j2)) * tmp_7145;
   }
   tmp_7143 += tmp_7144;
   result += (KroneckerDelta(0,gO2)) * tmp_7143;

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjSDXFdPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPVZChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) + 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*Sin(ThetaWp()))*(
      KroneckerDelta(0,gO2)*ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPVZChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) +
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) + 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPVZpChiPPR(unsigned gO2, unsigned gI2) const
{
   std::complex<double> result;

   result = 0.1*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(ThetaW()) +
      3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))*(KroneckerDelta(0,gO2)*
      ZNp(gI2,0) - KroneckerDelta(1,gO2)*ZNp(gI2,1));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpUChiPVZpChiPPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*(Conj(ZNp(gI2,0))*KroneckerDelta(0,gO1) - Conj(ZNp(gI2,1))*
      KroneckerDelta(1,gO1))*(3.1622776601683795*g1p*Cos(ThetaWp()) - (5*g2*Cos(
      ThetaW()) + 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjVWmChaPPR(unsigned gO2) const
{
   double result = 0.0;

   result = 0.7071067811865475*g2*KroneckerDelta(1,gO2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpUChiPconjVWmChaPPL(unsigned gO1) const
{
   double result = 0.0;

   result = -0.7071067811865475*g2*KroneckerDelta(0,gO1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSdFdPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7147;
   std::complex<double> tmp_7148;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7148 += Conj(ZDL(gI2,j1))*ZD(gI1,j1);
   }
   tmp_7147 += tmp_7148;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_7147;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSdFdPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7149;
   std::complex<double> tmp_7150;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7150 += ZD(gI1,3 + j1)*ZDR(gI2,j1);
   }
   tmp_7149 += tmp_7150;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_7149;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSDXFDXPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7151;
   std::complex<double> tmp_7152;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7152 += Conj(ZDXL(gI2,j1))*ZDX(gI1,j1);
   }
   tmp_7151 += tmp_7152;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_7151;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSDXFDXPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7153;
   std::complex<double> tmp_7154;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7154 += ZDX(gI1,3 + j1)*ZDXR(gI2,j1);
   }
   tmp_7153 += tmp_7154;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_7153;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSuFuPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7155;
   std::complex<double> tmp_7156;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7156 += Conj(ZUL(gI2,j1))*ZU(gI1,j1);
   }
   tmp_7155 += tmp_7156;
   result += (-1.4142135623730951*g3*PhaseGlu) * tmp_7155;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluconjSuFuPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7157;
   std::complex<double> tmp_7158;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7158 += ZU(gI1,3 + j1)*ZUR(gI2,j1);
   }
   tmp_7157 += tmp_7158;
   result += (1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_7157;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluVGGluPR() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpGluVGGluPL() const
{
   std::complex<double> result;

   result = std::complex<double>(0,-1)*g3*AbsSqr(PhaseGlu);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPSHp0ChaPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,1))*Conj(UM(gI2,0)));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPSHp0ChaPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -(g2*Conj(UHp0(gI1,0))*UP(gI2,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPSHppChiPL(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = -0.1*Conj(UHpp(gI1,1))*(5.477225575051661*g1*Conj(ZN(gI2,0)) +
      7.0710678118654755*g2*Conj(ZN(gI2,1)) - 4.47213595499958*g1p*Conj(ZN(gI2,7))
      ) + Conj(UHpp(gI1,0))*Conj(ZN(gI2,6))*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPSHppChiPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   result = Conj(SigmaL)*Conj(UHpp(gI1,1))*ZN(gI2,6) + Conj(UHpp(gI1,0))*(
      0.5477225575051661*g1*ZN(gI2,0) + 0.7071067811865475*g2*ZN(gI2,1) -
      0.4472135954999579*g1p*ZN(gI2,7));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPbarFuSDXPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPbarFuSDXPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7159;
   std::complex<double> tmp_7160;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7161;
      std::complex<double> tmp_7162;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7162 += Conj(gD(j1,j2))*ZUL(gI1,j1);
      }
      tmp_7161 += tmp_7162;
      tmp_7160 += (Conj(ZDX(gI2,3 + j2))) * tmp_7161;
   }
   tmp_7159 += tmp_7160;
   result += (-1) * tmp_7159;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPhhChaPPL(unsigned gI1) const
{
   std::complex<double> result;

   result = 0.7071067811865475*Conj(ZH(gI1,4))*SigmaL;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPhhChaPPR(unsigned gI1) const
{
   std::complex<double> result;

   result = 0.7071067811865475*Conj(SigmaL)*Conj(ZH(gI1,4));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPconjSuFDXPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPconjSuFDXPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7163;
   std::complex<double> tmp_7164;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7165;
      std::complex<double> tmp_7166;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7166 += Conj(gD(j1,j2))*ZU(gI1,j1);
      }
      tmp_7165 += tmp_7166;
      tmp_7164 += (ZDXR(gI2,j2)) * tmp_7165;
   }
   tmp_7163 += tmp_7164;
   result += (-1) * tmp_7163;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPSeChiIPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPSeChiIPR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7167;
   std::complex<double> tmp_7168;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7169;
      std::complex<double> tmp_7170;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7170 += Conj(hE(j1,j2))*Conj(ZE(gI1,3 + j1));
      }
      tmp_7169 += tmp_7170;
      tmp_7168 += (ZNI(gI2,j2)) * tmp_7169;
   }
   tmp_7167 += tmp_7168;
   result += (-1) * tmp_7167;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPconjSHI0FePL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPconjSHI0FePR(unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7171;
   std::complex<double> tmp_7172;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7173;
      std::complex<double> tmp_7174;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7174 += Conj(hE(j1,j2))*ZER(gI2,j1);
      }
      tmp_7173 += tmp_7174;
      tmp_7172 += (UHI0(gI1,j2)) * tmp_7173;
   }
   tmp_7171 += tmp_7172;
   result += (-1) * tmp_7171;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPVWmChiPPR(unsigned gI2) const
{
   std::complex<double> result;

   result = 0.7071067811865475*g2*ZNp(gI2,1);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPVWmChiPPL(unsigned gI2) const
{
   std::complex<double> result;

   result = -0.7071067811865475*g2*Conj(ZNp(gI2,0));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPChaPAhPL(unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,0.7071067811865475)*SigmaL*ZA(gI2,4);

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarChaPChaPAhPR(unsigned gI2) const
{
   std::complex<double> result;

   result = std::complex<double>(0.,-0.7071067811865475)*Conj(SigmaL)*ZA(gI2,4)
      ;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVPChaPPR() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVPChaPPL() const
{
   double result = 0.0;

   result = 0.5*(0.7745966692414834*g1*Cos(ThetaW()) + g2*Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVZChaPPR() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVZChaPPL() const
{
   double result = 0.0;

   result = 0.1*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) - 3.872983346207417*g1*Cos(
      ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVZpChaPPR() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarChaPVZpChaPPL() const
{
   double result = 0.0;

   result = 0.1*(-3.1622776601683795*g1p*Cos(ThetaWp()) - 5*g2*Cos(ThetaW())*
      Sin(ThetaWp()) + 3.872983346207417*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbarVWmVZp() const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CSE6SSM_mass_eigenstates::CpconjVWmbarVZpVWm() const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSHp0ChaIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7175;
   std::complex<double> tmp_7176;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7177;
      std::complex<double> tmp_7178;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7178 += Conj(ZER(gO2,j1))*hE(j1,j2);
      }
      tmp_7177 += tmp_7178;
      tmp_7176 += (Conj(ZMI(gI2,j2))) * tmp_7177;
   }
   tmp_7175 += tmp_7176;
   result += (Conj(UHp0(gI1,0))) * tmp_7175;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeSHp0ChaIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeHpmFvPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += Conj(ZER(gO2,gI2))*Conj(ZP(gI1,0))*Ye(gI2,gI2);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeHpmFvPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSHppChiIPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7179;
   std::complex<double> tmp_7180;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7181;
      std::complex<double> tmp_7182;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7182 += Conj(ZER(gO2,j1))*hE(j1,j2);
      }
      tmp_7181 += tmp_7182;
      tmp_7180 += (Conj(ZNI(gI2,j2))) * tmp_7181;
   }
   tmp_7179 += tmp_7180;
   result += (-Conj(UHpp(gI1,0))) * tmp_7179;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeSHppChiIPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSvChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7183;
   std::complex<double> tmp_7184;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7184 += Conj(ZER(gO2,j1))*Conj(ZV(gI1,j1))*Ye(j1,j1);
   }
   tmp_7183 += tmp_7184;
   result += (Conj(UM(gI2,1))) * tmp_7183;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSvChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7185;
   std::complex<double> tmp_7186;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7186 += Conj(ZV(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_7185 += tmp_7186;
   result += (-(g2*UP(gI2,0))) * tmp_7185;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeFeAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7187;
   std::complex<double> tmp_7188;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7188 += Conj(ZEL(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_7187 += tmp_7188;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_7187;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeFeAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7189;
   std::complex<double> tmp_7190;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7190 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI1,j1);
   }
   tmp_7189 += tmp_7190;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_7189
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSHIPMChiPPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7191;
   std::complex<double> tmp_7192;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7193;
      std::complex<double> tmp_7194;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7194 += Conj(ZER(gO2,j1))*hE(j1,j2);
      }
      tmp_7193 += tmp_7194;
      tmp_7192 += (Conj(UHIPM(gI1,j2))) * tmp_7193;
   }
   tmp_7191 += tmp_7192;
   result += (Conj(ZNp(gI2,0))) * tmp_7191;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeSHIPMChiPPR(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFehhFePL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7195;
   std::complex<double> tmp_7196;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7196 += Conj(ZEL(gI2,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_7195 += tmp_7196;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7195;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFehhFePR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7197;
   std::complex<double> tmp_7198;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7198 += Conj(Ye(j1,j1))*ZEL(gO1,j1)*ZER(gI2,j1);
   }
   tmp_7197 += tmp_7198;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7197;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSeChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7199;
   std::complex<double> tmp_7200;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7200 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_7199 += tmp_7200;
   result += (-1.0954451150103321*g1*Conj(ZN(gI2,0))) * tmp_7199;
   std::complex<double> tmp_7201;
   std::complex<double> tmp_7202;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7202 += Conj(ZE(gI1,3 + j1))*Conj(ZER(gO2,j1));
   }
   tmp_7201 += tmp_7202;
   result += (-0.22360679774997896*g1p*Conj(ZN(gI2,7))) * tmp_7201;
   std::complex<double> tmp_7203;
   std::complex<double> tmp_7204;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7204 += Conj(ZE(gI1,j1))*Conj(ZER(gO2,j1))*Ye(j1,j1);
   }
   tmp_7203 += tmp_7204;
   result += (-Conj(ZN(gI2,2))) * tmp_7203;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSeChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7205;
   std::complex<double> tmp_7206;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7206 += Conj(Ye(j1,j1))*Conj(ZE(gI1,3 + j1))*ZEL(gO1,j1);
   }
   tmp_7205 += tmp_7206;
   result += (-ZN(gI2,2)) * tmp_7205;
   std::complex<double> tmp_7207;
   std::complex<double> tmp_7208;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7208 += Conj(ZE(gI1,j1))*ZEL(gO1,j1);
   }
   tmp_7207 += tmp_7208;
   result += (0.7071067811865475*(0.7745966692414834*g1*ZN(gI2,0) + g2*ZN(gI2,1
      ) - 0.6324555320336759*g1p*ZN(gI2,7))) * tmp_7207;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeSHI0ChaPPL(unsigned gO2, unsigned gI1) const
{
   std::complex<double> result;

   std::complex<double> tmp_7209;
   std::complex<double> tmp_7210;
   for (unsigned j2 = 0; j2 < 2; ++j2) {
      std::complex<double> tmp_7211;
      std::complex<double> tmp_7212;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7212 += Conj(ZER(gO2,j1))*hE(j1,j2);
      }
      tmp_7211 += tmp_7212;
      tmp_7210 += (Conj(UHI0(gI1,j2))) * tmp_7211;
   }
   tmp_7209 += tmp_7210;
   result += (-1) * tmp_7209;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeSHI0ChaPPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeVWmFvPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFeVWmFvPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   if (gI2 < 3) {
      result += -0.7071067811865475*g2*ZEL(gO1,gI2);
   }

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeVZFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.05*KroneckerDelta(gI2,gO2)*(15.491933384829668*g1*Cos(ThetaWp())
      *Sin(ThetaW()) - 3.1622776601683795*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeVZFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.1*KroneckerDelta(gI2,gO1)*(5*g2*Cos(ThetaW())*Cos(ThetaWp()) -
      3.872983346207417*g1*Cos(ThetaWp())*Sin(ThetaW()) - 3.1622776601683795*g1p*
      Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeVZpFePR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.05*KroneckerDelta(gI2,gO2)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + 15.491933384829668*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFeVZpFePL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.1*KroneckerDelta(gI2,gO1)*(3.1622776601683795*g1p*Cos(ThetaWp())
      + (5*g2*Cos(ThetaW()) - 3.872983346207417*g1*Sin(ThetaW()))*Sin(ThetaWp()))
      ;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdconjSHp0FDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdconjSHp0FDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7213;
   std::complex<double> tmp_7214;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7215;
      std::complex<double> tmp_7216;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7216 += Conj(gD(j1,j2))*ZDL(gO1,j1);
      }
      tmp_7215 += tmp_7216;
      tmp_7214 += (ZDXR(gI2,j2)) * tmp_7215;
   }
   tmp_7213 += tmp_7214;
   result += (UHp0(gI1,0)) * tmp_7213;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdHpmFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7217;
   std::complex<double> tmp_7218;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7218 += Conj(ZDR(gO2,j1))*Conj(ZUL(gI2,j1))*Yd(j1,j1);
   }
   tmp_7217 += tmp_7218;
   result += (Conj(ZP(gI1,0))) * tmp_7217;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdHpmFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7219;
   std::complex<double> tmp_7220;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7220 += Conj(Yu(j1,j1))*ZDL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_7219 += tmp_7220;
   result += (Conj(ZP(gI1,1))) * tmp_7219;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdFdAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7221;
   std::complex<double> tmp_7222;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7222 += Conj(ZDL(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_7221 += tmp_7222;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,0)) *
      tmp_7221;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdFdAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7223;
   std::complex<double> tmp_7224;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7224 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI1,j1);
   }
   tmp_7223 += tmp_7224;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,0)) * tmp_7223
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdhhFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7225;
   std::complex<double> tmp_7226;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7226 += Conj(ZDL(gI2,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_7225 += tmp_7226;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7225;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdhhFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7227;
   std::complex<double> tmp_7228;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7228 += Conj(Yd(j1,j1))*ZDL(gO1,j1)*ZDR(gI2,j1);
   }
   tmp_7227 += tmp_7228;
   result += (-0.7071067811865475*Conj(ZH(gI1,0))) * tmp_7227;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdSDXChiPPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSDXChiPPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7229;
   std::complex<double> tmp_7230;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7231;
      std::complex<double> tmp_7232;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7232 += Conj(gD(j1,j2))*ZDL(gO1,j1);
      }
      tmp_7231 += tmp_7232;
      tmp_7230 += (Conj(ZDX(gI1,3 + j2))) * tmp_7231;
   }
   tmp_7229 += tmp_7230;
   result += (ZNp(gI2,0)) * tmp_7229;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSuChaPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7233;
   std::complex<double> tmp_7234;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7234 += Conj(ZDR(gO2,j1))*Conj(ZU(gI1,j1))*Yd(j1,j1);
   }
   tmp_7233 += tmp_7234;
   result += (Conj(UM(gI2,1))) * tmp_7233;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSuChaPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7235;
   std::complex<double> tmp_7236;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7236 += Conj(ZU(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_7235 += tmp_7236;
   result += (-(g2*UP(gI2,0))) * tmp_7235;
   std::complex<double> tmp_7237;
   std::complex<double> tmp_7238;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7238 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_7237 += tmp_7238;
   result += (UP(gI2,1)) * tmp_7237;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSdChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7239;
   std::complex<double> tmp_7240;
   std::complex<double> tmp_7241;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7241 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_7240 += tmp_7241;
   tmp_7239 += (-1.0954451150103321*g1*Conj(ZN(gI2,0))) * tmp_7240;
   std::complex<double> tmp_7242;
   std::complex<double> tmp_7243;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7243 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_7242 += tmp_7243;
   tmp_7239 += (-1.3416407864998738*g1p*Conj(ZN(gI2,7))) * tmp_7242;
   std::complex<double> tmp_7244;
   std::complex<double> tmp_7245;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7245 += Conj(ZD(gI1,j1))*Conj(ZDR(gO2,j1))*Yd(j1,j1);
   }
   tmp_7244 += tmp_7245;
   tmp_7239 += (-3*Conj(ZN(gI2,2))) * tmp_7244;
   result += (0.3333333333333333) * tmp_7239;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSdChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7246;
   std::complex<double> tmp_7247;
   std::complex<double> tmp_7248;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7248 += Conj(Yd(j1,j1))*Conj(ZD(gI1,3 + j1))*ZDL(gO1,j1);
   }
   tmp_7247 += tmp_7248;
   tmp_7246 += (-6*ZN(gI2,2)) * tmp_7247;
   std::complex<double> tmp_7249;
   std::complex<double> tmp_7250;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7250 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_7249 += tmp_7250;
   tmp_7246 += (-1.4142135623730951*(0.7745966692414834*g1*ZN(gI2,0) - 3*g2*ZN(
      gI2,1) + 0.9486832980505138*g1p*ZN(gI2,7))) * tmp_7249;
   result += (0.16666666666666666) * tmp_7246;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSdGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_7251;
   std::complex<double> tmp_7252;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7252 += Conj(ZD(gI1,3 + j1))*Conj(ZDR(gO2,j1));
   }
   tmp_7251 += tmp_7252;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_7251;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdSdGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_7253;
   std::complex<double> tmp_7254;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7254 += Conj(ZD(gI1,j1))*ZDL(gO1,j1);
   }
   tmp_7253 += tmp_7254;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_7253;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdVWmFuPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFdVWmFuPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7255;
   std::complex<double> tmp_7256;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7256 += Conj(ZUL(gI2,j1))*ZDL(gO1,j1);
   }
   tmp_7255 += tmp_7256;
   result += (-0.7071067811865475*g2) * tmp_7255;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdVZFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(-0.2581988897471611*g1*Cos(ThetaWp())*Sin(
      ThetaW()) + 0.31622776601683794*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdVZFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = 0.16666666666666666*KroneckerDelta(gI2,gO1)*(3*g2*Cos(ThetaW())*Cos
      (ThetaWp()) + 0.7745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) -
      0.9486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdVZpFdPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = KroneckerDelta(gI2,gO2)*(0.31622776601683794*g1p*Cos(ThetaWp()) +
      0.2581988897471611*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFdVZpFdPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) + 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuconjHpmFdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7257;
   std::complex<double> tmp_7258;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7258 += Conj(ZDL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_7257 += tmp_7258;
   result += (ZP(gI1,1)) * tmp_7257;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuconjHpmFdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7259;
   std::complex<double> tmp_7260;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7260 += Conj(Yd(j1,j1))*ZDR(gI2,j1)*ZUL(gO1,j1);
   }
   tmp_7259 += tmp_7260;
   result += (ZP(gI1,0)) * tmp_7259;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuconjSHppFDXPL(unsigned , unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuconjSHppFDXPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7261;
   std::complex<double> tmp_7262;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7263;
      std::complex<double> tmp_7264;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7264 += Conj(gD(j1,j2))*ZUL(gO1,j1);
      }
      tmp_7263 += tmp_7264;
      tmp_7262 += (ZDXR(gI2,j2)) * tmp_7263;
   }
   tmp_7261 += tmp_7262;
   result += (-UHpp(gI1,0)) * tmp_7261;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFubarChaSdPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7265;
   std::complex<double> tmp_7266;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7266 += Conj(ZD(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_7265 += tmp_7266;
   result += (Conj(UP(gI1,1))) * tmp_7265;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFubarChaSdPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7267;
   std::complex<double> tmp_7268;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7268 += Conj(ZD(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_7267 += tmp_7268;
   result += (-(g2*UM(gI1,0))) * tmp_7267;
   std::complex<double> tmp_7269;
   std::complex<double> tmp_7270;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7270 += Conj(Yd(j1,j1))*Conj(ZD(gI2,3 + j1))*ZUL(gO1,j1);
   }
   tmp_7269 += tmp_7270;
   result += (UM(gI1,1)) * tmp_7269;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuFuAhPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7271;
   std::complex<double> tmp_7272;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7272 += Conj(ZUL(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_7271 += tmp_7272;
   result += (std::complex<double>(0.,-0.7071067811865475)*ZA(gI2,1)) *
      tmp_7271;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuFuAhPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7273;
   std::complex<double> tmp_7274;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7274 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI1,j1);
   }
   tmp_7273 += tmp_7274;
   result += (std::complex<double>(0.,0.7071067811865475)*ZA(gI2,1)) * tmp_7273
      ;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuhhFuPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7275;
   std::complex<double> tmp_7276;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7276 += Conj(ZUL(gI2,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_7275 += tmp_7276;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7275;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuhhFuPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7277;
   std::complex<double> tmp_7278;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7278 += Conj(Yu(j1,j1))*ZUL(gO1,j1)*ZUR(gI2,j1);
   }
   tmp_7277 += tmp_7278;
   result += (-0.7071067811865475*Conj(ZH(gI1,1))) * tmp_7277;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuSuChiPL(unsigned gO2, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7279;
   std::complex<double> tmp_7280;
   std::complex<double> tmp_7281;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7281 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_7280 += tmp_7281;
   tmp_7279 += (2.1908902300206643*g1*Conj(ZN(gI2,0))) * tmp_7280;
   std::complex<double> tmp_7282;
   std::complex<double> tmp_7283;
   std::complex<double> tmp_7284;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7284 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_7283 += tmp_7284;
   tmp_7282 += (0.22360679774997896*g1p*Conj(ZN(gI2,7))) * tmp_7283;
   std::complex<double> tmp_7285;
   std::complex<double> tmp_7286;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7286 += Conj(ZU(gI1,j1))*Conj(ZUR(gO2,j1))*Yu(j1,j1);
   }
   tmp_7285 += tmp_7286;
   tmp_7282 += (Conj(ZN(gI2,3))) * tmp_7285;
   tmp_7279 += (-3) * tmp_7282;
   result += (0.3333333333333333) * tmp_7279;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuSuChiPR(unsigned gO1, unsigned gI1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7287;
   std::complex<double> tmp_7288;
   std::complex<double> tmp_7289;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7289 += Conj(Yu(j1,j1))*Conj(ZU(gI1,3 + j1))*ZUL(gO1,j1);
   }
   tmp_7288 += tmp_7289;
   tmp_7287 += (-6*ZN(gI2,3)) * tmp_7288;
   std::complex<double> tmp_7290;
   std::complex<double> tmp_7291;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7291 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_7290 += tmp_7291;
   tmp_7287 += (-1.4142135623730951*(0.7745966692414834*g1*ZN(gI2,0) + 3*g2*ZN(
      gI2,1) + 0.9486832980505138*g1p*ZN(gI2,7))) * tmp_7290;
   result += (0.16666666666666666) * tmp_7287;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuSuGluPL(unsigned gO2, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_7292;
   std::complex<double> tmp_7293;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7293 += Conj(ZU(gI1,3 + j1))*Conj(ZUR(gO2,j1));
   }
   tmp_7292 += tmp_7293;
   result += (1.4142135623730951*g3*PhaseGlu) * tmp_7292;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuSuGluPR(unsigned gO1, unsigned gI1, unsigned ) const
{
   std::complex<double> result;

   std::complex<double> tmp_7294;
   std::complex<double> tmp_7295;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7295 += Conj(ZU(gI1,j1))*ZUL(gO1,j1);
   }
   tmp_7294 += tmp_7295;
   result += (-1.4142135623730951*g3*Conj(PhaseGlu)) * tmp_7294;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVPFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = -0.5163977794943222*g1*Cos(ThetaW())*KroneckerDelta(gI2,gO2);

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVPFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.7745966692414834*g1
      *Cos(ThetaW()) + 3*g2*Sin(ThetaW()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVZFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(30.983866769659336*g1
      *Cos(ThetaWp())*Sin(ThetaW()) + 9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVZFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.016666666666666666*KroneckerDelta(gI2,gO1)*(30*g2*Cos(ThetaW())*
      Cos(ThetaWp()) - 7.745966692414834*g1*Cos(ThetaWp())*Sin(ThetaW()) +
      9.486832980505138*g1p*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVZpFuPR(unsigned gO2, unsigned gI2) const
{
   double result = 0.0;

   result = 0.016666666666666666*KroneckerDelta(gI2,gO2)*(9.486832980505138*g1p
      *Cos(ThetaWp()) - 30.983866769659336*g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuVZpFuPL(unsigned gO1, unsigned gI2) const
{
   double result = 0.0;

   result = -0.16666666666666666*KroneckerDelta(gI2,gO1)*(0.9486832980505138*
      g1p*Cos(ThetaWp()) - 3*g2*Cos(ThetaW())*Sin(ThetaWp()) + 0.7745966692414834*
      g1*Sin(ThetaW())*Sin(ThetaWp()));

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFuconjVWmFdPR(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFuconjVWmFdPL(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7296;
   std::complex<double> tmp_7297;
   for (unsigned j1 = 0; j1 < 3; ++j1) {
      tmp_7297 += Conj(ZDL(gI2,j1))*ZUL(gO1,j1);
   }
   tmp_7296 += tmp_7297;
   result += (-0.7071067811865475*g2) * tmp_7296;

   return result;
}

double CSE6SSM_mass_eigenstates::CpbarFubarChaPSDXPL(unsigned , unsigned ) const
{
   double result = 0.0;

   result = 0;

   return result;
}

std::complex<double> CSE6SSM_mass_eigenstates::CpbarFubarChaPSDXPR(unsigned gO1, unsigned gI2) const
{
   std::complex<double> result;

   std::complex<double> tmp_7298;
   std::complex<double> tmp_7299;
   for (unsigned j2 = 0; j2 < 3; ++j2) {
      std::complex<double> tmp_7300;
      std::complex<double> tmp_7301;
      for (unsigned j1 = 0; j1 < 3; ++j1) {
         tmp_7301 += Conj(gD(j1,j2))*ZUL(gO1,j1);
      }
      tmp_7300 += tmp_7301;
      tmp_7299 += (Conj(ZDX(gI2,3 + j2))) * tmp_7300;
   }
   tmp_7298 += tmp_7299;
   result += (-1) * tmp_7298;

   return result;
}


std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Sd(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSdconjUSdconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSdconjUSdVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSdconjUSdVZVZ(gO1,gO2);
   std::complex<double> tmp_7302;
   std::complex<double> tmp_7303;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7303 += A0(MHpm(gI1))*CpUSdconjUSdconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7302 += tmp_7303;
   result += (-1) * tmp_7302;
   std::complex<double> tmp_7304;
   std::complex<double> tmp_7305;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7305 += A0(MSHp0(gI1))*CpUSdconjUSdconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7304 += tmp_7305;
   result += (-1) * tmp_7304;
   std::complex<double> tmp_7306;
   std::complex<double> tmp_7307;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7307 += A0(MSHpp(gI1))*CpUSdconjUSdconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7306 += tmp_7307;
   result += (-1) * tmp_7306;
   std::complex<double> tmp_7308;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7309;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7309 += B0(p,MSHp0(gI1),MSDX(gI2))*Conj(CpconjUSdconjSHp0SDX
            (gO2,gI1,gI2))*CpconjUSdconjSHp0SDX(gO1,gI1,gI2);
      }
      tmp_7308 += tmp_7309;
   }
   result += tmp_7308;
   std::complex<double> tmp_7310;
   std::complex<double> tmp_7311;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7311 += A0(MSv(gI1))*CpUSdconjUSdconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7310 += tmp_7311;
   result += (-1) * tmp_7310;
   std::complex<double> tmp_7312;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7313;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7313 += (Conj(CpconjUSdFDXChiPPL(gO2,gI1,gI2))*
            CpconjUSdFDXChiPPL(gO1,gI1,gI2) + Conj(CpconjUSdFDXChiPPR(gO2,gI1,gI2)
            )*CpconjUSdFDXChiPPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MChiP(gI2));
      }
      tmp_7312 += tmp_7313;
   }
   result += tmp_7312;
   std::complex<double> tmp_7314;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7315;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7315 += (Conj(CpconjUSdFuChaPL(gO2,gI1,gI2))*
            CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPR(gO2,gI1,gI2))*
            CpconjUSdFuChaPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MCha(gI2));
      }
      tmp_7314 += tmp_7315;
   }
   result += tmp_7314;
   std::complex<double> tmp_7316;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7317;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7317 += (Conj(CpconjUSdFdChiPL(gO2,gI1,gI2))*
            CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPR(gO2,gI1,gI2))*
            CpconjUSdFdChiPR(gO1,gI1,gI2))*G0(p,MFd(gI1),MChi(gI2));
      }
      tmp_7316 += tmp_7317;
   }
   result += tmp_7316;
   std::complex<double> tmp_7318;
   std::complex<double> tmp_7319;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7320;
      std::complex<double> tmp_7321;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7321 += B0(p,MFd(gI1),MChi(gI2))*(Conj(CpconjUSdFdChiPR(gO2,
            gI1,gI2))*CpconjUSdFdChiPL(gO1,gI1,gI2) + Conj(CpconjUSdFdChiPL(gO2,
            gI1,gI2))*CpconjUSdFdChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7320 += tmp_7321;
      tmp_7319 += (MFd(gI1)) * tmp_7320;
   }
   tmp_7318 += tmp_7319;
   result += (-2) * tmp_7318;
   std::complex<double> tmp_7322;
   std::complex<double> tmp_7323;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7324;
      std::complex<double> tmp_7325;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7325 += B0(p,MFDX(gI1),MChiP(gI2))*(Conj(CpconjUSdFDXChiPPR(
            gO2,gI1,gI2))*CpconjUSdFDXChiPPL(gO1,gI1,gI2) + Conj(
            CpconjUSdFDXChiPPL(gO2,gI1,gI2))*CpconjUSdFDXChiPPR(gO1,gI1,gI2))*
            MChiP(gI2);
      }
      tmp_7324 += tmp_7325;
      tmp_7323 += (MFDX(gI1)) * tmp_7324;
   }
   tmp_7322 += tmp_7323;
   result += (-2) * tmp_7322;
   std::complex<double> tmp_7326;
   std::complex<double> tmp_7327;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7328;
      std::complex<double> tmp_7329;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7329 += B0(p,MFu(gI1),MCha(gI2))*(Conj(CpconjUSdFuChaPR(gO2,
            gI1,gI2))*CpconjUSdFuChaPL(gO1,gI1,gI2) + Conj(CpconjUSdFuChaPL(gO2,
            gI1,gI2))*CpconjUSdFuChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_7328 += tmp_7329;
      tmp_7327 += (MFu(gI1)) * tmp_7328;
   }
   tmp_7326 += tmp_7327;
   result += (-2) * tmp_7326;
   std::complex<double> tmp_7330;
   std::complex<double> tmp_7331;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7331 += A0(MSHIPM(gI1))*CpUSdconjUSdconjSHIPMSHIPM(gO1,gO2,gI1,gI1
         );
   }
   tmp_7330 += tmp_7331;
   result += (-1) * tmp_7330;
   std::complex<double> tmp_7332;
   std::complex<double> tmp_7333;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7333 += A0(MAh(gI1))*CpUSdconjUSdAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7332 += tmp_7333;
   result += (-0.5) * tmp_7332;
   std::complex<double> tmp_7334;
   std::complex<double> tmp_7335;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7335 += A0(Mhh(gI1))*CpUSdconjUSdhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7334 += tmp_7335;
   result += (-0.5) * tmp_7334;
   std::complex<double> tmp_7336;
   std::complex<double> tmp_7337;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7337 += A0(MSd(gI1))*CpUSdconjUSdconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7336 += tmp_7337;
   result += (-1) * tmp_7336;
   std::complex<double> tmp_7338;
   std::complex<double> tmp_7339;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7339 += A0(MSDX(gI1))*CpUSdconjUSdconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7338 += tmp_7339;
   result += (-1) * tmp_7338;
   std::complex<double> tmp_7340;
   std::complex<double> tmp_7341;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7341 += A0(MSe(gI1))*CpUSdconjUSdconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7340 += tmp_7341;
   result += (-1) * tmp_7340;
   std::complex<double> tmp_7342;
   std::complex<double> tmp_7343;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7343 += A0(MSu(gI1))*CpUSdconjUSdconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7342 += tmp_7343;
   result += (-1) * tmp_7342;
   std::complex<double> tmp_7344;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7345;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7345 += B0(p,MSu(gI1),MHpm(gI2))*Conj(CpconjUSdSuHpm(gO2,gI1
            ,gI2))*CpconjUSdSuHpm(gO1,gI1,gI2);
      }
      tmp_7344 += tmp_7345;
   }
   result += tmp_7344;
   std::complex<double> tmp_7346;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7347;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7347 += B0(p,MSd(gI1),MAh(gI2))*Conj(CpconjUSdSdAh(gO2,gI1,
            gI2))*CpconjUSdSdAh(gO1,gI1,gI2);
      }
      tmp_7346 += tmp_7347;
   }
   result += tmp_7346;
   std::complex<double> tmp_7348;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7349;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7349 += B0(p,MSd(gI1),Mhh(gI2))*Conj(CpconjUSdSdhh(gO2,gI1,
            gI2))*CpconjUSdSdhh(gO1,gI1,gI2);
      }
      tmp_7348 += tmp_7349;
   }
   result += tmp_7348;
   std::complex<double> tmp_7350;
   std::complex<double> tmp_7351;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7351 += A0(MSHI0(gI1))*CpUSdconjUSdconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7350 += tmp_7351;
   result += (-1) * tmp_7350;
   std::complex<double> tmp_7352;
   std::complex<double> tmp_7353;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7353 += (Conj(CpconjUSdGluFdPL(gO2,1,gI2))*CpconjUSdGluFdPL(gO1,1,
         gI2) + Conj(CpconjUSdGluFdPR(gO2,1,gI2))*CpconjUSdGluFdPR(gO1,1,gI2))*G0(
         p,MGlu,MFd(gI2));
   }
   tmp_7352 += tmp_7353;
   result += (1.3333333333333333) * tmp_7352;
   std::complex<double> tmp_7354;
   std::complex<double> tmp_7355;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7355 += Conj(CpconjUSdVGSd(gO2,gI2))*CpconjUSdVGSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   tmp_7354 += tmp_7355;
   result += (1.3333333333333333) * tmp_7354;
   std::complex<double> tmp_7356;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7356 += Conj(CpconjUSdVPSd(gO2,gI2))*CpconjUSdVPSd(gO1,gI2)*F0(p,
         MSd(gI2),0);
   }
   result += tmp_7356;
   std::complex<double> tmp_7357;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7357 += Conj(CpconjUSdVZSd(gO2,gI2))*CpconjUSdVZSd(gO1,gI2)*F0(p,
         MSd(gI2),MVZ);
   }
   result += tmp_7357;
   std::complex<double> tmp_7358;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7358 += Conj(CpconjUSdVZpSd(gO2,gI2))*CpconjUSdVZpSd(gO1,gI2)*F0(p
         ,MSd(gI2),MVZp);
   }
   result += tmp_7358;
   std::complex<double> tmp_7359;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7359 += Conj(CpconjUSdVWmSu(gO2,gI2))*CpconjUSdVWmSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVWm);
   }
   result += tmp_7359;
   std::complex<double> tmp_7360;
   std::complex<double> tmp_7361;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7361 += B0(p,MGlu,MFd(gI2))*(Conj(CpconjUSdGluFdPR(gO2,1,gI2))*
         CpconjUSdGluFdPL(gO1,1,gI2) + Conj(CpconjUSdGluFdPL(gO2,1,gI2))*
         CpconjUSdGluFdPR(gO1,1,gI2))*MFd(gI2);
   }
   tmp_7360 += tmp_7361;
   result += (-2.6666666666666665*MGlu) * tmp_7360;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Sv(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSvconjUSvconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSvconjUSvVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSvconjUSvVZVZ(gO1,gO2);
   std::complex<double> tmp_7362;
   std::complex<double> tmp_7363;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7363 += A0(MHpm(gI1))*CpUSvconjUSvconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7362 += tmp_7363;
   result += (-1) * tmp_7362;
   std::complex<double> tmp_7364;
   std::complex<double> tmp_7365;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7365 += A0(MSHp0(gI1))*CpUSvconjUSvconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7364 += tmp_7365;
   result += (-1) * tmp_7364;
   std::complex<double> tmp_7366;
   std::complex<double> tmp_7367;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7367 += A0(MSHpp(gI1))*CpUSvconjUSvconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7366 += tmp_7367;
   result += (-1) * tmp_7366;
   std::complex<double> tmp_7368;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7369;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7369 += (Conj(CpconjUSvbarChaFePL(gO2,gI1,gI2))*
            CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(CpconjUSvbarChaFePR(gO2,gI1,
            gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFe(gI2));
      }
      tmp_7368 += tmp_7369;
   }
   result += tmp_7368;
   std::complex<double> tmp_7370;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7371;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7371 += B0(p,MHpm(gI1),MSe(gI2))*Conj(CpconjUSvconjHpmSe(gO2
            ,gI1,gI2))*CpconjUSvconjHpmSe(gO1,gI1,gI2);
      }
      tmp_7370 += tmp_7371;
   }
   result += tmp_7370;
   std::complex<double> tmp_7372;
   std::complex<double> tmp_7373;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7374;
      std::complex<double> tmp_7375;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7375 += B0(p,MCha(gI1),MFe(gI2))*(Conj(CpconjUSvbarChaFePR(
            gO2,gI1,gI2))*CpconjUSvbarChaFePL(gO1,gI1,gI2) + Conj(
            CpconjUSvbarChaFePL(gO2,gI1,gI2))*CpconjUSvbarChaFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_7374 += tmp_7375;
      tmp_7373 += (MCha(gI1)) * tmp_7374;
   }
   tmp_7372 += tmp_7373;
   result += (-2) * tmp_7372;
   std::complex<double> tmp_7376;
   std::complex<double> tmp_7377;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7377 += A0(MSv(gI1))*CpUSvconjUSvconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7376 += tmp_7377;
   result += (-1) * tmp_7376;
   std::complex<double> tmp_7378;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7379;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7379 += B0(p,MSv(gI1),Mhh(gI2))*Conj(CpconjUSvSvhh(gO2,gI1,
            gI2))*CpconjUSvSvhh(gO1,gI1,gI2);
      }
      tmp_7378 += tmp_7379;
   }
   result += tmp_7378;
   std::complex<double> tmp_7380;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7381;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7381 += (Conj(CpconjUSvFvChiPL(gO2,gI1,gI2))*
            CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPR(gO2,gI1,gI2))*
            CpconjUSvFvChiPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MChi(gI2));
      }
      tmp_7380 += tmp_7381;
   }
   result += tmp_7380;
   std::complex<double> tmp_7382;
   std::complex<double> tmp_7383;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7384;
      std::complex<double> tmp_7385;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7385 += B0(p,MFv(gI1),MChi(gI2))*(Conj(CpconjUSvFvChiPR(gO2,
            gI1,gI2))*CpconjUSvFvChiPL(gO1,gI1,gI2) + Conj(CpconjUSvFvChiPL(gO2,
            gI1,gI2))*CpconjUSvFvChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7384 += tmp_7385;
      tmp_7383 += (MFv(gI1)) * tmp_7384;
   }
   tmp_7382 += tmp_7383;
   result += (-2) * tmp_7382;
   std::complex<double> tmp_7386;
   std::complex<double> tmp_7387;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7387 += A0(MSHIPM(gI1))*CpUSvconjUSvconjSHIPMSHIPM(gO1,gO2,gI1,gI1
         );
   }
   tmp_7386 += tmp_7387;
   result += (-1) * tmp_7386;
   std::complex<double> tmp_7388;
   std::complex<double> tmp_7389;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7389 += A0(MAh(gI1))*CpUSvconjUSvAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7388 += tmp_7389;
   result += (-0.5) * tmp_7388;
   std::complex<double> tmp_7390;
   std::complex<double> tmp_7391;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7391 += A0(Mhh(gI1))*CpUSvconjUSvhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7390 += tmp_7391;
   result += (-0.5) * tmp_7390;
   std::complex<double> tmp_7392;
   std::complex<double> tmp_7393;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7393 += A0(MSd(gI1))*CpUSvconjUSvconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7392 += tmp_7393;
   result += (-3) * tmp_7392;
   std::complex<double> tmp_7394;
   std::complex<double> tmp_7395;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7395 += A0(MSDX(gI1))*CpUSvconjUSvconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7394 += tmp_7395;
   result += (-3) * tmp_7394;
   std::complex<double> tmp_7396;
   std::complex<double> tmp_7397;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7397 += A0(MSe(gI1))*CpUSvconjUSvconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7396 += tmp_7397;
   result += (-1) * tmp_7396;
   std::complex<double> tmp_7398;
   std::complex<double> tmp_7399;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7399 += A0(MSu(gI1))*CpUSvconjUSvconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7398 += tmp_7399;
   result += (-3) * tmp_7398;
   std::complex<double> tmp_7400;
   std::complex<double> tmp_7401;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7401 += A0(MSHI0(gI1))*CpUSvconjUSvconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7400 += tmp_7401;
   result += (-1) * tmp_7400;
   std::complex<double> tmp_7402;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7402 += Conj(CpconjUSvVZSv(gO2,gI2))*CpconjUSvVZSv(gO1,gI2)*F0(p,
         MSv(gI2),MVZ);
   }
   result += tmp_7402;
   std::complex<double> tmp_7403;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7403 += Conj(CpconjUSvVZpSv(gO2,gI2))*CpconjUSvVZpSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVZp);
   }
   result += tmp_7403;
   std::complex<double> tmp_7404;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7404 += Conj(CpconjUSvconjVWmSe(gO2,gI2))*CpconjUSvconjVWmSe(gO1,
         gI2)*F0(p,MSe(gI2),MVWm);
   }
   result += tmp_7404;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Su(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSuconjUSuconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSuconjUSuVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSuconjUSuVZVZ(gO1,gO2);
   std::complex<double> tmp_7405;
   std::complex<double> tmp_7406;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7406 += A0(MHpm(gI1))*CpUSuconjUSuconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7405 += tmp_7406;
   result += (-1) * tmp_7405;
   std::complex<double> tmp_7407;
   std::complex<double> tmp_7408;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7408 += A0(MSHp0(gI1))*CpUSuconjUSuconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7407 += tmp_7408;
   result += (-1) * tmp_7407;
   std::complex<double> tmp_7409;
   std::complex<double> tmp_7410;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7410 += A0(MSHpp(gI1))*CpUSuconjUSuconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7409 += tmp_7410;
   result += (-1) * tmp_7409;
   std::complex<double> tmp_7411;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7412;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7412 += (Conj(CpconjUSubarChaFdPL(gO2,gI1,gI2))*
            CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(CpconjUSubarChaFdPR(gO2,gI1,
            gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MFd(gI2));
      }
      tmp_7411 += tmp_7412;
   }
   result += tmp_7411;
   std::complex<double> tmp_7413;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7414;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7414 += B0(p,MHpm(gI1),MSd(gI2))*Conj(CpconjUSuconjHpmSd(gO2
            ,gI1,gI2))*CpconjUSuconjHpmSd(gO1,gI1,gI2);
      }
      tmp_7413 += tmp_7414;
   }
   result += tmp_7413;
   std::complex<double> tmp_7415;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7416;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7416 += B0(p,MSHpp(gI1),MSDX(gI2))*Conj(CpconjUSuconjSHppSDX
            (gO2,gI1,gI2))*CpconjUSuconjSHppSDX(gO1,gI1,gI2);
      }
      tmp_7415 += tmp_7416;
   }
   result += tmp_7415;
   std::complex<double> tmp_7417;
   std::complex<double> tmp_7418;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7419;
      std::complex<double> tmp_7420;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7420 += B0(p,MCha(gI1),MFd(gI2))*(Conj(CpconjUSubarChaFdPR(
            gO2,gI1,gI2))*CpconjUSubarChaFdPL(gO1,gI1,gI2) + Conj(
            CpconjUSubarChaFdPL(gO2,gI1,gI2))*CpconjUSubarChaFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_7419 += tmp_7420;
      tmp_7418 += (MCha(gI1)) * tmp_7419;
   }
   tmp_7417 += tmp_7418;
   result += (-2) * tmp_7417;
   std::complex<double> tmp_7421;
   std::complex<double> tmp_7422;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7422 += A0(MSv(gI1))*CpUSuconjUSuconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7421 += tmp_7422;
   result += (-1) * tmp_7421;
   std::complex<double> tmp_7423;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7424;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7424 += (Conj(CpconjUSuFuChiPL(gO2,gI1,gI2))*
            CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPR(gO2,gI1,gI2))*
            CpconjUSuFuChiPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MChi(gI2));
      }
      tmp_7423 += tmp_7424;
   }
   result += tmp_7423;
   std::complex<double> tmp_7425;
   std::complex<double> tmp_7426;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7427;
      std::complex<double> tmp_7428;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7428 += B0(p,MFu(gI1),MChi(gI2))*(Conj(CpconjUSuFuChiPR(gO2,
            gI1,gI2))*CpconjUSuFuChiPL(gO1,gI1,gI2) + Conj(CpconjUSuFuChiPL(gO2,
            gI1,gI2))*CpconjUSuFuChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7427 += tmp_7428;
      tmp_7426 += (MFu(gI1)) * tmp_7427;
   }
   tmp_7425 += tmp_7426;
   result += (-2) * tmp_7425;
   std::complex<double> tmp_7429;
   std::complex<double> tmp_7430;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7430 += A0(MSHIPM(gI1))*CpUSuconjUSuconjSHIPMSHIPM(gO1,gO2,gI1,gI1
         );
   }
   tmp_7429 += tmp_7430;
   result += (-1) * tmp_7429;
   std::complex<double> tmp_7431;
   std::complex<double> tmp_7432;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7432 += A0(MAh(gI1))*CpUSuconjUSuAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7431 += tmp_7432;
   result += (-0.5) * tmp_7431;
   std::complex<double> tmp_7433;
   std::complex<double> tmp_7434;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7434 += A0(Mhh(gI1))*CpUSuconjUSuhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7433 += tmp_7434;
   result += (-0.5) * tmp_7433;
   std::complex<double> tmp_7435;
   std::complex<double> tmp_7436;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7436 += A0(MSd(gI1))*CpUSuconjUSuconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7435 += tmp_7436;
   result += (-1) * tmp_7435;
   std::complex<double> tmp_7437;
   std::complex<double> tmp_7438;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7438 += A0(MSDX(gI1))*CpUSuconjUSuconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7437 += tmp_7438;
   result += (-1) * tmp_7437;
   std::complex<double> tmp_7439;
   std::complex<double> tmp_7440;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7440 += A0(MSe(gI1))*CpUSuconjUSuconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7439 += tmp_7440;
   result += (-1) * tmp_7439;
   std::complex<double> tmp_7441;
   std::complex<double> tmp_7442;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7442 += A0(MSu(gI1))*CpUSuconjUSuconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7441 += tmp_7442;
   result += (-1) * tmp_7441;
   std::complex<double> tmp_7443;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7444;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7444 += B0(p,MSu(gI1),MAh(gI2))*Conj(CpconjUSuSuAh(gO2,gI1,
            gI2))*CpconjUSuSuAh(gO1,gI1,gI2);
      }
      tmp_7443 += tmp_7444;
   }
   result += tmp_7443;
   std::complex<double> tmp_7445;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7446;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7446 += B0(p,MSu(gI1),Mhh(gI2))*Conj(CpconjUSuSuhh(gO2,gI1,
            gI2))*CpconjUSuSuhh(gO1,gI1,gI2);
      }
      tmp_7445 += tmp_7446;
   }
   result += tmp_7445;
   std::complex<double> tmp_7447;
   std::complex<double> tmp_7448;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7448 += A0(MSHI0(gI1))*CpUSuconjUSuconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7447 += tmp_7448;
   result += (-1) * tmp_7447;
   std::complex<double> tmp_7449;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7449 += (Conj(CpconjUSubarChaPFDXPL(gO2,gI2))*
         CpconjUSubarChaPFDXPL(gO1,gI2) + Conj(CpconjUSubarChaPFDXPR(gO2,gI2))*
         CpconjUSubarChaPFDXPR(gO1,gI2))*G0(p,MChaP,MFDX(gI2));
   }
   result += tmp_7449;
   std::complex<double> tmp_7450;
   std::complex<double> tmp_7451;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7451 += (Conj(CpconjUSuGluFuPL(gO2,1,gI2))*CpconjUSuGluFuPL(gO1,1,
         gI2) + Conj(CpconjUSuGluFuPR(gO2,1,gI2))*CpconjUSuGluFuPR(gO1,1,gI2))*G0(
         p,MGlu,MFu(gI2));
   }
   tmp_7450 += tmp_7451;
   result += (1.3333333333333333) * tmp_7450;
   std::complex<double> tmp_7452;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7452 += Conj(CpconjUSuconjVWmSd(gO2,gI2))*CpconjUSuconjVWmSd(gO1,
         gI2)*F0(p,MSd(gI2),MVWm);
   }
   result += tmp_7452;
   std::complex<double> tmp_7453;
   std::complex<double> tmp_7454;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7454 += Conj(CpconjUSuVGSu(gO2,gI2))*CpconjUSuVGSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   tmp_7453 += tmp_7454;
   result += (1.3333333333333333) * tmp_7453;
   std::complex<double> tmp_7455;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7455 += Conj(CpconjUSuVPSu(gO2,gI2))*CpconjUSuVPSu(gO1,gI2)*F0(p,
         MSu(gI2),0);
   }
   result += tmp_7455;
   std::complex<double> tmp_7456;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7456 += Conj(CpconjUSuVZSu(gO2,gI2))*CpconjUSuVZSu(gO1,gI2)*F0(p,
         MSu(gI2),MVZ);
   }
   result += tmp_7456;
   std::complex<double> tmp_7457;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7457 += Conj(CpconjUSuVZpSu(gO2,gI2))*CpconjUSuVZpSu(gO1,gI2)*F0(p
         ,MSu(gI2),MVZp);
   }
   result += tmp_7457;
   std::complex<double> tmp_7458;
   std::complex<double> tmp_7459;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7459 += B0(p,MChaP,MFDX(gI2))*(Conj(CpconjUSubarChaPFDXPR(gO2,gI2)
         )*CpconjUSubarChaPFDXPL(gO1,gI2) + Conj(CpconjUSubarChaPFDXPL(gO2,gI2))*
         CpconjUSubarChaPFDXPR(gO1,gI2))*MFDX(gI2);
   }
   tmp_7458 += tmp_7459;
   result += (-2*MChaP) * tmp_7458;
   std::complex<double> tmp_7460;
   std::complex<double> tmp_7461;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7461 += B0(p,MGlu,MFu(gI2))*(Conj(CpconjUSuGluFuPR(gO2,1,gI2))*
         CpconjUSuGluFuPL(gO1,1,gI2) + Conj(CpconjUSuGluFuPL(gO2,1,gI2))*
         CpconjUSuGluFuPR(gO1,1,gI2))*MFu(gI2);
   }
   tmp_7460 += tmp_7461;
   result += (-2.6666666666666665*MGlu) * tmp_7460;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Se(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSeconjUSeconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSeconjUSeVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSeconjUSeVZVZ(gO1,gO2);
   std::complex<double> tmp_7462;
   std::complex<double> tmp_7463;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7463 += A0(MHpm(gI1))*CpUSeconjUSeconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7462 += tmp_7463;
   result += (-1) * tmp_7462;
   std::complex<double> tmp_7464;
   std::complex<double> tmp_7465;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7465 += A0(MSHp0(gI1))*CpUSeconjUSeconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7464 += tmp_7465;
   result += (-1) * tmp_7464;
   std::complex<double> tmp_7466;
   std::complex<double> tmp_7467;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7467 += A0(MSHpp(gI1))*CpUSeconjUSeconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7466 += tmp_7467;
   result += (-1) * tmp_7466;
   std::complex<double> tmp_7468;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7469;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7469 += (Conj(CpconjUSeChiPChaIPL(gO2,gI1,gI2))*
            CpconjUSeChiPChaIPL(gO1,gI1,gI2) + Conj(CpconjUSeChiPChaIPR(gO2,gI1,
            gI2))*CpconjUSeChiPChaIPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MChaI(gI2));
      }
      tmp_7468 += tmp_7469;
   }
   result += tmp_7468;
   std::complex<double> tmp_7470;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7471;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_7471 += B0(p,MSHp0(gI1),MSHIPM(gI2))*Conj(CpconjUSeSHp0SHIPM
            (gO2,gI1,gI2))*CpconjUSeSHp0SHIPM(gO1,gI1,gI2);
      }
      tmp_7470 += tmp_7471;
   }
   result += tmp_7470;
   std::complex<double> tmp_7472;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7473;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7473 += B0(p,MSHpp(gI1),MSHI0(gI2))*Conj(CpconjUSeSHppSHI0(
            gO2,gI1,gI2))*CpconjUSeSHppSHI0(gO1,gI1,gI2);
      }
      tmp_7472 += tmp_7473;
   }
   result += tmp_7472;
   std::complex<double> tmp_7474;
   std::complex<double> tmp_7475;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7476;
      std::complex<double> tmp_7477;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7477 += B0(p,MChiP(gI1),MChaI(gI2))*(Conj(
            CpconjUSeChiPChaIPR(gO2,gI1,gI2))*CpconjUSeChiPChaIPL(gO1,gI1,gI2) +
            Conj(CpconjUSeChiPChaIPL(gO2,gI1,gI2))*CpconjUSeChiPChaIPR(gO1,gI1,gI2
            ))*MChaI(gI2);
      }
      tmp_7476 += tmp_7477;
      tmp_7475 += (MChiP(gI1)) * tmp_7476;
   }
   tmp_7474 += tmp_7475;
   result += (-2) * tmp_7474;
   std::complex<double> tmp_7478;
   std::complex<double> tmp_7479;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7479 += A0(MSv(gI1))*CpUSeconjUSeconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7478 += tmp_7479;
   result += (-1) * tmp_7478;
   std::complex<double> tmp_7480;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7481;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7481 += B0(p,MSv(gI1),MHpm(gI2))*Conj(CpconjUSeSvHpm(gO2,gI1
            ,gI2))*CpconjUSeSvHpm(gO1,gI1,gI2);
      }
      tmp_7480 += tmp_7481;
   }
   result += tmp_7480;
   std::complex<double> tmp_7482;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7483;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7483 += (Conj(CpconjUSeFvChaPL(gO2,gI1,gI2))*
            CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPR(gO2,gI1,gI2))*
            CpconjUSeFvChaPR(gO1,gI1,gI2))*G0(p,MFv(gI1),MCha(gI2));
      }
      tmp_7482 += tmp_7483;
   }
   result += tmp_7482;
   std::complex<double> tmp_7484;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7485;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7485 += (Conj(CpconjUSeFeChiPL(gO2,gI1,gI2))*
            CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPR(gO2,gI1,gI2))*
            CpconjUSeFeChiPR(gO1,gI1,gI2))*G0(p,MFe(gI1),MChi(gI2));
      }
      tmp_7484 += tmp_7485;
   }
   result += tmp_7484;
   std::complex<double> tmp_7486;
   std::complex<double> tmp_7487;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7488;
      std::complex<double> tmp_7489;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7489 += B0(p,MFe(gI1),MChi(gI2))*(Conj(CpconjUSeFeChiPR(gO2,
            gI1,gI2))*CpconjUSeFeChiPL(gO1,gI1,gI2) + Conj(CpconjUSeFeChiPL(gO2,
            gI1,gI2))*CpconjUSeFeChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7488 += tmp_7489;
      tmp_7487 += (MFe(gI1)) * tmp_7488;
   }
   tmp_7486 += tmp_7487;
   result += (-2) * tmp_7486;
   std::complex<double> tmp_7490;
   std::complex<double> tmp_7491;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7492;
      std::complex<double> tmp_7493;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7493 += B0(p,MFv(gI1),MCha(gI2))*(Conj(CpconjUSeFvChaPR(gO2,
            gI1,gI2))*CpconjUSeFvChaPL(gO1,gI1,gI2) + Conj(CpconjUSeFvChaPL(gO2,
            gI1,gI2))*CpconjUSeFvChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_7492 += tmp_7493;
      tmp_7491 += (MFv(gI1)) * tmp_7492;
   }
   tmp_7490 += tmp_7491;
   result += (-2) * tmp_7490;
   std::complex<double> tmp_7494;
   std::complex<double> tmp_7495;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7495 += A0(MSHIPM(gI1))*CpUSeconjUSeconjSHIPMSHIPM(gO1,gO2,gI1,gI1
         );
   }
   tmp_7494 += tmp_7495;
   result += (-1) * tmp_7494;
   std::complex<double> tmp_7496;
   std::complex<double> tmp_7497;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7497 += A0(MAh(gI1))*CpUSeconjUSeAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7496 += tmp_7497;
   result += (-0.5) * tmp_7496;
   std::complex<double> tmp_7498;
   std::complex<double> tmp_7499;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7499 += A0(Mhh(gI1))*CpUSeconjUSehhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7498 += tmp_7499;
   result += (-0.5) * tmp_7498;
   std::complex<double> tmp_7500;
   std::complex<double> tmp_7501;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7501 += A0(MSd(gI1))*CpUSeconjUSeconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7500 += tmp_7501;
   result += (-3) * tmp_7500;
   std::complex<double> tmp_7502;
   std::complex<double> tmp_7503;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7503 += A0(MSDX(gI1))*CpUSeconjUSeconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7502 += tmp_7503;
   result += (-3) * tmp_7502;
   std::complex<double> tmp_7504;
   std::complex<double> tmp_7505;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7505 += A0(MSe(gI1))*CpUSeconjUSeconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7504 += tmp_7505;
   result += (-1) * tmp_7504;
   std::complex<double> tmp_7506;
   std::complex<double> tmp_7507;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7507 += A0(MSu(gI1))*CpUSeconjUSeconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7506 += tmp_7507;
   result += (-3) * tmp_7506;
   std::complex<double> tmp_7508;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7509;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7509 += B0(p,MSe(gI1),MAh(gI2))*Conj(CpconjUSeSeAh(gO2,gI1,
            gI2))*CpconjUSeSeAh(gO1,gI1,gI2);
      }
      tmp_7508 += tmp_7509;
   }
   result += tmp_7508;
   std::complex<double> tmp_7510;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7511;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7511 += B0(p,MSe(gI1),Mhh(gI2))*Conj(CpconjUSeSehh(gO2,gI1,
            gI2))*CpconjUSeSehh(gO1,gI1,gI2);
      }
      tmp_7510 += tmp_7511;
   }
   result += tmp_7510;
   std::complex<double> tmp_7512;
   std::complex<double> tmp_7513;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7513 += A0(MSHI0(gI1))*CpUSeconjUSeconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7512 += tmp_7513;
   result += (-1) * tmp_7512;
   std::complex<double> tmp_7514;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7514 += (Conj(CpconjUSeChiIChaPPL(gO2,gI1))*CpconjUSeChiIChaPPL(
         gO1,gI1) + Conj(CpconjUSeChiIChaPPR(gO2,gI1))*CpconjUSeChiIChaPPR(gO1,gI1
         ))*G0(p,MChiI(gI1),MChaP);
   }
   result += tmp_7514;
   std::complex<double> tmp_7515;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7516;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7516 += B0(p,MSHI0(gI1),MSHpp(gI2))*Conj(
            CpconjUSeconjSHI0SHpp(gO2,gI1,gI2))*CpconjUSeconjSHI0SHpp(gO1,gI1,gI2)
            ;
      }
      tmp_7515 += tmp_7516;
   }
   result += tmp_7515;
   std::complex<double> tmp_7517;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7517 += Conj(CpconjUSeVWmSv(gO2,gI2))*CpconjUSeVWmSv(gO1,gI2)*F0(p
         ,MSv(gI2),MVWm);
   }
   result += tmp_7517;
   std::complex<double> tmp_7518;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7518 += Conj(CpconjUSeVPSe(gO2,gI2))*CpconjUSeVPSe(gO1,gI2)*F0(p,
         MSe(gI2),0);
   }
   result += tmp_7518;
   std::complex<double> tmp_7519;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7519 += Conj(CpconjUSeVZSe(gO2,gI2))*CpconjUSeVZSe(gO1,gI2)*F0(p,
         MSe(gI2),MVZ);
   }
   result += tmp_7519;
   std::complex<double> tmp_7520;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7520 += Conj(CpconjUSeVZpSe(gO2,gI2))*CpconjUSeVZpSe(gO1,gI2)*F0(p
         ,MSe(gI2),MVZp);
   }
   result += tmp_7520;
   std::complex<double> tmp_7521;
   std::complex<double> tmp_7522;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7522 += B0(p,MChiI(gI1),MChaP)*(Conj(CpconjUSeChiIChaPPR(gO2,gI1))
         *CpconjUSeChiIChaPPL(gO1,gI1) + Conj(CpconjUSeChiIChaPPL(gO2,gI1))*
         CpconjUSeChiIChaPPR(gO1,gI1))*MChiI(gI1);
   }
   tmp_7521 += tmp_7522;
   result += (-2*MChaP) * tmp_7521;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_SDX(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 2*A0(MVZp)*CpUSDXconjUSDXVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSDXconjUSDXVZVZ(gO1,gO2);
   std::complex<double> tmp_7523;
   std::complex<double> tmp_7524;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7524 += A0(MHpm(gI1))*CpUSDXconjUSDXconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7523 += tmp_7524;
   result += (-1) * tmp_7523;
   std::complex<double> tmp_7525;
   std::complex<double> tmp_7526;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7526 += A0(MSHp0(gI1))*CpUSDXconjUSDXconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7525 += tmp_7526;
   result += (-1) * tmp_7525;
   std::complex<double> tmp_7527;
   std::complex<double> tmp_7528;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7528 += A0(MSHpp(gI1))*CpUSDXconjUSDXconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7527 += tmp_7528;
   result += (-1) * tmp_7527;
   std::complex<double> tmp_7529;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7530;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7530 += B0(p,MSHp0(gI1),MSd(gI2))*Conj(CpconjUSDXSHp0Sd(gO2,
            gI1,gI2))*CpconjUSDXSHp0Sd(gO1,gI1,gI2);
      }
      tmp_7529 += tmp_7530;
   }
   result += tmp_7529;
   std::complex<double> tmp_7531;
   std::complex<double> tmp_7532;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7532 += A0(MSv(gI1))*CpUSDXconjUSDXconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7531 += tmp_7532;
   result += (-1) * tmp_7531;
   std::complex<double> tmp_7533;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7533 += (Conj(CpconjUSDXFuChaPPL(gO2,gI1))*CpconjUSDXFuChaPPL(gO1,
         gI1) + Conj(CpconjUSDXFuChaPPR(gO2,gI1))*CpconjUSDXFuChaPPR(gO1,gI1))*G0(
         p,MFu(gI1),MChaP);
   }
   result += tmp_7533;
   std::complex<double> tmp_7534;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7535;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7535 += (Conj(CpconjUSDXFdChiPPL(gO2,gI1,gI2))*
            CpconjUSDXFdChiPPL(gO1,gI1,gI2) + Conj(CpconjUSDXFdChiPPR(gO2,gI1,gI2)
            )*CpconjUSDXFdChiPPR(gO1,gI1,gI2))*G0(p,MFd(gI1),MChiP(gI2));
      }
      tmp_7534 += tmp_7535;
   }
   result += tmp_7534;
   std::complex<double> tmp_7536;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7537;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7537 += (Conj(CpconjUSDXFDXChiPL(gO2,gI1,gI2))*
            CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(CpconjUSDXFDXChiPR(gO2,gI1,gI2)
            )*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MChi(gI2));
      }
      tmp_7536 += tmp_7537;
   }
   result += tmp_7536;
   std::complex<double> tmp_7538;
   std::complex<double> tmp_7539;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7540;
      std::complex<double> tmp_7541;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7541 += B0(p,MFd(gI1),MChiP(gI2))*(Conj(CpconjUSDXFdChiPPR(
            gO2,gI1,gI2))*CpconjUSDXFdChiPPL(gO1,gI1,gI2) + Conj(
            CpconjUSDXFdChiPPL(gO2,gI1,gI2))*CpconjUSDXFdChiPPR(gO1,gI1,gI2))*
            MChiP(gI2);
      }
      tmp_7540 += tmp_7541;
      tmp_7539 += (MFd(gI1)) * tmp_7540;
   }
   tmp_7538 += tmp_7539;
   result += (-2) * tmp_7538;
   std::complex<double> tmp_7542;
   std::complex<double> tmp_7543;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7544;
      std::complex<double> tmp_7545;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7545 += B0(p,MFDX(gI1),MChi(gI2))*(Conj(CpconjUSDXFDXChiPR(
            gO2,gI1,gI2))*CpconjUSDXFDXChiPL(gO1,gI1,gI2) + Conj(
            CpconjUSDXFDXChiPL(gO2,gI1,gI2))*CpconjUSDXFDXChiPR(gO1,gI1,gI2))*MChi
            (gI2);
      }
      tmp_7544 += tmp_7545;
      tmp_7543 += (MFDX(gI1)) * tmp_7544;
   }
   tmp_7542 += tmp_7543;
   result += (-2) * tmp_7542;
   std::complex<double> tmp_7546;
   std::complex<double> tmp_7547;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7547 += A0(MSHIPM(gI1))*CpUSDXconjUSDXconjSHIPMSHIPM(gO1,gO2,gI1,
         gI1);
   }
   tmp_7546 += tmp_7547;
   result += (-1) * tmp_7546;
   std::complex<double> tmp_7548;
   std::complex<double> tmp_7549;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7549 += A0(MAh(gI1))*CpUSDXconjUSDXAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7548 += tmp_7549;
   result += (-0.5) * tmp_7548;
   std::complex<double> tmp_7550;
   std::complex<double> tmp_7551;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7551 += A0(Mhh(gI1))*CpUSDXconjUSDXhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7550 += tmp_7551;
   result += (-0.5) * tmp_7550;
   std::complex<double> tmp_7552;
   std::complex<double> tmp_7553;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7553 += A0(MSd(gI1))*CpUSDXconjUSDXconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7552 += tmp_7553;
   result += (-1) * tmp_7552;
   std::complex<double> tmp_7554;
   std::complex<double> tmp_7555;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7555 += A0(MSDX(gI1))*CpUSDXconjUSDXconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7554 += tmp_7555;
   result += (-1) * tmp_7554;
   std::complex<double> tmp_7556;
   std::complex<double> tmp_7557;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7557 += A0(MSe(gI1))*CpUSDXconjUSDXconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7556 += tmp_7557;
   result += (-1) * tmp_7556;
   std::complex<double> tmp_7558;
   std::complex<double> tmp_7559;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7559 += A0(MSu(gI1))*CpUSDXconjUSDXconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7558 += tmp_7559;
   result += (-1) * tmp_7558;
   std::complex<double> tmp_7560;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7561;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7561 += B0(p,MSu(gI1),MSHpp(gI2))*Conj(CpconjUSDXSuSHpp(gO2,
            gI1,gI2))*CpconjUSDXSuSHpp(gO1,gI1,gI2);
      }
      tmp_7560 += tmp_7561;
   }
   result += tmp_7560;
   std::complex<double> tmp_7562;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7563;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7563 += B0(p,MSDX(gI1),MAh(gI2))*Conj(CpconjUSDXSDXAh(gO2,
            gI1,gI2))*CpconjUSDXSDXAh(gO1,gI1,gI2);
      }
      tmp_7562 += tmp_7563;
   }
   result += tmp_7562;
   std::complex<double> tmp_7564;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7565;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7565 += B0(p,MSDX(gI1),Mhh(gI2))*Conj(CpconjUSDXSDXhh(gO2,
            gI1,gI2))*CpconjUSDXSDXhh(gO1,gI1,gI2);
      }
      tmp_7564 += tmp_7565;
   }
   result += tmp_7564;
   std::complex<double> tmp_7566;
   std::complex<double> tmp_7567;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7567 += A0(MSHI0(gI1))*CpUSDXconjUSDXconjSHI0SHI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7566 += tmp_7567;
   result += (-1) * tmp_7566;
   std::complex<double> tmp_7568;
   std::complex<double> tmp_7569;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7569 += (Conj(CpconjUSDXGluFDXPL(gO2,1,gI2))*CpconjUSDXGluFDXPL(
         gO1,1,gI2) + Conj(CpconjUSDXGluFDXPR(gO2,1,gI2))*CpconjUSDXGluFDXPR(gO1,1
         ,gI2))*G0(p,MGlu,MFDX(gI2));
   }
   tmp_7568 += tmp_7569;
   result += (1.3333333333333333) * tmp_7568;
   std::complex<double> tmp_7570;
   std::complex<double> tmp_7571;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7571 += Conj(CpconjUSDXVGSDX(gO2,gI2))*CpconjUSDXVGSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   tmp_7570 += tmp_7571;
   result += (1.3333333333333333) * tmp_7570;
   std::complex<double> tmp_7572;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7572 += Conj(CpconjUSDXVPSDX(gO2,gI2))*CpconjUSDXVPSDX(gO1,gI2)*F0
         (p,MSDX(gI2),0);
   }
   result += tmp_7572;
   std::complex<double> tmp_7573;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7573 += Conj(CpconjUSDXVZSDX(gO2,gI2))*CpconjUSDXVZSDX(gO1,gI2)*F0
         (p,MSDX(gI2),MVZ);
   }
   result += tmp_7573;
   std::complex<double> tmp_7574;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_7574 += Conj(CpconjUSDXVZpSDX(gO2,gI2))*CpconjUSDXVZpSDX(gO1,gI2)*
         F0(p,MSDX(gI2),MVZp);
   }
   result += tmp_7574;
   std::complex<double> tmp_7575;
   std::complex<double> tmp_7576;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7576 += B0(p,MFu(gI1),MChaP)*(Conj(CpconjUSDXFuChaPPR(gO2,gI1))*
         CpconjUSDXFuChaPPL(gO1,gI1) + Conj(CpconjUSDXFuChaPPL(gO2,gI1))*
         CpconjUSDXFuChaPPR(gO1,gI1))*MFu(gI1);
   }
   tmp_7575 += tmp_7576;
   result += (-2*MChaP) * tmp_7575;
   std::complex<double> tmp_7577;
   std::complex<double> tmp_7578;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7578 += B0(p,MGlu,MFDX(gI2))*(Conj(CpconjUSDXGluFDXPR(gO2,1,gI2))*
         CpconjUSDXGluFDXPL(gO1,1,gI2) + Conj(CpconjUSDXGluFDXPL(gO2,1,gI2))*
         CpconjUSDXGluFDXPR(gO1,1,gI2))*MFDX(gI2);
   }
   tmp_7577 += tmp_7578;
   result += (-2.6666666666666665*MGlu) * tmp_7577;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_hh(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmCgWmC(gO1)*CpUhhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUhhbargWmgWm(gO1)*CpUhhbargWmgWm(gO2));
   result += -(B0(p,MVZ,MVZ)*CpUhhbargZgZ(gO1)*CpUhhbargZgZ(gO2));
   result += -2*B0(p,MVZ,MVZp)*CpUhhbargZpgZ(gO1)*CpUhhbargZpgZ(gO2);
   result += -(B0(p,MVZp,MVZp)*CpUhhbargZpgZp(gO1)*CpUhhbargZpgZp(gO2));
   result += 4*B0(p,MVWm,MVWm)*Conj(CpUhhconjVWmVWm(gO2))*CpUhhconjVWmVWm(gO1);
   result += 4*A0(MVWm)*CpUhhUhhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUhhUhhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUhhUhhVZVZ(gO1,gO2);
   result += 4*B0(p,MVZ,MVZp)*Conj(CpUhhVZpVZ(gO2))*CpUhhVZpVZ(gO1);
   result += 2*B0(p,MVZp,MVZp)*Conj(CpUhhVZpVZp(gO2))*CpUhhVZpVZp(gO1);
   result += 2*B0(p,MVZ,MVZ)*Conj(CpUhhVZVZ(gO2))*CpUhhVZVZ(gO1);
   result += (Conj(CpUhhbarChaPChaPPL(gO2))*CpUhhbarChaPChaPPL(gO1) + Conj(
      CpUhhbarChaPChaPPR(gO2))*CpUhhbarChaPChaPPR(gO1))*G0(p,MChaP,MChaP);
   std::complex<double> tmp_7579;
   std::complex<double> tmp_7580;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7580 += A0(MHpm(gI1))*CpUhhUhhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7579 += tmp_7580;
   result += (-1) * tmp_7579;
   std::complex<double> tmp_7581;
   std::complex<double> tmp_7582;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7582 += A0(MSHp0(gI1))*CpUhhUhhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7581 += tmp_7582;
   result += (-1) * tmp_7581;
   std::complex<double> tmp_7583;
   std::complex<double> tmp_7584;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7584 += A0(MSHpp(gI1))*CpUhhUhhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7583 += tmp_7584;
   result += (-1) * tmp_7583;
   std::complex<double> tmp_7585;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7586;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7586 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUhhconjHpmHpm(gO2,
            gI1,gI2))*CpUhhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_7585 += tmp_7586;
   }
   result += tmp_7585;
   std::complex<double> tmp_7587;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7588;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7588 += B0(p,MSHp0(gI1),MSHp0(gI2))*Conj(CpUhhconjSHp0SHp0(
            gO2,gI1,gI2))*CpUhhconjSHp0SHp0(gO1,gI1,gI2);
      }
      tmp_7587 += tmp_7588;
   }
   result += tmp_7587;
   std::complex<double> tmp_7589;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7590;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7590 += B0(p,MSHpp(gI1),MSHpp(gI2))*Conj(CpUhhconjSHppSHpp(
            gO2,gI1,gI2))*CpUhhconjSHppSHpp(gO1,gI1,gI2);
      }
      tmp_7589 += tmp_7590;
   }
   result += tmp_7589;
   std::complex<double> tmp_7591;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7592;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7592 += (Conj(CpUhhbarChaChaPL(gO2,gI1,gI2))*
            CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPR(gO2,gI1,gI2))*
            CpUhhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_7591 += tmp_7592;
   }
   result += tmp_7591;
   std::complex<double> tmp_7593;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7594;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7594 += (Conj(CpUhhbarChaIChaIPL(gO2,gI1,gI2))*
            CpUhhbarChaIChaIPL(gO1,gI1,gI2) + Conj(CpUhhbarChaIChaIPR(gO2,gI1,gI2)
            )*CpUhhbarChaIChaIPR(gO1,gI1,gI2))*G0(p,MChaI(gI1),MChaI(gI2));
      }
      tmp_7593 += tmp_7594;
   }
   result += tmp_7593;
   std::complex<double> tmp_7595;
   std::complex<double> tmp_7596;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7597;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7597 += (Conj(CpUhhChiPChiPPL(gO2,gI1,gI2))*CpUhhChiPChiPPL(
            gO1,gI1,gI2) + Conj(CpUhhChiPChiPPR(gO2,gI1,gI2))*CpUhhChiPChiPPR(gO1,
            gI1,gI2))*G0(p,MChiP(gI1),MChiP(gI2));
      }
      tmp_7596 += tmp_7597;
   }
   tmp_7595 += tmp_7596;
   result += (0.5) * tmp_7595;
   std::complex<double> tmp_7598;
   std::complex<double> tmp_7599;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7600;
      std::complex<double> tmp_7601;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7601 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUhhbarChaChaPR(gO2
            ,gI1,gI2))*CpUhhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUhhbarChaChaPL(gO2,
            gI1,gI2))*CpUhhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_7600 += tmp_7601;
      tmp_7599 += (MCha(gI1)) * tmp_7600;
   }
   tmp_7598 += tmp_7599;
   result += (-2) * tmp_7598;
   std::complex<double> tmp_7602;
   std::complex<double> tmp_7603;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7604;
      std::complex<double> tmp_7605;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7605 += B0(p,MChaI(gI1),MChaI(gI2))*(Conj(CpUhhbarChaIChaIPR
            (gO2,gI1,gI2))*CpUhhbarChaIChaIPL(gO1,gI1,gI2) + Conj(
            CpUhhbarChaIChaIPL(gO2,gI1,gI2))*CpUhhbarChaIChaIPR(gO1,gI1,gI2))*
            MChaI(gI2);
      }
      tmp_7604 += tmp_7605;
      tmp_7603 += (MChaI(gI1)) * tmp_7604;
   }
   tmp_7602 += tmp_7603;
   result += (-2) * tmp_7602;
   std::complex<double> tmp_7606;
   std::complex<double> tmp_7607;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7608;
      std::complex<double> tmp_7609;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7609 += B0(p,MChiP(gI1),MChiP(gI2))*(Conj(CpUhhChiPChiPPR(
            gO2,gI1,gI2))*CpUhhChiPChiPPL(gO1,gI1,gI2) + Conj(CpUhhChiPChiPPL(gO2,
            gI1,gI2))*CpUhhChiPChiPPR(gO1,gI1,gI2))*MChiP(gI2);
      }
      tmp_7608 += tmp_7609;
      tmp_7607 += (MChiP(gI1)) * tmp_7608;
   }
   tmp_7606 += tmp_7607;
   result += (-1) * tmp_7606;
   std::complex<double> tmp_7610;
   std::complex<double> tmp_7611;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7611 += A0(MSv(gI1))*CpUhhUhhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7610 += tmp_7611;
   result += (-1) * tmp_7610;
   std::complex<double> tmp_7612;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7613;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7613 += B0(p,MSv(gI1),MSv(gI2))*Conj(CpUhhconjSvSv(gO2,gI1,
            gI2))*CpUhhconjSvSv(gO1,gI1,gI2);
      }
      tmp_7612 += tmp_7613;
   }
   result += tmp_7612;
   std::complex<double> tmp_7614;
   std::complex<double> tmp_7615;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7616;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7616 += (Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))*CpUhhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFdFdPR(gO2,gI1,gI2))*CpUhhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_7615 += tmp_7616;
   }
   tmp_7614 += tmp_7615;
   result += (3) * tmp_7614;
   std::complex<double> tmp_7617;
   std::complex<double> tmp_7618;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7619;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7619 += (Conj(CpUhhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUhhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_7618 += tmp_7619;
   }
   tmp_7617 += tmp_7618;
   result += (3) * tmp_7617;
   std::complex<double> tmp_7620;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7621;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7621 += (Conj(CpUhhbarFeFePL(gO2,gI1,gI2))*CpUhhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUhhbarFeFePR(gO2,gI1,gI2))*CpUhhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_7620 += tmp_7621;
   }
   result += tmp_7620;
   std::complex<double> tmp_7622;
   std::complex<double> tmp_7623;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7624;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7624 += (Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))*CpUhhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUhhbarFuFuPR(gO2,gI1,gI2))*CpUhhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_7623 += tmp_7624;
   }
   tmp_7622 += tmp_7623;
   result += (3) * tmp_7622;
   std::complex<double> tmp_7625;
   std::complex<double> tmp_7626;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7627;
      std::complex<double> tmp_7628;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7628 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUhhbarFdFdPR(gO2,gI1
            ,gI2))*CpUhhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUhhbarFdFdPL(gO2,gI1,gI2))
            *CpUhhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_7627 += tmp_7628;
      tmp_7626 += (MFd(gI1)) * tmp_7627;
   }
   tmp_7625 += tmp_7626;
   result += (-6) * tmp_7625;
   std::complex<double> tmp_7629;
   std::complex<double> tmp_7630;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7631;
      std::complex<double> tmp_7632;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7632 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUhhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUhhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUhhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUhhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_7631 += tmp_7632;
      tmp_7630 += (MFDX(gI1)) * tmp_7631;
   }
   tmp_7629 += tmp_7630;
   result += (-6) * tmp_7629;
   std::complex<double> tmp_7633;
   std::complex<double> tmp_7634;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7635;
      std::complex<double> tmp_7636;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7636 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUhhbarFeFePR(gO2,gI1
            ,gI2))*CpUhhbarFeFePL(gO1,gI1,gI2) + Conj(CpUhhbarFeFePL(gO2,gI1,gI2))
            *CpUhhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_7635 += tmp_7636;
      tmp_7634 += (MFe(gI1)) * tmp_7635;
   }
   tmp_7633 += tmp_7634;
   result += (-2) * tmp_7633;
   std::complex<double> tmp_7637;
   std::complex<double> tmp_7638;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7639;
      std::complex<double> tmp_7640;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7640 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUhhbarFuFuPR(gO2,gI1
            ,gI2))*CpUhhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUhhbarFuFuPL(gO2,gI1,gI2))
            *CpUhhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_7639 += tmp_7640;
      tmp_7638 += (MFu(gI1)) * tmp_7639;
   }
   tmp_7637 += tmp_7638;
   result += (-6) * tmp_7637;
   std::complex<double> tmp_7641;
   std::complex<double> tmp_7642;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7642 += A0(MSHIPM(gI1))*CpUhhUhhconjSHIPMSHIPM(gO1,gO2,gI1,gI1);
   }
   tmp_7641 += tmp_7642;
   result += (-1) * tmp_7641;
   std::complex<double> tmp_7643;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7644;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_7644 += B0(p,MSHIPM(gI1),MSHIPM(gI2))*Conj(
            CpUhhconjSHIPMSHIPM(gO2,gI1,gI2))*CpUhhconjSHIPMSHIPM(gO1,gI1,gI2);
      }
      tmp_7643 += tmp_7644;
   }
   result += tmp_7643;
   std::complex<double> tmp_7645;
   std::complex<double> tmp_7646;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7646 += A0(MAh(gI1))*CpUhhUhhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7645 += tmp_7646;
   result += (-0.5) * tmp_7645;
   std::complex<double> tmp_7647;
   std::complex<double> tmp_7648;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7648 += A0(Mhh(gI1))*CpUhhUhhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7647 += tmp_7648;
   result += (-0.5) * tmp_7647;
   std::complex<double> tmp_7649;
   std::complex<double> tmp_7650;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7651;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7651 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUhhAhAh(gO2,gI1,gI2))
            *CpUhhAhAh(gO1,gI1,gI2);
      }
      tmp_7650 += tmp_7651;
   }
   tmp_7649 += tmp_7650;
   result += (0.5) * tmp_7649;
   std::complex<double> tmp_7652;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7653;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7653 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUhhhhAh(gO2,gI1,gI2))
            *CpUhhhhAh(gO1,gI1,gI2);
      }
      tmp_7652 += tmp_7653;
   }
   result += tmp_7652;
   std::complex<double> tmp_7654;
   std::complex<double> tmp_7655;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7656;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7656 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUhhhhhh(gO2,gI1,gI2))
            *CpUhhhhhh(gO1,gI1,gI2);
      }
      tmp_7655 += tmp_7656;
   }
   tmp_7654 += tmp_7655;
   result += (0.5) * tmp_7654;
   std::complex<double> tmp_7657;
   std::complex<double> tmp_7658;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7658 += A0(MSd(gI1))*CpUhhUhhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7657 += tmp_7658;
   result += (-3) * tmp_7657;
   std::complex<double> tmp_7659;
   std::complex<double> tmp_7660;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7660 += A0(MSDX(gI1))*CpUhhUhhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7659 += tmp_7660;
   result += (-3) * tmp_7659;
   std::complex<double> tmp_7661;
   std::complex<double> tmp_7662;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7662 += A0(MSe(gI1))*CpUhhUhhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7661 += tmp_7662;
   result += (-1) * tmp_7661;
   std::complex<double> tmp_7663;
   std::complex<double> tmp_7664;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7664 += A0(MSu(gI1))*CpUhhUhhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7663 += tmp_7664;
   result += (-3) * tmp_7663;
   std::complex<double> tmp_7665;
   std::complex<double> tmp_7666;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7667;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7667 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUhhconjSdSd(gO2,gI1,
            gI2))*CpUhhconjSdSd(gO1,gI1,gI2);
      }
      tmp_7666 += tmp_7667;
   }
   tmp_7665 += tmp_7666;
   result += (3) * tmp_7665;
   std::complex<double> tmp_7668;
   std::complex<double> tmp_7669;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7670;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7670 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUhhconjSDXSDX(gO2,
            gI1,gI2))*CpUhhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_7669 += tmp_7670;
   }
   tmp_7668 += tmp_7669;
   result += (3) * tmp_7668;
   std::complex<double> tmp_7671;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7672;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7672 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUhhconjSeSe(gO2,gI1,
            gI2))*CpUhhconjSeSe(gO1,gI1,gI2);
      }
      tmp_7671 += tmp_7672;
   }
   result += tmp_7671;
   std::complex<double> tmp_7673;
   std::complex<double> tmp_7674;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7675;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7675 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUhhconjSuSu(gO2,gI1,
            gI2))*CpUhhconjSuSu(gO1,gI1,gI2);
      }
      tmp_7674 += tmp_7675;
   }
   tmp_7673 += tmp_7674;
   result += (3) * tmp_7673;
   std::complex<double> tmp_7676;
   std::complex<double> tmp_7677;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7677 += A0(MSHI0(gI1))*CpUhhUhhconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7676 += tmp_7677;
   result += (-1) * tmp_7676;
   std::complex<double> tmp_7678;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7679;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7679 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUhhconjSHI0SHI0(
            gO2,gI1,gI2))*CpUhhconjSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_7678 += tmp_7679;
   }
   result += tmp_7678;
   std::complex<double> tmp_7680;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7681;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7681 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUhhSHI0SHI0(gO2,
            gI1,gI2))*CpUhhSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_7680 += tmp_7681;
   }
   result += tmp_7680;
   std::complex<double> tmp_7682;
   std::complex<double> tmp_7683;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7684;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7684 += (Conj(CpUhhChiIChiIPL(gO2,gI1,gI2))*CpUhhChiIChiIPL(
            gO1,gI1,gI2) + Conj(CpUhhChiIChiIPR(gO2,gI1,gI2))*CpUhhChiIChiIPR(gO1,
            gI1,gI2))*G0(p,MChiI(gI1),MChiI(gI2));
      }
      tmp_7683 += tmp_7684;
   }
   tmp_7682 += tmp_7683;
   result += (0.5) * tmp_7682;
   std::complex<double> tmp_7685;
   std::complex<double> tmp_7686;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7687;
      std::complex<double> tmp_7688;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7688 += B0(p,MChiI(gI1),MChiI(gI2))*(Conj(CpUhhChiIChiIPR(
            gO2,gI1,gI2))*CpUhhChiIChiIPL(gO1,gI1,gI2) + Conj(CpUhhChiIChiIPL(gO2,
            gI1,gI2))*CpUhhChiIChiIPR(gO1,gI1,gI2))*MChiI(gI2);
      }
      tmp_7687 += tmp_7688;
      tmp_7686 += (MChiI(gI1)) * tmp_7687;
   }
   tmp_7685 += tmp_7686;
   result += (-1) * tmp_7685;
   std::complex<double> tmp_7689;
   std::complex<double> tmp_7690;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7691;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7691 += (Conj(CpUhhChiChiPL(gO2,gI1,gI2))*CpUhhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUhhChiChiPR(gO2,gI1,gI2))*CpUhhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_7690 += tmp_7691;
   }
   tmp_7689 += tmp_7690;
   result += (0.5) * tmp_7689;
   std::complex<double> tmp_7692;
   std::complex<double> tmp_7693;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7694;
      std::complex<double> tmp_7695;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7695 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUhhChiChiPR(gO2,
            gI1,gI2))*CpUhhChiChiPL(gO1,gI1,gI2) + Conj(CpUhhChiChiPL(gO2,gI1,gI2)
            )*CpUhhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7694 += tmp_7695;
      tmp_7693 += (MChi(gI1)) * tmp_7694;
   }
   tmp_7692 += tmp_7693;
   result += (-1) * tmp_7692;
   std::complex<double> tmp_7696;
   std::complex<double> tmp_7697;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_7697 += Conj(CpUhhconjVWmHpm(gO2,gI2))*CpUhhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_7696 += tmp_7697;
   result += (2) * tmp_7696;
   std::complex<double> tmp_7698;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7698 += Conj(CpUhhVZAh(gO2,gI2))*CpUhhVZAh(gO1,gI2)*F0(p,MAh(gI2),
         MVZ);
   }
   result += tmp_7698;
   std::complex<double> tmp_7699;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7699 += Conj(CpUhhVZpAh(gO2,gI2))*CpUhhVZpAh(gO1,gI2)*F0(p,MAh(gI2
         ),MVZp);
   }
   result += tmp_7699;
   result += -2*B0(p,MChaP,MChaP)*(Conj(CpUhhbarChaPChaPPR(gO2))*
      CpUhhbarChaPChaPPL(gO1) + Conj(CpUhhbarChaPChaPPL(gO2))*CpUhhbarChaPChaPPR(
      gO1))*Sqr(MChaP);

   return result * oneOver16PiSqr;
}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Ah(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmCgWmC(gO1)*CpUAhbargWmCgWmC(gO2));
   result += -(B0(p,MVWm,MVWm)*CpUAhbargWmgWm(gO1)*CpUAhbargWmgWm(gO2));
   result += 4*A0(MVWm)*CpUAhUAhconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUAhUAhVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUAhUAhVZVZ(gO1,gO2);
   result += (Conj(CpUAhbarChaPChaPPL(gO2))*CpUAhbarChaPChaPPL(gO1) + Conj(
      CpUAhbarChaPChaPPR(gO2))*CpUAhbarChaPChaPPR(gO1))*G0(p,MChaP,MChaP);
   std::complex<double> tmp_7700;
   std::complex<double> tmp_7701;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7701 += A0(MHpm(gI1))*CpUAhUAhconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7700 += tmp_7701;
   result += (-1) * tmp_7700;
   std::complex<double> tmp_7702;
   std::complex<double> tmp_7703;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7703 += A0(MSHp0(gI1))*CpUAhUAhconjSHp0SHp0(gO1,gO2,gI1,gI1);
   }
   tmp_7702 += tmp_7703;
   result += (-1) * tmp_7702;
   std::complex<double> tmp_7704;
   std::complex<double> tmp_7705;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7705 += A0(MSHpp(gI1))*CpUAhUAhconjSHppSHpp(gO1,gO2,gI1,gI1);
   }
   tmp_7704 += tmp_7705;
   result += (-1) * tmp_7704;
   std::complex<double> tmp_7706;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7707;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7707 += B0(p,MHpm(gI1),MHpm(gI2))*Conj(CpUAhconjHpmHpm(gO2,
            gI1,gI2))*CpUAhconjHpmHpm(gO1,gI1,gI2);
      }
      tmp_7706 += tmp_7707;
   }
   result += tmp_7706;
   std::complex<double> tmp_7708;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7709;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7709 += B0(p,MSHp0(gI1),MSHp0(gI2))*Conj(CpUAhconjSHp0SHp0(
            gO2,gI1,gI2))*CpUAhconjSHp0SHp0(gO1,gI1,gI2);
      }
      tmp_7708 += tmp_7709;
   }
   result += tmp_7708;
   std::complex<double> tmp_7710;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7711;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7711 += B0(p,MSHpp(gI1),MSHpp(gI2))*Conj(CpUAhconjSHppSHpp(
            gO2,gI1,gI2))*CpUAhconjSHppSHpp(gO1,gI1,gI2);
      }
      tmp_7710 += tmp_7711;
   }
   result += tmp_7710;
   std::complex<double> tmp_7712;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7713;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7713 += (Conj(CpUAhbarChaChaPL(gO2,gI1,gI2))*
            CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPR(gO2,gI1,gI2))*
            CpUAhbarChaChaPR(gO1,gI1,gI2))*G0(p,MCha(gI1),MCha(gI2));
      }
      tmp_7712 += tmp_7713;
   }
   result += tmp_7712;
   std::complex<double> tmp_7714;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7715;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7715 += (Conj(CpUAhbarChaIChaIPL(gO2,gI1,gI2))*
            CpUAhbarChaIChaIPL(gO1,gI1,gI2) + Conj(CpUAhbarChaIChaIPR(gO2,gI1,gI2)
            )*CpUAhbarChaIChaIPR(gO1,gI1,gI2))*G0(p,MChaI(gI1),MChaI(gI2));
      }
      tmp_7714 += tmp_7715;
   }
   result += tmp_7714;
   std::complex<double> tmp_7716;
   std::complex<double> tmp_7717;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7718;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7718 += (Conj(CpUAhChiPChiPPL(gO2,gI1,gI2))*CpUAhChiPChiPPL(
            gO1,gI1,gI2) + Conj(CpUAhChiPChiPPR(gO2,gI1,gI2))*CpUAhChiPChiPPR(gO1,
            gI1,gI2))*G0(p,MChiP(gI1),MChiP(gI2));
      }
      tmp_7717 += tmp_7718;
   }
   tmp_7716 += tmp_7717;
   result += (0.5) * tmp_7716;
   std::complex<double> tmp_7719;
   std::complex<double> tmp_7720;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7721;
      std::complex<double> tmp_7722;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7722 += B0(p,MCha(gI1),MCha(gI2))*(Conj(CpUAhbarChaChaPR(gO2
            ,gI1,gI2))*CpUAhbarChaChaPL(gO1,gI1,gI2) + Conj(CpUAhbarChaChaPL(gO2,
            gI1,gI2))*CpUAhbarChaChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_7721 += tmp_7722;
      tmp_7720 += (MCha(gI1)) * tmp_7721;
   }
   tmp_7719 += tmp_7720;
   result += (-2) * tmp_7719;
   std::complex<double> tmp_7723;
   std::complex<double> tmp_7724;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7725;
      std::complex<double> tmp_7726;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7726 += B0(p,MChaI(gI1),MChaI(gI2))*(Conj(CpUAhbarChaIChaIPR
            (gO2,gI1,gI2))*CpUAhbarChaIChaIPL(gO1,gI1,gI2) + Conj(
            CpUAhbarChaIChaIPL(gO2,gI1,gI2))*CpUAhbarChaIChaIPR(gO1,gI1,gI2))*
            MChaI(gI2);
      }
      tmp_7725 += tmp_7726;
      tmp_7724 += (MChaI(gI1)) * tmp_7725;
   }
   tmp_7723 += tmp_7724;
   result += (-2) * tmp_7723;
   std::complex<double> tmp_7727;
   std::complex<double> tmp_7728;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7729;
      std::complex<double> tmp_7730;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7730 += B0(p,MChiP(gI1),MChiP(gI2))*(Conj(CpUAhChiPChiPPR(
            gO2,gI1,gI2))*CpUAhChiPChiPPL(gO1,gI1,gI2) + Conj(CpUAhChiPChiPPL(gO2,
            gI1,gI2))*CpUAhChiPChiPPR(gO1,gI1,gI2))*MChiP(gI2);
      }
      tmp_7729 += tmp_7730;
      tmp_7728 += (MChiP(gI1)) * tmp_7729;
   }
   tmp_7727 += tmp_7728;
   result += (-1) * tmp_7727;
   std::complex<double> tmp_7731;
   std::complex<double> tmp_7732;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7732 += A0(MSv(gI1))*CpUAhUAhconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7731 += tmp_7732;
   result += (-1) * tmp_7731;
   std::complex<double> tmp_7733;
   std::complex<double> tmp_7734;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7735;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7735 += (Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))*CpUAhbarFdFdPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFdFdPR(gO2,gI1,gI2))*CpUAhbarFdFdPR(gO1,
            gI1,gI2))*G0(p,MFd(gI1),MFd(gI2));
      }
      tmp_7734 += tmp_7735;
   }
   tmp_7733 += tmp_7734;
   result += (3) * tmp_7733;
   std::complex<double> tmp_7736;
   std::complex<double> tmp_7737;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7738;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7738 += (Conj(CpUAhbarFDXFDXPL(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPR(gO2,gI1,gI2))*
            CpUAhbarFDXFDXPR(gO1,gI1,gI2))*G0(p,MFDX(gI1),MFDX(gI2));
      }
      tmp_7737 += tmp_7738;
   }
   tmp_7736 += tmp_7737;
   result += (3) * tmp_7736;
   std::complex<double> tmp_7739;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7740;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7740 += (Conj(CpUAhbarFeFePL(gO2,gI1,gI2))*CpUAhbarFeFePL(
            gO1,gI1,gI2) + Conj(CpUAhbarFeFePR(gO2,gI1,gI2))*CpUAhbarFeFePR(gO1,
            gI1,gI2))*G0(p,MFe(gI1),MFe(gI2));
      }
      tmp_7739 += tmp_7740;
   }
   result += tmp_7739;
   std::complex<double> tmp_7741;
   std::complex<double> tmp_7742;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7743;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7743 += (Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))*CpUAhbarFuFuPL(
            gO1,gI1,gI2) + Conj(CpUAhbarFuFuPR(gO2,gI1,gI2))*CpUAhbarFuFuPR(gO1,
            gI1,gI2))*G0(p,MFu(gI1),MFu(gI2));
      }
      tmp_7742 += tmp_7743;
   }
   tmp_7741 += tmp_7742;
   result += (3) * tmp_7741;
   std::complex<double> tmp_7744;
   std::complex<double> tmp_7745;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7746;
      std::complex<double> tmp_7747;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7747 += B0(p,MFd(gI1),MFd(gI2))*(Conj(CpUAhbarFdFdPR(gO2,gI1
            ,gI2))*CpUAhbarFdFdPL(gO1,gI1,gI2) + Conj(CpUAhbarFdFdPL(gO2,gI1,gI2))
            *CpUAhbarFdFdPR(gO1,gI1,gI2))*MFd(gI2);
      }
      tmp_7746 += tmp_7747;
      tmp_7745 += (MFd(gI1)) * tmp_7746;
   }
   tmp_7744 += tmp_7745;
   result += (-6) * tmp_7744;
   std::complex<double> tmp_7748;
   std::complex<double> tmp_7749;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7750;
      std::complex<double> tmp_7751;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7751 += B0(p,MFDX(gI1),MFDX(gI2))*(Conj(CpUAhbarFDXFDXPR(gO2
            ,gI1,gI2))*CpUAhbarFDXFDXPL(gO1,gI1,gI2) + Conj(CpUAhbarFDXFDXPL(gO2,
            gI1,gI2))*CpUAhbarFDXFDXPR(gO1,gI1,gI2))*MFDX(gI2);
      }
      tmp_7750 += tmp_7751;
      tmp_7749 += (MFDX(gI1)) * tmp_7750;
   }
   tmp_7748 += tmp_7749;
   result += (-6) * tmp_7748;
   std::complex<double> tmp_7752;
   std::complex<double> tmp_7753;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7754;
      std::complex<double> tmp_7755;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7755 += B0(p,MFe(gI1),MFe(gI2))*(Conj(CpUAhbarFeFePR(gO2,gI1
            ,gI2))*CpUAhbarFeFePL(gO1,gI1,gI2) + Conj(CpUAhbarFeFePL(gO2,gI1,gI2))
            *CpUAhbarFeFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_7754 += tmp_7755;
      tmp_7753 += (MFe(gI1)) * tmp_7754;
   }
   tmp_7752 += tmp_7753;
   result += (-2) * tmp_7752;
   std::complex<double> tmp_7756;
   std::complex<double> tmp_7757;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7758;
      std::complex<double> tmp_7759;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7759 += B0(p,MFu(gI1),MFu(gI2))*(Conj(CpUAhbarFuFuPR(gO2,gI1
            ,gI2))*CpUAhbarFuFuPL(gO1,gI1,gI2) + Conj(CpUAhbarFuFuPL(gO2,gI1,gI2))
            *CpUAhbarFuFuPR(gO1,gI1,gI2))*MFu(gI2);
      }
      tmp_7758 += tmp_7759;
      tmp_7757 += (MFu(gI1)) * tmp_7758;
   }
   tmp_7756 += tmp_7757;
   result += (-6) * tmp_7756;
   std::complex<double> tmp_7760;
   std::complex<double> tmp_7761;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7761 += A0(MSHIPM(gI1))*CpUAhUAhconjSHIPMSHIPM(gO1,gO2,gI1,gI1);
   }
   tmp_7760 += tmp_7761;
   result += (-1) * tmp_7760;
   std::complex<double> tmp_7762;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7763;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_7763 += B0(p,MSHIPM(gI1),MSHIPM(gI2))*Conj(
            CpUAhconjSHIPMSHIPM(gO2,gI1,gI2))*CpUAhconjSHIPMSHIPM(gO1,gI1,gI2);
      }
      tmp_7762 += tmp_7763;
   }
   result += tmp_7762;
   std::complex<double> tmp_7764;
   std::complex<double> tmp_7765;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7765 += A0(MAh(gI1))*CpUAhUAhAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7764 += tmp_7765;
   result += (-0.5) * tmp_7764;
   std::complex<double> tmp_7766;
   std::complex<double> tmp_7767;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7767 += A0(Mhh(gI1))*CpUAhUAhhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7766 += tmp_7767;
   result += (-0.5) * tmp_7766;
   std::complex<double> tmp_7768;
   std::complex<double> tmp_7769;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7770;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7770 += B0(p,MAh(gI1),MAh(gI2))*Conj(CpUAhAhAh(gO2,gI1,gI2))
            *CpUAhAhAh(gO1,gI1,gI2);
      }
      tmp_7769 += tmp_7770;
   }
   tmp_7768 += tmp_7769;
   result += (0.5) * tmp_7768;
   std::complex<double> tmp_7771;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7772;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7772 += B0(p,Mhh(gI1),MAh(gI2))*Conj(CpUAhhhAh(gO2,gI1,gI2))
            *CpUAhhhAh(gO1,gI1,gI2);
      }
      tmp_7771 += tmp_7772;
   }
   result += tmp_7771;
   std::complex<double> tmp_7773;
   std::complex<double> tmp_7774;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_7775;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7775 += B0(p,Mhh(gI1),Mhh(gI2))*Conj(CpUAhhhhh(gO2,gI1,gI2))
            *CpUAhhhhh(gO1,gI1,gI2);
      }
      tmp_7774 += tmp_7775;
   }
   tmp_7773 += tmp_7774;
   result += (0.5) * tmp_7773;
   std::complex<double> tmp_7776;
   std::complex<double> tmp_7777;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7777 += A0(MSd(gI1))*CpUAhUAhconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7776 += tmp_7777;
   result += (-3) * tmp_7776;
   std::complex<double> tmp_7778;
   std::complex<double> tmp_7779;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7779 += A0(MSDX(gI1))*CpUAhUAhconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7778 += tmp_7779;
   result += (-3) * tmp_7778;
   std::complex<double> tmp_7780;
   std::complex<double> tmp_7781;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7781 += A0(MSe(gI1))*CpUAhUAhconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7780 += tmp_7781;
   result += (-1) * tmp_7780;
   std::complex<double> tmp_7782;
   std::complex<double> tmp_7783;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7783 += A0(MSu(gI1))*CpUAhUAhconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7782 += tmp_7783;
   result += (-3) * tmp_7782;
   std::complex<double> tmp_7784;
   std::complex<double> tmp_7785;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7786;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7786 += B0(p,MSd(gI1),MSd(gI2))*Conj(CpUAhconjSdSd(gO2,gI1,
            gI2))*CpUAhconjSdSd(gO1,gI1,gI2);
      }
      tmp_7785 += tmp_7786;
   }
   tmp_7784 += tmp_7785;
   result += (3) * tmp_7784;
   std::complex<double> tmp_7787;
   std::complex<double> tmp_7788;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7789;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7789 += B0(p,MSDX(gI1),MSDX(gI2))*Conj(CpUAhconjSDXSDX(gO2,
            gI1,gI2))*CpUAhconjSDXSDX(gO1,gI1,gI2);
      }
      tmp_7788 += tmp_7789;
   }
   tmp_7787 += tmp_7788;
   result += (3) * tmp_7787;
   std::complex<double> tmp_7790;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7791;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7791 += B0(p,MSe(gI1),MSe(gI2))*Conj(CpUAhconjSeSe(gO2,gI1,
            gI2))*CpUAhconjSeSe(gO1,gI1,gI2);
      }
      tmp_7790 += tmp_7791;
   }
   result += tmp_7790;
   std::complex<double> tmp_7792;
   std::complex<double> tmp_7793;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7794;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7794 += B0(p,MSu(gI1),MSu(gI2))*Conj(CpUAhconjSuSu(gO2,gI1,
            gI2))*CpUAhconjSuSu(gO1,gI1,gI2);
      }
      tmp_7793 += tmp_7794;
   }
   tmp_7792 += tmp_7793;
   result += (3) * tmp_7792;
   std::complex<double> tmp_7795;
   std::complex<double> tmp_7796;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7796 += A0(MSHI0(gI1))*CpUAhUAhconjSHI0SHI0(gO1,gO2,gI1,gI1);
   }
   tmp_7795 += tmp_7796;
   result += (-1) * tmp_7795;
   std::complex<double> tmp_7797;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7798;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7798 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUAhconjSHI0SHI0(
            gO2,gI1,gI2))*CpUAhconjSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_7797 += tmp_7798;
   }
   result += tmp_7797;
   std::complex<double> tmp_7799;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7800;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7800 += B0(p,MSHI0(gI1),MSHI0(gI2))*Conj(CpUAhSHI0SHI0(gO2,
            gI1,gI2))*CpUAhSHI0SHI0(gO1,gI1,gI2);
      }
      tmp_7799 += tmp_7800;
   }
   result += tmp_7799;
   std::complex<double> tmp_7801;
   std::complex<double> tmp_7802;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7803;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7803 += (Conj(CpUAhChiIChiIPL(gO2,gI1,gI2))*CpUAhChiIChiIPL(
            gO1,gI1,gI2) + Conj(CpUAhChiIChiIPR(gO2,gI1,gI2))*CpUAhChiIChiIPR(gO1,
            gI1,gI2))*G0(p,MChiI(gI1),MChiI(gI2));
      }
      tmp_7802 += tmp_7803;
   }
   tmp_7801 += tmp_7802;
   result += (0.5) * tmp_7801;
   std::complex<double> tmp_7804;
   std::complex<double> tmp_7805;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7806;
      std::complex<double> tmp_7807;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7807 += B0(p,MChiI(gI1),MChiI(gI2))*(Conj(CpUAhChiIChiIPR(
            gO2,gI1,gI2))*CpUAhChiIChiIPL(gO1,gI1,gI2) + Conj(CpUAhChiIChiIPL(gO2,
            gI1,gI2))*CpUAhChiIChiIPR(gO1,gI1,gI2))*MChiI(gI2);
      }
      tmp_7806 += tmp_7807;
      tmp_7805 += (MChiI(gI1)) * tmp_7806;
   }
   tmp_7804 += tmp_7805;
   result += (-1) * tmp_7804;
   std::complex<double> tmp_7808;
   std::complex<double> tmp_7809;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7810;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7810 += (Conj(CpUAhChiChiPL(gO2,gI1,gI2))*CpUAhChiChiPL(gO1,
            gI1,gI2) + Conj(CpUAhChiChiPR(gO2,gI1,gI2))*CpUAhChiChiPR(gO1,gI1,gI2)
            )*G0(p,MChi(gI1),MChi(gI2));
      }
      tmp_7809 += tmp_7810;
   }
   tmp_7808 += tmp_7809;
   result += (0.5) * tmp_7808;
   std::complex<double> tmp_7811;
   std::complex<double> tmp_7812;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7813;
      std::complex<double> tmp_7814;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7814 += B0(p,MChi(gI1),MChi(gI2))*(Conj(CpUAhChiChiPR(gO2,
            gI1,gI2))*CpUAhChiChiPL(gO1,gI1,gI2) + Conj(CpUAhChiChiPL(gO2,gI1,gI2)
            )*CpUAhChiChiPR(gO1,gI1,gI2))*MChi(gI2);
      }
      tmp_7813 += tmp_7814;
      tmp_7812 += (MChi(gI1)) * tmp_7813;
   }
   tmp_7811 += tmp_7812;
   result += (-1) * tmp_7811;
   std::complex<double> tmp_7815;
   std::complex<double> tmp_7816;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_7816 += Conj(CpUAhconjVWmHpm(gO2,gI2))*CpUAhconjVWmHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVWm);
   }
   tmp_7815 += tmp_7816;
   result += (2) * tmp_7815;
   std::complex<double> tmp_7817;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7817 += Conj(CpUAhVZhh(gO2,gI2))*CpUAhVZhh(gO1,gI2)*F0(p,Mhh(gI2),
         MVZ);
   }
   result += tmp_7817;
   std::complex<double> tmp_7818;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7818 += Conj(CpUAhVZphh(gO2,gI2))*CpUAhVZphh(gO1,gI2)*F0(p,Mhh(gI2
         ),MVZp);
   }
   result += tmp_7818;
   result += -2*B0(p,MChaP,MChaP)*(Conj(CpUAhbarChaPChaPPR(gO2))*
      CpUAhbarChaPChaPPL(gO1) + Conj(CpUAhbarChaPChaPPL(gO2))*CpUAhbarChaPChaPPR(
      gO1))*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Hpm(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*B0(p,0,MVWm)*Conj(CpconjUHpmVWmVP(gO2))*CpconjUHpmVWmVP(gO1);
   result += 4*B0(p,MVWm,MVZp)*Conj(CpconjUHpmVZpVWm(gO2))*CpconjUHpmVZpVWm(gO1
      );
   result += 4*B0(p,MVWm,MVZ)*Conj(CpconjUHpmVZVWm(gO2))*CpconjUHpmVZVWm(gO1);
   result += 4*A0(MVWm)*CpUHpmconjUHpmconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUHpmconjUHpmVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUHpmconjUHpmVZVZ(gO1,gO2);
   result += -(B0(p,MVZ,MVWm)*CpconjUHpmbargWmCgZ(gO1)*CpUHpmgWmCbargZ(gO2));
   result += -(B0(p,MVZp,MVWm)*CpconjUHpmbargWmCgZp(gO1)*CpUHpmgWmCbargZp(gO2))
      ;
   result += -(B0(p,MVWm,MVZ)*CpconjUHpmbargZgWm(gO1)*CpUHpmgZbargWm(gO2));
   result += -(B0(p,MVWm,MVZp)*CpconjUHpmbargZpgWm(gO1)*CpUHpmgZpbargWm(gO2));
   std::complex<double> tmp_7819;
   std::complex<double> tmp_7820;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7820 += A0(MHpm(gI1))*CpUHpmconjUHpmconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7819 += tmp_7820;
   result += (-1) * tmp_7819;
   std::complex<double> tmp_7821;
   std::complex<double> tmp_7822;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7822 += A0(MSHp0(gI1))*CpUHpmconjUHpmconjSHp0SHp0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7821 += tmp_7822;
   result += (-1) * tmp_7821;
   std::complex<double> tmp_7823;
   std::complex<double> tmp_7824;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7824 += A0(MSHpp(gI1))*CpUHpmconjUHpmconjSHppSHpp(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7823 += tmp_7824;
   result += (-1) * tmp_7823;
   std::complex<double> tmp_7825;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7826;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7826 += B0(p,MSHp0(gI1),MSHpp(gI2))*Conj(
            CpconjUHpmconjSHp0SHpp(gO2,gI1,gI2))*CpconjUHpmconjSHp0SHpp(gO1,gI1,
            gI2);
      }
      tmp_7825 += tmp_7826;
   }
   result += tmp_7825;
   std::complex<double> tmp_7827;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7828;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7828 += B0(p,MHpm(gI1),MAh(gI2))*Conj(CpconjUHpmHpmAh(gO2,
            gI1,gI2))*CpconjUHpmHpmAh(gO1,gI1,gI2);
      }
      tmp_7827 += tmp_7828;
   }
   result += tmp_7827;
   std::complex<double> tmp_7829;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7830;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7830 += B0(p,MHpm(gI1),Mhh(gI2))*Conj(CpconjUHpmHpmhh(gO2,
            gI1,gI2))*CpconjUHpmHpmhh(gO1,gI1,gI2);
      }
      tmp_7829 += tmp_7830;
   }
   result += tmp_7829;
   std::complex<double> tmp_7831;
   std::complex<double> tmp_7832;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7832 += A0(MSv(gI1))*CpUHpmconjUHpmconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7831 += tmp_7832;
   result += (-1) * tmp_7831;
   std::complex<double> tmp_7833;
   std::complex<double> tmp_7834;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7835;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7835 += (Conj(CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*
            CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFuFdPR(gO2,gI1,
            gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MFd(gI2));
      }
      tmp_7834 += tmp_7835;
   }
   tmp_7833 += tmp_7834;
   result += (3) * tmp_7833;
   std::complex<double> tmp_7836;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7837;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7837 += (Conj(CpconjUHpmbarFvFePL(gO2,gI1,gI2))*
            CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(CpconjUHpmbarFvFePR(gO2,gI1,
            gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*G0(p,MFv(gI1),MFe(gI2));
      }
      tmp_7836 += tmp_7837;
   }
   result += tmp_7836;
   std::complex<double> tmp_7838;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7839;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7839 += B0(p,MSv(gI1),MSe(gI2))*Conj(CpconjUHpmconjSvSe(gO2,
            gI1,gI2))*CpconjUHpmconjSvSe(gO1,gI1,gI2);
      }
      tmp_7838 += tmp_7839;
   }
   result += tmp_7838;
   std::complex<double> tmp_7840;
   std::complex<double> tmp_7841;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7842;
      std::complex<double> tmp_7843;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7843 += B0(p,MFu(gI1),MFd(gI2))*(Conj(CpconjUHpmbarFuFdPR(
            gO2,gI1,gI2))*CpconjUHpmbarFuFdPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFuFdPL(gO2,gI1,gI2))*CpconjUHpmbarFuFdPR(gO1,gI1,gI2))*
            MFd(gI2);
      }
      tmp_7842 += tmp_7843;
      tmp_7841 += (MFu(gI1)) * tmp_7842;
   }
   tmp_7840 += tmp_7841;
   result += (-6) * tmp_7840;
   std::complex<double> tmp_7844;
   std::complex<double> tmp_7845;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7846;
      std::complex<double> tmp_7847;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_7847 += B0(p,MFv(gI1),MFe(gI2))*(Conj(CpconjUHpmbarFvFePR(
            gO2,gI1,gI2))*CpconjUHpmbarFvFePL(gO1,gI1,gI2) + Conj(
            CpconjUHpmbarFvFePL(gO2,gI1,gI2))*CpconjUHpmbarFvFePR(gO1,gI1,gI2))*
            MFe(gI2);
      }
      tmp_7846 += tmp_7847;
      tmp_7845 += (MFv(gI1)) * tmp_7846;
   }
   tmp_7844 += tmp_7845;
   result += (-2) * tmp_7844;
   std::complex<double> tmp_7848;
   std::complex<double> tmp_7849;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7849 += A0(MSHIPM(gI1))*CpUHpmconjUHpmconjSHIPMSHIPM(gO1,gO2,gI1,
         gI1);
   }
   tmp_7848 += tmp_7849;
   result += (-1) * tmp_7848;
   std::complex<double> tmp_7850;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7851;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_7851 += B0(p,MSHIPM(gI1),MSHI0(gI2))*Conj(
            CpconjUHpmSHIPMSHI0(gO2,gI1,gI2))*CpconjUHpmSHIPMSHI0(gO1,gI1,gI2);
      }
      tmp_7850 += tmp_7851;
   }
   result += tmp_7850;
   std::complex<double> tmp_7852;
   std::complex<double> tmp_7853;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7853 += A0(MAh(gI1))*CpUHpmconjUHpmAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7852 += tmp_7853;
   result += (-0.5) * tmp_7852;
   std::complex<double> tmp_7854;
   std::complex<double> tmp_7855;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7855 += A0(Mhh(gI1))*CpUHpmconjUHpmhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7854 += tmp_7855;
   result += (-0.5) * tmp_7854;
   std::complex<double> tmp_7856;
   std::complex<double> tmp_7857;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7857 += A0(MSd(gI1))*CpUHpmconjUHpmconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7856 += tmp_7857;
   result += (-3) * tmp_7856;
   std::complex<double> tmp_7858;
   std::complex<double> tmp_7859;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7859 += A0(MSDX(gI1))*CpUHpmconjUHpmconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7858 += tmp_7859;
   result += (-3) * tmp_7858;
   std::complex<double> tmp_7860;
   std::complex<double> tmp_7861;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7861 += A0(MSe(gI1))*CpUHpmconjUHpmconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7860 += tmp_7861;
   result += (-1) * tmp_7860;
   std::complex<double> tmp_7862;
   std::complex<double> tmp_7863;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7863 += A0(MSu(gI1))*CpUHpmconjUHpmconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7862 += tmp_7863;
   result += (-3) * tmp_7862;
   std::complex<double> tmp_7864;
   std::complex<double> tmp_7865;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7866;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7866 += B0(p,MSu(gI1),MSd(gI2))*Conj(CpconjUHpmconjSuSd(gO2,
            gI1,gI2))*CpconjUHpmconjSuSd(gO1,gI1,gI2);
      }
      tmp_7865 += tmp_7866;
   }
   tmp_7864 += tmp_7865;
   result += (3) * tmp_7864;
   std::complex<double> tmp_7867;
   std::complex<double> tmp_7868;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7868 += A0(MSHI0(gI1))*CpUHpmconjUHpmconjSHI0SHI0(gO1,gO2,gI1,gI1)
         ;
   }
   tmp_7867 += tmp_7868;
   result += (-1) * tmp_7867;
   std::complex<double> tmp_7869;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7870;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7870 += (Conj(CpconjUHpmChiIChaIPL(gO2,gI1,gI2))*
            CpconjUHpmChiIChaIPL(gO1,gI1,gI2) + Conj(CpconjUHpmChiIChaIPR(gO2,gI1,
            gI2))*CpconjUHpmChiIChaIPR(gO1,gI1,gI2))*G0(p,MChiI(gI1),MChaI(gI2));
      }
      tmp_7869 += tmp_7870;
   }
   result += tmp_7869;
   std::complex<double> tmp_7871;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7872;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_7872 += B0(p,MSHI0(gI1),MSHIPM(gI2))*Conj(
            CpconjUHpmconjSHI0SHIPM(gO2,gI1,gI2))*CpconjUHpmconjSHI0SHIPM(gO1,gI1,
            gI2);
      }
      tmp_7871 += tmp_7872;
   }
   result += tmp_7871;
   std::complex<double> tmp_7873;
   std::complex<double> tmp_7874;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7875;
      std::complex<double> tmp_7876;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7876 += B0(p,MChiI(gI1),MChaI(gI2))*(Conj(
            CpconjUHpmChiIChaIPR(gO2,gI1,gI2))*CpconjUHpmChiIChaIPL(gO1,gI1,gI2) +
            Conj(CpconjUHpmChiIChaIPL(gO2,gI1,gI2))*CpconjUHpmChiIChaIPR(gO1,gI1,
            gI2))*MChaI(gI2);
      }
      tmp_7875 += tmp_7876;
      tmp_7874 += (MChiI(gI1)) * tmp_7875;
   }
   tmp_7873 += tmp_7874;
   result += (-2) * tmp_7873;
   std::complex<double> tmp_7877;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7878;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7878 += (Conj(CpconjUHpmChiChaPL(gO2,gI1,gI2))*
            CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(CpconjUHpmChiChaPR(gO2,gI1,gI2)
            )*CpconjUHpmChiChaPR(gO1,gI1,gI2))*G0(p,MChi(gI1),MCha(gI2));
      }
      tmp_7877 += tmp_7878;
   }
   result += tmp_7877;
   std::complex<double> tmp_7879;
   std::complex<double> tmp_7880;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_7881;
      std::complex<double> tmp_7882;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7882 += B0(p,MChi(gI1),MCha(gI2))*(Conj(CpconjUHpmChiChaPR(
            gO2,gI1,gI2))*CpconjUHpmChiChaPL(gO1,gI1,gI2) + Conj(
            CpconjUHpmChiChaPL(gO2,gI1,gI2))*CpconjUHpmChiChaPR(gO1,gI1,gI2))*MCha
            (gI2);
      }
      tmp_7881 += tmp_7882;
      tmp_7880 += (MChi(gI1)) * tmp_7881;
   }
   tmp_7879 += tmp_7880;
   result += (-2) * tmp_7879;
   std::complex<double> tmp_7883;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_7883 += Conj(CpconjUHpmVPHpm(gO2,gI2))*CpconjUHpmVPHpm(gO1,gI2)*F0
         (p,MHpm(gI2),0);
   }
   result += tmp_7883;
   std::complex<double> tmp_7884;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_7884 += Conj(CpconjUHpmVZHpm(gO2,gI2))*CpconjUHpmVZHpm(gO1,gI2)*F0
         (p,MHpm(gI2),MVZ);
   }
   result += tmp_7884;
   std::complex<double> tmp_7885;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_7885 += Conj(CpconjUHpmVZpHpm(gO2,gI2))*CpconjUHpmVZpHpm(gO1,gI2)*
         F0(p,MHpm(gI2),MVZp);
   }
   result += tmp_7885;
   std::complex<double> tmp_7886;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7886 += Conj(CpconjUHpmVWmAh(gO2,gI2))*CpconjUHpmVWmAh(gO1,gI2)*F0
         (p,MAh(gI2),MVWm);
   }
   result += tmp_7886;
   std::complex<double> tmp_7887;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_7887 += Conj(CpconjUHpmVWmhh(gO2,gI2))*CpconjUHpmVWmhh(gO1,gI2)*F0
         (p,Mhh(gI2),MVWm);
   }
   result += tmp_7887;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_SHI0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHI0conjUSHI0conjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHI0conjUSHI0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHI0conjUSHI0VZVZ(gO1,gO2);
   std::complex<double> tmp_7888;
   std::complex<double> tmp_7889;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7889 += A0(MHpm(gI1))*CpUSHI0conjUSHI0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_7888 += tmp_7889;
   result += (-1) * tmp_7888;
   std::complex<double> tmp_7890;
   std::complex<double> tmp_7891;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7891 += A0(MSHp0(gI1))*CpUSHI0conjUSHI0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_7890 += tmp_7891;
   result += (-1) * tmp_7890;
   std::complex<double> tmp_7892;
   std::complex<double> tmp_7893;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7893 += A0(MSHpp(gI1))*CpUSHI0conjUSHI0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_7892 += tmp_7893;
   result += (-1) * tmp_7892;
   std::complex<double> tmp_7894;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7895;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7895 += (Conj(CpconjUSHI0barChaChaIPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaChaIPL(gO1,gI1,gI2) + Conj(CpconjUSHI0barChaChaIPR(
            gO2,gI1,gI2))*CpconjUSHI0barChaChaIPR(gO1,gI1,gI2))*G0(p,MCha(gI1),
            MChaI(gI2));
      }
      tmp_7894 += tmp_7895;
   }
   result += tmp_7894;
   std::complex<double> tmp_7896;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7897;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7897 += (Conj(CpconjUSHI0barChaIChaPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaIChaPL(gO1,gI1,gI2) + Conj(CpconjUSHI0barChaIChaPR(
            gO2,gI1,gI2))*CpconjUSHI0barChaIChaPR(gO1,gI1,gI2))*G0(p,MChaI(gI1),
            MCha(gI2));
      }
      tmp_7896 += tmp_7897;
   }
   result += tmp_7896;
   std::complex<double> tmp_7898;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7899;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_7899 += B0(p,MHpm(gI1),MSHIPM(gI2))*Conj(
            CpconjUSHI0conjHpmSHIPM(gO2,gI1,gI2))*CpconjUSHI0conjHpmSHIPM(gO1,gI1,
            gI2);
      }
      tmp_7898 += tmp_7899;
   }
   result += tmp_7898;
   std::complex<double> tmp_7900;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7901;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7901 += B0(p,MSHpp(gI1),MSe(gI2))*Conj(CpconjUSHI0conjSHppSe
            (gO2,gI1,gI2))*CpconjUSHI0conjSHppSe(gO1,gI1,gI2);
      }
      tmp_7900 += tmp_7901;
   }
   result += tmp_7900;
   std::complex<double> tmp_7902;
   std::complex<double> tmp_7903;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7904;
      std::complex<double> tmp_7905;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7905 += B0(p,MCha(gI1),MChaI(gI2))*(Conj(
            CpconjUSHI0barChaChaIPR(gO2,gI1,gI2))*CpconjUSHI0barChaChaIPL(gO1,gI1,
            gI2) + Conj(CpconjUSHI0barChaChaIPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaChaIPR(gO1,gI1,gI2))*MChaI(gI2);
      }
      tmp_7904 += tmp_7905;
      tmp_7903 += (MCha(gI1)) * tmp_7904;
   }
   tmp_7902 += tmp_7903;
   result += (-2) * tmp_7902;
   std::complex<double> tmp_7906;
   std::complex<double> tmp_7907;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7908;
      std::complex<double> tmp_7909;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7909 += B0(p,MChaI(gI1),MCha(gI2))*(Conj(
            CpconjUSHI0barChaIChaPR(gO2,gI1,gI2))*CpconjUSHI0barChaIChaPL(gO1,gI1,
            gI2) + Conj(CpconjUSHI0barChaIChaPL(gO2,gI1,gI2))*
            CpconjUSHI0barChaIChaPR(gO1,gI1,gI2))*MCha(gI2);
      }
      tmp_7908 += tmp_7909;
      tmp_7907 += (MChaI(gI1)) * tmp_7908;
   }
   tmp_7906 += tmp_7907;
   result += (-2) * tmp_7906;
   std::complex<double> tmp_7910;
   std::complex<double> tmp_7911;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7911 += A0(MSv(gI1))*CpUSHI0conjUSHI0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7910 += tmp_7911;
   result += (-1) * tmp_7910;
   std::complex<double> tmp_7912;
   std::complex<double> tmp_7913;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7913 += A0(MSHIPM(gI1))*CpUSHI0conjUSHI0conjSHIPMSHIPM(gO1,gO2,gI1
         ,gI1);
   }
   tmp_7912 += tmp_7913;
   result += (-1) * tmp_7912;
   std::complex<double> tmp_7914;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7915;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7915 += B0(p,MSHIPM(gI1),MHpm(gI2))*Conj(
            CpconjUSHI0conjSHIPMHpm(gO2,gI1,gI2))*CpconjUSHI0conjSHIPMHpm(gO1,gI1,
            gI2);
      }
      tmp_7914 += tmp_7915;
   }
   result += tmp_7914;
   std::complex<double> tmp_7916;
   std::complex<double> tmp_7917;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7917 += A0(MAh(gI1))*CpUSHI0conjUSHI0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7916 += tmp_7917;
   result += (-0.5) * tmp_7916;
   std::complex<double> tmp_7918;
   std::complex<double> tmp_7919;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7919 += A0(Mhh(gI1))*CpUSHI0conjUSHI0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7918 += tmp_7919;
   result += (-0.5) * tmp_7918;
   std::complex<double> tmp_7920;
   std::complex<double> tmp_7921;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7921 += A0(MSd(gI1))*CpUSHI0conjUSHI0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7920 += tmp_7921;
   result += (-3) * tmp_7920;
   std::complex<double> tmp_7922;
   std::complex<double> tmp_7923;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7923 += A0(MSDX(gI1))*CpUSHI0conjUSHI0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_7922 += tmp_7923;
   result += (-3) * tmp_7922;
   std::complex<double> tmp_7924;
   std::complex<double> tmp_7925;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7925 += A0(MSe(gI1))*CpUSHI0conjUSHI0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7924 += tmp_7925;
   result += (-1) * tmp_7924;
   std::complex<double> tmp_7926;
   std::complex<double> tmp_7927;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7927 += A0(MSu(gI1))*CpUSHI0conjUSHI0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7926 += tmp_7927;
   result += (-3) * tmp_7926;
   std::complex<double> tmp_7928;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_7929;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7929 += B0(p,MSe(gI1),MSHpp(gI2))*Conj(CpconjUSHI0conjSeSHpp
            (gO2,gI1,gI2))*CpconjUSHI0conjSeSHpp(gO1,gI1,gI2);
      }
      tmp_7928 += tmp_7929;
   }
   result += tmp_7928;
   std::complex<double> tmp_7930;
   std::complex<double> tmp_7931;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7931 += A0(MSHI0(gI1))*CpUSHI0conjUSHI0conjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_7930 += tmp_7931;
   result += (-1) * tmp_7930;
   std::complex<double> tmp_7932;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7933;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7933 += B0(p,MSHI0(gI1),MAh(gI2))*Conj(CpconjUSHI0conjSHI0Ah
            (gO2,gI1,gI2))*CpconjUSHI0conjSHI0Ah(gO1,gI1,gI2);
      }
      tmp_7932 += tmp_7933;
   }
   result += tmp_7932;
   std::complex<double> tmp_7934;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7935;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7935 += B0(p,MSHI0(gI1),Mhh(gI2))*Conj(CpconjUSHI0conjSHI0hh
            (gO2,gI1,gI2))*CpconjUSHI0conjSHI0hh(gO1,gI1,gI2);
      }
      tmp_7934 += tmp_7935;
   }
   result += tmp_7934;
   std::complex<double> tmp_7936;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7937;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7937 += B0(p,MSHI0(gI1),MAh(gI2))*Conj(CpconjUSHI0SHI0Ah(gO2
            ,gI1,gI2))*CpconjUSHI0SHI0Ah(gO1,gI1,gI2);
      }
      tmp_7936 += tmp_7937;
   }
   result += tmp_7936;
   std::complex<double> tmp_7938;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7939;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7939 += B0(p,MSHI0(gI1),Mhh(gI2))*Conj(CpconjUSHI0SHI0hh(gO2
            ,gI1,gI2))*CpconjUSHI0SHI0hh(gO1,gI1,gI2);
      }
      tmp_7938 += tmp_7939;
   }
   result += tmp_7938;
   std::complex<double> tmp_7940;
   std::complex<double> tmp_7941;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7942;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7942 += (Conj(CpconjUSHI0ChiIChiPL(gO2,gI1,gI2))*
            CpconjUSHI0ChiIChiPL(gO1,gI1,gI2) + Conj(CpconjUSHI0ChiIChiPR(gO2,gI1,
            gI2))*CpconjUSHI0ChiIChiPR(gO1,gI1,gI2))*G0(p,MChiI(gI1),MChi(gI2));
      }
      tmp_7941 += tmp_7942;
   }
   tmp_7940 += tmp_7941;
   result += (0.5) * tmp_7940;
   std::complex<double> tmp_7943;
   std::complex<double> tmp_7944;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7945;
      std::complex<double> tmp_7946;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_7946 += B0(p,MChiI(gI1),MChi(gI2))*(Conj(
            CpconjUSHI0ChiIChiPR(gO2,gI1,gI2))*CpconjUSHI0ChiIChiPL(gO1,gI1,gI2) +
            Conj(CpconjUSHI0ChiIChiPL(gO2,gI1,gI2))*CpconjUSHI0ChiIChiPR(gO1,gI1,
            gI2))*MChi(gI2);
      }
      tmp_7945 += tmp_7946;
      tmp_7944 += (MChiI(gI1)) * tmp_7945;
   }
   tmp_7943 += tmp_7944;
   result += (-1) * tmp_7943;
   std::complex<double> tmp_7947;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7947 += (Conj(CpconjUSHI0barChaPFePL(gO2,gI2))*
         CpconjUSHI0barChaPFePL(gO1,gI2) + Conj(CpconjUSHI0barChaPFePR(gO2,gI2))*
         CpconjUSHI0barChaPFePR(gO1,gI2))*G0(p,MChaP,MFe(gI2));
   }
   result += tmp_7947;
   std::complex<double> tmp_7948;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_7948 += Conj(CpconjUSHI0conjVWmSHIPM(gO2,gI2))*
         CpconjUSHI0conjVWmSHIPM(gO1,gI2)*F0(p,MSHIPM(gI2),MVWm);
   }
   result += tmp_7948;
   std::complex<double> tmp_7949;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_7949 += Conj(CpconjUSHI0VZSHI0(gO2,gI2))*CpconjUSHI0VZSHI0(gO1,gI2
         )*F0(p,MSHI0(gI2),MVZ);
   }
   result += tmp_7949;
   std::complex<double> tmp_7950;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_7950 += Conj(CpconjUSHI0VZpSHI0(gO2,gI2))*CpconjUSHI0VZpSHI0(gO1,
         gI2)*F0(p,MSHI0(gI2),MVZp);
   }
   result += tmp_7950;
   std::complex<double> tmp_7951;
   std::complex<double> tmp_7952;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_7952 += B0(p,MChaP,MFe(gI2))*(Conj(CpconjUSHI0barChaPFePR(gO2,gI2)
         )*CpconjUSHI0barChaPFePL(gO1,gI2) + Conj(CpconjUSHI0barChaPFePL(gO2,gI2))
         *CpconjUSHI0barChaPFePR(gO1,gI2))*MFe(gI2);
   }
   tmp_7951 += tmp_7952;
   result += (-2*MChaP) * tmp_7951;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_SHIPM(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHIPMconjUSHIPMconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHIPMconjUSHIPMVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHIPMconjUSHIPMVZVZ(gO1,gO2);
   std::complex<double> tmp_7953;
   std::complex<double> tmp_7954;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7954 += A0(MHpm(gI1))*CpUSHIPMconjUSHIPMconjHpmHpm(gO1,gO2,gI1,gI1
         );
   }
   tmp_7953 += tmp_7954;
   result += (-1) * tmp_7953;
   std::complex<double> tmp_7955;
   std::complex<double> tmp_7956;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7956 += A0(MSHp0(gI1))*CpUSHIPMconjUSHIPMconjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_7955 += tmp_7956;
   result += (-1) * tmp_7955;
   std::complex<double> tmp_7957;
   std::complex<double> tmp_7958;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_7958 += A0(MSHpp(gI1))*CpUSHIPMconjUSHIPMconjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_7957 += tmp_7958;
   result += (-1) * tmp_7957;
   std::complex<double> tmp_7959;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_7960;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_7960 += B0(p,MSHp0(gI1),MSe(gI2))*Conj(
            CpconjUSHIPMconjSHp0Se(gO2,gI1,gI2))*CpconjUSHIPMconjSHp0Se(gO1,gI1,
            gI2);
      }
      tmp_7959 += tmp_7960;
   }
   result += tmp_7959;
   std::complex<double> tmp_7961;
   std::complex<double> tmp_7962;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_7962 += A0(MSv(gI1))*CpUSHIPMconjUSHIPMconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_7961 += tmp_7962;
   result += (-1) * tmp_7961;
   std::complex<double> tmp_7963;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7964;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7964 += (Conj(CpconjUSHIPMFeChiPPL(gO2,gI1,gI2))*
            CpconjUSHIPMFeChiPPL(gO1,gI1,gI2) + Conj(CpconjUSHIPMFeChiPPR(gO2,gI1,
            gI2))*CpconjUSHIPMFeChiPPR(gO1,gI1,gI2))*G0(p,MFe(gI1),MChiP(gI2));
      }
      tmp_7963 += tmp_7964;
   }
   result += tmp_7963;
   std::complex<double> tmp_7965;
   std::complex<double> tmp_7966;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_7967;
      std::complex<double> tmp_7968;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7968 += B0(p,MFe(gI1),MChiP(gI2))*(Conj(CpconjUSHIPMFeChiPPR
            (gO2,gI1,gI2))*CpconjUSHIPMFeChiPPL(gO1,gI1,gI2) + Conj(
            CpconjUSHIPMFeChiPPL(gO2,gI1,gI2))*CpconjUSHIPMFeChiPPR(gO1,gI1,gI2))*
            MChiP(gI2);
      }
      tmp_7967 += tmp_7968;
      tmp_7966 += (MFe(gI1)) * tmp_7967;
   }
   tmp_7965 += tmp_7966;
   result += (-2) * tmp_7965;
   std::complex<double> tmp_7969;
   std::complex<double> tmp_7970;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_7970 += A0(MSHIPM(gI1))*CpUSHIPMconjUSHIPMconjSHIPMSHIPM(gO1,gO2,
         gI1,gI1);
   }
   tmp_7969 += tmp_7970;
   result += (-1) * tmp_7969;
   std::complex<double> tmp_7971;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7972;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7972 += B0(p,MSHIPM(gI1),MAh(gI2))*Conj(CpconjUSHIPMSHIPMAh(
            gO2,gI1,gI2))*CpconjUSHIPMSHIPMAh(gO1,gI1,gI2);
      }
      tmp_7971 += tmp_7972;
   }
   result += tmp_7971;
   std::complex<double> tmp_7973;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_7974;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_7974 += B0(p,MSHIPM(gI1),Mhh(gI2))*Conj(CpconjUSHIPMSHIPMhh(
            gO2,gI1,gI2))*CpconjUSHIPMSHIPMhh(gO1,gI1,gI2);
      }
      tmp_7973 += tmp_7974;
   }
   result += tmp_7973;
   std::complex<double> tmp_7975;
   std::complex<double> tmp_7976;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7976 += A0(MAh(gI1))*CpUSHIPMconjUSHIPMAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_7975 += tmp_7976;
   result += (-0.5) * tmp_7975;
   std::complex<double> tmp_7977;
   std::complex<double> tmp_7978;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_7978 += A0(Mhh(gI1))*CpUSHIPMconjUSHIPMhhhh(gO1,gO2,gI1,gI1);
   }
   tmp_7977 += tmp_7978;
   result += (-0.5) * tmp_7977;
   std::complex<double> tmp_7979;
   std::complex<double> tmp_7980;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7980 += A0(MSd(gI1))*CpUSHIPMconjUSHIPMconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_7979 += tmp_7980;
   result += (-3) * tmp_7979;
   std::complex<double> tmp_7981;
   std::complex<double> tmp_7982;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7982 += A0(MSDX(gI1))*CpUSHIPMconjUSHIPMconjSDXSDX(gO1,gO2,gI1,gI1
         );
   }
   tmp_7981 += tmp_7982;
   result += (-3) * tmp_7981;
   std::complex<double> tmp_7983;
   std::complex<double> tmp_7984;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7984 += A0(MSe(gI1))*CpUSHIPMconjUSHIPMconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_7983 += tmp_7984;
   result += (-1) * tmp_7983;
   std::complex<double> tmp_7985;
   std::complex<double> tmp_7986;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_7986 += A0(MSu(gI1))*CpUSHIPMconjUSHIPMconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_7985 += tmp_7986;
   result += (-3) * tmp_7985;
   std::complex<double> tmp_7987;
   std::complex<double> tmp_7988;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_7988 += A0(MSHI0(gI1))*CpUSHIPMconjUSHIPMconjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_7987 += tmp_7988;
   result += (-1) * tmp_7987;
   std::complex<double> tmp_7989;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7990;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7990 += B0(p,MSHI0(gI1),MHpm(gI2))*Conj(
            CpconjUSHIPMconjSHI0Hpm(gO2,gI1,gI2))*CpconjUSHIPMconjSHI0Hpm(gO1,gI1,
            gI2);
      }
      tmp_7989 += tmp_7990;
   }
   result += tmp_7989;
   std::complex<double> tmp_7991;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7992;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7992 += B0(p,MSHI0(gI1),MHpm(gI2))*Conj(CpconjUSHIPMSHI0Hpm(
            gO2,gI1,gI2))*CpconjUSHIPMSHI0Hpm(gO1,gI1,gI2);
      }
      tmp_7991 += tmp_7992;
   }
   result += tmp_7991;
   std::complex<double> tmp_7993;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7994;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7994 += (Conj(CpconjUSHIPMChiIChaPL(gO2,gI1,gI2))*
            CpconjUSHIPMChiIChaPL(gO1,gI1,gI2) + Conj(CpconjUSHIPMChiIChaPR(gO2,
            gI1,gI2))*CpconjUSHIPMChiIChaPR(gO1,gI1,gI2))*G0(p,MChiI(gI1),MCha(gI2
            ));
      }
      tmp_7993 += tmp_7994;
   }
   result += tmp_7993;
   std::complex<double> tmp_7995;
   std::complex<double> tmp_7996;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_7997;
      std::complex<double> tmp_7998;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_7998 += B0(p,MChiI(gI1),MCha(gI2))*(Conj(
            CpconjUSHIPMChiIChaPR(gO2,gI1,gI2))*CpconjUSHIPMChiIChaPL(gO1,gI1,gI2)
            + Conj(CpconjUSHIPMChiIChaPL(gO2,gI1,gI2))*CpconjUSHIPMChiIChaPR(gO1,
            gI1,gI2))*MCha(gI2);
      }
      tmp_7997 += tmp_7998;
      tmp_7996 += (MChiI(gI1)) * tmp_7997;
   }
   tmp_7995 += tmp_7996;
   result += (-2) * tmp_7995;
   std::complex<double> tmp_7999;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8000;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8000 += (Conj(CpconjUSHIPMChiChaIPL(gO2,gI1,gI2))*
            CpconjUSHIPMChiChaIPL(gO1,gI1,gI2) + Conj(CpconjUSHIPMChiChaIPR(gO2,
            gI1,gI2))*CpconjUSHIPMChiChaIPR(gO1,gI1,gI2))*G0(p,MChi(gI1),MChaI(gI2
            ));
      }
      tmp_7999 += tmp_8000;
   }
   result += tmp_7999;
   std::complex<double> tmp_8001;
   std::complex<double> tmp_8002;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8003;
      std::complex<double> tmp_8004;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8004 += B0(p,MChi(gI1),MChaI(gI2))*(Conj(
            CpconjUSHIPMChiChaIPR(gO2,gI1,gI2))*CpconjUSHIPMChiChaIPL(gO1,gI1,gI2)
            + Conj(CpconjUSHIPMChiChaIPL(gO2,gI1,gI2))*CpconjUSHIPMChiChaIPR(gO1,
            gI1,gI2))*MChaI(gI2);
      }
      tmp_8003 += tmp_8004;
      tmp_8002 += (MChi(gI1)) * tmp_8003;
   }
   tmp_8001 += tmp_8002;
   result += (-2) * tmp_8001;
   std::complex<double> tmp_8005;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_8005 += Conj(CpconjUSHIPMVPSHIPM(gO2,gI2))*CpconjUSHIPMVPSHIPM(gO1
         ,gI2)*F0(p,MSHIPM(gI2),0);
   }
   result += tmp_8005;
   std::complex<double> tmp_8006;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_8006 += Conj(CpconjUSHIPMVZSHIPM(gO2,gI2))*CpconjUSHIPMVZSHIPM(gO1
         ,gI2)*F0(p,MSHIPM(gI2),MVZ);
   }
   result += tmp_8006;
   std::complex<double> tmp_8007;
   for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
      tmp_8007 += Conj(CpconjUSHIPMVZpSHIPM(gO2,gI2))*CpconjUSHIPMVZpSHIPM(
         gO1,gI2)*F0(p,MSHIPM(gI2),MVZp);
   }
   result += tmp_8007;
   std::complex<double> tmp_8008;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_8008 += Conj(CpconjUSHIPMVWmSHI0(gO2,gI2))*CpconjUSHIPMVWmSHI0(gO1
         ,gI2)*F0(p,MSHI0(gI2),MVWm);
   }
   result += tmp_8008;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_SHp0(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHp0conjUSHp0conjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHp0conjUSHp0VZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHp0conjUSHp0VZVZ(gO1,gO2);
   std::complex<double> tmp_8009;
   std::complex<double> tmp_8010;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8010 += A0(MHpm(gI1))*CpUSHp0conjUSHp0conjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_8009 += tmp_8010;
   result += (-1) * tmp_8009;
   std::complex<double> tmp_8011;
   std::complex<double> tmp_8012;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8012 += A0(MSHp0(gI1))*CpUSHp0conjUSHp0conjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_8011 += tmp_8012;
   result += (-1) * tmp_8011;
   std::complex<double> tmp_8013;
   std::complex<double> tmp_8014;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8014 += A0(MSHpp(gI1))*CpUSHp0conjUSHp0conjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_8013 += tmp_8014;
   result += (-1) * tmp_8013;
   std::complex<double> tmp_8015;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8015 += (Conj(CpconjUSHp0barChaChaPPL(gO2,gI1))*
         CpconjUSHp0barChaChaPPL(gO1,gI1) + Conj(CpconjUSHp0barChaChaPPR(gO2,gI1))
         *CpconjUSHp0barChaChaPPR(gO1,gI1))*G0(p,MCha(gI1),MChaP);
   }
   result += tmp_8015;
   std::complex<double> tmp_8016;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8017;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8017 += B0(p,MHpm(gI1),MSHpp(gI2))*Conj(
            CpconjUSHp0conjHpmSHpp(gO2,gI1,gI2))*CpconjUSHp0conjHpmSHpp(gO1,gI1,
            gI2);
      }
      tmp_8016 += tmp_8017;
   }
   result += tmp_8016;
   std::complex<double> tmp_8018;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8019;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8019 += (Conj(CpconjUSHp0barChaIFePL(gO2,gI1,gI2))*
            CpconjUSHp0barChaIFePL(gO1,gI1,gI2) + Conj(CpconjUSHp0barChaIFePR(gO2,
            gI1,gI2))*CpconjUSHp0barChaIFePR(gO1,gI1,gI2))*G0(p,MChaI(gI1),MFe(gI2
            ));
      }
      tmp_8018 += tmp_8019;
   }
   result += tmp_8018;
   std::complex<double> tmp_8020;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8021;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8021 += B0(p,MSHp0(gI1),MAh(gI2))*Conj(CpconjUSHp0SHp0Ah(gO2
            ,gI1,gI2))*CpconjUSHp0SHp0Ah(gO1,gI1,gI2);
      }
      tmp_8020 += tmp_8021;
   }
   result += tmp_8020;
   std::complex<double> tmp_8022;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8023;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8023 += B0(p,MSHp0(gI1),Mhh(gI2))*Conj(CpconjUSHp0SHp0hh(gO2
            ,gI1,gI2))*CpconjUSHp0SHp0hh(gO1,gI1,gI2);
      }
      tmp_8022 += tmp_8023;
   }
   result += tmp_8022;
   std::complex<double> tmp_8024;
   std::complex<double> tmp_8025;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8026;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8026 += (Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*
            CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) + Conj(CpconjUSHp0ChiPChiPR(gO2,gI1,
            gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MChi(gI2));
      }
      tmp_8025 += tmp_8026;
   }
   tmp_8024 += tmp_8025;
   result += (0.5) * tmp_8024;
   std::complex<double> tmp_8027;
   std::complex<double> tmp_8028;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8029;
      std::complex<double> tmp_8030;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8030 += B0(p,MChaI(gI1),MFe(gI2))*(Conj(
            CpconjUSHp0barChaIFePR(gO2,gI1,gI2))*CpconjUSHp0barChaIFePL(gO1,gI1,
            gI2) + Conj(CpconjUSHp0barChaIFePL(gO2,gI1,gI2))*
            CpconjUSHp0barChaIFePR(gO1,gI1,gI2))*MFe(gI2);
      }
      tmp_8029 += tmp_8030;
      tmp_8028 += (MChaI(gI1)) * tmp_8029;
   }
   tmp_8027 += tmp_8028;
   result += (-2) * tmp_8027;
   std::complex<double> tmp_8031;
   std::complex<double> tmp_8032;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8033;
      std::complex<double> tmp_8034;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8034 += B0(p,MChiP(gI1),MChi(gI2))*(Conj(
            CpconjUSHp0ChiPChiPR(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPL(gO1,gI1,gI2) +
            Conj(CpconjUSHp0ChiPChiPL(gO2,gI1,gI2))*CpconjUSHp0ChiPChiPR(gO1,gI1,
            gI2))*MChi(gI2);
      }
      tmp_8033 += tmp_8034;
      tmp_8032 += (MChiP(gI1)) * tmp_8033;
   }
   tmp_8031 += tmp_8032;
   result += (-1) * tmp_8031;
   std::complex<double> tmp_8035;
   std::complex<double> tmp_8036;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_8036 += A0(MSv(gI1))*CpUSHp0conjUSHp0conjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_8035 += tmp_8036;
   result += (-1) * tmp_8035;
   std::complex<double> tmp_8037;
   std::complex<double> tmp_8038;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8039;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8039 += (Conj(CpconjUSHp0barFdFDXPL(gO2,gI1,gI2))*
            CpconjUSHp0barFdFDXPL(gO1,gI1,gI2) + Conj(CpconjUSHp0barFdFDXPR(gO2,
            gI1,gI2))*CpconjUSHp0barFdFDXPR(gO1,gI1,gI2))*G0(p,MFd(gI1),MFDX(gI2))
            ;
      }
      tmp_8038 += tmp_8039;
   }
   tmp_8037 += tmp_8038;
   result += (3) * tmp_8037;
   std::complex<double> tmp_8040;
   std::complex<double> tmp_8041;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8042;
      std::complex<double> tmp_8043;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8043 += B0(p,MFd(gI1),MFDX(gI2))*(Conj(CpconjUSHp0barFdFDXPR
            (gO2,gI1,gI2))*CpconjUSHp0barFdFDXPL(gO1,gI1,gI2) + Conj(
            CpconjUSHp0barFdFDXPL(gO2,gI1,gI2))*CpconjUSHp0barFdFDXPR(gO1,gI1,gI2)
            )*MFDX(gI2);
      }
      tmp_8042 += tmp_8043;
      tmp_8041 += (MFd(gI1)) * tmp_8042;
   }
   tmp_8040 += tmp_8041;
   result += (-6) * tmp_8040;
   std::complex<double> tmp_8044;
   std::complex<double> tmp_8045;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_8045 += A0(MSHIPM(gI1))*CpUSHp0conjUSHp0conjSHIPMSHIPM(gO1,gO2,gI1
         ,gI1);
   }
   tmp_8044 += tmp_8045;
   result += (-1) * tmp_8044;
   std::complex<double> tmp_8046;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8047;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8047 += B0(p,MSHIPM(gI1),MSe(gI2))*Conj(
            CpconjUSHp0conjSHIPMSe(gO2,gI1,gI2))*CpconjUSHp0conjSHIPMSe(gO1,gI1,
            gI2);
      }
      tmp_8046 += tmp_8047;
   }
   result += tmp_8046;
   std::complex<double> tmp_8048;
   std::complex<double> tmp_8049;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8049 += A0(MAh(gI1))*CpUSHp0conjUSHp0AhAh(gO1,gO2,gI1,gI1);
   }
   tmp_8048 += tmp_8049;
   result += (-0.5) * tmp_8048;
   std::complex<double> tmp_8050;
   std::complex<double> tmp_8051;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8051 += A0(Mhh(gI1))*CpUSHp0conjUSHp0hhhh(gO1,gO2,gI1,gI1);
   }
   tmp_8050 += tmp_8051;
   result += (-0.5) * tmp_8050;
   std::complex<double> tmp_8052;
   std::complex<double> tmp_8053;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8053 += A0(MSd(gI1))*CpUSHp0conjUSHp0conjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_8052 += tmp_8053;
   result += (-3) * tmp_8052;
   std::complex<double> tmp_8054;
   std::complex<double> tmp_8055;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8055 += A0(MSDX(gI1))*CpUSHp0conjUSHp0conjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_8054 += tmp_8055;
   result += (-3) * tmp_8054;
   std::complex<double> tmp_8056;
   std::complex<double> tmp_8057;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8057 += A0(MSe(gI1))*CpUSHp0conjUSHp0conjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_8056 += tmp_8057;
   result += (-1) * tmp_8056;
   std::complex<double> tmp_8058;
   std::complex<double> tmp_8059;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8059 += A0(MSu(gI1))*CpUSHp0conjUSHp0conjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_8058 += tmp_8059;
   result += (-3) * tmp_8058;
   std::complex<double> tmp_8060;
   std::complex<double> tmp_8061;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8062;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8062 += B0(p,MSd(gI1),MSDX(gI2))*Conj(CpconjUSHp0conjSdSDX(
            gO2,gI1,gI2))*CpconjUSHp0conjSdSDX(gO1,gI1,gI2);
      }
      tmp_8061 += tmp_8062;
   }
   tmp_8060 += tmp_8061;
   result += (3) * tmp_8060;
   std::complex<double> tmp_8063;
   std::complex<double> tmp_8064;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8064 += A0(MSHI0(gI1))*CpUSHp0conjUSHp0conjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_8063 += tmp_8064;
   result += (-1) * tmp_8063;
   std::complex<double> tmp_8065;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8065 += Conj(CpconjUSHp0VZSHp0(gO2,gI2))*CpconjUSHp0VZSHp0(gO1,gI2
         )*F0(p,MSHp0(gI2),MVZ);
   }
   result += tmp_8065;
   std::complex<double> tmp_8066;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8066 += Conj(CpconjUSHp0VZpSHp0(gO2,gI2))*CpconjUSHp0VZpSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVZp);
   }
   result += tmp_8066;
   std::complex<double> tmp_8067;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8067 += Conj(CpconjUSHp0conjVWmSHpp(gO2,gI2))*
         CpconjUSHp0conjVWmSHpp(gO1,gI2)*F0(p,MSHpp(gI2),MVWm);
   }
   result += tmp_8067;
   std::complex<double> tmp_8068;
   std::complex<double> tmp_8069;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8069 += B0(p,MCha(gI1),MChaP)*(Conj(CpconjUSHp0barChaChaPPR(gO2,
         gI1))*CpconjUSHp0barChaChaPPL(gO1,gI1) + Conj(CpconjUSHp0barChaChaPPL(gO2
         ,gI1))*CpconjUSHp0barChaChaPPR(gO1,gI1))*MCha(gI1);
   }
   tmp_8068 += tmp_8069;
   result += (-2*MChaP) * tmp_8068;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_SHpp(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += 4*A0(MVWm)*CpUSHppconjUSHppconjVWmVWm(gO1,gO2);
   result += 2*A0(MVZp)*CpUSHppconjUSHppVZpVZp(gO1,gO2);
   result += 2*A0(MVZ)*CpUSHppconjUSHppVZVZ(gO1,gO2);
   std::complex<double> tmp_8070;
   std::complex<double> tmp_8071;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8071 += A0(MHpm(gI1))*CpUSHppconjUSHppconjHpmHpm(gO1,gO2,gI1,gI1);
   }
   tmp_8070 += tmp_8071;
   result += (-1) * tmp_8070;
   std::complex<double> tmp_8072;
   std::complex<double> tmp_8073;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8073 += A0(MSHp0(gI1))*CpUSHppconjUSHppconjSHp0SHp0(gO1,gO2,gI1,
         gI1);
   }
   tmp_8072 += tmp_8073;
   result += (-1) * tmp_8072;
   std::complex<double> tmp_8074;
   std::complex<double> tmp_8075;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8075 += A0(MSHpp(gI1))*CpUSHppconjUSHppconjSHppSHpp(gO1,gO2,gI1,
         gI1);
   }
   tmp_8074 += tmp_8075;
   result += (-1) * tmp_8074;
   std::complex<double> tmp_8076;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8077;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8077 += B0(p,MSHp0(gI1),MHpm(gI2))*Conj(CpconjUSHppSHp0Hpm(
            gO2,gI1,gI2))*CpconjUSHppSHp0Hpm(gO1,gI1,gI2);
      }
      tmp_8076 += tmp_8077;
   }
   result += tmp_8076;
   std::complex<double> tmp_8078;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8079;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8079 += (Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*
            CpconjUSHppChiPChaPL(gO1,gI1,gI2) + Conj(CpconjUSHppChiPChaPR(gO2,gI1,
            gI2))*CpconjUSHppChiPChaPR(gO1,gI1,gI2))*G0(p,MChiP(gI1),MCha(gI2));
      }
      tmp_8078 += tmp_8079;
   }
   result += tmp_8078;
   std::complex<double> tmp_8080;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8081;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8081 += B0(p,MSHpp(gI1),MAh(gI2))*Conj(CpconjUSHppSHppAh(gO2
            ,gI1,gI2))*CpconjUSHppSHppAh(gO1,gI1,gI2);
      }
      tmp_8080 += tmp_8081;
   }
   result += tmp_8080;
   std::complex<double> tmp_8082;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8083;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8083 += B0(p,MSHpp(gI1),Mhh(gI2))*Conj(CpconjUSHppSHpphh(gO2
            ,gI1,gI2))*CpconjUSHppSHpphh(gO1,gI1,gI2);
      }
      tmp_8082 += tmp_8083;
   }
   result += tmp_8082;
   std::complex<double> tmp_8084;
   std::complex<double> tmp_8085;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8086;
      std::complex<double> tmp_8087;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8087 += B0(p,MChiP(gI1),MCha(gI2))*(Conj(
            CpconjUSHppChiPChaPR(gO2,gI1,gI2))*CpconjUSHppChiPChaPL(gO1,gI1,gI2) +
            Conj(CpconjUSHppChiPChaPL(gO2,gI1,gI2))*CpconjUSHppChiPChaPR(gO1,gI1,
            gI2))*MCha(gI2);
      }
      tmp_8086 += tmp_8087;
      tmp_8085 += (MChiP(gI1)) * tmp_8086;
   }
   tmp_8084 += tmp_8085;
   result += (-2) * tmp_8084;
   std::complex<double> tmp_8088;
   std::complex<double> tmp_8089;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_8089 += A0(MSv(gI1))*CpUSHppconjUSHppconjSvSv(gO1,gO2,gI1,gI1);
   }
   tmp_8088 += tmp_8089;
   result += (-1) * tmp_8088;
   std::complex<double> tmp_8090;
   std::complex<double> tmp_8091;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8092;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8092 += (Conj(CpconjUSHppbarFuFDXPL(gO2,gI1,gI2))*
            CpconjUSHppbarFuFDXPL(gO1,gI1,gI2) + Conj(CpconjUSHppbarFuFDXPR(gO2,
            gI1,gI2))*CpconjUSHppbarFuFDXPR(gO1,gI1,gI2))*G0(p,MFu(gI1),MFDX(gI2))
            ;
      }
      tmp_8091 += tmp_8092;
   }
   tmp_8090 += tmp_8091;
   result += (3) * tmp_8090;
   std::complex<double> tmp_8093;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8094;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8094 += (Conj(CpconjUSHppFeChiIPL(gO2,gI1,gI2))*
            CpconjUSHppFeChiIPL(gO1,gI1,gI2) + Conj(CpconjUSHppFeChiIPR(gO2,gI1,
            gI2))*CpconjUSHppFeChiIPR(gO1,gI1,gI2))*G0(p,MFe(gI1),MChiI(gI2));
      }
      tmp_8093 += tmp_8094;
   }
   result += tmp_8093;
   std::complex<double> tmp_8095;
   std::complex<double> tmp_8096;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8097;
      std::complex<double> tmp_8098;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8098 += B0(p,MFe(gI1),MChiI(gI2))*(Conj(CpconjUSHppFeChiIPR(
            gO2,gI1,gI2))*CpconjUSHppFeChiIPL(gO1,gI1,gI2) + Conj(
            CpconjUSHppFeChiIPL(gO2,gI1,gI2))*CpconjUSHppFeChiIPR(gO1,gI1,gI2))*
            MChiI(gI2);
      }
      tmp_8097 += tmp_8098;
      tmp_8096 += (MFe(gI1)) * tmp_8097;
   }
   tmp_8095 += tmp_8096;
   result += (-2) * tmp_8095;
   std::complex<double> tmp_8099;
   std::complex<double> tmp_8100;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8101;
      std::complex<double> tmp_8102;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8102 += B0(p,MFu(gI1),MFDX(gI2))*(Conj(CpconjUSHppbarFuFDXPR
            (gO2,gI1,gI2))*CpconjUSHppbarFuFDXPL(gO1,gI1,gI2) + Conj(
            CpconjUSHppbarFuFDXPL(gO2,gI1,gI2))*CpconjUSHppbarFuFDXPR(gO1,gI1,gI2)
            )*MFDX(gI2);
      }
      tmp_8101 += tmp_8102;
      tmp_8100 += (MFu(gI1)) * tmp_8101;
   }
   tmp_8099 += tmp_8100;
   result += (-6) * tmp_8099;
   std::complex<double> tmp_8103;
   std::complex<double> tmp_8104;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_8104 += A0(MSHIPM(gI1))*CpUSHppconjUSHppconjSHIPMSHIPM(gO1,gO2,gI1
         ,gI1);
   }
   tmp_8103 += tmp_8104;
   result += (-1) * tmp_8103;
   std::complex<double> tmp_8105;
   std::complex<double> tmp_8106;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8106 += A0(MAh(gI1))*CpUSHppconjUSHppAhAh(gO1,gO2,gI1,gI1);
   }
   tmp_8105 += tmp_8106;
   result += (-0.5) * tmp_8105;
   std::complex<double> tmp_8107;
   std::complex<double> tmp_8108;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8108 += A0(Mhh(gI1))*CpUSHppconjUSHpphhhh(gO1,gO2,gI1,gI1);
   }
   tmp_8107 += tmp_8108;
   result += (-0.5) * tmp_8107;
   std::complex<double> tmp_8109;
   std::complex<double> tmp_8110;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8110 += A0(MSd(gI1))*CpUSHppconjUSHppconjSdSd(gO1,gO2,gI1,gI1);
   }
   tmp_8109 += tmp_8110;
   result += (-3) * tmp_8109;
   std::complex<double> tmp_8111;
   std::complex<double> tmp_8112;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8112 += A0(MSDX(gI1))*CpUSHppconjUSHppconjSDXSDX(gO1,gO2,gI1,gI1);
   }
   tmp_8111 += tmp_8112;
   result += (-3) * tmp_8111;
   std::complex<double> tmp_8113;
   std::complex<double> tmp_8114;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8114 += A0(MSe(gI1))*CpUSHppconjUSHppconjSeSe(gO1,gO2,gI1,gI1);
   }
   tmp_8113 += tmp_8114;
   result += (-1) * tmp_8113;
   std::complex<double> tmp_8115;
   std::complex<double> tmp_8116;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8116 += A0(MSu(gI1))*CpUSHppconjUSHppconjSuSu(gO1,gO2,gI1,gI1);
   }
   tmp_8115 += tmp_8116;
   result += (-3) * tmp_8115;
   std::complex<double> tmp_8117;
   std::complex<double> tmp_8118;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8119;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8119 += B0(p,MSu(gI1),MSDX(gI2))*Conj(CpconjUSHppconjSuSDX(
            gO2,gI1,gI2))*CpconjUSHppconjSuSDX(gO1,gI1,gI2);
      }
      tmp_8118 += tmp_8119;
   }
   tmp_8117 += tmp_8118;
   result += (3) * tmp_8117;
   std::complex<double> tmp_8120;
   std::complex<double> tmp_8121;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8121 += A0(MSHI0(gI1))*CpUSHppconjUSHppconjSHI0SHI0(gO1,gO2,gI1,
         gI1);
   }
   tmp_8120 += tmp_8121;
   result += (-1) * tmp_8120;
   std::complex<double> tmp_8122;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8123;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8123 += B0(p,MSHI0(gI1),MSe(gI2))*Conj(CpconjUSHppconjSHI0Se
            (gO2,gI1,gI2))*CpconjUSHppconjSHI0Se(gO1,gI1,gI2);
      }
      tmp_8122 += tmp_8123;
   }
   result += tmp_8122;
   std::complex<double> tmp_8124;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8125;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8125 += B0(p,MSHI0(gI1),MSe(gI2))*Conj(CpconjUSHppSHI0Se(gO2
            ,gI1,gI2))*CpconjUSHppSHI0Se(gO1,gI1,gI2);
      }
      tmp_8124 += tmp_8125;
   }
   result += tmp_8124;
   std::complex<double> tmp_8126;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_8126 += (Conj(CpconjUSHppChiChaPPL(gO2,gI1))*CpconjUSHppChiChaPPL(
         gO1,gI1) + Conj(CpconjUSHppChiChaPPR(gO2,gI1))*CpconjUSHppChiChaPPR(gO1,
         gI1))*G0(p,MChi(gI1),MChaP);
   }
   result += tmp_8126;
   std::complex<double> tmp_8127;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8127 += Conj(CpconjUSHppVWmSHp0(gO2,gI2))*CpconjUSHppVWmSHp0(gO1,
         gI2)*F0(p,MSHp0(gI2),MVWm);
   }
   result += tmp_8127;
   std::complex<double> tmp_8128;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8128 += Conj(CpconjUSHppVPSHpp(gO2,gI2))*CpconjUSHppVPSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),0);
   }
   result += tmp_8128;
   std::complex<double> tmp_8129;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8129 += Conj(CpconjUSHppVZSHpp(gO2,gI2))*CpconjUSHppVZSHpp(gO1,gI2
         )*F0(p,MSHpp(gI2),MVZ);
   }
   result += tmp_8129;
   std::complex<double> tmp_8130;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8130 += Conj(CpconjUSHppVZpSHpp(gO2,gI2))*CpconjUSHppVZpSHpp(gO1,
         gI2)*F0(p,MSHpp(gI2),MVZp);
   }
   result += tmp_8130;
   std::complex<double> tmp_8131;
   std::complex<double> tmp_8132;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_8132 += B0(p,MChi(gI1),MChaP)*(Conj(CpconjUSHppChiChaPPR(gO2,gI1))
         *CpconjUSHppChiChaPPL(gO1,gI1) + Conj(CpconjUSHppChiChaPPL(gO2,gI1))*
         CpconjUSHppChiChaPPR(gO1,gI1))*MChi(gI1);
   }
   tmp_8131 += tmp_8132;
   result += (-2*MChaP) * tmp_8131;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_VZ(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZVZconjVWmVWm1() + CpVZVZconjVWmVWm2() +
      CpVZVZconjVWmVWm3()));
   result += (AbsSqr(CpVZbarChaPChaPPL()) + AbsSqr(CpVZbarChaPChaPPR()))*H0(p,
      MChaP,MChaP);
   std::complex<double> tmp_8133;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8133 += A0(MHpm(gI1))*CpVZVZconjHpmHpm(gI1,gI1);
   }
   result += tmp_8133;
   std::complex<double> tmp_8134;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8134 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_8134;
   std::complex<double> tmp_8135;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8135 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_8135;
   std::complex<double> tmp_8136;
   std::complex<double> tmp_8137;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8138;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8138 += AbsSqr(CpVZconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),MHpm
            (gI2));
      }
      tmp_8137 += tmp_8138;
   }
   tmp_8136 += tmp_8137;
   result += (-4) * tmp_8136;
   std::complex<double> tmp_8139;
   std::complex<double> tmp_8140;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8141;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8141 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_8140 += tmp_8141;
   }
   tmp_8139 += tmp_8140;
   result += (-4) * tmp_8139;
   std::complex<double> tmp_8142;
   std::complex<double> tmp_8143;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8144;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8144 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_8143 += tmp_8144;
   }
   tmp_8142 += tmp_8143;
   result += (-4) * tmp_8142;
   std::complex<double> tmp_8145;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8146;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8146 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_8146 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_8145 += tmp_8146;
   }
   result += tmp_8145;
   std::complex<double> tmp_8147;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8148;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8148 += (AbsSqr(CpVZbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_8148 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZbarChaIChaIPL(gI1,gI2))*CpVZbarChaIChaIPR(gI1,gI2));
      }
      tmp_8147 += tmp_8148;
   }
   result += tmp_8147;
   std::complex<double> tmp_8149;
   std::complex<double> tmp_8150;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8151;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8151 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_8151 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_8150 += tmp_8151;
   }
   tmp_8149 += tmp_8150;
   result += (0.5) * tmp_8149;
   std::complex<double> tmp_8152;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_8152 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_8152;
   std::complex<double> tmp_8153;
   std::complex<double> tmp_8154;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8155;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8155 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_8154 += tmp_8155;
   }
   tmp_8153 += tmp_8154;
   result += (-4) * tmp_8153;
   std::complex<double> tmp_8156;
   std::complex<double> tmp_8157;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8158;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8158 += (AbsSqr(CpVZbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_8158 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZbarFdFdPL(gI1,gI2))*CpVZbarFdFdPR(gI1,gI2));
      }
      tmp_8157 += tmp_8158;
   }
   tmp_8156 += tmp_8157;
   result += (3) * tmp_8156;
   std::complex<double> tmp_8159;
   std::complex<double> tmp_8160;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8161;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8161 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_8161 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_8160 += tmp_8161;
   }
   tmp_8159 += tmp_8160;
   result += (3) * tmp_8159;
   std::complex<double> tmp_8162;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8163;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8163 += (AbsSqr(CpVZbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_8163 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZbarFeFePL(gI1,gI2))*CpVZbarFeFePR(gI1,gI2));
      }
      tmp_8162 += tmp_8163;
   }
   result += tmp_8162;
   std::complex<double> tmp_8164;
   std::complex<double> tmp_8165;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8166;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8166 += (AbsSqr(CpVZbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_8166 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZbarFuFuPL(gI1,gI2))*CpVZbarFuFuPR(gI1,gI2));
      }
      tmp_8165 += tmp_8166;
   }
   tmp_8164 += tmp_8165;
   result += (3) * tmp_8164;
   std::complex<double> tmp_8167;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8168;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8168 += (AbsSqr(CpVZbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_8168 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZbarFvFvPL(gI1,gI2))*CpVZbarFvFvPR(gI1,gI2));
      }
      tmp_8167 += tmp_8168;
   }
   result += tmp_8167;
   std::complex<double> tmp_8169;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_8169 += A0(MSHIPM(gI1))*CpVZVZconjSHIPMSHIPM(gI1,gI1);
   }
   result += tmp_8169;
   std::complex<double> tmp_8170;
   std::complex<double> tmp_8171;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8172;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_8172 += AbsSqr(CpVZconjSHIPMSHIPM(gI1,gI2))*B00(p,MSHIPM(gI1
            ),MSHIPM(gI2));
      }
      tmp_8171 += tmp_8172;
   }
   tmp_8170 += tmp_8171;
   result += (-4) * tmp_8170;
   std::complex<double> tmp_8173;
   std::complex<double> tmp_8174;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8174 += A0(MAh(gI1))*CpVZVZAhAh(gI1,gI1);
   }
   tmp_8173 += tmp_8174;
   result += (0.5) * tmp_8173;
   std::complex<double> tmp_8175;
   std::complex<double> tmp_8176;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8176 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_8175 += tmp_8176;
   result += (0.5) * tmp_8175;
   std::complex<double> tmp_8177;
   std::complex<double> tmp_8178;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8179;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8179 += AbsSqr(CpVZhhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_8178 += tmp_8179;
   }
   tmp_8177 += tmp_8178;
   result += (-4) * tmp_8177;
   std::complex<double> tmp_8180;
   std::complex<double> tmp_8181;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8181 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_8180 += tmp_8181;
   result += (3) * tmp_8180;
   std::complex<double> tmp_8182;
   std::complex<double> tmp_8183;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8183 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_8182 += tmp_8183;
   result += (3) * tmp_8182;
   std::complex<double> tmp_8184;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8184 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_8184;
   std::complex<double> tmp_8185;
   std::complex<double> tmp_8186;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8186 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_8185 += tmp_8186;
   result += (3) * tmp_8185;
   std::complex<double> tmp_8187;
   std::complex<double> tmp_8188;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8189;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8189 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_8188 += tmp_8189;
   }
   tmp_8187 += tmp_8188;
   result += (-12) * tmp_8187;
   std::complex<double> tmp_8190;
   std::complex<double> tmp_8191;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8192;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8192 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_8191 += tmp_8192;
   }
   tmp_8190 += tmp_8191;
   result += (-12) * tmp_8190;
   std::complex<double> tmp_8193;
   std::complex<double> tmp_8194;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8195;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8195 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_8194 += tmp_8195;
   }
   tmp_8193 += tmp_8194;
   result += (-4) * tmp_8193;
   std::complex<double> tmp_8196;
   std::complex<double> tmp_8197;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8198;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8198 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_8197 += tmp_8198;
   }
   tmp_8196 += tmp_8197;
   result += (-12) * tmp_8196;
   std::complex<double> tmp_8199;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8199 += A0(MSHI0(gI1))*CpVZVZconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_8199;
   std::complex<double> tmp_8200;
   std::complex<double> tmp_8201;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8202;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8202 += AbsSqr(CpVZconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_8201 += tmp_8202;
   }
   tmp_8200 += tmp_8201;
   result += (-4) * tmp_8200;
   std::complex<double> tmp_8203;
   std::complex<double> tmp_8204;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8205;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8205 += (AbsSqr(CpVZChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_8205 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZChiIChiIPL(gI1,gI2))*CpVZChiIChiIPR(gI1,gI2));
      }
      tmp_8204 += tmp_8205;
   }
   tmp_8203 += tmp_8204;
   result += (0.5) * tmp_8203;
   std::complex<double> tmp_8206;
   std::complex<double> tmp_8207;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8208;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8208 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_8208 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_8207 += tmp_8208;
   }
   tmp_8206 += tmp_8207;
   result += (0.5) * tmp_8206;
   std::complex<double> tmp_8209;
   std::complex<double> tmp_8210;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8210 += AbsSqr(CpVZconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_8209 += tmp_8210;
   result += (2) * tmp_8209;
   std::complex<double> tmp_8211;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_8211 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_8211;
   std::complex<double> tmp_8212;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_8212 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_8212;
   result += -(AbsSqr(CpVZconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0(
      p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL())*CpVZbarChaPChaPPR
      ())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_VZp(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpVZpbargWmCgWmC())*B00(p,MVWm,MVWm);
   result += AbsSqr(CpVZpbargWmgWm())*B00(p,MVWm,MVWm);
   result += -(A0(MVWm)*(4*CpVZpVZpconjVWmVWm1() + CpVZpVZpconjVWmVWm2() +
      CpVZpVZpconjVWmVWm3()));
   result += (AbsSqr(CpVZpbarChaPChaPPL()) + AbsSqr(CpVZpbarChaPChaPPR()))*H0(p
      ,MChaP,MChaP);
   std::complex<double> tmp_8213;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8213 += A0(MHpm(gI1))*CpVZpVZpconjHpmHpm(gI1,gI1);
   }
   result += tmp_8213;
   std::complex<double> tmp_8214;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8214 += A0(MSHp0(gI1))*CpVZpVZpconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_8214;
   std::complex<double> tmp_8215;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8215 += A0(MSHpp(gI1))*CpVZpVZpconjSHppSHpp(gI1,gI1);
   }
   result += tmp_8215;
   std::complex<double> tmp_8216;
   std::complex<double> tmp_8217;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8218;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8218 += AbsSqr(CpVZpconjHpmHpm(gI1,gI2))*B00(p,MHpm(gI1),
            MHpm(gI2));
      }
      tmp_8217 += tmp_8218;
   }
   tmp_8216 += tmp_8217;
   result += (-4) * tmp_8216;
   std::complex<double> tmp_8219;
   std::complex<double> tmp_8220;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8221;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8221 += AbsSqr(CpVZpconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_8220 += tmp_8221;
   }
   tmp_8219 += tmp_8220;
   result += (-4) * tmp_8219;
   std::complex<double> tmp_8222;
   std::complex<double> tmp_8223;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8224;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8224 += AbsSqr(CpVZpconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_8223 += tmp_8224;
   }
   tmp_8222 += tmp_8223;
   result += (-4) * tmp_8222;
   std::complex<double> tmp_8225;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8226;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8226 += (AbsSqr(CpVZpbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZpbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_8226 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZpbarChaChaPL(gI1,gI2))*CpVZpbarChaChaPR(gI1,gI2));
      }
      tmp_8225 += tmp_8226;
   }
   result += tmp_8225;
   std::complex<double> tmp_8227;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8228;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8228 += (AbsSqr(CpVZpbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZpbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_8228 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZpbarChaIChaIPL(gI1,gI2))*CpVZpbarChaIChaIPR(gI1,gI2));
      }
      tmp_8227 += tmp_8228;
   }
   result += tmp_8227;
   std::complex<double> tmp_8229;
   std::complex<double> tmp_8230;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8231;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8231 += (AbsSqr(CpVZpChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZpChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_8231 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZpChiPChiPPL(gI1,gI2))*CpVZpChiPChiPPR(gI1,gI2));
      }
      tmp_8230 += tmp_8231;
   }
   tmp_8229 += tmp_8230;
   result += (0.5) * tmp_8229;
   std::complex<double> tmp_8232;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_8232 += A0(MSv(gI1))*CpVZpVZpconjSvSv(gI1,gI1);
   }
   result += tmp_8232;
   std::complex<double> tmp_8233;
   std::complex<double> tmp_8234;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8235;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8235 += AbsSqr(CpVZpconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(
            gI2));
      }
      tmp_8234 += tmp_8235;
   }
   tmp_8233 += tmp_8234;
   result += (-4) * tmp_8233;
   std::complex<double> tmp_8236;
   std::complex<double> tmp_8237;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8238;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8238 += (AbsSqr(CpVZpbarFdFdPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFdFdPR(gI1,gI2)))*H0(p,MFd(gI1),MFd(gI2));
         tmp_8238 += 4*B0(p,MFd(gI1),MFd(gI2))*MFd(gI1)*MFd(gI2)*Re(Conj(
            CpVZpbarFdFdPL(gI1,gI2))*CpVZpbarFdFdPR(gI1,gI2));
      }
      tmp_8237 += tmp_8238;
   }
   tmp_8236 += tmp_8237;
   result += (3) * tmp_8236;
   std::complex<double> tmp_8239;
   std::complex<double> tmp_8240;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8241;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8241 += (AbsSqr(CpVZpbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_8241 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZpbarFDXFDXPL(gI1,gI2))*CpVZpbarFDXFDXPR(gI1,gI2));
      }
      tmp_8240 += tmp_8241;
   }
   tmp_8239 += tmp_8240;
   result += (3) * tmp_8239;
   std::complex<double> tmp_8242;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8243;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8243 += (AbsSqr(CpVZpbarFeFePL(gI1,gI2)) + AbsSqr(
            CpVZpbarFeFePR(gI1,gI2)))*H0(p,MFe(gI1),MFe(gI2));
         tmp_8243 += 4*B0(p,MFe(gI1),MFe(gI2))*MFe(gI1)*MFe(gI2)*Re(Conj(
            CpVZpbarFeFePL(gI1,gI2))*CpVZpbarFeFePR(gI1,gI2));
      }
      tmp_8242 += tmp_8243;
   }
   result += tmp_8242;
   std::complex<double> tmp_8244;
   std::complex<double> tmp_8245;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8246;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8246 += (AbsSqr(CpVZpbarFuFuPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFuFuPR(gI1,gI2)))*H0(p,MFu(gI1),MFu(gI2));
         tmp_8246 += 4*B0(p,MFu(gI1),MFu(gI2))*MFu(gI1)*MFu(gI2)*Re(Conj(
            CpVZpbarFuFuPL(gI1,gI2))*CpVZpbarFuFuPR(gI1,gI2));
      }
      tmp_8245 += tmp_8246;
   }
   tmp_8244 += tmp_8245;
   result += (3) * tmp_8244;
   std::complex<double> tmp_8247;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8248;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8248 += (AbsSqr(CpVZpbarFvFvPL(gI1,gI2)) + AbsSqr(
            CpVZpbarFvFvPR(gI1,gI2)))*H0(p,MFv(gI1),MFv(gI2));
         tmp_8248 += 4*B0(p,MFv(gI1),MFv(gI2))*MFv(gI1)*MFv(gI2)*Re(Conj(
            CpVZpbarFvFvPL(gI1,gI2))*CpVZpbarFvFvPR(gI1,gI2));
      }
      tmp_8247 += tmp_8248;
   }
   result += tmp_8247;
   std::complex<double> tmp_8249;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_8249 += A0(MSHIPM(gI1))*CpVZpVZpconjSHIPMSHIPM(gI1,gI1);
   }
   result += tmp_8249;
   std::complex<double> tmp_8250;
   std::complex<double> tmp_8251;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8252;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_8252 += AbsSqr(CpVZpconjSHIPMSHIPM(gI1,gI2))*B00(p,MSHIPM(
            gI1),MSHIPM(gI2));
      }
      tmp_8251 += tmp_8252;
   }
   tmp_8250 += tmp_8251;
   result += (-4) * tmp_8250;
   std::complex<double> tmp_8253;
   std::complex<double> tmp_8254;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8254 += A0(MAh(gI1))*CpVZpVZpAhAh(gI1,gI1);
   }
   tmp_8253 += tmp_8254;
   result += (0.5) * tmp_8253;
   std::complex<double> tmp_8255;
   std::complex<double> tmp_8256;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8256 += A0(Mhh(gI1))*CpVZpVZphhhh(gI1,gI1);
   }
   tmp_8255 += tmp_8256;
   result += (0.5) * tmp_8255;
   std::complex<double> tmp_8257;
   std::complex<double> tmp_8258;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8259;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8259 += AbsSqr(CpVZphhAh(gI1,gI2))*B00(p,MAh(gI2),Mhh(gI1));
      }
      tmp_8258 += tmp_8259;
   }
   tmp_8257 += tmp_8258;
   result += (-4) * tmp_8257;
   std::complex<double> tmp_8260;
   std::complex<double> tmp_8261;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8261 += A0(MSd(gI1))*CpVZpVZpconjSdSd(gI1,gI1);
   }
   tmp_8260 += tmp_8261;
   result += (3) * tmp_8260;
   std::complex<double> tmp_8262;
   std::complex<double> tmp_8263;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8263 += A0(MSDX(gI1))*CpVZpVZpconjSDXSDX(gI1,gI1);
   }
   tmp_8262 += tmp_8263;
   result += (3) * tmp_8262;
   std::complex<double> tmp_8264;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8264 += A0(MSe(gI1))*CpVZpVZpconjSeSe(gI1,gI1);
   }
   result += tmp_8264;
   std::complex<double> tmp_8265;
   std::complex<double> tmp_8266;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8266 += A0(MSu(gI1))*CpVZpVZpconjSuSu(gI1,gI1);
   }
   tmp_8265 += tmp_8266;
   result += (3) * tmp_8265;
   std::complex<double> tmp_8267;
   std::complex<double> tmp_8268;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8269;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8269 += AbsSqr(CpVZpconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(
            gI2));
      }
      tmp_8268 += tmp_8269;
   }
   tmp_8267 += tmp_8268;
   result += (-12) * tmp_8267;
   std::complex<double> tmp_8270;
   std::complex<double> tmp_8271;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8272;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8272 += AbsSqr(CpVZpconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),
            MSDX(gI2));
      }
      tmp_8271 += tmp_8272;
   }
   tmp_8270 += tmp_8271;
   result += (-12) * tmp_8270;
   std::complex<double> tmp_8273;
   std::complex<double> tmp_8274;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8275;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8275 += AbsSqr(CpVZpconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(
            gI2));
      }
      tmp_8274 += tmp_8275;
   }
   tmp_8273 += tmp_8274;
   result += (-4) * tmp_8273;
   std::complex<double> tmp_8276;
   std::complex<double> tmp_8277;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8278;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8278 += AbsSqr(CpVZpconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(
            gI2));
      }
      tmp_8277 += tmp_8278;
   }
   tmp_8276 += tmp_8277;
   result += (-12) * tmp_8276;
   std::complex<double> tmp_8279;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8279 += A0(MSHI0(gI1))*CpVZpVZpconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_8279;
   std::complex<double> tmp_8280;
   std::complex<double> tmp_8281;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8282;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8282 += AbsSqr(CpVZpconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_8281 += tmp_8282;
   }
   tmp_8280 += tmp_8281;
   result += (-4) * tmp_8280;
   std::complex<double> tmp_8283;
   std::complex<double> tmp_8284;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8285;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8285 += (AbsSqr(CpVZpChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZpChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_8285 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZpChiIChiIPL(gI1,gI2))*CpVZpChiIChiIPR(gI1,gI2));
      }
      tmp_8284 += tmp_8285;
   }
   tmp_8283 += tmp_8284;
   result += (0.5) * tmp_8283;
   std::complex<double> tmp_8286;
   std::complex<double> tmp_8287;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8288;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8288 += (AbsSqr(CpVZpChiChiPL(gI1,gI2)) + AbsSqr(
            CpVZpChiChiPR(gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_8288 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZpChiChiPL(gI1,gI2))*CpVZpChiChiPR(gI1,gI2));
      }
      tmp_8287 += tmp_8288;
   }
   tmp_8286 += tmp_8287;
   result += (0.5) * tmp_8286;
   std::complex<double> tmp_8289;
   std::complex<double> tmp_8290;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8290 += AbsSqr(CpVZpconjVWmHpm(gI2))*B0(p,MVWm,MHpm(gI2));
   }
   tmp_8289 += tmp_8290;
   result += (2) * tmp_8289;
   std::complex<double> tmp_8291;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_8291 += AbsSqr(CpVZpVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_8291;
   std::complex<double> tmp_8292;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_8292 += AbsSqr(CpVZpVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_8292;
   result += -(AbsSqr(CpVZpconjVWmVWm())*(2*A0(MVWm) + 10*B00(p,MVWm,MVWm) + B0
      (p,MVWm,MVWm)*(2*Sqr(MVWm) + 4*Sqr(p))));
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZpbarChaPChaPPL())*
      CpVZpbarChaPChaPPR())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_VWm(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbargPgWm())*B00(p,MVWm,MVP);
   result += AbsSqr(CpconjVWmbargWmCgP())*B00(p,MVP,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZ())*B00(p,MVZ,MVWm);
   result += AbsSqr(CpconjVWmbargWmCgZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbargZgWm())*B00(p,MVWm,MVZ);
   result += AbsSqr(CpconjVWmbargZpgWm())*B00(p,MVWm,MVZp);
   result += -(A0(MVWm)*(4*CpVWmconjVWmconjVWmVWm1() + CpVWmconjVWmconjVWmVWm2(
      ) + CpVWmconjVWmconjVWmVWm3()));
   result += 0;
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   result += -0.5*A0(MVZ)*(4*CpVWmconjVWmVZVZ1() + CpVWmconjVWmVZVZ2() +
      CpVWmconjVWmVZVZ3());
   std::complex<double> tmp_8293;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8293 += A0(MHpm(gI1))*CpVWmconjVWmconjHpmHpm(gI1,gI1);
   }
   result += tmp_8293;
   std::complex<double> tmp_8294;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8294 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_8294;
   std::complex<double> tmp_8295;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8295 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_8295;
   std::complex<double> tmp_8296;
   std::complex<double> tmp_8297;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8298;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8298 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_8297 += tmp_8298;
   }
   tmp_8296 += tmp_8297;
   result += (-4) * tmp_8296;
   std::complex<double> tmp_8299;
   std::complex<double> tmp_8300;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8301;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8301 += AbsSqr(CpconjVWmHpmAh(gI1,gI2))*B00(p,MAh(gI2),MHpm(
            gI1));
      }
      tmp_8300 += tmp_8301;
   }
   tmp_8299 += tmp_8300;
   result += (-4) * tmp_8299;
   std::complex<double> tmp_8302;
   std::complex<double> tmp_8303;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8304;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8304 += AbsSqr(CpconjVWmHpmhh(gI1,gI2))*B00(p,Mhh(gI2),MHpm(
            gI1));
      }
      tmp_8303 += tmp_8304;
   }
   tmp_8302 += tmp_8303;
   result += (-4) * tmp_8302;
   std::complex<double> tmp_8305;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8305 += (AbsSqr(CpconjVWmChiPChaPPL(gI1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1)))*H0(p,MChiP(gI1),MChaP);
      tmp_8305 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1))*CpconjVWmChiPChaPPR(gI1));
   }
   result += tmp_8305;
   std::complex<double> tmp_8306;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_8306 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_8306;
   std::complex<double> tmp_8307;
   std::complex<double> tmp_8308;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8309;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8309 += (AbsSqr(CpconjVWmbarFuFdPL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFuFdPR(gI1,gI2)))*H0(p,MFu(gI1),MFd(gI2));
         tmp_8309 += 4*B0(p,MFu(gI1),MFd(gI2))*MFd(gI2)*MFu(gI1)*Re(Conj(
            CpconjVWmbarFuFdPL(gI1,gI2))*CpconjVWmbarFuFdPR(gI1,gI2));
      }
      tmp_8308 += tmp_8309;
   }
   tmp_8307 += tmp_8308;
   result += (3) * tmp_8307;
   std::complex<double> tmp_8310;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8311;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8311 += (AbsSqr(CpconjVWmbarFvFePL(gI1,gI2)) + AbsSqr(
            CpconjVWmbarFvFePR(gI1,gI2)))*H0(p,MFv(gI1),MFe(gI2));
         tmp_8311 += 4*B0(p,MFv(gI1),MFe(gI2))*MFe(gI2)*MFv(gI1)*Re(Conj(
            CpconjVWmbarFvFePL(gI1,gI2))*CpconjVWmbarFvFePR(gI1,gI2));
      }
      tmp_8310 += tmp_8311;
   }
   result += tmp_8310;
   std::complex<double> tmp_8312;
   std::complex<double> tmp_8313;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8314;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8314 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_8313 += tmp_8314;
   }
   tmp_8312 += tmp_8313;
   result += (-4) * tmp_8312;
   std::complex<double> tmp_8315;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_8315 += A0(MSHIPM(gI1))*CpVWmconjVWmconjSHIPMSHIPM(gI1,gI1);
   }
   result += tmp_8315;
   std::complex<double> tmp_8316;
   std::complex<double> tmp_8317;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8317 += A0(MAh(gI1))*CpVWmconjVWmAhAh(gI1,gI1);
   }
   tmp_8316 += tmp_8317;
   result += (0.5) * tmp_8316;
   std::complex<double> tmp_8318;
   std::complex<double> tmp_8319;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_8319 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_8318 += tmp_8319;
   result += (0.5) * tmp_8318;
   std::complex<double> tmp_8320;
   std::complex<double> tmp_8321;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8321 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_8320 += tmp_8321;
   result += (3) * tmp_8320;
   std::complex<double> tmp_8322;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8322 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_8322;
   std::complex<double> tmp_8323;
   std::complex<double> tmp_8324;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8324 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_8323 += tmp_8324;
   result += (3) * tmp_8323;
   std::complex<double> tmp_8325;
   std::complex<double> tmp_8326;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8327;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8327 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_8326 += tmp_8327;
   }
   tmp_8325 += tmp_8326;
   result += (-12) * tmp_8325;
   std::complex<double> tmp_8328;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8328 += A0(MSHI0(gI1))*CpVWmconjVWmconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_8328;
   std::complex<double> tmp_8329;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8330;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8330 += (AbsSqr(CpconjVWmChiIChaIPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiIChaIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChaI(gI2));
         tmp_8330 += 4*B0(p,MChiI(gI1),MChaI(gI2))*MChaI(gI2)*MChiI(gI1)*
            Re(Conj(CpconjVWmChiIChaIPL(gI1,gI2))*CpconjVWmChiIChaIPR(gI1,gI2));
      }
      tmp_8329 += tmp_8330;
   }
   result += tmp_8329;
   std::complex<double> tmp_8331;
   std::complex<double> tmp_8332;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8333;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_8333 += AbsSqr(CpconjVWmconjSHI0SHIPM(gI1,gI2))*B00(p,MSHIPM
            (gI2),MSHI0(gI1));
      }
      tmp_8332 += tmp_8333;
   }
   tmp_8331 += tmp_8332;
   result += (-4) * tmp_8331;
   std::complex<double> tmp_8334;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8335;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8335 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_8335 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_8334 += tmp_8335;
   }
   result += tmp_8334;
   std::complex<double> tmp_8336;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8336 += AbsSqr(CpconjVWmVPHpm(gI2))*B0(p,0,MHpm(gI2));
   }
   result += tmp_8336;
   std::complex<double> tmp_8337;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8337 += AbsSqr(CpconjVWmVZHpm(gI2))*B0(p,MVZ,MHpm(gI2));
   }
   result += tmp_8337;
   std::complex<double> tmp_8338;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8338 += AbsSqr(CpconjVWmVZpHpm(gI2))*B0(p,MVZp,MHpm(gI2));
   }
   result += tmp_8338;
   std::complex<double> tmp_8339;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_8339 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_8339;
   result += -(AbsSqr(CpconjVWmVWmVP())*(A0(MVWm) + 10*B00(p,MVWm,0) + B0(p,
      MVWm,0)*(Sqr(MVWm) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZVWm())*(A0(MVWm) + A0(MVZ) + 10*B00(p,MVZ,MVWm
      ) + B0(p,MVZ,MVWm)*(Sqr(MVWm) + Sqr(MVZ) + 4*Sqr(p))));
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Chi_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8340;
   std::complex<double> tmp_8341;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8342;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8342 += B0(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_8341 += tmp_8342;
   }
   tmp_8340 += tmp_8341;
   result += (2) * tmp_8340;
   std::complex<double> tmp_8343;
   std::complex<double> tmp_8344;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8345;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8345 += B0(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2)*
            MChiP(gI2);
      }
      tmp_8344 += tmp_8345;
   }
   tmp_8343 += tmp_8344;
   result += (2) * tmp_8343;
   std::complex<double> tmp_8346;
   std::complex<double> tmp_8347;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8348;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8348 += B0(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_8347 += tmp_8348;
   }
   tmp_8346 += tmp_8347;
   result += (2) * tmp_8346;
   std::complex<double> tmp_8349;
   std::complex<double> tmp_8350;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8351;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8351 += B0(p,MChaI(gI2),MSHIPM(gI1))*Conj(
            CpUChiconjSHIPMChaIPL(gO2,gI1,gI2))*CpUChiconjSHIPMChaIPR(gO1,gI1,gI2)
            *MChaI(gI2);
      }
      tmp_8350 += tmp_8351;
   }
   tmp_8349 += tmp_8350;
   result += (2) * tmp_8349;
   std::complex<double> tmp_8352;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8353;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8353 += B0(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8352 += tmp_8353;
   }
   result += tmp_8352;
   std::complex<double> tmp_8354;
   std::complex<double> tmp_8355;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8356;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8356 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_8355 += tmp_8356;
   }
   tmp_8354 += tmp_8355;
   result += (6) * tmp_8354;
   std::complex<double> tmp_8357;
   std::complex<double> tmp_8358;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8359;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8359 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_8358 += tmp_8359;
   }
   tmp_8357 += tmp_8358;
   result += (6) * tmp_8357;
   std::complex<double> tmp_8360;
   std::complex<double> tmp_8361;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8362;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8362 += B0(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_8361 += tmp_8362;
   }
   tmp_8360 += tmp_8361;
   result += (2) * tmp_8360;
   std::complex<double> tmp_8363;
   std::complex<double> tmp_8364;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8365;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8365 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_8364 += tmp_8365;
   }
   tmp_8363 += tmp_8364;
   result += (6) * tmp_8363;
   std::complex<double> tmp_8366;
   std::complex<double> tmp_8367;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8368;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8368 += B0(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPL(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPR(gO1,gI1,gI2)*
            MChiI(gI2);
      }
      tmp_8367 += tmp_8368;
   }
   tmp_8366 += tmp_8367;
   result += (2) * tmp_8366;
   std::complex<double> tmp_8369;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8370;
      std::complex<double> tmp_8371;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8371 += B0(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_8370 += tmp_8371;
      tmp_8369 += (MChi(gI1)) * tmp_8370;
   }
   result += tmp_8369;
   std::complex<double> tmp_8372;
   std::complex<double> tmp_8373;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8373 += B0(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_8372 += tmp_8373;
   result += (-8) * tmp_8372;
   std::complex<double> tmp_8374;
   std::complex<double> tmp_8375;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8375 += B0(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_8374 += tmp_8375;
   result += (-4) * tmp_8374;
   std::complex<double> tmp_8376;
   std::complex<double> tmp_8377;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8377 += B0(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_8376 += tmp_8377;
   result += (-4) * tmp_8376;
   std::complex<double> tmp_8378;
   std::complex<double> tmp_8379;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8379 += B0(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1))
         *CpUChiconjSHppChaPPR(gO1,gI1);
   }
   tmp_8378 += tmp_8379;
   result += (2*MChaP) * tmp_8378;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Chi_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8380;
   std::complex<double> tmp_8381;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8381 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPR(gO2,gI1))
         *CpUChiconjSHppChaPPR(gO1,gI1);
   }
   tmp_8380 += tmp_8381;
   result += (-1) * tmp_8380;
   std::complex<double> tmp_8382;
   std::complex<double> tmp_8383;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8384;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8384 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPR(
            gO2,gI1,gI2))*CpUChiconjHpmChaPR(gO1,gI1,gI2);
      }
      tmp_8383 += tmp_8384;
   }
   tmp_8382 += tmp_8383;
   result += (-1) * tmp_8382;
   std::complex<double> tmp_8385;
   std::complex<double> tmp_8386;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8387;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8387 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPR(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPR(gO1,gI1,gI2);
      }
      tmp_8386 += tmp_8387;
   }
   tmp_8385 += tmp_8386;
   result += (-1) * tmp_8385;
   std::complex<double> tmp_8388;
   std::complex<double> tmp_8389;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8390;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8390 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPR(gO2,
            gI1,gI2))*CpUChiconjSvFvPR(gO1,gI1,gI2);
      }
      tmp_8389 += tmp_8390;
   }
   tmp_8388 += tmp_8389;
   result += (-1) * tmp_8388;
   std::complex<double> tmp_8391;
   std::complex<double> tmp_8392;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8393;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8393 += B1(p,MChaI(gI2),MSHIPM(gI1))*Conj(
            CpUChiconjSHIPMChaIPR(gO2,gI1,gI2))*CpUChiconjSHIPMChaIPR(gO1,gI1,gI2)
            ;
      }
      tmp_8392 += tmp_8393;
   }
   tmp_8391 += tmp_8392;
   result += (-1) * tmp_8391;
   std::complex<double> tmp_8394;
   std::complex<double> tmp_8395;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8396;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8396 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPR(gO2,gI1,
            gI2))*CpUChihhChiPR(gO1,gI1,gI2);
      }
      tmp_8395 += tmp_8396;
   }
   tmp_8394 += tmp_8395;
   result += (-0.5) * tmp_8394;
   std::complex<double> tmp_8397;
   std::complex<double> tmp_8398;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8399;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8399 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPR(gO2,
            gI1,gI2))*CpUChiconjSdFdPR(gO1,gI1,gI2);
      }
      tmp_8398 += tmp_8399;
   }
   tmp_8397 += tmp_8398;
   result += (-3) * tmp_8397;
   std::complex<double> tmp_8400;
   std::complex<double> tmp_8401;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8402;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8402 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPR(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPR(gO1,gI1,gI2);
      }
      tmp_8401 += tmp_8402;
   }
   tmp_8400 += tmp_8401;
   result += (-3) * tmp_8400;
   std::complex<double> tmp_8403;
   std::complex<double> tmp_8404;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8405;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8405 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePR(gO2,
            gI1,gI2))*CpUChiconjSeFePR(gO1,gI1,gI2);
      }
      tmp_8404 += tmp_8405;
   }
   tmp_8403 += tmp_8404;
   result += (-1) * tmp_8403;
   std::complex<double> tmp_8406;
   std::complex<double> tmp_8407;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8408;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8408 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPR(gO2,
            gI1,gI2))*CpUChiconjSuFuPR(gO1,gI1,gI2);
      }
      tmp_8407 += tmp_8408;
   }
   tmp_8406 += tmp_8407;
   result += (-3) * tmp_8406;
   std::complex<double> tmp_8409;
   std::complex<double> tmp_8410;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8411;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8411 += B1(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPR(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPR(gO1,gI1,gI2);
      }
      tmp_8410 += tmp_8411;
   }
   tmp_8409 += tmp_8410;
   result += (-1) * tmp_8409;
   std::complex<double> tmp_8412;
   std::complex<double> tmp_8413;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8414;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8414 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPR(gO2,gI1,
            gI2))*CpUChiChiAhPR(gO1,gI1,gI2);
      }
      tmp_8413 += tmp_8414;
   }
   tmp_8412 += tmp_8413;
   result += (-0.5) * tmp_8412;
   std::complex<double> tmp_8415;
   std::complex<double> tmp_8416;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8416 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPL(gO2,gI2))*
         CpUChiconjVWmChaPL(gO1,gI2);
   }
   tmp_8415 += tmp_8416;
   result += (-2) * tmp_8415;
   std::complex<double> tmp_8417;
   std::complex<double> tmp_8418;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8418 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPL(gO2,gI2))*
         CpUChiVZChiPL(gO1,gI2);
   }
   tmp_8417 += tmp_8418;
   result += (-1) * tmp_8417;
   std::complex<double> tmp_8419;
   std::complex<double> tmp_8420;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8420 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPL(gO2,gI2))*
         CpUChiVZpChiPL(gO1,gI2);
   }
   tmp_8419 += tmp_8420;
   result += (-1) * tmp_8419;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Chi_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8421;
   std::complex<double> tmp_8422;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8422 += B1(p,MChaP,MSHpp(gI1))*Conj(CpUChiconjSHppChaPPL(gO2,gI1))
         *CpUChiconjSHppChaPPL(gO1,gI1);
   }
   tmp_8421 += tmp_8422;
   result += (-1) * tmp_8421;
   std::complex<double> tmp_8423;
   std::complex<double> tmp_8424;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8425;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8425 += B1(p,MCha(gI2),MHpm(gI1))*Conj(CpUChiconjHpmChaPL(
            gO2,gI1,gI2))*CpUChiconjHpmChaPL(gO1,gI1,gI2);
      }
      tmp_8424 += tmp_8425;
   }
   tmp_8423 += tmp_8424;
   result += (-1) * tmp_8423;
   std::complex<double> tmp_8426;
   std::complex<double> tmp_8427;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8428;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8428 += B1(p,MChiP(gI2),MSHp0(gI1))*Conj(
            CpUChiconjSHp0ChiPPL(gO2,gI1,gI2))*CpUChiconjSHp0ChiPPL(gO1,gI1,gI2);
      }
      tmp_8427 += tmp_8428;
   }
   tmp_8426 += tmp_8427;
   result += (-1) * tmp_8426;
   std::complex<double> tmp_8429;
   std::complex<double> tmp_8430;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8431;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8431 += B1(p,MFv(gI2),MSv(gI1))*Conj(CpUChiconjSvFvPL(gO2,
            gI1,gI2))*CpUChiconjSvFvPL(gO1,gI1,gI2);
      }
      tmp_8430 += tmp_8431;
   }
   tmp_8429 += tmp_8430;
   result += (-1) * tmp_8429;
   std::complex<double> tmp_8432;
   std::complex<double> tmp_8433;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8434;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8434 += B1(p,MChaI(gI2),MSHIPM(gI1))*Conj(
            CpUChiconjSHIPMChaIPL(gO2,gI1,gI2))*CpUChiconjSHIPMChaIPL(gO1,gI1,gI2)
            ;
      }
      tmp_8433 += tmp_8434;
   }
   tmp_8432 += tmp_8433;
   result += (-1) * tmp_8432;
   std::complex<double> tmp_8435;
   std::complex<double> tmp_8436;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8437;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8437 += B1(p,MChi(gI2),Mhh(gI1))*Conj(CpUChihhChiPL(gO2,gI1,
            gI2))*CpUChihhChiPL(gO1,gI1,gI2);
      }
      tmp_8436 += tmp_8437;
   }
   tmp_8435 += tmp_8436;
   result += (-0.5) * tmp_8435;
   std::complex<double> tmp_8438;
   std::complex<double> tmp_8439;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8440;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8440 += B1(p,MFd(gI2),MSd(gI1))*Conj(CpUChiconjSdFdPL(gO2,
            gI1,gI2))*CpUChiconjSdFdPL(gO1,gI1,gI2);
      }
      tmp_8439 += tmp_8440;
   }
   tmp_8438 += tmp_8439;
   result += (-3) * tmp_8438;
   std::complex<double> tmp_8441;
   std::complex<double> tmp_8442;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8443;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8443 += B1(p,MFDX(gI2),MSDX(gI1))*Conj(CpUChiconjSDXFDXPL(
            gO2,gI1,gI2))*CpUChiconjSDXFDXPL(gO1,gI1,gI2);
      }
      tmp_8442 += tmp_8443;
   }
   tmp_8441 += tmp_8442;
   result += (-3) * tmp_8441;
   std::complex<double> tmp_8444;
   std::complex<double> tmp_8445;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8446;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8446 += B1(p,MFe(gI2),MSe(gI1))*Conj(CpUChiconjSeFePL(gO2,
            gI1,gI2))*CpUChiconjSeFePL(gO1,gI1,gI2);
      }
      tmp_8445 += tmp_8446;
   }
   tmp_8444 += tmp_8445;
   result += (-1) * tmp_8444;
   std::complex<double> tmp_8447;
   std::complex<double> tmp_8448;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8449;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8449 += B1(p,MFu(gI2),MSu(gI1))*Conj(CpUChiconjSuFuPL(gO2,
            gI1,gI2))*CpUChiconjSuFuPL(gO1,gI1,gI2);
      }
      tmp_8448 += tmp_8449;
   }
   tmp_8447 += tmp_8448;
   result += (-3) * tmp_8447;
   std::complex<double> tmp_8450;
   std::complex<double> tmp_8451;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8452;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8452 += B1(p,MChiI(gI2),MSHI0(gI1))*Conj(
            CpUChiconjSHI0ChiIPL(gO2,gI1,gI2))*CpUChiconjSHI0ChiIPL(gO1,gI1,gI2);
      }
      tmp_8451 += tmp_8452;
   }
   tmp_8450 += tmp_8451;
   result += (-1) * tmp_8450;
   std::complex<double> tmp_8453;
   std::complex<double> tmp_8454;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_8455;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8455 += B1(p,MChi(gI1),MAh(gI2))*Conj(CpUChiChiAhPL(gO2,gI1,
            gI2))*CpUChiChiAhPL(gO1,gI1,gI2);
      }
      tmp_8454 += tmp_8455;
   }
   tmp_8453 += tmp_8454;
   result += (-0.5) * tmp_8453;
   std::complex<double> tmp_8456;
   std::complex<double> tmp_8457;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8457 += B1(p,MCha(gI2),MVWm)*Conj(CpUChiconjVWmChaPR(gO2,gI2))*
         CpUChiconjVWmChaPR(gO1,gI2);
   }
   tmp_8456 += tmp_8457;
   result += (-2) * tmp_8456;
   std::complex<double> tmp_8458;
   std::complex<double> tmp_8459;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8459 += B1(p,MChi(gI2),MVZ)*Conj(CpUChiVZChiPR(gO2,gI2))*
         CpUChiVZChiPR(gO1,gI2);
   }
   tmp_8458 += tmp_8459;
   result += (-1) * tmp_8458;
   std::complex<double> tmp_8460;
   std::complex<double> tmp_8461;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8461 += B1(p,MChi(gI2),MVZp)*Conj(CpUChiVZpChiPR(gO2,gI2))*
         CpUChiVZpChiPR(gO1,gI2);
   }
   tmp_8460 += tmp_8461;
   result += (-1) * tmp_8460;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Cha_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8462;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8463;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8463 += B0(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_8462 += tmp_8463;
   }
   result += tmp_8462;
   std::complex<double> tmp_8464;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8465;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8465 += B0(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8464 += tmp_8465;
   }
   result += tmp_8464;
   std::complex<double> tmp_8466;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8467;
      std::complex<double> tmp_8468;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8468 += B0(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_8467 += tmp_8468;
      tmp_8466 += (MCha(gI1)) * tmp_8467;
   }
   result += tmp_8466;
   std::complex<double> tmp_8469;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8470;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8470 += B0(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_8469 += tmp_8470;
   }
   result += tmp_8469;
   std::complex<double> tmp_8471;
   std::complex<double> tmp_8472;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8473;
      std::complex<double> tmp_8474;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8474 += B0(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_8473 += tmp_8474;
      tmp_8472 += (MFu(gI1)) * tmp_8473;
   }
   tmp_8471 += tmp_8472;
   result += (3) * tmp_8471;
   std::complex<double> tmp_8475;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8476;
      std::complex<double> tmp_8477;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8477 += B0(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_8476 += tmp_8477;
      tmp_8475 += (MFv(gI1)) * tmp_8476;
   }
   result += tmp_8475;
   std::complex<double> tmp_8478;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8479;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8479 += B0(p,MChiI(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaSHIPMChiIPL(gO2,gI1,gI2))*CpbarUChaSHIPMChiIPR(gO1,gI1,gI2)*
            MChiI(gI2);
      }
      tmp_8478 += tmp_8479;
   }
   result += tmp_8478;
   std::complex<double> tmp_8480;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8481;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8481 += B0(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_8480 += tmp_8481;
   }
   result += tmp_8480;
   std::complex<double> tmp_8482;
   std::complex<double> tmp_8483;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8484;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8484 += B0(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_8483 += tmp_8484;
   }
   tmp_8482 += tmp_8483;
   result += (3) * tmp_8482;
   std::complex<double> tmp_8485;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8486;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8486 += B0(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPL(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPR(gO1,gI1,
            gI2)*MChaI(gI2);
      }
      tmp_8485 += tmp_8486;
   }
   result += tmp_8485;
   std::complex<double> tmp_8487;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8488;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8488 += B0(p,MChaI(gI2),MSHI0(gI1))*Conj(CpbarUChaSHI0ChaIPL
            (gO2,gI1,gI2))*CpbarUChaSHI0ChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_8487 += tmp_8488;
   }
   result += tmp_8487;
   std::complex<double> tmp_8489;
   std::complex<double> tmp_8490;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8490 += B0(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_8489 += tmp_8490;
   result += (-4) * tmp_8489;
   std::complex<double> tmp_8491;
   std::complex<double> tmp_8492;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8492 += B0(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_8491 += tmp_8492;
   result += (-4) * tmp_8491;
   std::complex<double> tmp_8493;
   std::complex<double> tmp_8494;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8494 += B0(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2)*MCha(gI2);
   }
   tmp_8493 += tmp_8494;
   result += (-4) * tmp_8493;
   std::complex<double> tmp_8495;
   std::complex<double> tmp_8496;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8496 += B0(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2)*MChi(gI2);
   }
   tmp_8495 += tmp_8496;
   result += (-4) * tmp_8495;
   std::complex<double> tmp_8497;
   std::complex<double> tmp_8498;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8498 += B0(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1);
   }
   tmp_8497 += tmp_8498;
   result += (MChaP) * tmp_8497;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Cha_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8499;
   std::complex<double> tmp_8500;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8500 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPR(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPR(gO1,gI1);
   }
   tmp_8499 += tmp_8500;
   result += (-0.5) * tmp_8499;
   std::complex<double> tmp_8501;
   std::complex<double> tmp_8502;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8503;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8503 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPR
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPR(gO1,gI1,gI2);
      }
      tmp_8502 += tmp_8503;
   }
   tmp_8501 += tmp_8502;
   result += (-0.5) * tmp_8501;
   std::complex<double> tmp_8504;
   std::complex<double> tmp_8505;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8506;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8506 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPR(gO2,
            gI1,gI2))*CpbarUChaChaAhPR(gO1,gI1,gI2);
      }
      tmp_8505 += tmp_8506;
   }
   tmp_8504 += tmp_8505;
   result += (-0.5) * tmp_8504;
   std::complex<double> tmp_8507;
   std::complex<double> tmp_8508;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8509;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8509 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPR(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPR(gO1,gI1,gI2);
      }
      tmp_8508 += tmp_8509;
   }
   tmp_8507 += tmp_8508;
   result += (-0.5) * tmp_8507;
   std::complex<double> tmp_8510;
   std::complex<double> tmp_8511;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8512;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8512 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePR(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePR(gO1,gI1,gI2);
      }
      tmp_8511 += tmp_8512;
   }
   tmp_8510 += tmp_8511;
   result += (-0.5) * tmp_8510;
   std::complex<double> tmp_8513;
   std::complex<double> tmp_8514;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8515;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8515 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPR(gO2,
            gI1,gI2))*CpbarUChabarFuSdPR(gO1,gI1,gI2);
      }
      tmp_8514 += tmp_8515;
   }
   tmp_8513 += tmp_8514;
   result += (-1.5) * tmp_8513;
   std::complex<double> tmp_8516;
   std::complex<double> tmp_8517;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8518;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8518 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePR(gO2,
            gI1,gI2))*CpbarUChabarFvSePR(gO1,gI1,gI2);
      }
      tmp_8517 += tmp_8518;
   }
   tmp_8516 += tmp_8517;
   result += (-0.5) * tmp_8516;
   std::complex<double> tmp_8519;
   std::complex<double> tmp_8520;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8521;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8521 += B1(p,MChiI(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaSHIPMChiIPR(gO2,gI1,gI2))*CpbarUChaSHIPMChiIPR(gO1,gI1,gI2);
      }
      tmp_8520 += tmp_8521;
   }
   tmp_8519 += tmp_8520;
   result += (-0.5) * tmp_8519;
   std::complex<double> tmp_8522;
   std::complex<double> tmp_8523;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8524;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8524 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPR(gO2,
            gI1,gI2))*CpbarUChahhChaPR(gO1,gI1,gI2);
      }
      tmp_8523 += tmp_8524;
   }
   tmp_8522 += tmp_8523;
   result += (-0.5) * tmp_8522;
   std::complex<double> tmp_8525;
   std::complex<double> tmp_8526;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8527;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8527 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPR(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPR(gO1,gI1,gI2);
      }
      tmp_8526 += tmp_8527;
   }
   tmp_8525 += tmp_8526;
   result += (-1.5) * tmp_8525;
   std::complex<double> tmp_8528;
   std::complex<double> tmp_8529;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8530;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8530 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPR(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPR(gO1,gI1,
            gI2);
      }
      tmp_8529 += tmp_8530;
   }
   tmp_8528 += tmp_8529;
   result += (-0.5) * tmp_8528;
   std::complex<double> tmp_8531;
   std::complex<double> tmp_8532;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8533;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8533 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(CpbarUChaSHI0ChaIPR
            (gO2,gI1,gI2))*CpbarUChaSHI0ChaIPR(gO1,gI1,gI2);
      }
      tmp_8532 += tmp_8533;
   }
   tmp_8531 += tmp_8532;
   result += (-0.5) * tmp_8531;
   std::complex<double> tmp_8534;
   std::complex<double> tmp_8535;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8535 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPL(gO2,gI2))*
         CpbarUChaVPChaPL(gO1,gI2);
   }
   tmp_8534 += tmp_8535;
   result += (-1) * tmp_8534;
   std::complex<double> tmp_8536;
   std::complex<double> tmp_8537;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8537 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPL(gO2,gI2))*
         CpbarUChaVZChaPL(gO1,gI2);
   }
   tmp_8536 += tmp_8537;
   result += (-1) * tmp_8536;
   std::complex<double> tmp_8538;
   std::complex<double> tmp_8539;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8539 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPL(gO2,gI2))*
         CpbarUChaVZpChaPL(gO1,gI2);
   }
   tmp_8538 += tmp_8539;
   result += (-1) * tmp_8538;
   std::complex<double> tmp_8540;
   std::complex<double> tmp_8541;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8541 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPL(gO2,gI2))*
         CpbarUChaVWmChiPL(gO1,gI2);
   }
   tmp_8540 += tmp_8541;
   result += (-1) * tmp_8540;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Cha_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8542;
   std::complex<double> tmp_8543;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_8543 += B1(p,MChaP,MSHp0(gI1))*Conj(CpbarUChaconjSHp0ChaPPL(gO2,
         gI1))*CpbarUChaconjSHp0ChaPPL(gO1,gI1);
   }
   tmp_8542 += tmp_8543;
   result += (-0.5) * tmp_8542;
   std::complex<double> tmp_8544;
   std::complex<double> tmp_8545;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8546;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8546 += B1(p,MChiP(gI2),MSHpp(gI1))*Conj(CpbarUChaSHppChiPPL
            (gO2,gI1,gI2))*CpbarUChaSHppChiPPL(gO1,gI1,gI2);
      }
      tmp_8545 += tmp_8546;
   }
   tmp_8544 += tmp_8545;
   result += (-0.5) * tmp_8544;
   std::complex<double> tmp_8547;
   std::complex<double> tmp_8548;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8549;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8549 += B1(p,MCha(gI1),MAh(gI2))*Conj(CpbarUChaChaAhPL(gO2,
            gI1,gI2))*CpbarUChaChaAhPL(gO1,gI1,gI2);
      }
      tmp_8548 += tmp_8549;
   }
   tmp_8547 += tmp_8548;
   result += (-0.5) * tmp_8547;
   std::complex<double> tmp_8550;
   std::complex<double> tmp_8551;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8552;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8552 += B1(p,MChi(gI2),MHpm(gI1))*Conj(CpbarUChaHpmChiPL(gO2
            ,gI1,gI2))*CpbarUChaHpmChiPL(gO1,gI1,gI2);
      }
      tmp_8551 += tmp_8552;
   }
   tmp_8550 += tmp_8551;
   result += (-0.5) * tmp_8550;
   std::complex<double> tmp_8553;
   std::complex<double> tmp_8554;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8555;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8555 += B1(p,MFe(gI2),MSv(gI1))*Conj(CpbarUChaconjSvFePL(gO2
            ,gI1,gI2))*CpbarUChaconjSvFePL(gO1,gI1,gI2);
      }
      tmp_8554 += tmp_8555;
   }
   tmp_8553 += tmp_8554;
   result += (-0.5) * tmp_8553;
   std::complex<double> tmp_8556;
   std::complex<double> tmp_8557;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8558;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8558 += B1(p,MFu(gI1),MSd(gI2))*Conj(CpbarUChabarFuSdPL(gO2,
            gI1,gI2))*CpbarUChabarFuSdPL(gO1,gI1,gI2);
      }
      tmp_8557 += tmp_8558;
   }
   tmp_8556 += tmp_8557;
   result += (-1.5) * tmp_8556;
   std::complex<double> tmp_8559;
   std::complex<double> tmp_8560;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8561;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8561 += B1(p,MFv(gI1),MSe(gI2))*Conj(CpbarUChabarFvSePL(gO2,
            gI1,gI2))*CpbarUChabarFvSePL(gO1,gI1,gI2);
      }
      tmp_8560 += tmp_8561;
   }
   tmp_8559 += tmp_8560;
   result += (-0.5) * tmp_8559;
   std::complex<double> tmp_8562;
   std::complex<double> tmp_8563;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8564;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8564 += B1(p,MChiI(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaSHIPMChiIPL(gO2,gI1,gI2))*CpbarUChaSHIPMChiIPL(gO1,gI1,gI2);
      }
      tmp_8563 += tmp_8564;
   }
   tmp_8562 += tmp_8563;
   result += (-0.5) * tmp_8562;
   std::complex<double> tmp_8565;
   std::complex<double> tmp_8566;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8567;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8567 += B1(p,MCha(gI2),Mhh(gI1))*Conj(CpbarUChahhChaPL(gO2,
            gI1,gI2))*CpbarUChahhChaPL(gO1,gI1,gI2);
      }
      tmp_8566 += tmp_8567;
   }
   tmp_8565 += tmp_8566;
   result += (-0.5) * tmp_8565;
   std::complex<double> tmp_8568;
   std::complex<double> tmp_8569;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8570;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8570 += B1(p,MFd(gI2),MSu(gI1))*Conj(CpbarUChaconjSuFdPL(gO2
            ,gI1,gI2))*CpbarUChaconjSuFdPL(gO1,gI1,gI2);
      }
      tmp_8569 += tmp_8570;
   }
   tmp_8568 += tmp_8569;
   result += (-1.5) * tmp_8568;
   std::complex<double> tmp_8571;
   std::complex<double> tmp_8572;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8573;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8573 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(
            CpbarUChaconjSHI0ChaIPL(gO2,gI1,gI2))*CpbarUChaconjSHI0ChaIPL(gO1,gI1,
            gI2);
      }
      tmp_8572 += tmp_8573;
   }
   tmp_8571 += tmp_8572;
   result += (-0.5) * tmp_8571;
   std::complex<double> tmp_8574;
   std::complex<double> tmp_8575;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8576;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8576 += B1(p,MChaI(gI2),MSHI0(gI1))*Conj(CpbarUChaSHI0ChaIPL
            (gO2,gI1,gI2))*CpbarUChaSHI0ChaIPL(gO1,gI1,gI2);
      }
      tmp_8575 += tmp_8576;
   }
   tmp_8574 += tmp_8575;
   result += (-0.5) * tmp_8574;
   std::complex<double> tmp_8577;
   std::complex<double> tmp_8578;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8578 += B1(p,MCha(gI2),0)*Conj(CpbarUChaVPChaPR(gO2,gI2))*
         CpbarUChaVPChaPR(gO1,gI2);
   }
   tmp_8577 += tmp_8578;
   result += (-1) * tmp_8577;
   std::complex<double> tmp_8579;
   std::complex<double> tmp_8580;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8580 += B1(p,MCha(gI2),MVZ)*Conj(CpbarUChaVZChaPR(gO2,gI2))*
         CpbarUChaVZChaPR(gO1,gI2);
   }
   tmp_8579 += tmp_8580;
   result += (-1) * tmp_8579;
   std::complex<double> tmp_8581;
   std::complex<double> tmp_8582;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8582 += B1(p,MCha(gI2),MVZp)*Conj(CpbarUChaVZpChaPR(gO2,gI2))*
         CpbarUChaVZpChaPR(gO1,gI2);
   }
   tmp_8581 += tmp_8582;
   result += (-1) * tmp_8581;
   std::complex<double> tmp_8583;
   std::complex<double> tmp_8584;
   for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
      tmp_8584 += B1(p,MChi(gI2),MVWm)*Conj(CpbarUChaVWmChiPR(gO2,gI2))*
         CpbarUChaVWmChiPR(gO1,gI2);
   }
   tmp_8583 += tmp_8584;
   result += (-1) * tmp_8583;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8585;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8586;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8586 += B0(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarUFeSHp0ChaIPL(
            gO2,gI1,gI2))*CpbarUFeSHp0ChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_8585 += tmp_8586;
   }
   result += tmp_8585;
   std::complex<double> tmp_8587;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8588;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8588 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_8587 += tmp_8588;
   }
   result += tmp_8587;
   std::complex<double> tmp_8589;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8590;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8590 += B0(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarUFeSHppChiIPL(
            gO2,gI1,gI2))*CpbarUFeSHppChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_8589 += tmp_8590;
   }
   result += tmp_8589;
   std::complex<double> tmp_8591;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8592;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8592 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_8591 += tmp_8592;
   }
   result += tmp_8591;
   std::complex<double> tmp_8593;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8594;
      std::complex<double> tmp_8595;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8595 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_8594 += tmp_8595;
      tmp_8593 += (MFe(gI1)) * tmp_8594;
   }
   result += tmp_8593;
   std::complex<double> tmp_8596;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8597;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8597 += B0(p,MChiP(gI2),MSHIPM(gI1))*Conj(
            CpbarUFeSHIPMChiPPL(gO2,gI1,gI2))*CpbarUFeSHIPMChiPPR(gO1,gI1,gI2)*
            MChiP(gI2);
      }
      tmp_8596 += tmp_8597;
   }
   result += tmp_8596;
   std::complex<double> tmp_8598;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8599;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8599 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_8598 += tmp_8599;
   }
   result += tmp_8598;
   std::complex<double> tmp_8600;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8601;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8601 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8600 += tmp_8601;
   }
   result += tmp_8600;
   std::complex<double> tmp_8602;
   std::complex<double> tmp_8603;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8603 += B0(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_8602 += tmp_8603;
   result += (-4) * tmp_8602;
   std::complex<double> tmp_8604;
   std::complex<double> tmp_8605;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8605 += B0(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_8604 += tmp_8605;
   result += (-4) * tmp_8604;
   std::complex<double> tmp_8606;
   std::complex<double> tmp_8607;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8607 += B0(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_8606 += tmp_8607;
   result += (-4) * tmp_8606;
   std::complex<double> tmp_8608;
   std::complex<double> tmp_8609;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8609 += B0(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_8608 += tmp_8609;
   result += (-4) * tmp_8608;
   std::complex<double> tmp_8610;
   std::complex<double> tmp_8611;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8611 += B0(p,MChaP,MSHI0(gI1))*Conj(CpbarUFeSHI0ChaPPL(gO2,gI1))*
         CpbarUFeSHI0ChaPPR(gO1,gI1);
   }
   tmp_8610 += tmp_8611;
   result += (MChaP) * tmp_8610;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8612;
   std::complex<double> tmp_8613;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8614;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8614 += B1(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarUFeSHp0ChaIPR(
            gO2,gI1,gI2))*CpbarUFeSHp0ChaIPR(gO1,gI1,gI2);
      }
      tmp_8613 += tmp_8614;
   }
   tmp_8612 += tmp_8613;
   result += (-0.5) * tmp_8612;
   std::complex<double> tmp_8615;
   std::complex<double> tmp_8616;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8617;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8617 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPR(gO2,
            gI1,gI2))*CpbarUFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_8616 += tmp_8617;
   }
   tmp_8615 += tmp_8616;
   result += (-0.5) * tmp_8615;
   std::complex<double> tmp_8618;
   std::complex<double> tmp_8619;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8620;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8620 += B1(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarUFeSHppChiIPR(
            gO2,gI1,gI2))*CpbarUFeSHppChiIPR(gO1,gI1,gI2);
      }
      tmp_8619 += tmp_8620;
   }
   tmp_8618 += tmp_8619;
   result += (-0.5) * tmp_8618;
   std::complex<double> tmp_8621;
   std::complex<double> tmp_8622;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8623;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8623 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPR(gO2,
            gI1,gI2))*CpbarUFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_8622 += tmp_8623;
   }
   tmp_8621 += tmp_8622;
   result += (-0.5) * tmp_8621;
   std::complex<double> tmp_8624;
   std::complex<double> tmp_8625;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8626;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8626 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPR(gO2,gI1,
            gI2))*CpbarUFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_8625 += tmp_8626;
   }
   tmp_8624 += tmp_8625;
   result += (-0.5) * tmp_8624;
   std::complex<double> tmp_8627;
   std::complex<double> tmp_8628;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8629;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8629 += B1(p,MChiP(gI2),MSHIPM(gI1))*Conj(
            CpbarUFeSHIPMChiPPR(gO2,gI1,gI2))*CpbarUFeSHIPMChiPPR(gO1,gI1,gI2);
      }
      tmp_8628 += tmp_8629;
   }
   tmp_8627 += tmp_8628;
   result += (-0.5) * tmp_8627;
   std::complex<double> tmp_8630;
   std::complex<double> tmp_8631;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8632;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8632 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePR(gO2,gI1,
            gI2))*CpbarUFehhFePR(gO1,gI1,gI2);
      }
      tmp_8631 += tmp_8632;
   }
   tmp_8630 += tmp_8631;
   result += (-0.5) * tmp_8630;
   std::complex<double> tmp_8633;
   std::complex<double> tmp_8634;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8635;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8635 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPR(gO2,
            gI1,gI2))*CpbarUFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_8634 += tmp_8635;
   }
   tmp_8633 += tmp_8634;
   result += (-0.5) * tmp_8633;
   std::complex<double> tmp_8636;
   std::complex<double> tmp_8637;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8637 += B1(p,MChaP,MSHI0(gI1))*Conj(CpbarUFeSHI0ChaPPR(gO2,gI1))*
         CpbarUFeSHI0ChaPPR(gO1,gI1);
   }
   tmp_8636 += tmp_8637;
   result += (-0.5) * tmp_8636;
   std::complex<double> tmp_8638;
   std::complex<double> tmp_8639;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8639 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePL(gO2,gI2))*
         CpbarUFeVPFePL(gO1,gI2);
   }
   tmp_8638 += tmp_8639;
   result += (-1) * tmp_8638;
   std::complex<double> tmp_8640;
   std::complex<double> tmp_8641;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8641 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPL(gO2,gI2))*
         CpbarUFeVWmFvPL(gO1,gI2);
   }
   tmp_8640 += tmp_8641;
   result += (-1) * tmp_8640;
   std::complex<double> tmp_8642;
   std::complex<double> tmp_8643;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8643 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePL(gO2,gI2))*
         CpbarUFeVZFePL(gO1,gI2);
   }
   tmp_8642 += tmp_8643;
   result += (-1) * tmp_8642;
   std::complex<double> tmp_8644;
   std::complex<double> tmp_8645;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8645 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePL(gO2,gI2))*
         CpbarUFeVZpFePL(gO1,gI2);
   }
   tmp_8644 += tmp_8645;
   result += (-1) * tmp_8644;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8646;
   std::complex<double> tmp_8647;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8648;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8648 += B1(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarUFeSHp0ChaIPL(
            gO2,gI1,gI2))*CpbarUFeSHp0ChaIPL(gO1,gI1,gI2);
      }
      tmp_8647 += tmp_8648;
   }
   tmp_8646 += tmp_8647;
   result += (-0.5) * tmp_8646;
   std::complex<double> tmp_8649;
   std::complex<double> tmp_8650;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8651;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8651 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarUFeHpmFvPL(gO2,
            gI1,gI2))*CpbarUFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_8650 += tmp_8651;
   }
   tmp_8649 += tmp_8650;
   result += (-0.5) * tmp_8649;
   std::complex<double> tmp_8652;
   std::complex<double> tmp_8653;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8654;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8654 += B1(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarUFeSHppChiIPL(
            gO2,gI1,gI2))*CpbarUFeSHppChiIPL(gO1,gI1,gI2);
      }
      tmp_8653 += tmp_8654;
   }
   tmp_8652 += tmp_8653;
   result += (-0.5) * tmp_8652;
   std::complex<double> tmp_8655;
   std::complex<double> tmp_8656;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8657;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8657 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarUFeSvChaPL(gO2,
            gI1,gI2))*CpbarUFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_8656 += tmp_8657;
   }
   tmp_8655 += tmp_8656;
   result += (-0.5) * tmp_8655;
   std::complex<double> tmp_8658;
   std::complex<double> tmp_8659;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8660;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8660 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarUFeFeAhPL(gO2,gI1,
            gI2))*CpbarUFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_8659 += tmp_8660;
   }
   tmp_8658 += tmp_8659;
   result += (-0.5) * tmp_8658;
   std::complex<double> tmp_8661;
   std::complex<double> tmp_8662;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8663;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8663 += B1(p,MChiP(gI2),MSHIPM(gI1))*Conj(
            CpbarUFeSHIPMChiPPL(gO2,gI1,gI2))*CpbarUFeSHIPMChiPPL(gO1,gI1,gI2);
      }
      tmp_8662 += tmp_8663;
   }
   tmp_8661 += tmp_8662;
   result += (-0.5) * tmp_8661;
   std::complex<double> tmp_8664;
   std::complex<double> tmp_8665;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8666;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8666 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarUFehhFePL(gO2,gI1,
            gI2))*CpbarUFehhFePL(gO1,gI1,gI2);
      }
      tmp_8665 += tmp_8666;
   }
   tmp_8664 += tmp_8665;
   result += (-0.5) * tmp_8664;
   std::complex<double> tmp_8667;
   std::complex<double> tmp_8668;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8669;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8669 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarUFeSeChiPL(gO2,
            gI1,gI2))*CpbarUFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_8668 += tmp_8669;
   }
   tmp_8667 += tmp_8668;
   result += (-0.5) * tmp_8667;
   std::complex<double> tmp_8670;
   std::complex<double> tmp_8671;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_8671 += B1(p,MChaP,MSHI0(gI1))*Conj(CpbarUFeSHI0ChaPPL(gO2,gI1))*
         CpbarUFeSHI0ChaPPL(gO1,gI1);
   }
   tmp_8670 += tmp_8671;
   result += (-0.5) * tmp_8670;
   std::complex<double> tmp_8672;
   std::complex<double> tmp_8673;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8673 += B1(p,MFe(gI2),0)*Conj(CpbarUFeVPFePR(gO2,gI2))*
         CpbarUFeVPFePR(gO1,gI2);
   }
   tmp_8672 += tmp_8673;
   result += (-1) * tmp_8672;
   std::complex<double> tmp_8674;
   std::complex<double> tmp_8675;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8675 += B1(p,MFv(gI2),MVWm)*Conj(CpbarUFeVWmFvPR(gO2,gI2))*
         CpbarUFeVWmFvPR(gO1,gI2);
   }
   tmp_8674 += tmp_8675;
   result += (-1) * tmp_8674;
   std::complex<double> tmp_8676;
   std::complex<double> tmp_8677;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8677 += B1(p,MFe(gI2),MVZ)*Conj(CpbarUFeVZFePR(gO2,gI2))*
         CpbarUFeVZFePR(gO1,gI2);
   }
   tmp_8676 += tmp_8677;
   result += (-1) * tmp_8676;
   std::complex<double> tmp_8678;
   std::complex<double> tmp_8679;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8679 += B1(p,MFe(gI2),MVZp)*Conj(CpbarUFeVZpFePR(gO2,gI2))*
         CpbarUFeVZpFePR(gO1,gI2);
   }
   tmp_8678 += tmp_8679;
   result += (-1) * tmp_8678;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8680;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8681;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8681 += B0(p,MFDX(gI2),MSHp0(gI1))*Conj(
            CpbarUFdconjSHp0FDXPL(gO2,gI1,gI2))*CpbarUFdconjSHp0FDXPR(gO1,gI1,gI2)
            *MFDX(gI2);
      }
      tmp_8680 += tmp_8681;
   }
   result += tmp_8680;
   std::complex<double> tmp_8682;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8683;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8683 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_8682 += tmp_8683;
   }
   result += tmp_8682;
   std::complex<double> tmp_8684;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8685;
      std::complex<double> tmp_8686;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8686 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_8685 += tmp_8686;
      tmp_8684 += (MFd(gI1)) * tmp_8685;
   }
   result += tmp_8684;
   std::complex<double> tmp_8687;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8688;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8688 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_8687 += tmp_8688;
   }
   result += tmp_8687;
   std::complex<double> tmp_8689;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8690;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8690 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_8689 += tmp_8690;
   }
   result += tmp_8689;
   std::complex<double> tmp_8691;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8692;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8692 += B0(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarUFdSDXChiPPL(
            gO2,gI1,gI2))*CpbarUFdSDXChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_8691 += tmp_8692;
   }
   result += tmp_8691;
   std::complex<double> tmp_8693;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8694;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8694 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8693 += tmp_8694;
   }
   result += tmp_8693;
   std::complex<double> tmp_8695;
   std::complex<double> tmp_8696;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8696 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_8695 += tmp_8696;
   result += (-5.333333333333333) * tmp_8695;
   std::complex<double> tmp_8697;
   std::complex<double> tmp_8698;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8698 += B0(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_8697 += tmp_8698;
   result += (-4) * tmp_8697;
   std::complex<double> tmp_8699;
   std::complex<double> tmp_8700;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8700 += B0(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_8699 += tmp_8700;
   result += (-4) * tmp_8699;
   std::complex<double> tmp_8701;
   std::complex<double> tmp_8702;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8702 += B0(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_8701 += tmp_8702;
   result += (-4) * tmp_8701;
   std::complex<double> tmp_8703;
   std::complex<double> tmp_8704;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8704 += B0(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_8703 += tmp_8704;
   result += (-4) * tmp_8703;
   std::complex<double> tmp_8705;
   std::complex<double> tmp_8706;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8706 += B0(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,1))*
         CpbarUFdSdGluPR(gO1,gI1,1);
   }
   tmp_8705 += tmp_8706;
   result += (1.3333333333333333*MGlu) * tmp_8705;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8707;
   std::complex<double> tmp_8708;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8709;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8709 += B1(p,MFDX(gI2),MSHp0(gI1))*Conj(
            CpbarUFdconjSHp0FDXPR(gO2,gI1,gI2))*CpbarUFdconjSHp0FDXPR(gO1,gI1,gI2)
            ;
      }
      tmp_8708 += tmp_8709;
   }
   tmp_8707 += tmp_8708;
   result += (-0.5) * tmp_8707;
   std::complex<double> tmp_8710;
   std::complex<double> tmp_8711;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8712;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8712 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPR(gO2,
            gI1,gI2))*CpbarUFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_8711 += tmp_8712;
   }
   tmp_8710 += tmp_8711;
   result += (-0.5) * tmp_8710;
   std::complex<double> tmp_8713;
   std::complex<double> tmp_8714;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8715;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8715 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPR(gO2,gI1,
            gI2))*CpbarUFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_8714 += tmp_8715;
   }
   tmp_8713 += tmp_8714;
   result += (-0.5) * tmp_8713;
   std::complex<double> tmp_8716;
   std::complex<double> tmp_8717;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8718;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8718 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPR(gO2,gI1,
            gI2))*CpbarUFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_8717 += tmp_8718;
   }
   tmp_8716 += tmp_8717;
   result += (-0.5) * tmp_8716;
   std::complex<double> tmp_8719;
   std::complex<double> tmp_8720;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8720 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPR(gO2,gI1,1))*
         CpbarUFdSdGluPR(gO1,gI1,1);
   }
   tmp_8719 += tmp_8720;
   result += (-0.6666666666666666) * tmp_8719;
   std::complex<double> tmp_8721;
   std::complex<double> tmp_8722;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8723;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8723 += B1(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarUFdSDXChiPPR(
            gO2,gI1,gI2))*CpbarUFdSDXChiPPR(gO1,gI1,gI2);
      }
      tmp_8722 += tmp_8723;
   }
   tmp_8721 += tmp_8722;
   result += (-0.5) * tmp_8721;
   std::complex<double> tmp_8724;
   std::complex<double> tmp_8725;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8726;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8726 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPR(gO2,
            gI1,gI2))*CpbarUFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_8725 += tmp_8726;
   }
   tmp_8724 += tmp_8725;
   result += (-0.5) * tmp_8724;
   std::complex<double> tmp_8727;
   std::complex<double> tmp_8728;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8729;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8729 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPR(gO2,
            gI1,gI2))*CpbarUFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_8728 += tmp_8729;
   }
   tmp_8727 += tmp_8728;
   result += (-0.5) * tmp_8727;
   std::complex<double> tmp_8730;
   std::complex<double> tmp_8731;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8731 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPL(gO2,gI2))*
         CpbarUFdVGFdPL(gO1,gI2);
   }
   tmp_8730 += tmp_8731;
   result += (-1.3333333333333333) * tmp_8730;
   std::complex<double> tmp_8732;
   std::complex<double> tmp_8733;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8733 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPL(gO2,gI2))*
         CpbarUFdVPFdPL(gO1,gI2);
   }
   tmp_8732 += tmp_8733;
   result += (-1) * tmp_8732;
   std::complex<double> tmp_8734;
   std::complex<double> tmp_8735;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8735 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPL(gO2,gI2))*
         CpbarUFdVWmFuPL(gO1,gI2);
   }
   tmp_8734 += tmp_8735;
   result += (-1) * tmp_8734;
   std::complex<double> tmp_8736;
   std::complex<double> tmp_8737;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8737 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPL(gO2,gI2))*
         CpbarUFdVZFdPL(gO1,gI2);
   }
   tmp_8736 += tmp_8737;
   result += (-1) * tmp_8736;
   std::complex<double> tmp_8738;
   std::complex<double> tmp_8739;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8739 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPL(gO2,gI2))*
         CpbarUFdVZpFdPL(gO1,gI2);
   }
   tmp_8738 += tmp_8739;
   result += (-1) * tmp_8738;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8740;
   std::complex<double> tmp_8741;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8742;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8742 += B1(p,MFDX(gI2),MSHp0(gI1))*Conj(
            CpbarUFdconjSHp0FDXPL(gO2,gI1,gI2))*CpbarUFdconjSHp0FDXPL(gO1,gI1,gI2)
            ;
      }
      tmp_8741 += tmp_8742;
   }
   tmp_8740 += tmp_8741;
   result += (-0.5) * tmp_8740;
   std::complex<double> tmp_8743;
   std::complex<double> tmp_8744;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8745;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8745 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarUFdHpmFuPL(gO2,
            gI1,gI2))*CpbarUFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_8744 += tmp_8745;
   }
   tmp_8743 += tmp_8744;
   result += (-0.5) * tmp_8743;
   std::complex<double> tmp_8746;
   std::complex<double> tmp_8747;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8748;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8748 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarUFdFdAhPL(gO2,gI1,
            gI2))*CpbarUFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_8747 += tmp_8748;
   }
   tmp_8746 += tmp_8747;
   result += (-0.5) * tmp_8746;
   std::complex<double> tmp_8749;
   std::complex<double> tmp_8750;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8751;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8751 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarUFdhhFdPL(gO2,gI1,
            gI2))*CpbarUFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_8750 += tmp_8751;
   }
   tmp_8749 += tmp_8750;
   result += (-0.5) * tmp_8749;
   std::complex<double> tmp_8752;
   std::complex<double> tmp_8753;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8753 += B1(p,MGlu,MSd(gI1))*Conj(CpbarUFdSdGluPL(gO2,gI1,1))*
         CpbarUFdSdGluPL(gO1,gI1,1);
   }
   tmp_8752 += tmp_8753;
   result += (-0.6666666666666666) * tmp_8752;
   std::complex<double> tmp_8754;
   std::complex<double> tmp_8755;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8756;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8756 += B1(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarUFdSDXChiPPL(
            gO2,gI1,gI2))*CpbarUFdSDXChiPPL(gO1,gI1,gI2);
      }
      tmp_8755 += tmp_8756;
   }
   tmp_8754 += tmp_8755;
   result += (-0.5) * tmp_8754;
   std::complex<double> tmp_8757;
   std::complex<double> tmp_8758;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8759;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8759 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarUFdSuChaPL(gO2,
            gI1,gI2))*CpbarUFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_8758 += tmp_8759;
   }
   tmp_8757 += tmp_8758;
   result += (-0.5) * tmp_8757;
   std::complex<double> tmp_8760;
   std::complex<double> tmp_8761;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8762;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8762 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarUFdSdChiPL(gO2,
            gI1,gI2))*CpbarUFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_8761 += tmp_8762;
   }
   tmp_8760 += tmp_8761;
   result += (-0.5) * tmp_8760;
   std::complex<double> tmp_8763;
   std::complex<double> tmp_8764;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8764 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVGFdPR(gO2,gI2))*
         CpbarUFdVGFdPR(gO1,gI2);
   }
   tmp_8763 += tmp_8764;
   result += (-1.3333333333333333) * tmp_8763;
   std::complex<double> tmp_8765;
   std::complex<double> tmp_8766;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8766 += B1(p,MFd(gI2),0)*Conj(CpbarUFdVPFdPR(gO2,gI2))*
         CpbarUFdVPFdPR(gO1,gI2);
   }
   tmp_8765 += tmp_8766;
   result += (-1) * tmp_8765;
   std::complex<double> tmp_8767;
   std::complex<double> tmp_8768;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8768 += B1(p,MFu(gI2),MVWm)*Conj(CpbarUFdVWmFuPR(gO2,gI2))*
         CpbarUFdVWmFuPR(gO1,gI2);
   }
   tmp_8767 += tmp_8768;
   result += (-1) * tmp_8767;
   std::complex<double> tmp_8769;
   std::complex<double> tmp_8770;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8770 += B1(p,MFd(gI2),MVZ)*Conj(CpbarUFdVZFdPR(gO2,gI2))*
         CpbarUFdVZFdPR(gO1,gI2);
   }
   tmp_8769 += tmp_8770;
   result += (-1) * tmp_8769;
   std::complex<double> tmp_8771;
   std::complex<double> tmp_8772;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8772 += B1(p,MFd(gI2),MVZp)*Conj(CpbarUFdVZpFdPR(gO2,gI2))*
         CpbarUFdVZpFdPR(gO1,gI2);
   }
   tmp_8771 += tmp_8772;
   result += (-1) * tmp_8771;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8773;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8774;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8774 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_8773 += tmp_8774;
   }
   result += tmp_8773;
   std::complex<double> tmp_8775;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8776;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8776 += B0(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPL(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPR(gO1,gI1,gI2)
            *MFDX(gI2);
      }
      tmp_8775 += tmp_8776;
   }
   result += tmp_8775;
   std::complex<double> tmp_8777;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8778;
      std::complex<double> tmp_8779;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8779 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_8778 += tmp_8779;
      tmp_8777 += (MCha(gI1)) * tmp_8778;
   }
   result += tmp_8777;
   std::complex<double> tmp_8780;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8781;
      std::complex<double> tmp_8782;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8782 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_8781 += tmp_8782;
      tmp_8780 += (MFu(gI1)) * tmp_8781;
   }
   result += tmp_8780;
   std::complex<double> tmp_8783;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8784;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8784 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_8783 += tmp_8784;
   }
   result += tmp_8783;
   std::complex<double> tmp_8785;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8786;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8786 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8785 += tmp_8786;
   }
   result += tmp_8785;
   std::complex<double> tmp_8787;
   std::complex<double> tmp_8788;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8788 += B0(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_8787 += tmp_8788;
   result += (-4) * tmp_8787;
   std::complex<double> tmp_8789;
   std::complex<double> tmp_8790;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8790 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_8789 += tmp_8790;
   result += (-5.333333333333333) * tmp_8789;
   std::complex<double> tmp_8791;
   std::complex<double> tmp_8792;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8792 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_8791 += tmp_8792;
   result += (-4) * tmp_8791;
   std::complex<double> tmp_8793;
   std::complex<double> tmp_8794;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8794 += B0(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_8793 += tmp_8794;
   result += (-4) * tmp_8793;
   std::complex<double> tmp_8795;
   std::complex<double> tmp_8796;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8796 += B0(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_8795 += tmp_8796;
   result += (-4) * tmp_8795;
   std::complex<double> tmp_8797;
   std::complex<double> tmp_8798;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_8798 += B0(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPL(gO2,gI2))*
         CpbarUFubarChaPSDXPR(gO1,gI2);
   }
   tmp_8797 += tmp_8798;
   result += (MChaP) * tmp_8797;
   std::complex<double> tmp_8799;
   std::complex<double> tmp_8800;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8800 += B0(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_8799 += tmp_8800;
   result += (1.3333333333333333*MGlu) * tmp_8799;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8801;
   std::complex<double> tmp_8802;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8803;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8803 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPR(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_8802 += tmp_8803;
   }
   tmp_8801 += tmp_8802;
   result += (-0.5) * tmp_8801;
   std::complex<double> tmp_8804;
   std::complex<double> tmp_8805;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8806;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8806 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPR(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPR(gO1,gI1,gI2)
            ;
      }
      tmp_8805 += tmp_8806;
   }
   tmp_8804 += tmp_8805;
   result += (-0.5) * tmp_8804;
   std::complex<double> tmp_8807;
   std::complex<double> tmp_8808;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8809;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8809 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPR(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_8808 += tmp_8809;
   }
   tmp_8807 += tmp_8808;
   result += (-0.5) * tmp_8807;
   std::complex<double> tmp_8810;
   std::complex<double> tmp_8811;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8812;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8812 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPR(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_8811 += tmp_8812;
   }
   tmp_8810 += tmp_8811;
   result += (-0.5) * tmp_8810;
   std::complex<double> tmp_8813;
   std::complex<double> tmp_8814;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8815;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8815 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPR(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_8814 += tmp_8815;
   }
   tmp_8813 += tmp_8814;
   result += (-0.5) * tmp_8813;
   std::complex<double> tmp_8816;
   std::complex<double> tmp_8817;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8817 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPR(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_8816 += tmp_8817;
   result += (-0.6666666666666666) * tmp_8816;
   std::complex<double> tmp_8818;
   std::complex<double> tmp_8819;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8820;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8820 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPR(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_8819 += tmp_8820;
   }
   tmp_8818 += tmp_8819;
   result += (-0.5) * tmp_8818;
   std::complex<double> tmp_8821;
   std::complex<double> tmp_8822;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8822 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPL(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2);
   }
   tmp_8821 += tmp_8822;
   result += (-1) * tmp_8821;
   std::complex<double> tmp_8823;
   std::complex<double> tmp_8824;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8824 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPL(gO2,gI2))*
         CpbarUFuVGFuPL(gO1,gI2);
   }
   tmp_8823 += tmp_8824;
   result += (-1.3333333333333333) * tmp_8823;
   std::complex<double> tmp_8825;
   std::complex<double> tmp_8826;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8826 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPL(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2);
   }
   tmp_8825 += tmp_8826;
   result += (-1) * tmp_8825;
   std::complex<double> tmp_8827;
   std::complex<double> tmp_8828;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8828 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPL(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2);
   }
   tmp_8827 += tmp_8828;
   result += (-1) * tmp_8827;
   std::complex<double> tmp_8829;
   std::complex<double> tmp_8830;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8830 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPL(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2);
   }
   tmp_8829 += tmp_8830;
   result += (-1) * tmp_8829;
   std::complex<double> tmp_8831;
   std::complex<double> tmp_8832;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_8832 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPR(gO2,gI2))*
         CpbarUFubarChaPSDXPR(gO1,gI2);
   }
   tmp_8831 += tmp_8832;
   result += (-0.5) * tmp_8831;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8833;
   std::complex<double> tmp_8834;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8835;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8835 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_8834 += tmp_8835;
   }
   tmp_8833 += tmp_8834;
   result += (-0.5) * tmp_8833;
   std::complex<double> tmp_8836;
   std::complex<double> tmp_8837;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8838;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8838 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPL(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPL(gO1,gI1,gI2)
            ;
      }
      tmp_8837 += tmp_8838;
   }
   tmp_8836 += tmp_8837;
   result += (-0.5) * tmp_8836;
   std::complex<double> tmp_8839;
   std::complex<double> tmp_8840;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8841;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_8841 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_8840 += tmp_8841;
   }
   tmp_8839 += tmp_8840;
   result += (-0.5) * tmp_8839;
   std::complex<double> tmp_8842;
   std::complex<double> tmp_8843;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8844;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8844 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_8843 += tmp_8844;
   }
   tmp_8842 += tmp_8843;
   result += (-0.5) * tmp_8842;
   std::complex<double> tmp_8845;
   std::complex<double> tmp_8846;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8847;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8847 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_8846 += tmp_8847;
   }
   tmp_8845 += tmp_8846;
   result += (-0.5) * tmp_8845;
   std::complex<double> tmp_8848;
   std::complex<double> tmp_8849;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8849 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPL(gO1,gI1,1);
   }
   tmp_8848 += tmp_8849;
   result += (-0.6666666666666666) * tmp_8848;
   std::complex<double> tmp_8850;
   std::complex<double> tmp_8851;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8852;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8852 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_8851 += tmp_8852;
   }
   tmp_8850 += tmp_8851;
   result += (-0.5) * tmp_8850;
   std::complex<double> tmp_8853;
   std::complex<double> tmp_8854;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8854 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPR(gO1,gI2);
   }
   tmp_8853 += tmp_8854;
   result += (-1) * tmp_8853;
   std::complex<double> tmp_8855;
   std::complex<double> tmp_8856;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8856 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVGFuPR(gO2,gI2))*
         CpbarUFuVGFuPR(gO1,gI2);
   }
   tmp_8855 += tmp_8856;
   result += (-1.3333333333333333) * tmp_8855;
   std::complex<double> tmp_8857;
   std::complex<double> tmp_8858;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8858 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPR(gO1,gI2);
   }
   tmp_8857 += tmp_8858;
   result += (-1) * tmp_8857;
   std::complex<double> tmp_8859;
   std::complex<double> tmp_8860;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8860 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPR(gO1,gI2);
   }
   tmp_8859 += tmp_8860;
   result += (-1) * tmp_8859;
   std::complex<double> tmp_8861;
   std::complex<double> tmp_8862;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8862 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPR(gO1,gI2);
   }
   tmp_8861 += tmp_8862;
   result += (-1) * tmp_8861;
   std::complex<double> tmp_8863;
   std::complex<double> tmp_8864;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_8864 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPL(gO2,gI2))*
         CpbarUFubarChaPSDXPL(gO1,gI2);
   }
   tmp_8863 += tmp_8864;
   result += (-0.5) * tmp_8863;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_FDX_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8865;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8866;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8866 += B0(p,MFd(gI2),MSHp0(gI1))*Conj(CpbarUFDXSHp0FdPL(gO2
            ,gI1,gI2))*CpbarUFDXSHp0FdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_8865 += tmp_8866;
   }
   result += tmp_8865;
   std::complex<double> tmp_8867;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8868;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8868 += B0(p,MFu(gI2),MSHpp(gI1))*Conj(CpbarUFDXSHppFuPL(gO2
            ,gI1,gI2))*CpbarUFDXSHppFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_8867 += tmp_8868;
   }
   result += tmp_8867;
   std::complex<double> tmp_8869;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8870;
      std::complex<double> tmp_8871;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8871 += B0(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_8870 += tmp_8871;
      tmp_8869 += (MFDX(gI1)) * tmp_8870;
   }
   result += tmp_8869;
   std::complex<double> tmp_8872;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8873;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8873 += B0(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_8872 += tmp_8873;
   }
   result += tmp_8872;
   std::complex<double> tmp_8874;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8875;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8875 += B0(p,MChiP(gI2),MSd(gI1))*Conj(CpbarUFDXSdChiPPL(gO2
            ,gI1,gI2))*CpbarUFDXSdChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_8874 += tmp_8875;
   }
   result += tmp_8874;
   std::complex<double> tmp_8876;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8877;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8877 += B0(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_8876 += tmp_8877;
   }
   result += tmp_8876;
   std::complex<double> tmp_8878;
   std::complex<double> tmp_8879;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8879 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_8878 += tmp_8879;
   result += (-5.333333333333333) * tmp_8878;
   std::complex<double> tmp_8880;
   std::complex<double> tmp_8881;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8881 += B0(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_8880 += tmp_8881;
   result += (-4) * tmp_8880;
   std::complex<double> tmp_8882;
   std::complex<double> tmp_8883;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8883 += B0(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_8882 += tmp_8883;
   result += (-4) * tmp_8882;
   std::complex<double> tmp_8884;
   std::complex<double> tmp_8885;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8885 += B0(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2)*MFDX(gI2);
   }
   tmp_8884 += tmp_8885;
   result += (-4) * tmp_8884;
   std::complex<double> tmp_8886;
   std::complex<double> tmp_8887;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8887 += B0(p,MChaP,MSu(gI1))*Conj(CpbarUFDXSuChaPPL(gO2,gI1))*
         CpbarUFDXSuChaPPR(gO1,gI1);
   }
   tmp_8886 += tmp_8887;
   result += (MChaP) * tmp_8886;
   std::complex<double> tmp_8888;
   std::complex<double> tmp_8889;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8889 += B0(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,1))*
         CpbarUFDXSDXGluPR(gO1,gI1,1);
   }
   tmp_8888 += tmp_8889;
   result += (1.3333333333333333*MGlu) * tmp_8888;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_FDX_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8890;
   std::complex<double> tmp_8891;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8892;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8892 += B1(p,MFd(gI2),MSHp0(gI1))*Conj(CpbarUFDXSHp0FdPR(gO2
            ,gI1,gI2))*CpbarUFDXSHp0FdPR(gO1,gI1,gI2);
      }
      tmp_8891 += tmp_8892;
   }
   tmp_8890 += tmp_8891;
   result += (-0.5) * tmp_8890;
   std::complex<double> tmp_8893;
   std::complex<double> tmp_8894;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8895;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8895 += B1(p,MFu(gI2),MSHpp(gI1))*Conj(CpbarUFDXSHppFuPR(gO2
            ,gI1,gI2))*CpbarUFDXSHppFuPR(gO1,gI1,gI2);
      }
      tmp_8894 += tmp_8895;
   }
   tmp_8893 += tmp_8894;
   result += (-0.5) * tmp_8893;
   std::complex<double> tmp_8896;
   std::complex<double> tmp_8897;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8898;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8898 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPR(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPR(gO1,gI1,gI2);
      }
      tmp_8897 += tmp_8898;
   }
   tmp_8896 += tmp_8897;
   result += (-0.5) * tmp_8896;
   std::complex<double> tmp_8899;
   std::complex<double> tmp_8900;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8901;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8901 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPR(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPR(gO1,gI1,gI2);
      }
      tmp_8900 += tmp_8901;
   }
   tmp_8899 += tmp_8900;
   result += (-0.5) * tmp_8899;
   std::complex<double> tmp_8902;
   std::complex<double> tmp_8903;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8903 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPR(gO2,gI1,1))*
         CpbarUFDXSDXGluPR(gO1,gI1,1);
   }
   tmp_8902 += tmp_8903;
   result += (-0.6666666666666666) * tmp_8902;
   std::complex<double> tmp_8904;
   std::complex<double> tmp_8905;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8905 += B1(p,MChaP,MSu(gI1))*Conj(CpbarUFDXSuChaPPR(gO2,gI1))*
         CpbarUFDXSuChaPPR(gO1,gI1);
   }
   tmp_8904 += tmp_8905;
   result += (-0.5) * tmp_8904;
   std::complex<double> tmp_8906;
   std::complex<double> tmp_8907;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8908;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8908 += B1(p,MChiP(gI2),MSd(gI1))*Conj(CpbarUFDXSdChiPPR(gO2
            ,gI1,gI2))*CpbarUFDXSdChiPPR(gO1,gI1,gI2);
      }
      tmp_8907 += tmp_8908;
   }
   tmp_8906 += tmp_8907;
   result += (-0.5) * tmp_8906;
   std::complex<double> tmp_8909;
   std::complex<double> tmp_8910;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8911;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8911 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPR(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPR(gO1,gI1,gI2);
      }
      tmp_8910 += tmp_8911;
   }
   tmp_8909 += tmp_8910;
   result += (-0.5) * tmp_8909;
   std::complex<double> tmp_8912;
   std::complex<double> tmp_8913;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8913 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPL(gO2,gI2))*
         CpbarUFDXVGFDXPL(gO1,gI2);
   }
   tmp_8912 += tmp_8913;
   result += (-1.3333333333333333) * tmp_8912;
   std::complex<double> tmp_8914;
   std::complex<double> tmp_8915;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8915 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPL(gO2,gI2))*
         CpbarUFDXVPFDXPL(gO1,gI2);
   }
   tmp_8914 += tmp_8915;
   result += (-1) * tmp_8914;
   std::complex<double> tmp_8916;
   std::complex<double> tmp_8917;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8917 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPL(gO2,gI2))*
         CpbarUFDXVZFDXPL(gO1,gI2);
   }
   tmp_8916 += tmp_8917;
   result += (-1) * tmp_8916;
   std::complex<double> tmp_8918;
   std::complex<double> tmp_8919;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8919 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPL(gO2,gI2))*
         CpbarUFDXVZpFDXPL(gO1,gI2);
   }
   tmp_8918 += tmp_8919;
   result += (-1) * tmp_8918;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_FDX_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8920;
   std::complex<double> tmp_8921;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8922;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8922 += B1(p,MFd(gI2),MSHp0(gI1))*Conj(CpbarUFDXSHp0FdPL(gO2
            ,gI1,gI2))*CpbarUFDXSHp0FdPL(gO1,gI1,gI2);
      }
      tmp_8921 += tmp_8922;
   }
   tmp_8920 += tmp_8921;
   result += (-0.5) * tmp_8920;
   std::complex<double> tmp_8923;
   std::complex<double> tmp_8924;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8925;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8925 += B1(p,MFu(gI2),MSHpp(gI1))*Conj(CpbarUFDXSHppFuPL(gO2
            ,gI1,gI2))*CpbarUFDXSHppFuPL(gO1,gI1,gI2);
      }
      tmp_8924 += tmp_8925;
   }
   tmp_8923 += tmp_8924;
   result += (-0.5) * tmp_8923;
   std::complex<double> tmp_8926;
   std::complex<double> tmp_8927;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_8928;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8928 += B1(p,MFDX(gI1),MAh(gI2))*Conj(CpbarUFDXFDXAhPL(gO2,
            gI1,gI2))*CpbarUFDXFDXAhPL(gO1,gI1,gI2);
      }
      tmp_8927 += tmp_8928;
   }
   tmp_8926 += tmp_8927;
   result += (-0.5) * tmp_8926;
   std::complex<double> tmp_8929;
   std::complex<double> tmp_8930;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8931;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8931 += B1(p,MFDX(gI2),Mhh(gI1))*Conj(CpbarUFDXhhFDXPL(gO2,
            gI1,gI2))*CpbarUFDXhhFDXPL(gO1,gI1,gI2);
      }
      tmp_8930 += tmp_8931;
   }
   tmp_8929 += tmp_8930;
   result += (-0.5) * tmp_8929;
   std::complex<double> tmp_8932;
   std::complex<double> tmp_8933;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8933 += B1(p,MGlu,MSDX(gI1))*Conj(CpbarUFDXSDXGluPL(gO2,gI1,1))*
         CpbarUFDXSDXGluPL(gO1,gI1,1);
   }
   tmp_8932 += tmp_8933;
   result += (-0.6666666666666666) * tmp_8932;
   std::complex<double> tmp_8934;
   std::complex<double> tmp_8935;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_8935 += B1(p,MChaP,MSu(gI1))*Conj(CpbarUFDXSuChaPPL(gO2,gI1))*
         CpbarUFDXSuChaPPL(gO1,gI1);
   }
   tmp_8934 += tmp_8935;
   result += (-0.5) * tmp_8934;
   std::complex<double> tmp_8936;
   std::complex<double> tmp_8937;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8938;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8938 += B1(p,MChiP(gI2),MSd(gI1))*Conj(CpbarUFDXSdChiPPL(gO2
            ,gI1,gI2))*CpbarUFDXSdChiPPL(gO1,gI1,gI2);
      }
      tmp_8937 += tmp_8938;
   }
   tmp_8936 += tmp_8937;
   result += (-0.5) * tmp_8936;
   std::complex<double> tmp_8939;
   std::complex<double> tmp_8940;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8941;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8941 += B1(p,MChi(gI2),MSDX(gI1))*Conj(CpbarUFDXSDXChiPL(gO2
            ,gI1,gI2))*CpbarUFDXSDXChiPL(gO1,gI1,gI2);
      }
      tmp_8940 += tmp_8941;
   }
   tmp_8939 += tmp_8940;
   result += (-0.5) * tmp_8939;
   std::complex<double> tmp_8942;
   std::complex<double> tmp_8943;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8943 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVGFDXPR(gO2,gI2))*
         CpbarUFDXVGFDXPR(gO1,gI2);
   }
   tmp_8942 += tmp_8943;
   result += (-1.3333333333333333) * tmp_8942;
   std::complex<double> tmp_8944;
   std::complex<double> tmp_8945;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8945 += B1(p,MFDX(gI2),0)*Conj(CpbarUFDXVPFDXPR(gO2,gI2))*
         CpbarUFDXVPFDXPR(gO1,gI2);
   }
   tmp_8944 += tmp_8945;
   result += (-1) * tmp_8944;
   std::complex<double> tmp_8946;
   std::complex<double> tmp_8947;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8947 += B1(p,MFDX(gI2),MVZ)*Conj(CpbarUFDXVZFDXPR(gO2,gI2))*
         CpbarUFDXVZFDXPR(gO1,gI2);
   }
   tmp_8946 += tmp_8947;
   result += (-1) * tmp_8946;
   std::complex<double> tmp_8948;
   std::complex<double> tmp_8949;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_8949 += B1(p,MFDX(gI2),MVZp)*Conj(CpbarUFDXVZpFDXPR(gO2,gI2))*
         CpbarUFDXVZpFDXPR(gO1,gI2);
   }
   tmp_8948 += tmp_8949;
   result += (-1) * tmp_8948;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaI_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8950;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8951;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8951 += B0(p,MFe(gI2),MSHp0(gI1))*Conj(
            CpbarUChaIconjSHp0FePL(gO2,gI1,gI2))*CpbarUChaIconjSHp0FePR(gO1,gI1,
            gI2)*MFe(gI2);
      }
      tmp_8950 += tmp_8951;
   }
   result += tmp_8950;
   std::complex<double> tmp_8952;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8953;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8953 += B0(p,MChiI(gI2),MHpm(gI1))*Conj(CpbarUChaIHpmChiIPL(
            gO2,gI1,gI2))*CpbarUChaIHpmChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_8952 += tmp_8953;
   }
   result += tmp_8952;
   std::complex<double> tmp_8954;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8955;
      std::complex<double> tmp_8956;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8956 += B0(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPL(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPR(gO1,gI1,gI2);
      }
      tmp_8955 += tmp_8956;
      tmp_8954 += (MChaI(gI1)) * tmp_8955;
   }
   result += tmp_8954;
   std::complex<double> tmp_8957;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8958;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8958 += B0(p,MChi(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaISHIPMChiPL(gO2,gI1,gI2))*CpbarUChaISHIPMChiPR(gO1,gI1,gI2)*
            MChi(gI2);
      }
      tmp_8957 += tmp_8958;
   }
   result += tmp_8957;
   std::complex<double> tmp_8959;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8960;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8960 += B0(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPL(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_8959 += tmp_8960;
   }
   result += tmp_8959;
   std::complex<double> tmp_8961;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8962;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8962 += B0(p,MChiP(gI2),MSe(gI1))*Conj(CpbarUChaISeChiPPL(
            gO2,gI1,gI2))*CpbarUChaISeChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_8961 += tmp_8962;
   }
   result += tmp_8961;
   std::complex<double> tmp_8963;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8964;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8964 += B0(p,MCha(gI2),MSHI0(gI1))*Conj(
            CpbarUChaIconjSHI0ChaPL(gO2,gI1,gI2))*CpbarUChaIconjSHI0ChaPR(gO1,gI1,
            gI2)*MCha(gI2);
      }
      tmp_8963 += tmp_8964;
   }
   result += tmp_8963;
   std::complex<double> tmp_8965;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8966;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8966 += B0(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPL(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_8965 += tmp_8966;
   }
   result += tmp_8965;
   std::complex<double> tmp_8967;
   std::complex<double> tmp_8968;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8968 += B0(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPR(gO2,gI2))*
         CpbarUChaIVPChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_8967 += tmp_8968;
   result += (-4) * tmp_8967;
   std::complex<double> tmp_8969;
   std::complex<double> tmp_8970;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8970 += B0(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPR(gO2,gI2))*
         CpbarUChaIVZChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_8969 += tmp_8970;
   result += (-4) * tmp_8969;
   std::complex<double> tmp_8971;
   std::complex<double> tmp_8972;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_8972 += B0(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPR(gO2,gI2))*
         CpbarUChaIVZpChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_8971 += tmp_8972;
   result += (-4) * tmp_8971;
   std::complex<double> tmp_8973;
   std::complex<double> tmp_8974;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_8974 += B0(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPR(gO2,gI2))*
         CpbarUChaIVWmChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_8973 += tmp_8974;
   result += (-4) * tmp_8973;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaI_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_8975;
   std::complex<double> tmp_8976;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8977;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_8977 += B1(p,MFe(gI2),MSHp0(gI1))*Conj(
            CpbarUChaIconjSHp0FePR(gO2,gI1,gI2))*CpbarUChaIconjSHp0FePR(gO1,gI1,
            gI2);
      }
      tmp_8976 += tmp_8977;
   }
   tmp_8975 += tmp_8976;
   result += (-0.5) * tmp_8975;
   std::complex<double> tmp_8978;
   std::complex<double> tmp_8979;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8980;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_8980 += B1(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPR(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPR(gO1,gI1,gI2);
      }
      tmp_8979 += tmp_8980;
   }
   tmp_8978 += tmp_8979;
   result += (-0.5) * tmp_8978;
   std::complex<double> tmp_8981;
   std::complex<double> tmp_8982;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_8983;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_8983 += B1(p,MChiI(gI2),MHpm(gI1))*Conj(CpbarUChaIHpmChiIPR(
            gO2,gI1,gI2))*CpbarUChaIHpmChiIPR(gO1,gI1,gI2);
      }
      tmp_8982 += tmp_8983;
   }
   tmp_8981 += tmp_8982;
   result += (-0.5) * tmp_8981;
   std::complex<double> tmp_8984;
   std::complex<double> tmp_8985;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_8986;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_8986 += B1(p,MChi(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaISHIPMChiPR(gO2,gI1,gI2))*CpbarUChaISHIPMChiPR(gO1,gI1,gI2);
      }
      tmp_8985 += tmp_8986;
   }
   tmp_8984 += tmp_8985;
   result += (-0.5) * tmp_8984;
   std::complex<double> tmp_8987;
   std::complex<double> tmp_8988;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_8989;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8989 += B1(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPR(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPR(gO1,gI1,gI2);
      }
      tmp_8988 += tmp_8989;
   }
   tmp_8987 += tmp_8988;
   result += (-0.5) * tmp_8987;
   std::complex<double> tmp_8990;
   std::complex<double> tmp_8991;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_8992;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8992 += B1(p,MChiP(gI2),MSe(gI1))*Conj(CpbarUChaISeChiPPR(
            gO2,gI1,gI2))*CpbarUChaISeChiPPR(gO1,gI1,gI2);
      }
      tmp_8991 += tmp_8992;
   }
   tmp_8990 += tmp_8991;
   result += (-0.5) * tmp_8990;
   std::complex<double> tmp_8993;
   std::complex<double> tmp_8994;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8995;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8995 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(
            CpbarUChaIconjSHI0ChaPR(gO2,gI1,gI2))*CpbarUChaIconjSHI0ChaPR(gO1,gI1,
            gI2);
      }
      tmp_8994 += tmp_8995;
   }
   tmp_8993 += tmp_8994;
   result += (-0.5) * tmp_8993;
   std::complex<double> tmp_8996;
   std::complex<double> tmp_8997;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_8998;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_8998 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPR(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPR(gO1,gI1,gI2);
      }
      tmp_8997 += tmp_8998;
   }
   tmp_8996 += tmp_8997;
   result += (-0.5) * tmp_8996;
   std::complex<double> tmp_8999;
   std::complex<double> tmp_9000;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9000 += B1(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPL(gO2,gI2))*
         CpbarUChaIVPChaIPL(gO1,gI2);
   }
   tmp_8999 += tmp_9000;
   result += (-1) * tmp_8999;
   std::complex<double> tmp_9001;
   std::complex<double> tmp_9002;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9002 += B1(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPL(gO2,gI2))*
         CpbarUChaIVZChaIPL(gO1,gI2);
   }
   tmp_9001 += tmp_9002;
   result += (-1) * tmp_9001;
   std::complex<double> tmp_9003;
   std::complex<double> tmp_9004;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9004 += B1(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPL(gO2,gI2))*
         CpbarUChaIVZpChaIPL(gO1,gI2);
   }
   tmp_9003 += tmp_9004;
   result += (-1) * tmp_9003;
   std::complex<double> tmp_9005;
   std::complex<double> tmp_9006;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9006 += B1(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPL(gO2,gI2))*
         CpbarUChaIVWmChiIPL(gO1,gI2);
   }
   tmp_9005 += tmp_9006;
   result += (-1) * tmp_9005;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaI_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9007;
   std::complex<double> tmp_9008;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9009;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9009 += B1(p,MFe(gI2),MSHp0(gI1))*Conj(
            CpbarUChaIconjSHp0FePL(gO2,gI1,gI2))*CpbarUChaIconjSHp0FePL(gO1,gI1,
            gI2);
      }
      tmp_9008 += tmp_9009;
   }
   tmp_9007 += tmp_9008;
   result += (-0.5) * tmp_9007;
   std::complex<double> tmp_9010;
   std::complex<double> tmp_9011;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9012;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9012 += B1(p,MChaI(gI1),MAh(gI2))*Conj(CpbarUChaIChaIAhPL(
            gO2,gI1,gI2))*CpbarUChaIChaIAhPL(gO1,gI1,gI2);
      }
      tmp_9011 += tmp_9012;
   }
   tmp_9010 += tmp_9011;
   result += (-0.5) * tmp_9010;
   std::complex<double> tmp_9013;
   std::complex<double> tmp_9014;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9015;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9015 += B1(p,MChiI(gI2),MHpm(gI1))*Conj(CpbarUChaIHpmChiIPL(
            gO2,gI1,gI2))*CpbarUChaIHpmChiIPL(gO1,gI1,gI2);
      }
      tmp_9014 += tmp_9015;
   }
   tmp_9013 += tmp_9014;
   result += (-0.5) * tmp_9013;
   std::complex<double> tmp_9016;
   std::complex<double> tmp_9017;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9018;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9018 += B1(p,MChi(gI2),MSHIPM(gI1))*Conj(
            CpbarUChaISHIPMChiPL(gO2,gI1,gI2))*CpbarUChaISHIPMChiPL(gO1,gI1,gI2);
      }
      tmp_9017 += tmp_9018;
   }
   tmp_9016 += tmp_9017;
   result += (-0.5) * tmp_9016;
   std::complex<double> tmp_9019;
   std::complex<double> tmp_9020;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9021;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9021 += B1(p,MChaI(gI2),Mhh(gI1))*Conj(CpbarUChaIhhChaIPL(
            gO2,gI1,gI2))*CpbarUChaIhhChaIPL(gO1,gI1,gI2);
      }
      tmp_9020 += tmp_9021;
   }
   tmp_9019 += tmp_9020;
   result += (-0.5) * tmp_9019;
   std::complex<double> tmp_9022;
   std::complex<double> tmp_9023;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9024;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9024 += B1(p,MChiP(gI2),MSe(gI1))*Conj(CpbarUChaISeChiPPL(
            gO2,gI1,gI2))*CpbarUChaISeChiPPL(gO1,gI1,gI2);
      }
      tmp_9023 += tmp_9024;
   }
   tmp_9022 += tmp_9023;
   result += (-0.5) * tmp_9022;
   std::complex<double> tmp_9025;
   std::complex<double> tmp_9026;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9027;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9027 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(
            CpbarUChaIconjSHI0ChaPL(gO2,gI1,gI2))*CpbarUChaIconjSHI0ChaPL(gO1,gI1,
            gI2);
      }
      tmp_9026 += tmp_9027;
   }
   tmp_9025 += tmp_9026;
   result += (-0.5) * tmp_9025;
   std::complex<double> tmp_9028;
   std::complex<double> tmp_9029;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9030;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9030 += B1(p,MCha(gI2),MSHI0(gI1))*Conj(CpbarUChaISHI0ChaPL(
            gO2,gI1,gI2))*CpbarUChaISHI0ChaPL(gO1,gI1,gI2);
      }
      tmp_9029 += tmp_9030;
   }
   tmp_9028 += tmp_9029;
   result += (-0.5) * tmp_9028;
   std::complex<double> tmp_9031;
   std::complex<double> tmp_9032;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9032 += B1(p,MChaI(gI2),0)*Conj(CpbarUChaIVPChaIPR(gO2,gI2))*
         CpbarUChaIVPChaIPR(gO1,gI2);
   }
   tmp_9031 += tmp_9032;
   result += (-1) * tmp_9031;
   std::complex<double> tmp_9033;
   std::complex<double> tmp_9034;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9034 += B1(p,MChaI(gI2),MVZ)*Conj(CpbarUChaIVZChaIPR(gO2,gI2))*
         CpbarUChaIVZChaIPR(gO1,gI2);
   }
   tmp_9033 += tmp_9034;
   result += (-1) * tmp_9033;
   std::complex<double> tmp_9035;
   std::complex<double> tmp_9036;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9036 += B1(p,MChaI(gI2),MVZp)*Conj(CpbarUChaIVZpChaIPR(gO2,gI2))*
         CpbarUChaIVZpChaIPR(gO1,gI2);
   }
   tmp_9035 += tmp_9036;
   result += (-1) * tmp_9035;
   std::complex<double> tmp_9037;
   std::complex<double> tmp_9038;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9038 += B1(p,MChiI(gI2),MVWm)*Conj(CpbarUChaIVWmChiIPR(gO2,gI2))*
         CpbarUChaIVWmChiIPR(gO1,gI2);
   }
   tmp_9037 += tmp_9038;
   result += (-1) * tmp_9037;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiI_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9039;
   std::complex<double> tmp_9040;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9041;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9041 += B0(p,MChaI(gI2),MHpm(gI1))*Conj(CpUChiIconjHpmChaIPL
            (gO2,gI1,gI2))*CpUChiIconjHpmChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_9040 += tmp_9041;
   }
   tmp_9039 += tmp_9040;
   result += (2) * tmp_9039;
   std::complex<double> tmp_9042;
   std::complex<double> tmp_9043;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9044;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9044 += B0(p,MFe(gI2),MSHpp(gI1))*Conj(CpUChiIconjSHppFePL(
            gO2,gI1,gI2))*CpUChiIconjSHppFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_9043 += tmp_9044;
   }
   tmp_9042 += tmp_9043;
   result += (2) * tmp_9042;
   std::complex<double> tmp_9045;
   std::complex<double> tmp_9046;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9047;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9047 += B0(p,MCha(gI2),MSHIPM(gI1))*Conj(
            CpUChiIconjSHIPMChaPL(gO2,gI1,gI2))*CpUChiIconjSHIPMChaPR(gO1,gI1,gI2)
            *MCha(gI2);
      }
      tmp_9046 += tmp_9047;
   }
   tmp_9045 += tmp_9046;
   result += (2) * tmp_9045;
   std::complex<double> tmp_9048;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9049;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9049 += B0(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPL(gO2,
            gI1,gI2))*CpUChiIhhChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_9048 += tmp_9049;
   }
   result += tmp_9048;
   std::complex<double> tmp_9050;
   std::complex<double> tmp_9051;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9052;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9052 += B0(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPL
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9051 += tmp_9052;
   }
   tmp_9050 += tmp_9051;
   result += (2) * tmp_9050;
   std::complex<double> tmp_9053;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9054;
      std::complex<double> tmp_9055;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9055 += B0(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPL(gO2,
            gI1,gI2))*CpUChiIChiIAhPR(gO1,gI1,gI2);
      }
      tmp_9054 += tmp_9055;
      tmp_9053 += (MChiI(gI1)) * tmp_9054;
   }
   result += tmp_9053;
   std::complex<double> tmp_9056;
   std::complex<double> tmp_9057;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9057 += B0(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPR(gO2,gI2))*
         CpUChiIconjVWmChaIPL(gO1,gI2)*MChaI(gI2);
   }
   tmp_9056 += tmp_9057;
   result += (-8) * tmp_9056;
   std::complex<double> tmp_9058;
   std::complex<double> tmp_9059;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9059 += B0(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPR(gO2,gI2))*
         CpUChiIVZChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_9058 += tmp_9059;
   result += (-4) * tmp_9058;
   std::complex<double> tmp_9060;
   std::complex<double> tmp_9061;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9061 += B0(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPR(gO2,gI2))*
         CpUChiIVZpChiIPL(gO1,gI2)*MChiI(gI2);
   }
   tmp_9060 += tmp_9061;
   result += (-4) * tmp_9060;
   std::complex<double> tmp_9062;
   std::complex<double> tmp_9063;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9063 += B0(p,MChaP,MSe(gI1))*Conj(CpUChiIconjSeChaPPL(gO2,gI1))*
         CpUChiIconjSeChaPPR(gO1,gI1);
   }
   tmp_9062 += tmp_9063;
   result += (2*MChaP) * tmp_9062;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiI_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9064;
   std::complex<double> tmp_9065;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9066;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9066 += B1(p,MChaI(gI2),MHpm(gI1))*Conj(CpUChiIconjHpmChaIPR
            (gO2,gI1,gI2))*CpUChiIconjHpmChaIPR(gO1,gI1,gI2);
      }
      tmp_9065 += tmp_9066;
   }
   tmp_9064 += tmp_9065;
   result += (-1) * tmp_9064;
   std::complex<double> tmp_9067;
   std::complex<double> tmp_9068;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9069;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9069 += B1(p,MFe(gI2),MSHpp(gI1))*Conj(CpUChiIconjSHppFePR(
            gO2,gI1,gI2))*CpUChiIconjSHppFePR(gO1,gI1,gI2);
      }
      tmp_9068 += tmp_9069;
   }
   tmp_9067 += tmp_9068;
   result += (-1) * tmp_9067;
   std::complex<double> tmp_9070;
   std::complex<double> tmp_9071;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9072;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9072 += B1(p,MCha(gI2),MSHIPM(gI1))*Conj(
            CpUChiIconjSHIPMChaPR(gO2,gI1,gI2))*CpUChiIconjSHIPMChaPR(gO1,gI1,gI2)
            ;
      }
      tmp_9071 += tmp_9072;
   }
   tmp_9070 += tmp_9071;
   result += (-1) * tmp_9070;
   std::complex<double> tmp_9073;
   std::complex<double> tmp_9074;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9075;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9075 += B1(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPR(gO2,
            gI1,gI2))*CpUChiIhhChiIPR(gO1,gI1,gI2);
      }
      tmp_9074 += tmp_9075;
   }
   tmp_9073 += tmp_9074;
   result += (-0.5) * tmp_9073;
   std::complex<double> tmp_9076;
   std::complex<double> tmp_9077;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9077 += B1(p,MChaP,MSe(gI1))*Conj(CpUChiIconjSeChaPPR(gO2,gI1))*
         CpUChiIconjSeChaPPR(gO1,gI1);
   }
   tmp_9076 += tmp_9077;
   result += (-1) * tmp_9076;
   std::complex<double> tmp_9078;
   std::complex<double> tmp_9079;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9080;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9080 += B1(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPR(gO2,
            gI1,gI2))*CpUChiIChiIAhPR(gO1,gI1,gI2);
      }
      tmp_9079 += tmp_9080;
   }
   tmp_9078 += tmp_9079;
   result += (-0.5) * tmp_9078;
   std::complex<double> tmp_9081;
   std::complex<double> tmp_9082;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9083;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9083 += B1(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPR
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPR(gO1,gI1,gI2);
      }
      tmp_9082 += tmp_9083;
   }
   tmp_9081 += tmp_9082;
   result += (-1) * tmp_9081;
   std::complex<double> tmp_9084;
   std::complex<double> tmp_9085;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9085 += B1(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPL(gO2,gI2))*
         CpUChiIconjVWmChaIPL(gO1,gI2);
   }
   tmp_9084 += tmp_9085;
   result += (-2) * tmp_9084;
   std::complex<double> tmp_9086;
   std::complex<double> tmp_9087;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9087 += B1(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPL(gO2,gI2))*
         CpUChiIVZChiIPL(gO1,gI2);
   }
   tmp_9086 += tmp_9087;
   result += (-1) * tmp_9086;
   std::complex<double> tmp_9088;
   std::complex<double> tmp_9089;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9089 += B1(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPL(gO2,gI2))*
         CpUChiIVZpChiIPL(gO1,gI2);
   }
   tmp_9088 += tmp_9089;
   result += (-1) * tmp_9088;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiI_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9090;
   std::complex<double> tmp_9091;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9092;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9092 += B1(p,MChaI(gI2),MHpm(gI1))*Conj(CpUChiIconjHpmChaIPL
            (gO2,gI1,gI2))*CpUChiIconjHpmChaIPL(gO1,gI1,gI2);
      }
      tmp_9091 += tmp_9092;
   }
   tmp_9090 += tmp_9091;
   result += (-1) * tmp_9090;
   std::complex<double> tmp_9093;
   std::complex<double> tmp_9094;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9095;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9095 += B1(p,MFe(gI2),MSHpp(gI1))*Conj(CpUChiIconjSHppFePL(
            gO2,gI1,gI2))*CpUChiIconjSHppFePL(gO1,gI1,gI2);
      }
      tmp_9094 += tmp_9095;
   }
   tmp_9093 += tmp_9094;
   result += (-1) * tmp_9093;
   std::complex<double> tmp_9096;
   std::complex<double> tmp_9097;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9098;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9098 += B1(p,MCha(gI2),MSHIPM(gI1))*Conj(
            CpUChiIconjSHIPMChaPL(gO2,gI1,gI2))*CpUChiIconjSHIPMChaPL(gO1,gI1,gI2)
            ;
      }
      tmp_9097 += tmp_9098;
   }
   tmp_9096 += tmp_9097;
   result += (-1) * tmp_9096;
   std::complex<double> tmp_9099;
   std::complex<double> tmp_9100;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9101;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9101 += B1(p,MChiI(gI2),Mhh(gI1))*Conj(CpUChiIhhChiIPL(gO2,
            gI1,gI2))*CpUChiIhhChiIPL(gO1,gI1,gI2);
      }
      tmp_9100 += tmp_9101;
   }
   tmp_9099 += tmp_9100;
   result += (-0.5) * tmp_9099;
   std::complex<double> tmp_9102;
   std::complex<double> tmp_9103;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9103 += B1(p,MChaP,MSe(gI1))*Conj(CpUChiIconjSeChaPPL(gO2,gI1))*
         CpUChiIconjSeChaPPL(gO1,gI1);
   }
   tmp_9102 += tmp_9103;
   result += (-1) * tmp_9102;
   std::complex<double> tmp_9104;
   std::complex<double> tmp_9105;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9106;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9106 += B1(p,MChiI(gI1),MAh(gI2))*Conj(CpUChiIChiIAhPL(gO2,
            gI1,gI2))*CpUChiIChiIAhPL(gO1,gI1,gI2);
      }
      tmp_9105 += tmp_9106;
   }
   tmp_9104 += tmp_9105;
   result += (-0.5) * tmp_9104;
   std::complex<double> tmp_9107;
   std::complex<double> tmp_9108;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9109;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9109 += B1(p,MChi(gI2),MSHI0(gI1))*Conj(CpUChiIconjSHI0ChiPL
            (gO2,gI1,gI2))*CpUChiIconjSHI0ChiPL(gO1,gI1,gI2);
      }
      tmp_9108 += tmp_9109;
   }
   tmp_9107 += tmp_9108;
   result += (-1) * tmp_9107;
   std::complex<double> tmp_9110;
   std::complex<double> tmp_9111;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9111 += B1(p,MChaI(gI2),MVWm)*Conj(CpUChiIconjVWmChaIPR(gO2,gI2))*
         CpUChiIconjVWmChaIPR(gO1,gI2);
   }
   tmp_9110 += tmp_9111;
   result += (-2) * tmp_9110;
   std::complex<double> tmp_9112;
   std::complex<double> tmp_9113;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9113 += B1(p,MChiI(gI2),MVZ)*Conj(CpUChiIVZChiIPR(gO2,gI2))*
         CpUChiIVZChiIPR(gO1,gI2);
   }
   tmp_9112 += tmp_9113;
   result += (-1) * tmp_9112;
   std::complex<double> tmp_9114;
   std::complex<double> tmp_9115;
   for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
      tmp_9115 += B1(p,MChiI(gI2),MVZp)*Conj(CpUChiIVZpChiIPR(gO2,gI2))*
         CpUChiIVZpChiIPR(gO1,gI2);
   }
   tmp_9114 += tmp_9115;
   result += (-1) * tmp_9114;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiP_1(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9116;
   std::complex<double> tmp_9117;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9118;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9118 += B0(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_9117 += tmp_9118;
   }
   tmp_9116 += tmp_9117;
   result += (2) * tmp_9116;
   std::complex<double> tmp_9119;
   std::complex<double> tmp_9120;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9121;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9121 += B0(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9120 += tmp_9121;
   }
   tmp_9119 += tmp_9120;
   result += (2) * tmp_9119;
   std::complex<double> tmp_9122;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9123;
      std::complex<double> tmp_9124;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9124 += B0(p,MChiP(gI1),MAh(gI2))*Conj(CpUChiPChiPAhPL(gO2,
            gI1,gI2))*CpUChiPChiPAhPR(gO1,gI1,gI2);
      }
      tmp_9123 += tmp_9124;
      tmp_9122 += (MChiP(gI1)) * tmp_9123;
   }
   result += tmp_9122;
   std::complex<double> tmp_9125;
   std::complex<double> tmp_9126;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9127;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9127 += B0(p,MFe(gI2),MSHIPM(gI1))*Conj(CpUChiPconjSHIPMFePL
            (gO2,gI1,gI2))*CpUChiPconjSHIPMFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_9126 += tmp_9127;
   }
   tmp_9125 += tmp_9126;
   result += (2) * tmp_9125;
   std::complex<double> tmp_9128;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9129;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9129 += B0(p,MChiP(gI2),Mhh(gI1))*Conj(CpUChiPhhChiPPL(gO2,
            gI1,gI2))*CpUChiPhhChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_9128 += tmp_9129;
   }
   result += tmp_9128;
   std::complex<double> tmp_9130;
   std::complex<double> tmp_9131;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9132;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9132 += B0(p,MChaI(gI2),MSe(gI1))*Conj(CpUChiPconjSeChaIPL(
            gO2,gI1,gI2))*CpUChiPconjSeChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_9131 += tmp_9132;
   }
   tmp_9130 += tmp_9131;
   result += (2) * tmp_9130;
   std::complex<double> tmp_9133;
   std::complex<double> tmp_9134;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9135;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9135 += B0(p,MFd(gI2),MSDX(gI1))*Conj(CpUChiPconjSDXFdPL(gO2
            ,gI1,gI2))*CpUChiPconjSDXFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_9134 += tmp_9135;
   }
   tmp_9133 += tmp_9134;
   result += (6) * tmp_9133;
   std::complex<double> tmp_9136;
   std::complex<double> tmp_9137;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9138;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9138 += B0(p,MFDX(gI2),MSd(gI1))*Conj(CpUChiPconjSdFDXPL(gO2
            ,gI1,gI2))*CpUChiPconjSdFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_9137 += tmp_9138;
   }
   tmp_9136 += tmp_9137;
   result += (6) * tmp_9136;
   std::complex<double> tmp_9139;
   std::complex<double> tmp_9140;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9140 += B0(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_9139 += tmp_9140;
   result += (-4) * tmp_9139;
   std::complex<double> tmp_9141;
   std::complex<double> tmp_9142;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9142 += B0(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2)*MChiP(gI2);
   }
   tmp_9141 += tmp_9142;
   result += (-4) * tmp_9141;
   result += -8*MChaP*B0(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2))*
      CpUChiPconjVWmChaPPL(gO1);

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiP_PR(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPL(gO2))*
      CpUChiPconjVWmChaPPL(gO1);
   std::complex<double> tmp_9143;
   std::complex<double> tmp_9144;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9145;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9145 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPR
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPR(gO1,gI1,gI2);
      }
      tmp_9144 += tmp_9145;
   }
   tmp_9143 += tmp_9144;
   result += (-1) * tmp_9143;
   std::complex<double> tmp_9146;
   std::complex<double> tmp_9147;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9148;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9148 += B1(p,MChiP(gI1),MAh(gI2))*Conj(CpUChiPChiPAhPR(gO2,
            gI1,gI2))*CpUChiPChiPAhPR(gO1,gI1,gI2);
      }
      tmp_9147 += tmp_9148;
   }
   tmp_9146 += tmp_9147;
   result += (-0.5) * tmp_9146;
   std::complex<double> tmp_9149;
   std::complex<double> tmp_9150;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9151;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9151 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPR
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPR(gO1,gI1,gI2);
      }
      tmp_9150 += tmp_9151;
   }
   tmp_9149 += tmp_9150;
   result += (-1) * tmp_9149;
   std::complex<double> tmp_9152;
   std::complex<double> tmp_9153;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9154;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9154 += B1(p,MFe(gI2),MSHIPM(gI1))*Conj(CpUChiPconjSHIPMFePR
            (gO2,gI1,gI2))*CpUChiPconjSHIPMFePR(gO1,gI1,gI2);
      }
      tmp_9153 += tmp_9154;
   }
   tmp_9152 += tmp_9153;
   result += (-1) * tmp_9152;
   std::complex<double> tmp_9155;
   std::complex<double> tmp_9156;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9157;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9157 += B1(p,MChiP(gI2),Mhh(gI1))*Conj(CpUChiPhhChiPPR(gO2,
            gI1,gI2))*CpUChiPhhChiPPR(gO1,gI1,gI2);
      }
      tmp_9156 += tmp_9157;
   }
   tmp_9155 += tmp_9156;
   result += (-0.5) * tmp_9155;
   std::complex<double> tmp_9158;
   std::complex<double> tmp_9159;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9160;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9160 += B1(p,MChaI(gI2),MSe(gI1))*Conj(CpUChiPconjSeChaIPR(
            gO2,gI1,gI2))*CpUChiPconjSeChaIPR(gO1,gI1,gI2);
      }
      tmp_9159 += tmp_9160;
   }
   tmp_9158 += tmp_9159;
   result += (-1) * tmp_9158;
   std::complex<double> tmp_9161;
   std::complex<double> tmp_9162;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9163;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9163 += B1(p,MFDX(gI2),MSd(gI1))*Conj(CpUChiPconjSdFDXPR(gO2
            ,gI1,gI2))*CpUChiPconjSdFDXPR(gO1,gI1,gI2);
      }
      tmp_9162 += tmp_9163;
   }
   tmp_9161 += tmp_9162;
   result += (-3) * tmp_9161;
   std::complex<double> tmp_9164;
   std::complex<double> tmp_9165;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9166;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9166 += B1(p,MFd(gI2),MSDX(gI1))*Conj(CpUChiPconjSDXFdPR(gO2
            ,gI1,gI2))*CpUChiPconjSDXFdPR(gO1,gI1,gI2);
      }
      tmp_9165 += tmp_9166;
   }
   tmp_9164 += tmp_9165;
   result += (-3) * tmp_9164;
   std::complex<double> tmp_9167;
   std::complex<double> tmp_9168;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9168 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPL(gO2,gI2))*
         CpUChiPVZChiPPL(gO1,gI2);
   }
   tmp_9167 += tmp_9168;
   result += (-1) * tmp_9167;
   std::complex<double> tmp_9169;
   std::complex<double> tmp_9170;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9170 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPL(gO2,gI2))*
         CpUChiPVZpChiPPL(gO1,gI2);
   }
   tmp_9169 += tmp_9170;
   result += (-1) * tmp_9169;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChiP_PL(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   result += -2*B1(p,MChaP,MVWm)*Conj(CpUChiPconjVWmChaPPR(gO2))*
      CpUChiPconjVWmChaPPR(gO1);
   std::complex<double> tmp_9171;
   std::complex<double> tmp_9172;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9173;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9173 += B1(p,MCha(gI2),MSHpp(gI1))*Conj(CpUChiPconjSHppChaPL
            (gO2,gI1,gI2))*CpUChiPconjSHppChaPL(gO1,gI1,gI2);
      }
      tmp_9172 += tmp_9173;
   }
   tmp_9171 += tmp_9172;
   result += (-1) * tmp_9171;
   std::complex<double> tmp_9174;
   std::complex<double> tmp_9175;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9176;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9176 += B1(p,MChiP(gI1),MAh(gI2))*Conj(CpUChiPChiPAhPL(gO2,
            gI1,gI2))*CpUChiPChiPAhPL(gO1,gI1,gI2);
      }
      tmp_9175 += tmp_9176;
   }
   tmp_9174 += tmp_9175;
   result += (-0.5) * tmp_9174;
   std::complex<double> tmp_9177;
   std::complex<double> tmp_9178;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9179;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9179 += B1(p,MChi(gI2),MSHp0(gI1))*Conj(CpUChiPconjSHp0ChiPL
            (gO2,gI1,gI2))*CpUChiPconjSHp0ChiPL(gO1,gI1,gI2);
      }
      tmp_9178 += tmp_9179;
   }
   tmp_9177 += tmp_9178;
   result += (-1) * tmp_9177;
   std::complex<double> tmp_9180;
   std::complex<double> tmp_9181;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9182;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9182 += B1(p,MFe(gI2),MSHIPM(gI1))*Conj(CpUChiPconjSHIPMFePL
            (gO2,gI1,gI2))*CpUChiPconjSHIPMFePL(gO1,gI1,gI2);
      }
      tmp_9181 += tmp_9182;
   }
   tmp_9180 += tmp_9181;
   result += (-1) * tmp_9180;
   std::complex<double> tmp_9183;
   std::complex<double> tmp_9184;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9185;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9185 += B1(p,MChiP(gI2),Mhh(gI1))*Conj(CpUChiPhhChiPPL(gO2,
            gI1,gI2))*CpUChiPhhChiPPL(gO1,gI1,gI2);
      }
      tmp_9184 += tmp_9185;
   }
   tmp_9183 += tmp_9184;
   result += (-0.5) * tmp_9183;
   std::complex<double> tmp_9186;
   std::complex<double> tmp_9187;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9188;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9188 += B1(p,MChaI(gI2),MSe(gI1))*Conj(CpUChiPconjSeChaIPL(
            gO2,gI1,gI2))*CpUChiPconjSeChaIPL(gO1,gI1,gI2);
      }
      tmp_9187 += tmp_9188;
   }
   tmp_9186 += tmp_9187;
   result += (-1) * tmp_9186;
   std::complex<double> tmp_9189;
   std::complex<double> tmp_9190;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9191;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9191 += B1(p,MFDX(gI2),MSd(gI1))*Conj(CpUChiPconjSdFDXPL(gO2
            ,gI1,gI2))*CpUChiPconjSdFDXPL(gO1,gI1,gI2);
      }
      tmp_9190 += tmp_9191;
   }
   tmp_9189 += tmp_9190;
   result += (-3) * tmp_9189;
   std::complex<double> tmp_9192;
   std::complex<double> tmp_9193;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9194;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9194 += B1(p,MFd(gI2),MSDX(gI1))*Conj(CpUChiPconjSDXFdPL(gO2
            ,gI1,gI2))*CpUChiPconjSDXFdPL(gO1,gI1,gI2);
      }
      tmp_9193 += tmp_9194;
   }
   tmp_9192 += tmp_9193;
   result += (-3) * tmp_9192;
   std::complex<double> tmp_9195;
   std::complex<double> tmp_9196;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9196 += B1(p,MChiP(gI2),MVZ)*Conj(CpUChiPVZChiPPR(gO2,gI2))*
         CpUChiPVZChiPPR(gO1,gI2);
   }
   tmp_9195 += tmp_9196;
   result += (-1) * tmp_9195;
   std::complex<double> tmp_9197;
   std::complex<double> tmp_9198;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9198 += B1(p,MChiP(gI2),MVZp)*Conj(CpUChiPVZpChiPPR(gO2,gI2))*
         CpUChiPVZpChiPPR(gO1,gI2);
   }
   tmp_9197 += tmp_9198;
   result += (-1) * tmp_9197;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Glu_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_9199;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9200;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9200 += B0(p,MFd(gI2),MSd(gI1))*Conj(CpGluconjSdFdPL(gI1,gI2
            ))*CpGluconjSdFdPR(gI1,gI2)*MFd(gI2);
      }
      tmp_9199 += tmp_9200;
   }
   result += tmp_9199;
   std::complex<double> tmp_9201;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9202;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9202 += B0(p,MFDX(gI2),MSDX(gI1))*Conj(CpGluconjSDXFDXPL(gI1
            ,gI2))*CpGluconjSDXFDXPR(gI1,gI2)*MFDX(gI2);
      }
      tmp_9201 += tmp_9202;
   }
   result += tmp_9201;
   std::complex<double> tmp_9203;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9204;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9204 += B0(p,MFu(gI2),MSu(gI1))*Conj(CpGluconjSuFuPL(gI1,gI2
            ))*CpGluconjSuFuPR(gI1,gI2)*MFu(gI2);
      }
      tmp_9203 += tmp_9204;
   }
   result += tmp_9203;
   result += -12*MGlu*B0(p,MGlu,0)*Conj(CpGluVGGluPR())*CpGluVGGluPL();

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Glu_PR(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPL())*B1(p,MGlu,0);
   std::complex<double> tmp_9205;
   std::complex<double> tmp_9206;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9207;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9207 += AbsSqr(CpGluconjSdFdPR(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_9206 += tmp_9207;
   }
   tmp_9205 += tmp_9206;
   result += (-0.5) * tmp_9205;
   std::complex<double> tmp_9208;
   std::complex<double> tmp_9209;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9210;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9210 += AbsSqr(CpGluconjSDXFDXPR(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_9209 += tmp_9210;
   }
   tmp_9208 += tmp_9209;
   result += (-0.5) * tmp_9208;
   std::complex<double> tmp_9211;
   std::complex<double> tmp_9212;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9213;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9213 += AbsSqr(CpGluconjSuFuPR(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_9212 += tmp_9213;
   }
   tmp_9211 += tmp_9212;
   result += (-0.5) * tmp_9211;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Glu_PL(double p ) const
{
   std::complex<double> result;

   result += -3*AbsSqr(CpGluVGGluPR())*B1(p,MGlu,0);
   std::complex<double> tmp_9214;
   std::complex<double> tmp_9215;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9216;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9216 += AbsSqr(CpGluconjSdFdPL(gI1,gI2))*B1(p,MFd(gI2),MSd(
            gI1));
      }
      tmp_9215 += tmp_9216;
   }
   tmp_9214 += tmp_9215;
   result += (-0.5) * tmp_9214;
   std::complex<double> tmp_9217;
   std::complex<double> tmp_9218;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9219;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9219 += AbsSqr(CpGluconjSDXFDXPL(gI1,gI2))*B1(p,MFDX(gI2),
            MSDX(gI1));
      }
      tmp_9218 += tmp_9219;
   }
   tmp_9217 += tmp_9218;
   result += (-0.5) * tmp_9217;
   std::complex<double> tmp_9220;
   std::complex<double> tmp_9221;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9222;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9222 += AbsSqr(CpGluconjSuFuPL(gI1,gI2))*B1(p,MFu(gI2),MSu(
            gI1));
      }
      tmp_9221 += tmp_9222;
   }
   tmp_9220 += tmp_9221;
   result += (-0.5) * tmp_9220;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaP_1(double p ) const
{
   std::complex<double> result;

   std::complex<double> tmp_9223;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9224;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9224 += B0(p,MCha(gI2),MSHp0(gI1))*Conj(CpbarChaPSHp0ChaPL(
            gI1,gI2))*CpbarChaPSHp0ChaPR(gI1,gI2)*MCha(gI2);
      }
      tmp_9223 += tmp_9224;
   }
   result += tmp_9223;
   std::complex<double> tmp_9225;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9226;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9226 += B0(p,MChi(gI2),MSHpp(gI1))*Conj(CpbarChaPSHppChiPL(
            gI1,gI2))*CpbarChaPSHppChiPR(gI1,gI2)*MChi(gI2);
      }
      tmp_9225 += tmp_9226;
   }
   result += tmp_9225;
   std::complex<double> tmp_9227;
   std::complex<double> tmp_9228;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9229;
      std::complex<double> tmp_9230;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9230 += B0(p,MFu(gI1),MSDX(gI2))*Conj(CpbarChaPbarFuSDXPL(
            gI1,gI2))*CpbarChaPbarFuSDXPR(gI1,gI2);
      }
      tmp_9229 += tmp_9230;
      tmp_9228 += (MFu(gI1)) * tmp_9229;
   }
   tmp_9227 += tmp_9228;
   result += (3) * tmp_9227;
   std::complex<double> tmp_9231;
   std::complex<double> tmp_9232;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9233;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9233 += B0(p,MFDX(gI2),MSu(gI1))*Conj(CpbarChaPconjSuFDXPL(
            gI1,gI2))*CpbarChaPconjSuFDXPR(gI1,gI2)*MFDX(gI2);
      }
      tmp_9232 += tmp_9233;
   }
   tmp_9231 += tmp_9232;
   result += (3) * tmp_9231;
   std::complex<double> tmp_9234;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9235;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9235 += B0(p,MChiI(gI2),MSe(gI1))*Conj(CpbarChaPSeChiIPL(gI1
            ,gI2))*CpbarChaPSeChiIPR(gI1,gI2)*MChiI(gI2);
      }
      tmp_9234 += tmp_9235;
   }
   result += tmp_9234;
   std::complex<double> tmp_9236;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9237;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9237 += B0(p,MFe(gI2),MSHI0(gI1))*Conj(CpbarChaPconjSHI0FePL
            (gI1,gI2))*CpbarChaPconjSHI0FePR(gI1,gI2)*MFe(gI2);
      }
      tmp_9236 += tmp_9237;
   }
   result += tmp_9236;
   std::complex<double> tmp_9238;
   std::complex<double> tmp_9239;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9239 += B0(p,MChiP(gI2),MVWm)*Conj(CpbarChaPVWmChiPPR(gI2))*
         CpbarChaPVWmChiPPL(gI2)*MChiP(gI2);
   }
   tmp_9238 += tmp_9239;
   result += (-4) * tmp_9238;
   result += -4*MChaP*B0(p,MChaP,0)*Conj(CpbarChaPVPChaPPR())*CpbarChaPVPChaPPL
      ();
   result += -4*MChaP*B0(p,MChaP,MVZ)*Conj(CpbarChaPVZChaPPR())*
      CpbarChaPVZChaPPL();
   result += -4*MChaP*B0(p,MChaP,MVZp)*Conj(CpbarChaPVZpChaPPR())*
      CpbarChaPVZpChaPPL();
   std::complex<double> tmp_9240;
   std::complex<double> tmp_9241;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9241 += B0(p,MChaP,Mhh(gI1))*Conj(CpbarChaPhhChaPPL(gI1))*
         CpbarChaPhhChaPPR(gI1);
   }
   tmp_9240 += tmp_9241;
   result += (MChaP) * tmp_9240;
   std::complex<double> tmp_9242;
   std::complex<double> tmp_9243;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9243 += B0(p,MChaP,MAh(gI2))*Conj(CpbarChaPChaPAhPL(gI2))*
         CpbarChaPChaPAhPR(gI2);
   }
   tmp_9242 += tmp_9243;
   result += (MChaP) * tmp_9242;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaP_PR(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPL())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPL())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPL())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_9244;
   std::complex<double> tmp_9245;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9246;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9246 += AbsSqr(CpbarChaPSHp0ChaPR(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_9245 += tmp_9246;
   }
   tmp_9244 += tmp_9245;
   result += (-0.5) * tmp_9244;
   std::complex<double> tmp_9247;
   std::complex<double> tmp_9248;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9249;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9249 += AbsSqr(CpbarChaPSHppChiPR(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_9248 += tmp_9249;
   }
   tmp_9247 += tmp_9248;
   result += (-0.5) * tmp_9247;
   std::complex<double> tmp_9250;
   std::complex<double> tmp_9251;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9252;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9252 += AbsSqr(CpbarChaPbarFuSDXPR(gI1,gI2))*B1(p,MFu(gI1),
            MSDX(gI2));
      }
      tmp_9251 += tmp_9252;
   }
   tmp_9250 += tmp_9251;
   result += (-1.5) * tmp_9250;
   std::complex<double> tmp_9253;
   std::complex<double> tmp_9254;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9254 += AbsSqr(CpbarChaPhhChaPPR(gI1))*B1(p,MChaP,Mhh(gI1));
   }
   tmp_9253 += tmp_9254;
   result += (-0.5) * tmp_9253;
   std::complex<double> tmp_9255;
   std::complex<double> tmp_9256;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9257;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9257 += AbsSqr(CpbarChaPconjSuFDXPR(gI1,gI2))*B1(p,MFDX(gI2)
            ,MSu(gI1));
      }
      tmp_9256 += tmp_9257;
   }
   tmp_9255 += tmp_9256;
   result += (-1.5) * tmp_9255;
   std::complex<double> tmp_9258;
   std::complex<double> tmp_9259;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9260;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9260 += AbsSqr(CpbarChaPSeChiIPR(gI1,gI2))*B1(p,MChiI(gI2),
            MSe(gI1));
      }
      tmp_9259 += tmp_9260;
   }
   tmp_9258 += tmp_9259;
   result += (-0.5) * tmp_9258;
   std::complex<double> tmp_9261;
   std::complex<double> tmp_9262;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9263;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9263 += AbsSqr(CpbarChaPconjSHI0FePR(gI1,gI2))*B1(p,MFe(gI2)
            ,MSHI0(gI1));
      }
      tmp_9262 += tmp_9263;
   }
   tmp_9261 += tmp_9262;
   result += (-0.5) * tmp_9261;
   std::complex<double> tmp_9264;
   std::complex<double> tmp_9265;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9265 += AbsSqr(CpbarChaPVWmChiPPL(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_9264 += tmp_9265;
   result += (-1) * tmp_9264;
   std::complex<double> tmp_9266;
   std::complex<double> tmp_9267;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9267 += AbsSqr(CpbarChaPChaPAhPR(gI2))*B1(p,MChaP,MAh(gI2));
   }
   tmp_9266 += tmp_9267;
   result += (-0.5) * tmp_9266;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_ChaP_PL(double p ) const
{
   std::complex<double> result;

   result += -(AbsSqr(CpbarChaPVPChaPPR())*B1(p,MChaP,0));
   result += -(AbsSqr(CpbarChaPVZChaPPR())*B1(p,MChaP,MVZ));
   result += -(AbsSqr(CpbarChaPVZpChaPPR())*B1(p,MChaP,MVZp));
   std::complex<double> tmp_9268;
   std::complex<double> tmp_9269;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9270;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9270 += AbsSqr(CpbarChaPSHp0ChaPL(gI1,gI2))*B1(p,MCha(gI2),
            MSHp0(gI1));
      }
      tmp_9269 += tmp_9270;
   }
   tmp_9268 += tmp_9269;
   result += (-0.5) * tmp_9268;
   std::complex<double> tmp_9271;
   std::complex<double> tmp_9272;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9273;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9273 += AbsSqr(CpbarChaPSHppChiPL(gI1,gI2))*B1(p,MChi(gI2),
            MSHpp(gI1));
      }
      tmp_9272 += tmp_9273;
   }
   tmp_9271 += tmp_9272;
   result += (-0.5) * tmp_9271;
   std::complex<double> tmp_9274;
   std::complex<double> tmp_9275;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9276;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9276 += AbsSqr(CpbarChaPbarFuSDXPL(gI1,gI2))*B1(p,MFu(gI1),
            MSDX(gI2));
      }
      tmp_9275 += tmp_9276;
   }
   tmp_9274 += tmp_9275;
   result += (-1.5) * tmp_9274;
   std::complex<double> tmp_9277;
   std::complex<double> tmp_9278;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9278 += AbsSqr(CpbarChaPhhChaPPL(gI1))*B1(p,MChaP,Mhh(gI1));
   }
   tmp_9277 += tmp_9278;
   result += (-0.5) * tmp_9277;
   std::complex<double> tmp_9279;
   std::complex<double> tmp_9280;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9281;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9281 += AbsSqr(CpbarChaPconjSuFDXPL(gI1,gI2))*B1(p,MFDX(gI2)
            ,MSu(gI1));
      }
      tmp_9280 += tmp_9281;
   }
   tmp_9279 += tmp_9280;
   result += (-1.5) * tmp_9279;
   std::complex<double> tmp_9282;
   std::complex<double> tmp_9283;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9284;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9284 += AbsSqr(CpbarChaPSeChiIPL(gI1,gI2))*B1(p,MChiI(gI2),
            MSe(gI1));
      }
      tmp_9283 += tmp_9284;
   }
   tmp_9282 += tmp_9283;
   result += (-0.5) * tmp_9282;
   std::complex<double> tmp_9285;
   std::complex<double> tmp_9286;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9287;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9287 += AbsSqr(CpbarChaPconjSHI0FePL(gI1,gI2))*B1(p,MFe(gI2)
            ,MSHI0(gI1));
      }
      tmp_9286 += tmp_9287;
   }
   tmp_9285 += tmp_9286;
   result += (-0.5) * tmp_9285;
   std::complex<double> tmp_9288;
   std::complex<double> tmp_9289;
   for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
      tmp_9289 += AbsSqr(CpbarChaPVWmChiPPR(gI2))*B1(p,MChiP(gI2),MVWm);
   }
   tmp_9288 += tmp_9289;
   result += (-1) * tmp_9288;
   std::complex<double> tmp_9290;
   std::complex<double> tmp_9291;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9291 += AbsSqr(CpbarChaPChaPAhPL(gI2))*B1(p,MChaP,MAh(gI2));
   }
   tmp_9290 += tmp_9291;
   result += (-0.5) * tmp_9290;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_VZ_heavy(double p ) const
{
   std::complex<double> result;

   result += (AbsSqr(CpVZbarChaPChaPPL()) + AbsSqr(CpVZbarChaPChaPPR()))*H0(p,
      MChaP,MChaP);
   std::complex<double> tmp_9292;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9292 += A0(MSHp0(gI1))*CpVZVZconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_9292;
   std::complex<double> tmp_9293;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9293 += A0(MSHpp(gI1))*CpVZVZconjSHppSHpp(gI1,gI1);
   }
   result += tmp_9293;
   std::complex<double> tmp_9294;
   std::complex<double> tmp_9295;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9296;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9296 += AbsSqr(CpVZconjSHp0SHp0(gI1,gI2))*B00(p,MSHp0(gI1),
            MSHp0(gI2));
      }
      tmp_9295 += tmp_9296;
   }
   tmp_9294 += tmp_9295;
   result += (-4) * tmp_9294;
   std::complex<double> tmp_9297;
   std::complex<double> tmp_9298;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9299;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9299 += AbsSqr(CpVZconjSHppSHpp(gI1,gI2))*B00(p,MSHpp(gI1),
            MSHpp(gI2));
      }
      tmp_9298 += tmp_9299;
   }
   tmp_9297 += tmp_9298;
   result += (-4) * tmp_9297;
   std::complex<double> tmp_9300;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9301;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9301 += (AbsSqr(CpVZbarChaChaPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaChaPR(gI1,gI2)))*H0(p,MCha(gI1),MCha(gI2));
         tmp_9301 += 4*B0(p,MCha(gI1),MCha(gI2))*MCha(gI1)*MCha(gI2)*Re(
            Conj(CpVZbarChaChaPL(gI1,gI2))*CpVZbarChaChaPR(gI1,gI2));
      }
      tmp_9300 += tmp_9301;
   }
   result += tmp_9300;
   std::complex<double> tmp_9302;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9303;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9303 += (AbsSqr(CpVZbarChaIChaIPL(gI1,gI2)) + AbsSqr(
            CpVZbarChaIChaIPR(gI1,gI2)))*H0(p,MChaI(gI1),MChaI(gI2));
         tmp_9303 += 4*B0(p,MChaI(gI1),MChaI(gI2))*MChaI(gI1)*MChaI(gI2)*
            Re(Conj(CpVZbarChaIChaIPL(gI1,gI2))*CpVZbarChaIChaIPR(gI1,gI2));
      }
      tmp_9302 += tmp_9303;
   }
   result += tmp_9302;
   std::complex<double> tmp_9304;
   std::complex<double> tmp_9305;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9306;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9306 += (AbsSqr(CpVZChiPChiPPL(gI1,gI2)) + AbsSqr(
            CpVZChiPChiPPR(gI1,gI2)))*H0(p,MChiP(gI1),MChiP(gI2));
         tmp_9306 += 4*B0(p,MChiP(gI1),MChiP(gI2))*MChiP(gI1)*MChiP(gI2)*
            Re(Conj(CpVZChiPChiPPL(gI1,gI2))*CpVZChiPChiPPR(gI1,gI2));
      }
      tmp_9305 += tmp_9306;
   }
   tmp_9304 += tmp_9305;
   result += (0.5) * tmp_9304;
   std::complex<double> tmp_9307;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9307 += A0(MSv(gI1))*CpVZVZconjSvSv(gI1,gI1);
   }
   result += tmp_9307;
   std::complex<double> tmp_9308;
   std::complex<double> tmp_9309;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9310;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9310 += AbsSqr(CpVZconjSvSv(gI1,gI2))*B00(p,MSv(gI1),MSv(gI2
            ));
      }
      tmp_9309 += tmp_9310;
   }
   tmp_9308 += tmp_9309;
   result += (-4) * tmp_9308;
   std::complex<double> tmp_9311;
   std::complex<double> tmp_9312;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9313;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9313 += (AbsSqr(CpVZbarFDXFDXPL(gI1,gI2)) + AbsSqr(
            CpVZbarFDXFDXPR(gI1,gI2)))*H0(p,MFDX(gI1),MFDX(gI2));
         tmp_9313 += 4*B0(p,MFDX(gI1),MFDX(gI2))*MFDX(gI1)*MFDX(gI2)*Re(
            Conj(CpVZbarFDXFDXPL(gI1,gI2))*CpVZbarFDXFDXPR(gI1,gI2));
      }
      tmp_9312 += tmp_9313;
   }
   tmp_9311 += tmp_9312;
   result += (3) * tmp_9311;
   std::complex<double> tmp_9314;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_9314 += A0(MSHIPM(gI1))*CpVZVZconjSHIPMSHIPM(gI1,gI1);
   }
   result += tmp_9314;
   std::complex<double> tmp_9315;
   std::complex<double> tmp_9316;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9317;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_9317 += AbsSqr(CpVZconjSHIPMSHIPM(gI1,gI2))*B00(p,MSHIPM(gI1
            ),MSHIPM(gI2));
      }
      tmp_9316 += tmp_9317;
   }
   tmp_9315 += tmp_9316;
   result += (-4) * tmp_9315;
   std::complex<double> tmp_9318;
   std::complex<double> tmp_9319;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9319 += A0(Mhh(gI1))*CpVZVZhhhh(gI1,gI1);
   }
   tmp_9318 += tmp_9319;
   result += (0.5) * tmp_9318;
   std::complex<double> tmp_9320;
   std::complex<double> tmp_9321;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9322;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9322 += AbsSqr(CpVZhhAh(gI1,2 + gI2))*B00(p,MAh(2 + gI2),Mhh
            (gI1));
      }
      tmp_9321 += tmp_9322;
   }
   tmp_9320 += tmp_9321;
   result += (-4) * tmp_9320;
   std::complex<double> tmp_9323;
   std::complex<double> tmp_9324;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9324 += A0(MSd(gI1))*CpVZVZconjSdSd(gI1,gI1);
   }
   tmp_9323 += tmp_9324;
   result += (3) * tmp_9323;
   std::complex<double> tmp_9325;
   std::complex<double> tmp_9326;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9326 += A0(MSDX(gI1))*CpVZVZconjSDXSDX(gI1,gI1);
   }
   tmp_9325 += tmp_9326;
   result += (3) * tmp_9325;
   std::complex<double> tmp_9327;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9327 += A0(MSe(gI1))*CpVZVZconjSeSe(gI1,gI1);
   }
   result += tmp_9327;
   std::complex<double> tmp_9328;
   std::complex<double> tmp_9329;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9329 += A0(MSu(gI1))*CpVZVZconjSuSu(gI1,gI1);
   }
   tmp_9328 += tmp_9329;
   result += (3) * tmp_9328;
   std::complex<double> tmp_9330;
   std::complex<double> tmp_9331;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9332;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9332 += AbsSqr(CpVZconjSdSd(gI1,gI2))*B00(p,MSd(gI1),MSd(gI2
            ));
      }
      tmp_9331 += tmp_9332;
   }
   tmp_9330 += tmp_9331;
   result += (-12) * tmp_9330;
   std::complex<double> tmp_9333;
   std::complex<double> tmp_9334;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9335;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9335 += AbsSqr(CpVZconjSDXSDX(gI1,gI2))*B00(p,MSDX(gI1),MSDX
            (gI2));
      }
      tmp_9334 += tmp_9335;
   }
   tmp_9333 += tmp_9334;
   result += (-12) * tmp_9333;
   std::complex<double> tmp_9336;
   std::complex<double> tmp_9337;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9338;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9338 += AbsSqr(CpVZconjSeSe(gI1,gI2))*B00(p,MSe(gI1),MSe(gI2
            ));
      }
      tmp_9337 += tmp_9338;
   }
   tmp_9336 += tmp_9337;
   result += (-4) * tmp_9336;
   std::complex<double> tmp_9339;
   std::complex<double> tmp_9340;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9341;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9341 += AbsSqr(CpVZconjSuSu(gI1,gI2))*B00(p,MSu(gI1),MSu(gI2
            ));
      }
      tmp_9340 += tmp_9341;
   }
   tmp_9339 += tmp_9340;
   result += (-12) * tmp_9339;
   std::complex<double> tmp_9342;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9342 += A0(MSHI0(gI1))*CpVZVZconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_9342;
   std::complex<double> tmp_9343;
   std::complex<double> tmp_9344;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9345;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9345 += AbsSqr(CpVZconjSHI0SHI0(gI1,gI2))*B00(p,MSHI0(gI1),
            MSHI0(gI2));
      }
      tmp_9344 += tmp_9345;
   }
   tmp_9343 += tmp_9344;
   result += (-4) * tmp_9343;
   std::complex<double> tmp_9346;
   std::complex<double> tmp_9347;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9348;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9348 += (AbsSqr(CpVZChiIChiIPL(gI1,gI2)) + AbsSqr(
            CpVZChiIChiIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChiI(gI2));
         tmp_9348 += 4*B0(p,MChiI(gI1),MChiI(gI2))*MChiI(gI1)*MChiI(gI2)*
            Re(Conj(CpVZChiIChiIPL(gI1,gI2))*CpVZChiIChiIPR(gI1,gI2));
      }
      tmp_9347 += tmp_9348;
   }
   tmp_9346 += tmp_9347;
   result += (0.5) * tmp_9346;
   std::complex<double> tmp_9349;
   std::complex<double> tmp_9350;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_9351;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9351 += (AbsSqr(CpVZChiChiPL(gI1,gI2)) + AbsSqr(CpVZChiChiPR
            (gI1,gI2)))*H0(p,MChi(gI1),MChi(gI2));
         tmp_9351 += 4*B0(p,MChi(gI1),MChi(gI2))*MChi(gI1)*MChi(gI2)*Re(
            Conj(CpVZChiChiPL(gI1,gI2))*CpVZChiChiPR(gI1,gI2));
      }
      tmp_9350 += tmp_9351;
   }
   tmp_9349 += tmp_9350;
   result += (0.5) * tmp_9349;
   std::complex<double> tmp_9352;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9352 += AbsSqr(CpVZVZhh(gI2))*B0(p,MVZ,Mhh(gI2));
   }
   result += tmp_9352;
   std::complex<double> tmp_9353;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9353 += AbsSqr(CpVZVZphh(gI2))*B0(p,MVZp,Mhh(gI2));
   }
   result += tmp_9353;
   result += 4*B0(p,MChaP,MChaP)*Re(Conj(CpVZbarChaPChaPPL())*CpVZbarChaPChaPPR
      ())*Sqr(MChaP);

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_VWm_heavy(double p ) const
{
   std::complex<double> result;

   result += AbsSqr(CpconjVWmbarVWmVZp())*B00(p,MVZp,MVWm);
   result += AbsSqr(CpconjVWmbarVZpVWm())*B00(p,MVWm,MVZp);
   result += AbsSqr(CpconjVWmVZpHpm(1))*B0(p,MVZp,MHpm(1));
   result += -0.5*A0(MVZp)*(4*CpVWmconjVWmVZpVZp1() + CpVWmconjVWmVZpVZp2() +
      CpVWmconjVWmVZpVZp3());
   std::complex<double> tmp_9354;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9354 += A0(MSHp0(gI1))*CpVWmconjVWmconjSHp0SHp0(gI1,gI1);
   }
   result += tmp_9354;
   std::complex<double> tmp_9355;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9355 += A0(MSHpp(gI1))*CpVWmconjVWmconjSHppSHpp(gI1,gI1);
   }
   result += tmp_9355;
   std::complex<double> tmp_9356;
   std::complex<double> tmp_9357;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9358;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9358 += AbsSqr(CpconjVWmconjSHp0SHpp(gI1,gI2))*B00(p,MSHpp(
            gI2),MSHp0(gI1));
      }
      tmp_9357 += tmp_9358;
   }
   tmp_9356 += tmp_9357;
   result += (-4) * tmp_9356;
   std::complex<double> tmp_9359;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9359 += (AbsSqr(CpconjVWmChiPChaPPL(gI1)) + AbsSqr(
         CpconjVWmChiPChaPPR(gI1)))*H0(p,MChiP(gI1),MChaP);
      tmp_9359 += 4*MChaP*B0(p,MChiP(gI1),MChaP)*MChiP(gI1)*Re(Conj(
         CpconjVWmChiPChaPPL(gI1))*CpconjVWmChiPChaPPR(gI1));
   }
   result += tmp_9359;
   std::complex<double> tmp_9360;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9360 += A0(MSv(gI1))*CpVWmconjVWmconjSvSv(gI1,gI1);
   }
   result += tmp_9360;
   std::complex<double> tmp_9361;
   std::complex<double> tmp_9362;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9363;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9363 += AbsSqr(CpconjVWmconjSvSe(gI1,gI2))*B00(p,MSe(gI2),
            MSv(gI1));
      }
      tmp_9362 += tmp_9363;
   }
   tmp_9361 += tmp_9362;
   result += (-4) * tmp_9361;
   std::complex<double> tmp_9364;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_9364 += A0(MSHIPM(gI1))*CpVWmconjVWmconjSHIPMSHIPM(gI1,gI1);
   }
   result += tmp_9364;
   std::complex<double> tmp_9365;
   std::complex<double> tmp_9366;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9366 += A0(Mhh(gI1))*CpVWmconjVWmhhhh(gI1,gI1);
   }
   tmp_9365 += tmp_9366;
   result += (0.5) * tmp_9365;
   std::complex<double> tmp_9367;
   std::complex<double> tmp_9368;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9368 += A0(MSd(gI1))*CpVWmconjVWmconjSdSd(gI1,gI1);
   }
   tmp_9367 += tmp_9368;
   result += (3) * tmp_9367;
   std::complex<double> tmp_9369;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9369 += A0(MSe(gI1))*CpVWmconjVWmconjSeSe(gI1,gI1);
   }
   result += tmp_9369;
   std::complex<double> tmp_9370;
   std::complex<double> tmp_9371;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9371 += A0(MSu(gI1))*CpVWmconjVWmconjSuSu(gI1,gI1);
   }
   tmp_9370 += tmp_9371;
   result += (3) * tmp_9370;
   std::complex<double> tmp_9372;
   std::complex<double> tmp_9373;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9374;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9374 += AbsSqr(CpconjVWmconjSuSd(gI1,gI2))*B00(p,MSd(gI2),
            MSu(gI1));
      }
      tmp_9373 += tmp_9374;
   }
   tmp_9372 += tmp_9373;
   result += (-12) * tmp_9372;
   std::complex<double> tmp_9375;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9375 += A0(MSHI0(gI1))*CpVWmconjVWmconjSHI0SHI0(gI1,gI1);
   }
   result += tmp_9375;
   std::complex<double> tmp_9376;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9377;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9377 += (AbsSqr(CpconjVWmChiIChaIPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiIChaIPR(gI1,gI2)))*H0(p,MChiI(gI1),MChaI(gI2));
         tmp_9377 += 4*B0(p,MChiI(gI1),MChaI(gI2))*MChaI(gI2)*MChiI(gI1)*
            Re(Conj(CpconjVWmChiIChaIPL(gI1,gI2))*CpconjVWmChiIChaIPR(gI1,gI2));
      }
      tmp_9376 += tmp_9377;
   }
   result += tmp_9376;
   std::complex<double> tmp_9378;
   std::complex<double> tmp_9379;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      std::complex<double> tmp_9380;
      for (unsigned gI2 = 0; gI2 < 4; ++gI2) {
         tmp_9380 += AbsSqr(CpconjVWmconjSHI0SHIPM(gI1,gI2))*B00(p,MSHIPM
            (gI2),MSHI0(gI1));
      }
      tmp_9379 += tmp_9380;
   }
   tmp_9378 += tmp_9379;
   result += (-4) * tmp_9378;
   std::complex<double> tmp_9381;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      std::complex<double> tmp_9382;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9382 += (AbsSqr(CpconjVWmChiChaPL(gI1,gI2)) + AbsSqr(
            CpconjVWmChiChaPR(gI1,gI2)))*H0(p,MChi(gI1),MCha(gI2));
         tmp_9382 += 4*B0(p,MChi(gI1),MCha(gI2))*MCha(gI2)*MChi(gI1)*Re(
            Conj(CpconjVWmChiChaPL(gI1,gI2))*CpconjVWmChiChaPR(gI1,gI2));
      }
      tmp_9381 += tmp_9382;
   }
   result += tmp_9381;
   std::complex<double> tmp_9383;
   std::complex<double> tmp_9384;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9384 += AbsSqr(CpconjVWmHpmhh(1,gI2))*B00(p,Mhh(gI2),MHpm(1));
   }
   tmp_9383 += tmp_9384;
   result += (-4) * tmp_9383;
   std::complex<double> tmp_9385;
   for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
      tmp_9385 += AbsSqr(CpconjVWmVWmhh(gI2))*B0(p,MVWm,Mhh(gI2));
   }
   result += tmp_9385;
   result += -(AbsSqr(CpconjVWmVZpVWm())*(A0(MVWm) + A0(MVZp) + 10*B00(p,MVZp,
      MVWm) + B0(p,MVZp,MVWm)*(Sqr(MVWm) + Sqr(MVZp) + 4*Sqr(p))));

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9386;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9387;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9387 += B0(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarFeSHp0ChaIPL(
            gO2,gI1,gI2))*CpbarFeSHp0ChaIPR(gO1,gI1,gI2)*MChaI(gI2);
      }
      tmp_9386 += tmp_9387;
   }
   result += tmp_9386;
   std::complex<double> tmp_9388;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9389;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9389 += B0(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2)*MFv(gI2);
      }
      tmp_9388 += tmp_9389;
   }
   result += tmp_9388;
   std::complex<double> tmp_9390;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9391;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9391 += B0(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarFeSHppChiIPL(
            gO2,gI1,gI2))*CpbarFeSHppChiIPR(gO1,gI1,gI2)*MChiI(gI2);
      }
      tmp_9390 += tmp_9391;
   }
   result += tmp_9390;
   std::complex<double> tmp_9392;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9393;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9393 += B0(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_9392 += tmp_9393;
   }
   result += tmp_9392;
   std::complex<double> tmp_9394;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9395;
      std::complex<double> tmp_9396;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9396 += B0(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_9395 += tmp_9396;
      tmp_9394 += (MFe(gI1)) * tmp_9395;
   }
   result += tmp_9394;
   std::complex<double> tmp_9397;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9398;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9398 += B0(p,MChiP(gI2),MSHIPM(gI1))*Conj(CpbarFeSHIPMChiPPL
            (gO2,gI1,gI2))*CpbarFeSHIPMChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_9397 += tmp_9398;
   }
   result += tmp_9397;
   std::complex<double> tmp_9399;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9400;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9400 += B0(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2)*MFe(gI2);
      }
      tmp_9399 += tmp_9400;
   }
   result += tmp_9399;
   std::complex<double> tmp_9401;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9402;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9402 += B0(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9401 += tmp_9402;
   }
   result += tmp_9401;
   std::complex<double> tmp_9403;
   std::complex<double> tmp_9404;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9404 += B0(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_9403 += tmp_9404;
   result += (-4) * tmp_9403;
   std::complex<double> tmp_9405;
   std::complex<double> tmp_9406;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9406 += B0(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2)*MFe(gI2);
   }
   tmp_9405 += tmp_9406;
   result += (-4) * tmp_9405;
   std::complex<double> tmp_9407;
   std::complex<double> tmp_9408;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9408 += B0(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2)*MFv(gI2);
   }
   tmp_9407 += tmp_9408;
   result += (-4) * tmp_9407;
   std::complex<double> tmp_9409;
   std::complex<double> tmp_9410;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9410 += B0(p,MChaP,MSHI0(gI1))*Conj(CpbarFeSHI0ChaPPL(gO2,gI1))*
         CpbarFeSHI0ChaPPR(gO1,gI1);
   }
   tmp_9409 += tmp_9410;
   result += (MChaP) * tmp_9409;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9411;
   std::complex<double> tmp_9412;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9413;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9413 += B1(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarFeSHp0ChaIPR(
            gO2,gI1,gI2))*CpbarFeSHp0ChaIPR(gO1,gI1,gI2);
      }
      tmp_9412 += tmp_9413;
   }
   tmp_9411 += tmp_9412;
   result += (-0.5) * tmp_9411;
   std::complex<double> tmp_9414;
   std::complex<double> tmp_9415;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9416;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9416 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPR(gO2,gI1
            ,gI2))*CpbarFeHpmFvPR(gO1,gI1,gI2);
      }
      tmp_9415 += tmp_9416;
   }
   tmp_9414 += tmp_9415;
   result += (-0.5) * tmp_9414;
   std::complex<double> tmp_9417;
   std::complex<double> tmp_9418;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9419;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9419 += B1(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarFeSHppChiIPR(
            gO2,gI1,gI2))*CpbarFeSHppChiIPR(gO1,gI1,gI2);
      }
      tmp_9418 += tmp_9419;
   }
   tmp_9417 += tmp_9418;
   result += (-0.5) * tmp_9417;
   std::complex<double> tmp_9420;
   std::complex<double> tmp_9421;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9422;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9422 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPR(gO2,gI1
            ,gI2))*CpbarFeSvChaPR(gO1,gI1,gI2);
      }
      tmp_9421 += tmp_9422;
   }
   tmp_9420 += tmp_9421;
   result += (-0.5) * tmp_9420;
   std::complex<double> tmp_9423;
   std::complex<double> tmp_9424;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9425;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9425 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPR(gO2,gI1,
            gI2))*CpbarFeFeAhPR(gO1,gI1,gI2);
      }
      tmp_9424 += tmp_9425;
   }
   tmp_9423 += tmp_9424;
   result += (-0.5) * tmp_9423;
   std::complex<double> tmp_9426;
   std::complex<double> tmp_9427;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9428;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9428 += B1(p,MChiP(gI2),MSHIPM(gI1))*Conj(CpbarFeSHIPMChiPPR
            (gO2,gI1,gI2))*CpbarFeSHIPMChiPPR(gO1,gI1,gI2);
      }
      tmp_9427 += tmp_9428;
   }
   tmp_9426 += tmp_9427;
   result += (-0.5) * tmp_9426;
   std::complex<double> tmp_9429;
   std::complex<double> tmp_9430;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9431;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9431 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePR(gO2,gI1,
            gI2))*CpbarFehhFePR(gO1,gI1,gI2);
      }
      tmp_9430 += tmp_9431;
   }
   tmp_9429 += tmp_9430;
   result += (-0.5) * tmp_9429;
   std::complex<double> tmp_9432;
   std::complex<double> tmp_9433;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9434;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9434 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPR(gO2,gI1
            ,gI2))*CpbarFeSeChiPR(gO1,gI1,gI2);
      }
      tmp_9433 += tmp_9434;
   }
   tmp_9432 += tmp_9433;
   result += (-0.5) * tmp_9432;
   std::complex<double> tmp_9435;
   std::complex<double> tmp_9436;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9436 += B1(p,MChaP,MSHI0(gI1))*Conj(CpbarFeSHI0ChaPPR(gO2,gI1))*
         CpbarFeSHI0ChaPPR(gO1,gI1);
   }
   tmp_9435 += tmp_9436;
   result += (-0.5) * tmp_9435;
   std::complex<double> tmp_9437;
   std::complex<double> tmp_9438;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9438 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPL(gO2,gI2))*
         CpbarFeVWmFvPL(gO1,gI2);
   }
   tmp_9437 += tmp_9438;
   result += (-1) * tmp_9437;
   std::complex<double> tmp_9439;
   std::complex<double> tmp_9440;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9440 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePL(gO2,gI2))*
         CpbarFeVZFePL(gO1,gI2);
   }
   tmp_9439 += tmp_9440;
   result += (-1) * tmp_9439;
   std::complex<double> tmp_9441;
   std::complex<double> tmp_9442;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9442 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePL(gO2,gI2))*
         CpbarFeVZpFePL(gO1,gI2);
   }
   tmp_9441 += tmp_9442;
   result += (-1) * tmp_9441;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fe_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9443;
   std::complex<double> tmp_9444;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9445;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9445 += B1(p,MChaI(gI2),MSHp0(gI1))*Conj(CpbarFeSHp0ChaIPL(
            gO2,gI1,gI2))*CpbarFeSHp0ChaIPL(gO1,gI1,gI2);
      }
      tmp_9444 += tmp_9445;
   }
   tmp_9443 += tmp_9444;
   result += (-0.5) * tmp_9443;
   std::complex<double> tmp_9446;
   std::complex<double> tmp_9447;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9448;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9448 += B1(p,MFv(gI2),MHpm(gI1))*Conj(CpbarFeHpmFvPL(gO2,gI1
            ,gI2))*CpbarFeHpmFvPL(gO1,gI1,gI2);
      }
      tmp_9447 += tmp_9448;
   }
   tmp_9446 += tmp_9447;
   result += (-0.5) * tmp_9446;
   std::complex<double> tmp_9449;
   std::complex<double> tmp_9450;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9451;
      for (unsigned gI2 = 0; gI2 < 7; ++gI2) {
         tmp_9451 += B1(p,MChiI(gI2),MSHpp(gI1))*Conj(CpbarFeSHppChiIPL(
            gO2,gI1,gI2))*CpbarFeSHppChiIPL(gO1,gI1,gI2);
      }
      tmp_9450 += tmp_9451;
   }
   tmp_9449 += tmp_9450;
   result += (-0.5) * tmp_9449;
   std::complex<double> tmp_9452;
   std::complex<double> tmp_9453;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9454;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9454 += B1(p,MCha(gI2),MSv(gI1))*Conj(CpbarFeSvChaPL(gO2,gI1
            ,gI2))*CpbarFeSvChaPL(gO1,gI1,gI2);
      }
      tmp_9453 += tmp_9454;
   }
   tmp_9452 += tmp_9453;
   result += (-0.5) * tmp_9452;
   std::complex<double> tmp_9455;
   std::complex<double> tmp_9456;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9457;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9457 += B1(p,MFe(gI1),MAh(gI2))*Conj(CpbarFeFeAhPL(gO2,gI1,
            gI2))*CpbarFeFeAhPL(gO1,gI1,gI2);
      }
      tmp_9456 += tmp_9457;
   }
   tmp_9455 += tmp_9456;
   result += (-0.5) * tmp_9455;
   std::complex<double> tmp_9458;
   std::complex<double> tmp_9459;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      std::complex<double> tmp_9460;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9460 += B1(p,MChiP(gI2),MSHIPM(gI1))*Conj(CpbarFeSHIPMChiPPL
            (gO2,gI1,gI2))*CpbarFeSHIPMChiPPL(gO1,gI1,gI2);
      }
      tmp_9459 += tmp_9460;
   }
   tmp_9458 += tmp_9459;
   result += (-0.5) * tmp_9458;
   std::complex<double> tmp_9461;
   std::complex<double> tmp_9462;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9463;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9463 += B1(p,MFe(gI2),Mhh(gI1))*Conj(CpbarFehhFePL(gO2,gI1,
            gI2))*CpbarFehhFePL(gO1,gI1,gI2);
      }
      tmp_9462 += tmp_9463;
   }
   tmp_9461 += tmp_9462;
   result += (-0.5) * tmp_9461;
   std::complex<double> tmp_9464;
   std::complex<double> tmp_9465;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9466;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9466 += B1(p,MChi(gI2),MSe(gI1))*Conj(CpbarFeSeChiPL(gO2,gI1
            ,gI2))*CpbarFeSeChiPL(gO1,gI1,gI2);
      }
      tmp_9465 += tmp_9466;
   }
   tmp_9464 += tmp_9465;
   result += (-0.5) * tmp_9464;
   std::complex<double> tmp_9467;
   std::complex<double> tmp_9468;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9468 += B1(p,MChaP,MSHI0(gI1))*Conj(CpbarFeSHI0ChaPPL(gO2,gI1))*
         CpbarFeSHI0ChaPPL(gO1,gI1);
   }
   tmp_9467 += tmp_9468;
   result += (-0.5) * tmp_9467;
   std::complex<double> tmp_9469;
   std::complex<double> tmp_9470;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9470 += B1(p,MFv(gI2),MVWm)*Conj(CpbarFeVWmFvPR(gO2,gI2))*
         CpbarFeVWmFvPR(gO1,gI2);
   }
   tmp_9469 += tmp_9470;
   result += (-1) * tmp_9469;
   std::complex<double> tmp_9471;
   std::complex<double> tmp_9472;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9472 += B1(p,MFe(gI2),MVZ)*Conj(CpbarFeVZFePR(gO2,gI2))*
         CpbarFeVZFePR(gO1,gI2);
   }
   tmp_9471 += tmp_9472;
   result += (-1) * tmp_9471;
   std::complex<double> tmp_9473;
   std::complex<double> tmp_9474;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9474 += B1(p,MFe(gI2),MVZp)*Conj(CpbarFeVZpFePR(gO2,gI2))*
         CpbarFeVZpFePR(gO1,gI2);
   }
   tmp_9473 += tmp_9474;
   result += (-1) * tmp_9473;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9475;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9476;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9476 += B0(p,MFDX(gI2),MSHp0(gI1))*Conj(CpbarFdconjSHp0FDXPL
            (gO2,gI1,gI2))*CpbarFdconjSHp0FDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_9475 += tmp_9476;
   }
   result += tmp_9475;
   std::complex<double> tmp_9477;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9478;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9478 += B0(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_9477 += tmp_9478;
   }
   result += tmp_9477;
   std::complex<double> tmp_9479;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9480;
      std::complex<double> tmp_9481;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9481 += B0(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_9480 += tmp_9481;
      tmp_9479 += (MFd(gI1)) * tmp_9480;
   }
   result += tmp_9479;
   std::complex<double> tmp_9482;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9483;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9483 += B0(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_9482 += tmp_9483;
   }
   result += tmp_9482;
   std::complex<double> tmp_9484;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9485;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9485 += B0(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2)*MCha(gI2);
      }
      tmp_9484 += tmp_9485;
   }
   result += tmp_9484;
   std::complex<double> tmp_9486;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9487;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9487 += B0(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarFdSDXChiPPL(gO2
            ,gI1,gI2))*CpbarFdSDXChiPPR(gO1,gI1,gI2)*MChiP(gI2);
      }
      tmp_9486 += tmp_9487;
   }
   result += tmp_9486;
   std::complex<double> tmp_9488;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9489;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9489 += B0(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9488 += tmp_9489;
   }
   result += tmp_9488;
   std::complex<double> tmp_9490;
   std::complex<double> tmp_9491;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9491 += B0(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_9490 += tmp_9491;
   result += (-4) * tmp_9490;
   std::complex<double> tmp_9492;
   std::complex<double> tmp_9493;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9493 += B0(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_9492 += tmp_9493;
   result += (-4) * tmp_9492;
   std::complex<double> tmp_9494;
   std::complex<double> tmp_9495;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9495 += B0(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9494 += tmp_9495;
   result += (-4) * tmp_9494;
   std::complex<double> tmp_9496;
   std::complex<double> tmp_9497;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9497 += B0(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,1))*
         CpbarFdSdGluPR(gO1,gI1,1);
   }
   tmp_9496 += tmp_9497;
   result += (1.3333333333333333*MGlu) * tmp_9496;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9498;
   std::complex<double> tmp_9499;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9500;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9500 += B1(p,MFDX(gI2),MSHp0(gI1))*Conj(CpbarFdconjSHp0FDXPR
            (gO2,gI1,gI2))*CpbarFdconjSHp0FDXPR(gO1,gI1,gI2);
      }
      tmp_9499 += tmp_9500;
   }
   tmp_9498 += tmp_9499;
   result += (-0.5) * tmp_9498;
   std::complex<double> tmp_9501;
   std::complex<double> tmp_9502;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9503;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9503 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPR(gO2,gI1
            ,gI2))*CpbarFdHpmFuPR(gO1,gI1,gI2);
      }
      tmp_9502 += tmp_9503;
   }
   tmp_9501 += tmp_9502;
   result += (-0.5) * tmp_9501;
   std::complex<double> tmp_9504;
   std::complex<double> tmp_9505;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9506;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9506 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPR(gO2,gI1,
            gI2))*CpbarFdFdAhPR(gO1,gI1,gI2);
      }
      tmp_9505 += tmp_9506;
   }
   tmp_9504 += tmp_9505;
   result += (-0.5) * tmp_9504;
   std::complex<double> tmp_9507;
   std::complex<double> tmp_9508;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9509;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9509 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPR(gO2,gI1,
            gI2))*CpbarFdhhFdPR(gO1,gI1,gI2);
      }
      tmp_9508 += tmp_9509;
   }
   tmp_9507 += tmp_9508;
   result += (-0.5) * tmp_9507;
   std::complex<double> tmp_9510;
   std::complex<double> tmp_9511;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9511 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPR(gO2,gI1,1))*
         CpbarFdSdGluPR(gO1,gI1,1);
   }
   tmp_9510 += tmp_9511;
   result += (-0.6666666666666666) * tmp_9510;
   std::complex<double> tmp_9512;
   std::complex<double> tmp_9513;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9514;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9514 += B1(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarFdSDXChiPPR(gO2
            ,gI1,gI2))*CpbarFdSDXChiPPR(gO1,gI1,gI2);
      }
      tmp_9513 += tmp_9514;
   }
   tmp_9512 += tmp_9513;
   result += (-0.5) * tmp_9512;
   std::complex<double> tmp_9515;
   std::complex<double> tmp_9516;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9517;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9517 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPR(gO2,gI1
            ,gI2))*CpbarFdSuChaPR(gO1,gI1,gI2);
      }
      tmp_9516 += tmp_9517;
   }
   tmp_9515 += tmp_9516;
   result += (-0.5) * tmp_9515;
   std::complex<double> tmp_9518;
   std::complex<double> tmp_9519;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9520;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9520 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPR(gO2,gI1
            ,gI2))*CpbarFdSdChiPR(gO1,gI1,gI2);
      }
      tmp_9519 += tmp_9520;
   }
   tmp_9518 += tmp_9519;
   result += (-0.5) * tmp_9518;
   std::complex<double> tmp_9521;
   std::complex<double> tmp_9522;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9522 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPL(gO2,gI2))*
         CpbarFdVWmFuPL(gO1,gI2);
   }
   tmp_9521 += tmp_9522;
   result += (-1) * tmp_9521;
   std::complex<double> tmp_9523;
   std::complex<double> tmp_9524;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9524 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPL(gO2,gI2))*
         CpbarFdVZFdPL(gO1,gI2);
   }
   tmp_9523 += tmp_9524;
   result += (-1) * tmp_9523;
   std::complex<double> tmp_9525;
   std::complex<double> tmp_9526;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9526 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPL(gO2,gI2))*
         CpbarFdVZpFdPL(gO1,gI2);
   }
   tmp_9525 += tmp_9526;
   result += (-1) * tmp_9525;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fd_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9527;
   std::complex<double> tmp_9528;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9529;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9529 += B1(p,MFDX(gI2),MSHp0(gI1))*Conj(CpbarFdconjSHp0FDXPL
            (gO2,gI1,gI2))*CpbarFdconjSHp0FDXPL(gO1,gI1,gI2);
      }
      tmp_9528 += tmp_9529;
   }
   tmp_9527 += tmp_9528;
   result += (-0.5) * tmp_9527;
   std::complex<double> tmp_9530;
   std::complex<double> tmp_9531;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9532;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9532 += B1(p,MFu(gI2),MHpm(gI1))*Conj(CpbarFdHpmFuPL(gO2,gI1
            ,gI2))*CpbarFdHpmFuPL(gO1,gI1,gI2);
      }
      tmp_9531 += tmp_9532;
   }
   tmp_9530 += tmp_9531;
   result += (-0.5) * tmp_9530;
   std::complex<double> tmp_9533;
   std::complex<double> tmp_9534;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9535;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9535 += B1(p,MFd(gI1),MAh(gI2))*Conj(CpbarFdFdAhPL(gO2,gI1,
            gI2))*CpbarFdFdAhPL(gO1,gI1,gI2);
      }
      tmp_9534 += tmp_9535;
   }
   tmp_9533 += tmp_9534;
   result += (-0.5) * tmp_9533;
   std::complex<double> tmp_9536;
   std::complex<double> tmp_9537;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9538;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9538 += B1(p,MFd(gI2),Mhh(gI1))*Conj(CpbarFdhhFdPL(gO2,gI1,
            gI2))*CpbarFdhhFdPL(gO1,gI1,gI2);
      }
      tmp_9537 += tmp_9538;
   }
   tmp_9536 += tmp_9537;
   result += (-0.5) * tmp_9536;
   std::complex<double> tmp_9539;
   std::complex<double> tmp_9540;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9540 += B1(p,MGlu,MSd(gI1))*Conj(CpbarFdSdGluPL(gO2,gI1,1))*
         CpbarFdSdGluPL(gO1,gI1,1);
   }
   tmp_9539 += tmp_9540;
   result += (-0.6666666666666666) * tmp_9539;
   std::complex<double> tmp_9541;
   std::complex<double> tmp_9542;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9543;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9543 += B1(p,MChiP(gI2),MSDX(gI1))*Conj(CpbarFdSDXChiPPL(gO2
            ,gI1,gI2))*CpbarFdSDXChiPPL(gO1,gI1,gI2);
      }
      tmp_9542 += tmp_9543;
   }
   tmp_9541 += tmp_9542;
   result += (-0.5) * tmp_9541;
   std::complex<double> tmp_9544;
   std::complex<double> tmp_9545;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9546;
      for (unsigned gI2 = 0; gI2 < 2; ++gI2) {
         tmp_9546 += B1(p,MCha(gI2),MSu(gI1))*Conj(CpbarFdSuChaPL(gO2,gI1
            ,gI2))*CpbarFdSuChaPL(gO1,gI1,gI2);
      }
      tmp_9545 += tmp_9546;
   }
   tmp_9544 += tmp_9545;
   result += (-0.5) * tmp_9544;
   std::complex<double> tmp_9547;
   std::complex<double> tmp_9548;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9549;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9549 += B1(p,MChi(gI2),MSd(gI1))*Conj(CpbarFdSdChiPL(gO2,gI1
            ,gI2))*CpbarFdSdChiPL(gO1,gI1,gI2);
      }
      tmp_9548 += tmp_9549;
   }
   tmp_9547 += tmp_9548;
   result += (-0.5) * tmp_9547;
   std::complex<double> tmp_9550;
   std::complex<double> tmp_9551;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9551 += B1(p,MFu(gI2),MVWm)*Conj(CpbarFdVWmFuPR(gO2,gI2))*
         CpbarFdVWmFuPR(gO1,gI2);
   }
   tmp_9550 += tmp_9551;
   result += (-1) * tmp_9550;
   std::complex<double> tmp_9552;
   std::complex<double> tmp_9553;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9553 += B1(p,MFd(gI2),MVZ)*Conj(CpbarFdVZFdPR(gO2,gI2))*
         CpbarFdVZFdPR(gO1,gI2);
   }
   tmp_9552 += tmp_9553;
   result += (-1) * tmp_9552;
   std::complex<double> tmp_9554;
   std::complex<double> tmp_9555;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9555 += B1(p,MFd(gI2),MVZp)*Conj(CpbarFdVZpFdPR(gO2,gI2))*
         CpbarFdVZpFdPR(gO1,gI2);
   }
   tmp_9554 += tmp_9555;
   result += (-1) * tmp_9554;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_1_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9556;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9557;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9557 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_9556 += tmp_9557;
   }
   result += tmp_9556;
   std::complex<double> tmp_9558;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9559;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9559 += B0(p,MFDX(gI2),MSHpp(gI1))*Conj(CpbarFuconjSHppFDXPL
            (gO2,gI1,gI2))*CpbarFuconjSHppFDXPR(gO1,gI1,gI2)*MFDX(gI2);
      }
      tmp_9558 += tmp_9559;
   }
   result += tmp_9558;
   std::complex<double> tmp_9560;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9561;
      std::complex<double> tmp_9562;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9562 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_9561 += tmp_9562;
      tmp_9560 += (MCha(gI1)) * tmp_9561;
   }
   result += tmp_9560;
   std::complex<double> tmp_9563;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9564;
      std::complex<double> tmp_9565;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9565 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_9564 += tmp_9565;
      tmp_9563 += (MFu(gI1)) * tmp_9564;
   }
   result += tmp_9563;
   std::complex<double> tmp_9566;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9567;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9567 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_9566 += tmp_9567;
   }
   result += tmp_9566;
   std::complex<double> tmp_9568;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9569;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9569 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9568 += tmp_9569;
   }
   result += tmp_9568;
   std::complex<double> tmp_9570;
   std::complex<double> tmp_9571;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9571 += B0(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_9570 += tmp_9571;
   result += (-4) * tmp_9570;
   std::complex<double> tmp_9572;
   std::complex<double> tmp_9573;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9573 += B0(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9572 += tmp_9573;
   result += (-4) * tmp_9572;
   std::complex<double> tmp_9574;
   std::complex<double> tmp_9575;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9575 += B0(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9574 += tmp_9575;
   result += (-4) * tmp_9574;
   std::complex<double> tmp_9576;
   std::complex<double> tmp_9577;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9577 += B0(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9576 += tmp_9577;
   result += (-4) * tmp_9576;
   std::complex<double> tmp_9578;
   std::complex<double> tmp_9579;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9579 += B0(p,MChaP,MSDX(gI2))*Conj(CpbarFubarChaPSDXPL(gO2,gI2))*
         CpbarFubarChaPSDXPR(gO1,gI2);
   }
   tmp_9578 += tmp_9579;
   result += (MChaP) * tmp_9578;
   std::complex<double> tmp_9580;
   std::complex<double> tmp_9581;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9581 += B0(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,1))*
         CpbarFuSuGluPR(gO1,gI1,1);
   }
   tmp_9580 += tmp_9581;
   result += (1.3333333333333333*MGlu) * tmp_9580;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PR_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9582;
   std::complex<double> tmp_9583;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9584;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9584 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPR(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_9583 += tmp_9584;
   }
   tmp_9582 += tmp_9583;
   result += (-0.5) * tmp_9582;
   std::complex<double> tmp_9585;
   std::complex<double> tmp_9586;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9587;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9587 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(CpbarFuconjSHppFDXPR
            (gO2,gI1,gI2))*CpbarFuconjSHppFDXPR(gO1,gI1,gI2);
      }
      tmp_9586 += tmp_9587;
   }
   tmp_9585 += tmp_9586;
   result += (-0.5) * tmp_9585;
   std::complex<double> tmp_9588;
   std::complex<double> tmp_9589;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9590;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9590 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPR(gO2,
            gI1,gI2))*CpbarFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_9589 += tmp_9590;
   }
   tmp_9588 += tmp_9589;
   result += (-0.5) * tmp_9588;
   std::complex<double> tmp_9591;
   std::complex<double> tmp_9592;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9593;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9593 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPR(gO2,gI1,
            gI2))*CpbarFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_9592 += tmp_9593;
   }
   tmp_9591 += tmp_9592;
   result += (-0.5) * tmp_9591;
   std::complex<double> tmp_9594;
   std::complex<double> tmp_9595;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9596;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9596 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPR(gO2,gI1,
            gI2))*CpbarFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_9595 += tmp_9596;
   }
   tmp_9594 += tmp_9595;
   result += (-0.5) * tmp_9594;
   std::complex<double> tmp_9597;
   std::complex<double> tmp_9598;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9598 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPR(gO2,gI1,1))*
         CpbarFuSuGluPR(gO1,gI1,1);
   }
   tmp_9597 += tmp_9598;
   result += (-0.6666666666666666) * tmp_9597;
   std::complex<double> tmp_9599;
   std::complex<double> tmp_9600;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9601;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9601 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPR(gO2,gI1
            ,gI2))*CpbarFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_9600 += tmp_9601;
   }
   tmp_9599 += tmp_9600;
   result += (-0.5) * tmp_9599;
   std::complex<double> tmp_9602;
   std::complex<double> tmp_9603;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9603 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPL(gO2,gI2))*
         CpbarFuconjVWmFdPL(gO1,gI2);
   }
   tmp_9602 += tmp_9603;
   result += (-1) * tmp_9602;
   std::complex<double> tmp_9604;
   std::complex<double> tmp_9605;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9605 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPL(gO2,gI2))*
         CpbarFuVPFuPL(gO1,gI2);
   }
   tmp_9604 += tmp_9605;
   result += (-1) * tmp_9604;
   std::complex<double> tmp_9606;
   std::complex<double> tmp_9607;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9607 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPL(gO2,gI2))*
         CpbarFuVZFuPL(gO1,gI2);
   }
   tmp_9606 += tmp_9607;
   result += (-1) * tmp_9606;
   std::complex<double> tmp_9608;
   std::complex<double> tmp_9609;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9609 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPL(gO2,gI2))*
         CpbarFuVZpFuPL(gO1,gI2);
   }
   tmp_9608 += tmp_9609;
   result += (-1) * tmp_9608;
   std::complex<double> tmp_9610;
   std::complex<double> tmp_9611;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9611 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarFubarChaPSDXPR(gO2,gI2))*
         CpbarFubarChaPSDXPR(gO1,gI2);
   }
   tmp_9610 += tmp_9611;
   result += (-0.5) * tmp_9610;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PL_heavy_rotated(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9612;
   std::complex<double> tmp_9613;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9614;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9614 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarFuconjHpmFdPL(gO2
            ,gI1,gI2))*CpbarFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_9613 += tmp_9614;
   }
   tmp_9612 += tmp_9613;
   result += (-0.5) * tmp_9612;
   std::complex<double> tmp_9615;
   std::complex<double> tmp_9616;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9617;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9617 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(CpbarFuconjSHppFDXPL
            (gO2,gI1,gI2))*CpbarFuconjSHppFDXPL(gO1,gI1,gI2);
      }
      tmp_9616 += tmp_9617;
   }
   tmp_9615 += tmp_9616;
   result += (-0.5) * tmp_9615;
   std::complex<double> tmp_9618;
   std::complex<double> tmp_9619;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9620;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9620 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarFubarChaSdPL(gO2,
            gI1,gI2))*CpbarFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_9619 += tmp_9620;
   }
   tmp_9618 += tmp_9619;
   result += (-0.5) * tmp_9618;
   std::complex<double> tmp_9621;
   std::complex<double> tmp_9622;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9623;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9623 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarFuFuAhPL(gO2,gI1,
            gI2))*CpbarFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_9622 += tmp_9623;
   }
   tmp_9621 += tmp_9622;
   result += (-0.5) * tmp_9621;
   std::complex<double> tmp_9624;
   std::complex<double> tmp_9625;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9626;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9626 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarFuhhFuPL(gO2,gI1,
            gI2))*CpbarFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_9625 += tmp_9626;
   }
   tmp_9624 += tmp_9625;
   result += (-0.5) * tmp_9624;
   std::complex<double> tmp_9627;
   std::complex<double> tmp_9628;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9628 += B1(p,MGlu,MSu(gI1))*Conj(CpbarFuSuGluPL(gO2,gI1,1))*
         CpbarFuSuGluPL(gO1,gI1,1);
   }
   tmp_9627 += tmp_9628;
   result += (-0.6666666666666666) * tmp_9627;
   std::complex<double> tmp_9629;
   std::complex<double> tmp_9630;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9631;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9631 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarFuSuChiPL(gO2,gI1
            ,gI2))*CpbarFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_9630 += tmp_9631;
   }
   tmp_9629 += tmp_9630;
   result += (-0.5) * tmp_9629;
   std::complex<double> tmp_9632;
   std::complex<double> tmp_9633;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9633 += B1(p,MFd(gI2),MVWm)*Conj(CpbarFuconjVWmFdPR(gO2,gI2))*
         CpbarFuconjVWmFdPR(gO1,gI2);
   }
   tmp_9632 += tmp_9633;
   result += (-1) * tmp_9632;
   std::complex<double> tmp_9634;
   std::complex<double> tmp_9635;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9635 += B1(p,MFu(gI2),0)*Conj(CpbarFuVPFuPR(gO2,gI2))*
         CpbarFuVPFuPR(gO1,gI2);
   }
   tmp_9634 += tmp_9635;
   result += (-1) * tmp_9634;
   std::complex<double> tmp_9636;
   std::complex<double> tmp_9637;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9637 += B1(p,MFu(gI2),MVZ)*Conj(CpbarFuVZFuPR(gO2,gI2))*
         CpbarFuVZFuPR(gO1,gI2);
   }
   tmp_9636 += tmp_9637;
   result += (-1) * tmp_9636;
   std::complex<double> tmp_9638;
   std::complex<double> tmp_9639;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9639 += B1(p,MFu(gI2),MVZp)*Conj(CpbarFuVZpFuPR(gO2,gI2))*
         CpbarFuVZpFuPR(gO1,gI2);
   }
   tmp_9638 += tmp_9639;
   result += (-1) * tmp_9638;
   std::complex<double> tmp_9640;
   std::complex<double> tmp_9641;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9641 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarFubarChaPSDXPL(gO2,gI2))*
         CpbarFubarChaPSDXPL(gO1,gI2);
   }
   tmp_9640 += tmp_9641;
   result += (-0.5) * tmp_9640;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_1_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9642;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9643;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9643 += B0(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2)*MFd(gI2);
      }
      tmp_9642 += tmp_9643;
   }
   result += tmp_9642;
   std::complex<double> tmp_9644;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9645;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9645 += B0(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPL(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPR(gO1,gI1,gI2)
            *MFDX(gI2);
      }
      tmp_9644 += tmp_9645;
   }
   result += tmp_9644;
   std::complex<double> tmp_9646;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9647;
      std::complex<double> tmp_9648;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9648 += B0(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_9647 += tmp_9648;
      tmp_9646 += (MCha(gI1)) * tmp_9647;
   }
   result += tmp_9646;
   std::complex<double> tmp_9649;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9650;
      std::complex<double> tmp_9651;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9651 += B0(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_9650 += tmp_9651;
      tmp_9649 += (MFu(gI1)) * tmp_9650;
   }
   result += tmp_9649;
   std::complex<double> tmp_9652;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9653;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9653 += B0(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2)*MFu(gI2);
      }
      tmp_9652 += tmp_9653;
   }
   result += tmp_9652;
   std::complex<double> tmp_9654;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9655;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9655 += B0(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2)*MChi(gI2);
      }
      tmp_9654 += tmp_9655;
   }
   result += tmp_9654;
   std::complex<double> tmp_9656;
   std::complex<double> tmp_9657;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9657 += B0(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2)*MFd(gI2);
   }
   tmp_9656 += tmp_9657;
   result += (-4) * tmp_9656;
   std::complex<double> tmp_9658;
   std::complex<double> tmp_9659;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9659 += B0(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9658 += tmp_9659;
   result += (-4) * tmp_9658;
   std::complex<double> tmp_9660;
   std::complex<double> tmp_9661;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9661 += B0(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9660 += tmp_9661;
   result += (-4) * tmp_9660;
   std::complex<double> tmp_9662;
   std::complex<double> tmp_9663;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9663 += B0(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2)*MFu(gI2);
   }
   tmp_9662 += tmp_9663;
   result += (-4) * tmp_9662;
   std::complex<double> tmp_9664;
   std::complex<double> tmp_9665;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9665 += B0(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPL(gO2,gI2))*
         CpbarUFubarChaPSDXPR(gO1,gI2);
   }
   tmp_9664 += tmp_9665;
   result += (MChaP) * tmp_9664;
   std::complex<double> tmp_9666;
   std::complex<double> tmp_9667;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9667 += B0(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_9666 += tmp_9667;
   result += (1.3333333333333333*MGlu) * tmp_9666;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PR_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9668;
   std::complex<double> tmp_9669;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9670;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9670 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPR(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPR(gO1,gI1,gI2);
      }
      tmp_9669 += tmp_9670;
   }
   tmp_9668 += tmp_9669;
   result += (-0.5) * tmp_9668;
   std::complex<double> tmp_9671;
   std::complex<double> tmp_9672;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9673;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9673 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPR(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPR(gO1,gI1,gI2)
            ;
      }
      tmp_9672 += tmp_9673;
   }
   tmp_9671 += tmp_9672;
   result += (-0.5) * tmp_9671;
   std::complex<double> tmp_9674;
   std::complex<double> tmp_9675;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9676;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9676 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPR(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPR(gO1,gI1,gI2);
      }
      tmp_9675 += tmp_9676;
   }
   tmp_9674 += tmp_9675;
   result += (-0.5) * tmp_9674;
   std::complex<double> tmp_9677;
   std::complex<double> tmp_9678;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9679;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9679 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPR(gO2,gI1,
            gI2))*CpbarUFuFuAhPR(gO1,gI1,gI2);
      }
      tmp_9678 += tmp_9679;
   }
   tmp_9677 += tmp_9678;
   result += (-0.5) * tmp_9677;
   std::complex<double> tmp_9680;
   std::complex<double> tmp_9681;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9682;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9682 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPR(gO2,gI1,
            gI2))*CpbarUFuhhFuPR(gO1,gI1,gI2);
      }
      tmp_9681 += tmp_9682;
   }
   tmp_9680 += tmp_9681;
   result += (-0.5) * tmp_9680;
   std::complex<double> tmp_9683;
   std::complex<double> tmp_9684;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9684 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPR(gO2,gI1,1))*
         CpbarUFuSuGluPR(gO1,gI1,1);
   }
   tmp_9683 += tmp_9684;
   result += (-0.6666666666666666) * tmp_9683;
   std::complex<double> tmp_9685;
   std::complex<double> tmp_9686;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9687;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9687 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPR(gO2,
            gI1,gI2))*CpbarUFuSuChiPR(gO1,gI1,gI2);
      }
      tmp_9686 += tmp_9687;
   }
   tmp_9685 += tmp_9686;
   result += (-0.5) * tmp_9685;
   std::complex<double> tmp_9688;
   std::complex<double> tmp_9689;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9689 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPL(gO2,gI2))*
         CpbarUFuconjVWmFdPL(gO1,gI2);
   }
   tmp_9688 += tmp_9689;
   result += (-1) * tmp_9688;
   std::complex<double> tmp_9690;
   std::complex<double> tmp_9691;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9691 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPL(gO2,gI2))*
         CpbarUFuVPFuPL(gO1,gI2);
   }
   tmp_9690 += tmp_9691;
   result += (-1) * tmp_9690;
   std::complex<double> tmp_9692;
   std::complex<double> tmp_9693;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9693 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPL(gO2,gI2))*
         CpbarUFuVZFuPL(gO1,gI2);
   }
   tmp_9692 += tmp_9693;
   result += (-1) * tmp_9692;
   std::complex<double> tmp_9694;
   std::complex<double> tmp_9695;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9695 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPL(gO2,gI2))*
         CpbarUFuVZpFuPL(gO1,gI2);
   }
   tmp_9694 += tmp_9695;
   result += (-1) * tmp_9694;
   std::complex<double> tmp_9696;
   std::complex<double> tmp_9697;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9697 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPR(gO2,gI2))*
         CpbarUFubarChaPSDXPR(gO1,gI2);
   }
   tmp_9696 += tmp_9697;
   result += (-0.5) * tmp_9696;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::self_energy_Fu_PL_heavy(double p , unsigned gO1, unsigned gO2) const
{
   std::complex<double> result;

   std::complex<double> tmp_9698;
   std::complex<double> tmp_9699;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9700;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9700 += B1(p,MFd(gI2),MHpm(gI1))*Conj(CpbarUFuconjHpmFdPL(
            gO2,gI1,gI2))*CpbarUFuconjHpmFdPL(gO1,gI1,gI2);
      }
      tmp_9699 += tmp_9700;
   }
   tmp_9698 += tmp_9699;
   result += (-0.5) * tmp_9698;
   std::complex<double> tmp_9701;
   std::complex<double> tmp_9702;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9703;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9703 += B1(p,MFDX(gI2),MSHpp(gI1))*Conj(
            CpbarUFuconjSHppFDXPL(gO2,gI1,gI2))*CpbarUFuconjSHppFDXPL(gO1,gI1,gI2)
            ;
      }
      tmp_9702 += tmp_9703;
   }
   tmp_9701 += tmp_9702;
   result += (-0.5) * tmp_9701;
   std::complex<double> tmp_9704;
   std::complex<double> tmp_9705;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      std::complex<double> tmp_9706;
      for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
         tmp_9706 += B1(p,MCha(gI1),MSd(gI2))*Conj(CpbarUFubarChaSdPL(gO2
            ,gI1,gI2))*CpbarUFubarChaSdPL(gO1,gI1,gI2);
      }
      tmp_9705 += tmp_9706;
   }
   tmp_9704 += tmp_9705;
   result += (-0.5) * tmp_9704;
   std::complex<double> tmp_9707;
   std::complex<double> tmp_9708;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      std::complex<double> tmp_9709;
      for (unsigned gI2 = 0; gI2 < 5; ++gI2) {
         tmp_9709 += B1(p,MFu(gI1),MAh(gI2))*Conj(CpbarUFuFuAhPL(gO2,gI1,
            gI2))*CpbarUFuFuAhPL(gO1,gI1,gI2);
      }
      tmp_9708 += tmp_9709;
   }
   tmp_9707 += tmp_9708;
   result += (-0.5) * tmp_9707;
   std::complex<double> tmp_9710;
   std::complex<double> tmp_9711;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      std::complex<double> tmp_9712;
      for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
         tmp_9712 += B1(p,MFu(gI2),Mhh(gI1))*Conj(CpbarUFuhhFuPL(gO2,gI1,
            gI2))*CpbarUFuhhFuPL(gO1,gI1,gI2);
      }
      tmp_9711 += tmp_9712;
   }
   tmp_9710 += tmp_9711;
   result += (-0.5) * tmp_9710;
   std::complex<double> tmp_9713;
   std::complex<double> tmp_9714;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9714 += B1(p,MGlu,MSu(gI1))*Conj(CpbarUFuSuGluPL(gO2,gI1,1))*
         CpbarUFuSuGluPL(gO1,gI1,1);
   }
   tmp_9713 += tmp_9714;
   result += (-0.6666666666666666) * tmp_9713;
   std::complex<double> tmp_9715;
   std::complex<double> tmp_9716;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      std::complex<double> tmp_9717;
      for (unsigned gI2 = 0; gI2 < 8; ++gI2) {
         tmp_9717 += B1(p,MChi(gI2),MSu(gI1))*Conj(CpbarUFuSuChiPL(gO2,
            gI1,gI2))*CpbarUFuSuChiPL(gO1,gI1,gI2);
      }
      tmp_9716 += tmp_9717;
   }
   tmp_9715 += tmp_9716;
   result += (-0.5) * tmp_9715;
   std::complex<double> tmp_9718;
   std::complex<double> tmp_9719;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9719 += B1(p,MFd(gI2),MVWm)*Conj(CpbarUFuconjVWmFdPR(gO2,gI2))*
         CpbarUFuconjVWmFdPR(gO1,gI2);
   }
   tmp_9718 += tmp_9719;
   result += (-1) * tmp_9718;
   std::complex<double> tmp_9720;
   std::complex<double> tmp_9721;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9721 += B1(p,MFu(gI2),0)*Conj(CpbarUFuVPFuPR(gO2,gI2))*
         CpbarUFuVPFuPR(gO1,gI2);
   }
   tmp_9720 += tmp_9721;
   result += (-1) * tmp_9720;
   std::complex<double> tmp_9722;
   std::complex<double> tmp_9723;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9723 += B1(p,MFu(gI2),MVZ)*Conj(CpbarUFuVZFuPR(gO2,gI2))*
         CpbarUFuVZFuPR(gO1,gI2);
   }
   tmp_9722 += tmp_9723;
   result += (-1) * tmp_9722;
   std::complex<double> tmp_9724;
   std::complex<double> tmp_9725;
   for (unsigned gI2 = 0; gI2 < 3; ++gI2) {
      tmp_9725 += B1(p,MFu(gI2),MVZp)*Conj(CpbarUFuVZpFuPR(gO2,gI2))*
         CpbarUFuVZpFuPR(gO1,gI2);
   }
   tmp_9724 += tmp_9725;
   result += (-1) * tmp_9724;
   std::complex<double> tmp_9726;
   std::complex<double> tmp_9727;
   for (unsigned gI2 = 0; gI2 < 6; ++gI2) {
      tmp_9727 += B1(p,MChaP,MSDX(gI2))*Conj(CpbarUFubarChaPSDXPL(gO2,gI2))*
         CpbarUFubarChaPSDXPL(gO1,gI2);
   }
   tmp_9726 += tmp_9727;
   result += (-0.5) * tmp_9726;

   return result * oneOver16PiSqr;

}

std::complex<double> CSE6SSM_mass_eigenstates::tadpole_hh(unsigned gO1) const
{
   std::complex<double> result;

   result += A0(MVWm)*CpUhhbargWmCgWmC(gO1);
   result += A0(MVWm)*CpUhhbargWmgWm(gO1);
   result += A0(MVZ)*CpUhhbargZgZ(gO1);
   result += A0(MVZp)*CpUhhbargZpgZp(gO1);
   result += 4*A0(MVWm)*CpUhhconjVWmVWm(gO1);
   result += 2*A0(MVZp)*CpUhhVZpVZp(gO1);
   result += 2*A0(MVZ)*CpUhhVZVZ(gO1);
   std::complex<double> tmp_9728;
   std::complex<double> tmp_9729;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9729 += A0(MHpm(gI1))*CpUhhconjHpmHpm(gO1,gI1,gI1);
   }
   tmp_9728 += tmp_9729;
   result += (-1) * tmp_9728;
   std::complex<double> tmp_9730;
   std::complex<double> tmp_9731;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9731 += A0(MSHp0(gI1))*CpUhhconjSHp0SHp0(gO1,gI1,gI1);
   }
   tmp_9730 += tmp_9731;
   result += (-1) * tmp_9730;
   std::complex<double> tmp_9732;
   std::complex<double> tmp_9733;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9733 += A0(MSHpp(gI1))*CpUhhconjSHppSHpp(gO1,gI1,gI1);
   }
   tmp_9732 += tmp_9733;
   result += (-1) * tmp_9732;
   std::complex<double> tmp_9734;
   std::complex<double> tmp_9735;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9735 += A0(MCha(gI1))*(CpUhhbarChaChaPL(gO1,gI1,gI1) +
         CpUhhbarChaChaPR(gO1,gI1,gI1))*MCha(gI1);
   }
   tmp_9734 += tmp_9735;
   result += (2) * tmp_9734;
   std::complex<double> tmp_9736;
   std::complex<double> tmp_9737;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9737 += A0(MChaI(gI1))*(CpUhhbarChaIChaIPL(gO1,gI1,gI1) +
         CpUhhbarChaIChaIPR(gO1,gI1,gI1))*MChaI(gI1);
   }
   tmp_9736 += tmp_9737;
   result += (2) * tmp_9736;
   std::complex<double> tmp_9738;
   for (unsigned gI1 = 0; gI1 < 2; ++gI1) {
      tmp_9738 += A0(MChiP(gI1))*(CpUhhChiPChiPPL(gO1,gI1,gI1) +
         CpUhhChiPChiPPR(gO1,gI1,gI1))*MChiP(gI1);
   }
   result += tmp_9738;
   std::complex<double> tmp_9739;
   std::complex<double> tmp_9740;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9740 += A0(MSv(gI1))*CpUhhconjSvSv(gO1,gI1,gI1);
   }
   tmp_9739 += tmp_9740;
   result += (-1) * tmp_9739;
   std::complex<double> tmp_9741;
   std::complex<double> tmp_9742;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9742 += A0(MFd(gI1))*(CpUhhbarFdFdPL(gO1,gI1,gI1) + CpUhhbarFdFdPR
         (gO1,gI1,gI1))*MFd(gI1);
   }
   tmp_9741 += tmp_9742;
   result += (6) * tmp_9741;
   std::complex<double> tmp_9743;
   std::complex<double> tmp_9744;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9744 += A0(MFDX(gI1))*(CpUhhbarFDXFDXPL(gO1,gI1,gI1) +
         CpUhhbarFDXFDXPR(gO1,gI1,gI1))*MFDX(gI1);
   }
   tmp_9743 += tmp_9744;
   result += (6) * tmp_9743;
   std::complex<double> tmp_9745;
   std::complex<double> tmp_9746;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9746 += A0(MFe(gI1))*(CpUhhbarFeFePL(gO1,gI1,gI1) + CpUhhbarFeFePR
         (gO1,gI1,gI1))*MFe(gI1);
   }
   tmp_9745 += tmp_9746;
   result += (2) * tmp_9745;
   std::complex<double> tmp_9747;
   std::complex<double> tmp_9748;
   for (unsigned gI1 = 0; gI1 < 3; ++gI1) {
      tmp_9748 += A0(MFu(gI1))*(CpUhhbarFuFuPL(gO1,gI1,gI1) + CpUhhbarFuFuPR
         (gO1,gI1,gI1))*MFu(gI1);
   }
   tmp_9747 += tmp_9748;
   result += (6) * tmp_9747;
   std::complex<double> tmp_9749;
   std::complex<double> tmp_9750;
   for (unsigned gI1 = 0; gI1 < 4; ++gI1) {
      tmp_9750 += A0(MSHIPM(gI1))*CpUhhconjSHIPMSHIPM(gO1,gI1,gI1);
   }
   tmp_9749 += tmp_9750;
   result += (-1) * tmp_9749;
   std::complex<double> tmp_9751;
   std::complex<double> tmp_9752;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9752 += A0(MAh(gI1))*CpUhhAhAh(gO1,gI1,gI1);
   }
   tmp_9751 += tmp_9752;
   result += (-0.5) * tmp_9751;
   std::complex<double> tmp_9753;
   std::complex<double> tmp_9754;
   for (unsigned gI1 = 0; gI1 < 5; ++gI1) {
      tmp_9754 += A0(Mhh(gI1))*CpUhhhhhh(gO1,gI1,gI1);
   }
   tmp_9753 += tmp_9754;
   result += (-0.5) * tmp_9753;
   std::complex<double> tmp_9755;
   std::complex<double> tmp_9756;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9756 += A0(MSd(gI1))*CpUhhconjSdSd(gO1,gI1,gI1);
   }
   tmp_9755 += tmp_9756;
   result += (-3) * tmp_9755;
   std::complex<double> tmp_9757;
   std::complex<double> tmp_9758;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9758 += A0(MSDX(gI1))*CpUhhconjSDXSDX(gO1,gI1,gI1);
   }
   tmp_9757 += tmp_9758;
   result += (-3) * tmp_9757;
   std::complex<double> tmp_9759;
   std::complex<double> tmp_9760;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9760 += A0(MSe(gI1))*CpUhhconjSeSe(gO1,gI1,gI1);
   }
   tmp_9759 += tmp_9760;
   result += (-1) * tmp_9759;
   std::complex<double> tmp_9761;
   std::complex<double> tmp_9762;
   for (unsigned gI1 = 0; gI1 < 6; ++gI1) {
      tmp_9762 += A0(MSu(gI1))*CpUhhconjSuSu(gO1,gI1,gI1);
   }
   tmp_9761 += tmp_9762;
   result += (-3) * tmp_9761;
   std::complex<double> tmp_9763;
   std::complex<double> tmp_9764;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9764 += A0(MSHI0(gI1))*CpUhhconjSHI0SHI0(gO1,gI1,gI1);
   }
   tmp_9763 += tmp_9764;
   result += (-1) * tmp_9763;
   std::complex<double> tmp_9765;
   for (unsigned gI1 = 0; gI1 < 7; ++gI1) {
      tmp_9765 += A0(MChiI(gI1))*(CpUhhChiIChiIPL(gO1,gI1,gI1) +
         CpUhhChiIChiIPR(gO1,gI1,gI1))*MChiI(gI1);
   }
   result += tmp_9765;
   std::complex<double> tmp_9766;
   for (unsigned gI1 = 0; gI1 < 8; ++gI1) {
      tmp_9766 += A0(MChi(gI1))*(CpUhhChiChiPL(gO1,gI1,gI1) + CpUhhChiChiPR(
         gO1,gI1,gI1))*MChi(gI1);
   }
   result += tmp_9766;
   result += 2*MChaP*A0(MChaP)*(CpUhhbarChaPChaPPL(gO1) + CpUhhbarChaPChaPPR(
      gO1));

   return result * oneOver16PiSqr;

}

void CSE6SSM_mass_eigenstates::calculate_MSu_3rd_generation(double& msf1, double& msf2, double& theta) const
{
   sfermions::U1_extended_mass_data_two_singlets sf_data;
   sf_data.ml2   = mq2(2,2);
   sf_data.mr2   = mu2(2,2);
   sf_data.yf    = Yu(2,2);
   sf_data.vd    = vd;
   sf_data.vu    = vu;
   sf_data.vs    = vs;
   sf_data.vsb   = vsb;
   sf_data.QHd   = -3.;
   sf_data.QHu   = -2.;
   sf_data.QS    = QS;
   sf_data.QSb   = -QS;
   sf_data.gY    = 0.7745966692414834*g1;
   sf_data.g2    = g2;
   sf_data.gN    = 0.158113883008419*g1p;
   sf_data.Tyf   = TYu(2,2);
   sf_data.mueff = 0.7071067811865475*vs*Lambdax;
   sf_data.T3    = sfermions::Isospin[sfermions::up];
   sf_data.Yl    = sfermions::Hypercharge_left[sfermions::up];
   sf_data.Yr    = sfermions::Hypercharge_right[sfermions::up];
   sf_data.Ql    = sfermions::U1prime_charge_left[sfermions::up];
   sf_data.Qr    = sfermions::U1prime_charge_right[sfermions::up];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CSE6SSM_mass_eigenstates::calculate_MSd_3rd_generation(double& msf1, double& msf2, double& theta) const
{
   sfermions::U1_extended_mass_data_two_singlets sf_data;
   sf_data.ml2   = mq2(2,2);
   sf_data.mr2   = md2(2,2);
   sf_data.yf    = Yd(2,2);
   sf_data.vd    = vd;
   sf_data.vu    = vu;
   sf_data.vs    = vs;
   sf_data.vsb   = vsb;
   sf_data.QHd   = -3.;
   sf_data.QHu   = -2.;
   sf_data.QS    = QS;
   sf_data.QSb   = -QS;
   sf_data.gY    = 0.7745966692414834*g1;
   sf_data.g2    = g2;
   sf_data.gN    = 0.158113883008419*g1p;
   sf_data.Tyf   = TYd(2,2);
   sf_data.mueff = 0.7071067811865475*vs*Lambdax;
   sf_data.T3    = sfermions::Isospin[sfermions::down];
   sf_data.Yl    = sfermions::Hypercharge_left[sfermions::down];
   sf_data.Yr    = sfermions::Hypercharge_right[sfermions::down];
   sf_data.Ql    = sfermions::U1prime_charge_left[sfermions::down];
   sf_data.Qr    = sfermions::U1prime_charge_right[sfermions::down];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CSE6SSM_mass_eigenstates::calculate_MSv_3rd_generation(double& msf1, double& msf2, double& theta) const
{
   sfermions::U1_extended_mass_data_two_singlets sf_data;
   sf_data.ml2   = ml2(2,2);
   sf_data.mr2   = 0.;
   sf_data.yf    = 0.;
   sf_data.vd    = vd;
   sf_data.vu    = vu;
   sf_data.vs    = vs;
   sf_data.vsb   = vsb;
   sf_data.QHd   = -3.;
   sf_data.QHu   = -2.;
   sf_data.QS    = QS;
   sf_data.QSb   = -QS;
   sf_data.gY    = 0.7745966692414834*g1;
   sf_data.g2    = g2;
   sf_data.gN    = 0.158113883008419*g1p;
   sf_data.Tyf   = 0.;
   sf_data.mueff = 0.7071067811865475*vs*Lambdax;
   sf_data.T3    = sfermions::Isospin[sfermions::neutrino];
   sf_data.Yl    = sfermions::Hypercharge_left[sfermions::neutrino];
   sf_data.Yr    = sfermions::Hypercharge_right[sfermions::neutrino];
   sf_data.Ql    = sfermions::U1prime_charge_left[sfermions::neutrino];
   sf_data.Qr    = sfermions::U1prime_charge_right[sfermions::neutrino];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CSE6SSM_mass_eigenstates::calculate_MSe_3rd_generation(double& msf1, double& msf2, double& theta) const
{
   sfermions::U1_extended_mass_data_two_singlets sf_data;
   sf_data.ml2   = ml2(2,2);
   sf_data.mr2   = me2(2,2);
   sf_data.yf    = Ye(2,2);
   sf_data.vd    = vd;
   sf_data.vu    = vu;
   sf_data.vs    = vs;
   sf_data.vsb   = vsb;
   sf_data.QHd   = -3.;
   sf_data.QHu   = -2.;
   sf_data.QS    = QS;
   sf_data.QSb   = -QS;
   sf_data.gY    = 0.7745966692414834*g1;
   sf_data.g2    = g2;
   sf_data.gN    = 0.158113883008419*g1p;
   sf_data.Tyf   = TYe(2,2);
   sf_data.mueff = 0.7071067811865475*vs*Lambdax;
   sf_data.T3    = sfermions::Isospin[sfermions::electron];
   sf_data.Yl    = sfermions::Hypercharge_left[sfermions::electron];
   sf_data.Yr    = sfermions::Hypercharge_right[sfermions::electron];
   sf_data.Ql    = sfermions::U1prime_charge_left[sfermions::electron];
   sf_data.Qr    = sfermions::U1prime_charge_right[sfermions::electron];

   Eigen::Array<double,2,1> msf;

   theta = sfermions::diagonalize_sfermions_2x2(sf_data, msf);
   msf1  = msf(0);
   msf2  = msf(1);
}

void CSE6SSM_mass_eigenstates::self_energy_hh_2loop(double result[6]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double as = Sqr(gs) / (4.0 * Pi);
   double rmt = MFu(2);
   double rmtsq = Sqr(rmt);
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   double vev = Sqrt(Sqr(vd) + Sqr(vu));
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(get_MPseudoscalarHiggs()(0));
   double cotb = 1.0 / tanb;
   double rmb = MFd(2);
   double rmbsq = Sqr(rmb);
   double rmtausq = Sqr(MFe(2));
   double fmasq = Abs(mAsq);
   double lamS = Lambdax;
   static const double root2 = Sqrt(2.0);
   double vevS =  vev / root2;
   double svevS = vs / root2;
   int loop = 2;
   int scheme = 0; // selects DR-bar scheme

   double s11w = 0., s12w = 0., s22w = 0.;
   double s11tau = 0., s12tau = 0., s22tau = 0.;
   double p2w = 0., p2tau = 0.;

   double DMS[3][3] = {{ 0. }}, DMP[3][3] = {{ 0. }};
   double DMSB[3][3] = {{ 0. }}, DMPB[3][3] = {{ 0. }};

   LOCK_MUTEX();

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      self_energy_higgs_2loop_at_as_nmssm(
         &loop, &rmt, &mg, &mst1sq, &mst2sq, &sxt, &cxt,
         &scalesq, &tanb, &vevS, &lamS, &svevS, &as, &DMS, &DMP);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      self_energy_higgs_2loop_ab_as_nmssm(
         &loop, &rmb, &mg, &msb1sq, &msb2sq, &sxb, &cxb,
         &scalesq, &cotb, &vevS, &lamS, &svevS, &as, &DMSB, &DMPB);
   }

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      self_energy_higgs_2loop_at_at_mssm(
         &rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq,
         &msb2sq, &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb,
         &vev2, &s11w, &s12w, &s22w);
      self_energy_pseudoscalar_2loop_at_at_mssm(
         &rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
         &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &p2w);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      self_energy_higgs_2loop_atau_atau_mssm(
         &rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
         &costau, &scalesq, &amu, &tanb, &vev2, &scheme, &s11tau,
         &s22tau, &s12tau);
      self_energy_pseudoscalar_2loop_atau_atau_mssm(
         &rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
         &costau, &scalesq, &amu, &tanb, &vev2, &p2tau);
   }

   UNLOCK_MUTEX();

   // Make appropriate substitutions for elements following 0907.4682
   // bottom of page 9
   std::swap(DMSB[0][0], DMSB[1][1]);
   std::swap(DMSB[0][2], DMSB[1][2]);

   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         DMS[i][j] += DMSB[i][j];
      }
   }

   const double dMA = p2w + p2tau;

   // subtract two-loop tadpoles
   double tadpole[3];
   tadpole_hh_2loop(tadpole);

   DMS[0][0] += s11w + s11tau + dMA * Sqr(sinb) - tadpole[0] / vd;
   DMS[0][1] += s12w + s12tau - dMA * sinb * cosb;
   DMS[1][1] += s22w + s22tau + dMA * Sqr(cosb) - tadpole[1] / vu;
   DMS[2][2] += - tadpole[2] / vs;

   result[0] = - DMS[0][0]; // 1,1 element
   result[1] = - DMS[0][1]; // 1,2 element
   result[2] = - DMS[0][2]; // 1,3 element
   result[3] = - DMS[1][1]; // 2,2 element
   result[4] = - DMS[1][2]; // 2,3 element
   result[5] = - DMS[2][2]; // 3,3 element

}

void CSE6SSM_mass_eigenstates::self_energy_Ah_2loop(double result[6]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double as = Sqr(gs) / (4.0 * Pi);
   double rmt = MFu(2);
   double rmtsq = Sqr(rmt);
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   double vev = Sqrt(Sqr(vd) + Sqr(vu));
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   const double sinb2 = Sqr(sinb);
   const double cosb2 = Sqr(cosb);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(get_MPseudoscalarHiggs()(0));
   double cotb = 1.0 / tanb;
   double rmb = MFd(2);
   double rmbsq = Sqr(rmb);
   double rmtausq = Sqr(MFe(2));
   double fmasq = Abs(mAsq);
   double lamS = Lambdax;
   static const double root2 = Sqrt(2.0);
   double vevS =  vev / root2;
   double svevS = vs / root2;
   int loop = 2;

   double p2w = 0., p2tau = 0.;

   double DMS[3][3] = {{ 0. }}, DMP[3][3] = {{ 0. }};
   double DMSB[3][3] = {{ 0. }}, DMPB[3][3] = {{ 0. }};

   LOCK_MUTEX();

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      self_energy_higgs_2loop_at_as_nmssm(
         &loop, &rmt, &mg, &mst1sq, &mst2sq, &sxt, &cxt,
         &scalesq, &tanb, &vevS, &lamS, &svevS, &as, &DMS, &DMP);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      self_energy_higgs_2loop_ab_as_nmssm(
         &loop, &rmb, &mg, &msb1sq, &msb2sq, &sxb, &cxb,
         &scalesq, &cotb, &vevS, &lamS, &svevS, &as, &DMSB, &DMPB);
   }

   // Corrections as in MSSM, not corrected for NMSSM,
   // should be OK for MSSM states when S state is close to decoupled

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      self_energy_pseudoscalar_2loop_at_at_mssm(
         &rmtsq, &rmbsq, &fmasq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
         &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &p2w);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      self_energy_pseudoscalar_2loop_atau_atau_mssm(
         &rmtausq, &fmasq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
         &costau, &scalesq, &amu, &tanb, &vev2, &p2tau);
   }

   UNLOCK_MUTEX();

   // Make appropriate substitutions for elements following 0907.4682
   // bottom of page 9
   std::swap(DMPB[0][0], DMPB[1][1]);
   std::swap(DMPB[0][2], DMPB[1][2]);

   for (int i = 0; i < 3; i++) {
      for (int j = 0; j < 3; j++) {
         DMP[i][j] += DMPB[i][j];
      }
   }

   const double dMA = p2w + p2tau;

   DMP[0][0] += dMA * sinb2;
   DMP[0][1] += dMA * sinb * cosb;
   DMP[1][1] += dMA * cosb2;

   // subtract two-loop tadpoles
   double tadpole[3];
   tadpole_hh_2loop(tadpole);

   DMP[0][0] += - tadpole[0] / vd;
   DMP[1][1] += - tadpole[1] / vu;
   DMP[2][2] += - tadpole[2] / vs;

   result[0] = - DMP[0][0]; // 1,1 element
   result[1] = - DMP[0][1]; // 1,2 element
   result[2] = - DMP[0][2]; // 1,3 element
   result[3] = - DMP[1][1]; // 2,2 element
   result[4] = - DMP[1][2]; // 2,3 element
   result[5] = - DMP[2][2]; // 3,3 element

}

void CSE6SSM_mass_eigenstates::tadpole_hh_2loop(double result[3]) const
{
   // calculate 3rd generation sfermion masses and mixing angles
   double mst_1, mst_2, theta_t;
   double msb_1, msb_2, theta_b;
   double mstau_1, mstau_2, theta_tau;
   double msnu_1, msnu_2, theta_nu;

   calculate_MSu_3rd_generation(mst_1, mst_2, theta_t);
   calculate_MSd_3rd_generation(msb_1, msb_2, theta_b);
   calculate_MSe_3rd_generation(mstau_1, mstau_2, theta_tau);
   calculate_MSv_3rd_generation(msnu_1, msnu_2, theta_nu);

   double mst1sq = Sqr(mst_1), mst2sq = Sqr(mst_2);
   double msb1sq = Sqr(msb_1), msb2sq = Sqr(msb_2);
   double mstau1sq = Sqr(mstau_1), mstau2sq = Sqr(mstau_2);
   double msnusq = Sqr(msnu_2);
   double sxt = Sin(theta_t), cxt = Cos(theta_t);
   double sxb = Sin(theta_b), cxb = Cos(theta_b);
   double sintau = Sin(theta_tau), costau = Cos(theta_tau);

   double gs = g3;
   double rmtsq = Sqr(MFu(2));
   double scalesq = Sqr(get_scale());
   double vev2 = Sqr(vd) + Sqr(vu);
   const double vev = Sqrt(vev2);
   double tanb = vu/vd;
   const double tanb2 = Sqr(tanb);
   const double sinb = tanb / Sqrt(1. + tanb2);
   const double cosb = 1. / Sqrt(1. + tanb2);
   double amu = -0.7071067811865475*vs*Lambdax;
   double mg = MGlu;
   double mAsq = Sqr(get_MPseudoscalarHiggs()(0));
   double cotbeta = 1.0 / tanb;
   double rmbsq = Sqr(MFd(2));
   double rmtausq = Sqr(MFe(2));

   double s1s = 0., s2s = 0., s1t = 0., s2t = 0.;
   double s1b = 0., s2b = 0., s1tau = 0., s2tau = 0.;

   LOCK_MUTEX();

   if (HIGGS_2LOOP_CORRECTION_AT_AS) {
      tadpole_higgs_2loop_at_as_mssm(
         &rmtsq, &mg, &mst1sq, &mst2sq, &sxt, &cxt, &scalesq,
         &amu, &tanb, &vev2, &gs, &s1s, &s2s);
   }

   if (HIGGS_2LOOP_CORRECTION_AT_AT) {
      tadpole_higgs_2loop_at_at_mssm(
         &rmtsq, &rmbsq, &mAsq, &mst1sq, &mst2sq, &msb1sq, &msb2sq,
         &sxt, &cxt, &sxb, &cxb, &scalesq, &amu, &tanb, &vev2, &s1t, &s2t);
   }

   if (HIGGS_2LOOP_CORRECTION_AB_AS) {
      tadpole_higgs_2loop_ab_as_mssm(
         &rmbsq, &mg, &msb1sq, &msb2sq, &sxb, &cxb, &scalesq,
         &amu, &cotbeta, &vev2, &gs, &s2b, &s1b);
   }

   if (HIGGS_2LOOP_CORRECTION_ATAU_ATAU) {
      tadpole_higgs_2loop_atau_atau_mssm(
         &rmtausq, &mAsq, &msnusq, &mstau1sq, &mstau2sq, &sintau,
         &costau, &scalesq, &amu, &tanb, &vev2, &s1tau, &s2tau);
   }

   UNLOCK_MUTEX();

   // rescale T1 to get TS
   const double sss = s1s * vev * cosb / vs;
   const double ssb = s1b * vev * sinb / vs;

   if (!std::isnan(s1s * s1t * s1b * s1tau * s2s * s2t * s2b * s2tau
                   * sss * ssb)) {
      result[0] = (- s1s - s1t - s1b - s1tau) * vd;
      result[1] = (- s2s - s2t - s2b - s2tau) * vu;
      result[2] = (- sss - ssb) * vs;
   } else {
      result[0] = 0.;
      result[1] = 0.;
      result[2] = 0.;
   }

}


void CSE6SSM_mass_eigenstates::calculate_MVG_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MVG) = 0.;
}

void CSE6SSM_mass_eigenstates::calculate_MGlu_pole()
{
   // diagonalization with medium precision
   const double M_tree(MGlu);
   const double p = MGlu;
   const double self_energy_1  = Re(self_energy_Glu_1(p));
   const double self_energy_PL = Re(self_energy_Glu_PL(p));
   const double self_energy_PR = Re(self_energy_Glu_PR(p));
   const auto M_1loop = M_tree - self_energy_1 - M_tree * (self_energy_PL
      + self_energy_PR);
   PHYSICAL(MGlu) = calculate_singlet_mass(M_1loop);
}

void CSE6SSM_mass_eigenstates::calculate_MFv_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MFv).setConstant(0.);
}

void CSE6SSM_mass_eigenstates::calculate_MChaP_pole()
{
   // diagonalization with medium precision
   const double M_tree(MChaP);
   const double p = MChaP;
   const double self_energy_1  = Re(self_energy_ChaP_1(p));
   const double self_energy_PL = Re(self_energy_ChaP_PL(p));
   const double self_energy_PR = Re(self_energy_ChaP_PR(p));
   const auto M_1loop = M_tree - self_energy_1 - M_tree * (self_energy_PL
      + self_energy_PR);
   PHYSICAL(MChaP) = calculate_singlet_mass(M_1loop);
}

void CSE6SSM_mass_eigenstates::calculate_MVP_pole()
{
   // diagonalization with medium precision
   PHYSICAL(MVP) = 0.;
}

void CSE6SSM_mass_eigenstates::calculate_MVZ_pole()
{
   if (!force_output && problems.is_tachyon(VZ))
      return;

   // diagonalization with medium precision
   const double M_tree(get_mass_matrix_VZ());
   const double p = MVZ;
   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = M_tree - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VZ);

   PHYSICAL(MVZ) = AbsSqrt(mass_sqr);
}

void CSE6SSM_mass_eigenstates::calculate_MVZp_pole()
{
   if (!force_output && problems.is_tachyon(VZp))
      return;

   // diagonalization with medium precision
   const double M_tree(get_mass_matrix_VZp());
   const double p = MVZp;
   const double self_energy = Re(self_energy_VZp(p));
   const double mass_sqr = M_tree - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VZp);

   PHYSICAL(MVZp) = AbsSqrt(mass_sqr);
}

void CSE6SSM_mass_eigenstates::calculate_MSd_pole()
{
   if (!force_output && problems.is_tachyon(Sd))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Sd());

   for (unsigned es = 0; es < 6; ++es) {

      const double p = Abs(MSd(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Sd(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZD;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZD,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::Sd, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZD);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Sd);

      PHYSICAL(MSd(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZD) = mix_ZD;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSv_pole()
{
   if (!force_output && problems.is_tachyon(Sv))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Sv());

   for (unsigned es = 0; es < 3; ++es) {

      const double p = Abs(MSv(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = i1; i2 < 3; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Sv(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree - self_energy);
      Eigen::Array<double,3,1> eigen_values;
      Eigen::Matrix<double,3,3> mix_ZV;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZV,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::Sv, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZV);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Sv);

      PHYSICAL(MSv(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZV) = mix_ZV;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSu_pole()
{
   if (!force_output && problems.is_tachyon(Su))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Su());

   for (unsigned es = 0; es < 6; ++es) {

      const double p = Abs(MSu(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Su(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZU;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZU,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::Su, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZU);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Su);

      PHYSICAL(MSu(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZU) = mix_ZU;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSe_pole()
{
   if (!force_output && problems.is_tachyon(Se))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_Se());

   for (unsigned es = 0; es < 6; ++es) {

      const double p = Abs(MSe(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_Se(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZE;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZE,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::Se, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZE);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(Se);

      PHYSICAL(MSe(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZE) = mix_ZE;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSDX_pole()
{
   if (!force_output && problems.is_tachyon(SDX))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,6,6> self_energy;
   const Eigen::Matrix<double,6,6> M_tree(get_mass_matrix_SDX());

   for (unsigned es = 0; es < 6; ++es) {

      const double p = Abs(MSDX(es));
      for (unsigned i1 = 0; i1 < 6; ++i1) {
         for (unsigned i2 = i1; i2 < 6; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SDX(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,6,6> M_1loop(M_tree - self_energy);
      Eigen::Array<double,6,1> eigen_values;
      Eigen::Matrix<double,6,6> mix_ZDX;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZDX,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::SDX, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_ZDX);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SDX);

      PHYSICAL(MSDX(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(ZDX) = mix_ZDX;
   }
}

void CSE6SSM_mass_eigenstates::calculate_Mhh_pole()
{
   if (!force_output && problems.is_tachyon(hh))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(Mhh) old_Mhh(Mhh), new_Mhh(Mhh);

   do {
      Eigen::Matrix<double,5,5> self_energy;
      const Eigen::Matrix<double,5,5> M_tree(get_mass_matrix_hh());

      // two-loop Higgs self-energy contributions
      double two_loop[6] = { 0. };
      if (pole_mass_loop_order > 1)
         self_energy_hh_2loop(two_loop);

      for (unsigned es = 0; es < 5; ++es) {

         const double p = Abs(old_Mhh(es));
         for (unsigned i1 = 0; i1 < 5; ++i1) {
            for (unsigned i2 = i1; i2 < 5; ++i2) {
               self_energy(i1,i2) = Re(self_energy_hh(p,i1,i2
                  ));
            }
         }

         self_energy(0, 0) += two_loop[0];
         self_energy(0, 1) += two_loop[1];
         self_energy(0, 2) += two_loop[2];
         self_energy(1, 1) += two_loop[3];
         self_energy(1, 2) += two_loop[4];
         self_energy(2, 2) += two_loop[5];

         Symmetrize(self_energy);
         const Eigen::Matrix<double,5,5> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,5,1> eigen_values;
         Eigen::Matrix<double,5,5> mix_ZH;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZH, eigenvalue_error);
            problems.flag_bad_mass(CSE6SSM_info::hh,
               eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZH);
         #endif

         if (eigen_values(es) < 0.)
            problems.flag_tachyon(hh);

         PHYSICAL(Mhh(es)) = AbsSqrt(eigen_values(es));
         if (es == 0)
            PHYSICAL(ZH) = mix_ZH;
      }

      new_Mhh = PHYSICAL(Mhh);
      diff = MaxRelDiff(new_Mhh, old_Mhh);
      old_Mhh = new_Mhh;
      iteration++;
   } while (diff > diagonalization_precision
            && iteration < number_of_mass_iterations);

   if (diff > diagonalization_precision)
      problems.flag_no_pole_mass_convergence(CSE6SSM_info::hh);
   else
      problems.unflag_no_pole_mass_convergence(CSE6SSM_info::hh);
}

void CSE6SSM_mass_eigenstates::calculate_MAh_pole()
{
   if (!force_output && problems.is_tachyon(Ah))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MAh) old_MAh(MAh), new_MAh(MAh);

   do {
      Eigen::Matrix<double,5,5> self_energy;
      const Eigen::Matrix<double,5,5> M_tree(get_mass_matrix_Ah());

      // two-loop Higgs self-energy contributions
      double two_loop[6] = { 0. };
      if (pole_mass_loop_order > 1)
         self_energy_Ah_2loop(two_loop);

      for (unsigned es = 0; es < 5; ++es) {
         // skip goldstone bosons
         if (is_equal_rel(MAh(es), MVZ, 1e-10)) {
            PHYSICAL(MAh(es)) = MVZ;
            continue;
         }
         if (is_equal_rel(MAh(es), MVZp, 1e-10)) {
            PHYSICAL(MAh(es)) = MVZp;
            continue;
         }

         const double p = Abs(old_MAh(es));
         for (unsigned i1 = 0; i1 < 5; ++i1) {
            for (unsigned i2 = i1; i2 < 5; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Ah(p,i1,i2
                  ));
            }
         }

         self_energy(0, 0) += two_loop[0];
         self_energy(0, 1) += two_loop[1];
         self_energy(0, 2) += two_loop[2];
         self_energy(1, 1) += two_loop[3];
         self_energy(1, 2) += two_loop[4];
         self_energy(2, 2) += two_loop[5];

         Symmetrize(self_energy);
         const Eigen::Matrix<double,5,5> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,5,1> eigen_values;
         Eigen::Matrix<double,5,5> mix_ZA;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZA, eigenvalue_error);
            problems.flag_bad_mass(CSE6SSM_info::Ah,
               eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZA);
         #endif

         if (eigen_values(es) < 0.)
            problems.flag_tachyon(Ah);

         PHYSICAL(MAh(es)) = AbsSqrt(eigen_values(es));
         if (es == 2)
            PHYSICAL(ZA) = mix_ZA;
      }

      new_MAh = PHYSICAL(MAh);
      diff = MaxRelDiff(new_MAh, old_MAh);
      old_MAh = new_MAh;
      iteration++;
   } while (diff > diagonalization_precision
            && iteration < number_of_mass_iterations);

   if (diff > diagonalization_precision)
      problems.flag_no_pole_mass_convergence(CSE6SSM_info::Ah);
   else
      problems.unflag_no_pole_mass_convergence(CSE6SSM_info::Ah);
}

void CSE6SSM_mass_eigenstates::calculate_MHpm_pole()
{
   if (!force_output && problems.is_tachyon(Hpm))
      return;

   // diagonalization with high precision
   unsigned iteration = 0;
   double diff = 0.0;
   decltype(MHpm) old_MHpm(MHpm), new_MHpm(MHpm);

   do {
      Eigen::Matrix<double,2,2> self_energy;
      const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Hpm());

      for (unsigned es = 0; es < 2; ++es) {
         // skip goldstone bosons
         if (is_equal_rel(MHpm(es), MVWm, 1e-10)) {
            PHYSICAL(MHpm(es)) = MVWm;
            continue;
         }

         const double p = Abs(old_MHpm(es));
         for (unsigned i1 = 0; i1 < 2; ++i1) {
            for (unsigned i2 = i1; i2 < 2; ++i2) {
               self_energy(i1,i2) = Re(self_energy_Hpm(p,i1,
                  i2));
            }
         }

         Symmetrize(self_energy);
         const Eigen::Matrix<double,2,2> M_1loop(M_tree -
            self_energy);
         Eigen::Array<double,2,1> eigen_values;
         Eigen::Matrix<double,2,2> mix_ZP;
         #ifdef CHECK_EIGENVALUE_ERROR
            double eigenvalue_error;
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZP, eigenvalue_error);
            problems.flag_bad_mass(CSE6SSM_info::Hpm,
               eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
         #else
            fs_diagonalize_hermitian(M_1loop, eigen_values,
               mix_ZP);
         #endif

         if (eigen_values(es) < 0.)
            problems.flag_tachyon(Hpm);

         PHYSICAL(MHpm(es)) = AbsSqrt(eigen_values(es));
         if (es == 1)
            PHYSICAL(ZP) = mix_ZP;
      }

      new_MHpm = PHYSICAL(MHpm);
      diff = MaxRelDiff(new_MHpm, old_MHpm);
      old_MHpm = new_MHpm;
      iteration++;
   } while (diff > diagonalization_precision
            && iteration < number_of_mass_iterations);

   if (diff > diagonalization_precision)
      problems.flag_no_pole_mass_convergence(CSE6SSM_info::Hpm);
   else
      problems.unflag_no_pole_mass_convergence(CSE6SSM_info::Hpm);
}

void CSE6SSM_mass_eigenstates::calculate_MChi_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,8,8> self_energy_1;
   Eigen::Matrix<double,8,8> self_energy_PL;
   Eigen::Matrix<double,8,8> self_energy_PR;
   const Eigen::Matrix<double,8,8> M_tree(get_mass_matrix_Chi());
   for (unsigned es = 0; es < 8; ++es) {
      const double p = Abs(MChi(es));
      for (unsigned i1 = 0; i1 < 8; ++i1) {
         for (unsigned i2 = 0; i2 < 8; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Chi_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_Chi_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_Chi_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,8,8> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,8,8> M_1loop(M_tree + 0.5 * (delta_M
         + delta_M.transpose()));
      Eigen::Array<double,8,1> eigen_values;
      decltype(ZN) mix_ZN;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZN,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::Chi, eigenvalue_error
            > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZN);
      #endif
      if (es == 0)
         PHYSICAL(ZN) = mix_ZN;
      PHYSICAL(MChi(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MCha_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy_1;
   Eigen::Matrix<double,2,2> self_energy_PL;
   Eigen::Matrix<double,2,2> self_energy_PR;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_Cha());
   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MCha(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = 0; i2 < 2; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Cha_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_Cha_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_Cha_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree + delta_M);
      Eigen::Array<double,2,1> eigen_values;
      decltype(UM) mix_UM;
      decltype(UP) mix_UP;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_UM, mix_UP, eigenvalue_error);
      problems.flag_bad_mass(CSE6SSM_info::Cha, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_UM, mix_UP);
   #endif
      if (es == 0) {
         PHYSICAL(UM) = mix_UM;
         PHYSICAL(UP) = mix_UP;
      }
      PHYSICAL(MCha(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MFe_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fe());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFe(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Fe_1(p,i1,i2)
               );
            self_energy_PL(i1,i2) = Re(self_energy_Fe_PL(p,i1,i2
               ));
            self_energy_PR(i1,i2) = Re(self_energy_Fe_PR(p,i1,i2
               ));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZEL) mix_ZEL;
      decltype(ZER) mix_ZER;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_ZEL, mix_ZER, eigenvalue_error
         );
      problems.flag_bad_mass(CSE6SSM_info::Fe, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_ZEL, mix_ZER);
   #endif
      if (es == 0) {
         PHYSICAL(ZEL) = mix_ZEL;
         PHYSICAL(ZER) = mix_ZER;
      }
      PHYSICAL(MFe(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MFd_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fd());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFd(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_Fd_1(p,i1,i2)
               );
            self_energy_PL(i1,i2) = Re(self_energy_Fd_PL(p,i1,i2
               ));
            self_energy_PR(i1,i2) = Re(self_energy_Fd_PR(p,i1,i2
               ));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZDL) mix_ZDL;
      decltype(ZDR) mix_ZDR;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_ZDL, mix_ZDR, eigenvalue_error
         );
      problems.flag_bad_mass(CSE6SSM_info::Fd, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_ZDL, mix_ZDR);
   #endif
      if (es == 0) {
         PHYSICAL(ZDL) = mix_ZDL;
         PHYSICAL(ZDR) = mix_ZDR;
      }
      PHYSICAL(MFd(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MFu_pole()
{
   // diagonalization with medium precision
   const bool add_2loop_corrections = pole_mass_loop_order > 1 &&
      TOP_2LOOP_CORRECTION_QCD;
   const double currentScale = get_scale();

   const double qcd_1l = 0.025330295910584444*(-1.6666666666666667 + 1.*
      Log(Sqr(MFu(2))/Sqr(currentScale)))*Sqr(g3);

   double qcd_2l = 0.;

   if (add_2loop_corrections) {
      qcd_2l = -0.005191204615668296*Power(g3,4) +
         0.0032883224409535764*Power(g3,4)*Log(Sqr(MFu(2))/Sqr(currentScale)) -
         0.0008822328500119351*Power(g3,4)*Sqr(Log(Power(MFu(2),2)/Sqr(
         currentScale)));
   }

   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_Fu());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFu(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            if (i1 == 2 && i2 == 2) {
               self_energy_1(i1,i2)  = Re(
                  self_energy_Fu_1_heavy(p,i1,i2));
               self_energy_PL(i1,i2) = Re(
                  self_energy_Fu_PL_heavy(p,i1,i2));
               self_energy_PR(i1,i2) = Re(
                  self_energy_Fu_PR_heavy(p,i1,i2));
            } else {
               self_energy_1(i1,i2)  = Re(self_energy_Fu_1(p,
                  i1,i2));
               self_energy_PL(i1,i2) = Re(self_energy_Fu_PL(p
                  ,i1,i2));
               self_energy_PR(i1,i2) = Re(self_energy_Fu_PR(p
                  ,i1,i2));
            }
         }
      }
      Eigen::Matrix<double,3,3> delta_M(- self_energy_PR * M_tree -
         M_tree * self_energy_PL - self_energy_1);
      delta_M(2,2) -= M_tree(2,2) * (qcd_1l + qcd_2l);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZUL) mix_ZUL;
      decltype(ZUR) mix_ZUR;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_ZUL, mix_ZUR, eigenvalue_error
         );
      problems.flag_bad_mass(CSE6SSM_info::Fu, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_ZUL, mix_ZUR);
   #endif
      if (es == 0) {
         PHYSICAL(ZUL) = mix_ZUL;
         PHYSICAL(ZUR) = mix_ZUR;
      }
      PHYSICAL(MFu(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MFDX_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,3,3> self_energy_1;
   Eigen::Matrix<double,3,3> self_energy_PL;
   Eigen::Matrix<double,3,3> self_energy_PR;
   const Eigen::Matrix<double,3,3> M_tree(get_mass_matrix_FDX());
   for (unsigned es = 0; es < 3; ++es) {
      const double p = Abs(MFDX(es));
      for (unsigned i1 = 0; i1 < 3; ++i1) {
         for (unsigned i2 = 0; i2 < 3; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_FDX_1(p,i1,i2
               ));
            self_energy_PL(i1,i2) = Re(self_energy_FDX_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_FDX_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,3,3> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,3,3> M_1loop(M_tree + delta_M);
      Eigen::Array<double,3,1> eigen_values;
      decltype(ZDXL) mix_ZDXL;
      decltype(ZDXR) mix_ZDXR;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_ZDXL, mix_ZDXR,
         eigenvalue_error);
      problems.flag_bad_mass(CSE6SSM_info::FDX, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_ZDXL, mix_ZDXR);
   #endif
      if (es == 0) {
         PHYSICAL(ZDXL) = mix_ZDXL;
         PHYSICAL(ZDXR) = mix_ZDXR;
      }
      PHYSICAL(MFDX(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSHI0_pole()
{
   if (!force_output && problems.is_tachyon(SHI0))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,7,7> self_energy;
   const Eigen::Matrix<double,7,7> M_tree(get_mass_matrix_SHI0());

   for (unsigned es = 0; es < 7; ++es) {

      const double p = Abs(MSHI0(es));
      for (unsigned i1 = 0; i1 < 7; ++i1) {
         for (unsigned i2 = i1; i2 < 7; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHI0(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,7,7> M_1loop(M_tree - self_energy);
      Eigen::Array<double,7,1> eigen_values;
      Eigen::Matrix<double,7,7> mix_UHI0;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHI0,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::SHI0,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHI0);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHI0);

      PHYSICAL(MSHI0(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHI0) = mix_UHI0;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSHIPM_pole()
{
   if (!force_output && problems.is_tachyon(SHIPM))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,4,4> self_energy;
   const Eigen::Matrix<double,4,4> M_tree(get_mass_matrix_SHIPM());

   for (unsigned es = 0; es < 4; ++es) {

      const double p = Abs(MSHIPM(es));
      for (unsigned i1 = 0; i1 < 4; ++i1) {
         for (unsigned i2 = i1; i2 < 4; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHIPM(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,4,4> M_1loop(M_tree - self_energy);
      Eigen::Array<double,4,1> eigen_values;
      Eigen::Matrix<double,4,4> mix_UHIPM;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHIPM,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::SHIPM,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHIPM)
            ;
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHIPM);

      PHYSICAL(MSHIPM(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHIPM) = mix_UHIPM;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MChaI_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy_1;
   Eigen::Matrix<double,2,2> self_energy_PL;
   Eigen::Matrix<double,2,2> self_energy_PR;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_ChaI());
   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MChaI(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = 0; i2 < 2; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_ChaI_1(p,i1,
               i2));
            self_energy_PL(i1,i2) = Re(self_energy_ChaI_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_ChaI_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree + delta_M);
      Eigen::Array<double,2,1> eigen_values;
      decltype(ZMI) mix_ZMI;
      decltype(ZPI) mix_ZPI;
   #ifdef CHECK_EIGENVALUE_ERROR
      double eigenvalue_error;
      fs_svd(M_1loop, eigen_values, mix_ZMI, mix_ZPI, eigenvalue_error
         );
      problems.flag_bad_mass(CSE6SSM_info::ChaI, eigenvalue_error >
         diagonalization_precision * Abs(eigen_values(0)));
   #else
      fs_svd(M_1loop, eigen_values, mix_ZMI, mix_ZPI);
   #endif
      if (es == 0) {
         PHYSICAL(ZMI) = mix_ZMI;
         PHYSICAL(ZPI) = mix_ZPI;
      }
      PHYSICAL(MChaI(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MChiI_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,7,7> self_energy_1;
   Eigen::Matrix<double,7,7> self_energy_PL;
   Eigen::Matrix<double,7,7> self_energy_PR;
   const Eigen::Matrix<double,7,7> M_tree(get_mass_matrix_ChiI());
   for (unsigned es = 0; es < 7; ++es) {
      const double p = Abs(MChiI(es));
      for (unsigned i1 = 0; i1 < 7; ++i1) {
         for (unsigned i2 = 0; i2 < 7; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_ChiI_1(p,i1,
               i2));
            self_energy_PL(i1,i2) = Re(self_energy_ChiI_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_ChiI_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,7,7> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,7,7> M_1loop(M_tree + 0.5 * (delta_M
         + delta_M.transpose()));
      Eigen::Array<double,7,1> eigen_values;
      decltype(ZNI) mix_ZNI;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZNI,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::ChiI,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZNI);
      #endif
      if (es == 0)
         PHYSICAL(ZNI) = mix_ZNI;
      PHYSICAL(MChiI(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSHp0_pole()
{
   if (!force_output && problems.is_tachyon(SHp0))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHp0());

   for (unsigned es = 0; es < 2; ++es) {

      const double p = Abs(MSHp0(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = i1; i2 < 2; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHp0(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree - self_energy);
      Eigen::Array<double,2,1> eigen_values;
      Eigen::Matrix<double,2,2> mix_UHp0;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHp0,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::SHp0,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHp0);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHp0);

      PHYSICAL(MSHp0(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHp0) = mix_UHp0;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MSHpp_pole()
{
   if (!force_output && problems.is_tachyon(SHpp))
      return;

   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_SHpp());

   for (unsigned es = 0; es < 2; ++es) {

      const double p = Abs(MSHpp(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = i1; i2 < 2; ++i2) {
            self_energy(i1,i2) = Re(self_energy_SHpp(p,i1,i2));
         }
      }

      Symmetrize(self_energy);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree - self_energy);
      Eigen::Array<double,2,1> eigen_values;
      Eigen::Matrix<double,2,2> mix_UHpp;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHpp,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::SHpp,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_hermitian(M_1loop, eigen_values, mix_UHpp);
      #endif

      if (eigen_values(es) < 0.)
         problems.flag_tachyon(SHpp);

      PHYSICAL(MSHpp(es)) = AbsSqrt(eigen_values(es));
      if (es == 0)
         PHYSICAL(UHpp) = mix_UHpp;
   }
}

void CSE6SSM_mass_eigenstates::calculate_MChiP_pole()
{
   // diagonalization with medium precision
   Eigen::Matrix<double,2,2> self_energy_1;
   Eigen::Matrix<double,2,2> self_energy_PL;
   Eigen::Matrix<double,2,2> self_energy_PR;
   const Eigen::Matrix<double,2,2> M_tree(get_mass_matrix_ChiP());
   for (unsigned es = 0; es < 2; ++es) {
      const double p = Abs(MChiP(es));
      for (unsigned i1 = 0; i1 < 2; ++i1) {
         for (unsigned i2 = 0; i2 < 2; ++i2) {
            self_energy_1(i1,i2)  = Re(self_energy_ChiP_1(p,i1,
               i2));
            self_energy_PL(i1,i2) = Re(self_energy_ChiP_PL(p,i1,
               i2));
            self_energy_PR(i1,i2) = Re(self_energy_ChiP_PR(p,i1,
               i2));
         }
      }
      const Eigen::Matrix<double,2,2> delta_M(- self_energy_PR *
         M_tree - M_tree * self_energy_PL - self_energy_1);
      const Eigen::Matrix<double,2,2> M_1loop(M_tree + 0.5 * (delta_M
         + delta_M.transpose()));
      Eigen::Array<double,2,1> eigen_values;
      decltype(ZNp) mix_ZNp;
      #ifdef CHECK_EIGENVALUE_ERROR
         double eigenvalue_error;
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZNp,
            eigenvalue_error);
         problems.flag_bad_mass(CSE6SSM_info::ChiP,
            eigenvalue_error > diagonalization_precision * Abs(eigen_values(0)));
      #else
         fs_diagonalize_symmetric(M_1loop, eigen_values, mix_ZNp);
      #endif
      if (es == 0)
         PHYSICAL(ZNp) = mix_ZNp;
      PHYSICAL(MChiP(es)) = Abs(eigen_values(es));
   }
}

void CSE6SSM_mass_eigenstates::calculate_MVWm_pole()
{
   if (!force_output && problems.is_tachyon(VWm))
      return;

   // diagonalization with medium precision
   const double M_tree(get_mass_matrix_VWm());
   const double p = MVWm;
   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = M_tree - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VWm);

   PHYSICAL(MVWm) = AbsSqrt(mass_sqr);
}

double CSE6SSM_mass_eigenstates::calculate_MVWm_pole(double p)
{
   if (!force_output && problems.is_tachyon(VWm))
      return 0.;

   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = get_mass_matrix_VWm() - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VWm);

   return AbsSqrt(mass_sqr);
}

double CSE6SSM_mass_eigenstates::calculate_MVZ_pole(double p)
{
   if (!force_output && problems.is_tachyon(VZ))
      return 0.;

   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = get_mass_matrix_VZ() - self_energy;

   if (mass_sqr < 0.)
      problems.flag_tachyon(VZ);

   return AbsSqrt(mass_sqr);
}


double CSE6SSM_mass_eigenstates::calculate_MFu_DRbar(double m_pole, int idx) const
{
   const double p = m_pole;
   const double self_energy_1  = Re(self_energy_Fu_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fu_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fu_PR_heavy_rotated(p,
      idx, idx));

   const double currentScale = get_scale();
   const double qcd_1l = 0.025330295910584444*(-1.6666666666666667 + 1.*
      Log(Sqr(MFu(2))/Sqr(currentScale)))*Sqr(g3);
   const double qcd_2l = -0.003408916029785599*Power(g3,4) +
      0.0011495761378943394*Power(g3,4)*Log(Sqr(MFu(2))/Sqr(currentScale)) -
      0.00024060895909416413*Power(g3,4)*Sqr(Log(Power(MFu(2),2)/Sqr(
      currentScale)));

   const double m_susy_drbar = m_pole + self_energy_1 + m_pole * (
      self_energy_PL + self_energy_PR + qcd_1l + qcd_2l);

   return m_susy_drbar;
}

double CSE6SSM_mass_eigenstates::calculate_MFd_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fd_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fd_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fd_PR_heavy_rotated(p,
      idx, idx));
   const double m_tree = MFd(2);
   const double drbar_conversion = 1 - 0.00020496318737651018*Power(g3,4)
      + 0.0006860288475783287*Sqr(g1) + 0.0023747152416172916*Sqr(g2) -
      0.008443431970194815*Sqr(g3);
   const double m_sm_drbar = m_sm_msbar * drbar_conversion;

   const double m_susy_drbar = m_sm_drbar / (1.0 - self_energy_1/m_tree -
      self_energy_PL - self_energy_PR);

   return m_susy_drbar;
}

double CSE6SSM_mass_eigenstates::calculate_MFe_DRbar(double m_sm_msbar, int idx) const
{
   const double p = m_sm_msbar;
   const double self_energy_1  = Re(self_energy_Fe_1_heavy_rotated(p, idx
      , idx));
   const double self_energy_PL = Re(self_energy_Fe_PL_heavy_rotated(p,
      idx, idx));
   const double self_energy_PR = Re(self_energy_Fe_PR_heavy_rotated(p,
      idx, idx));
   const double drbar_conversion = 1 - 0.0023747152416172916*(0.6*Sqr(g1)
      - Sqr(g2));
   const double m_sm_drbar = m_sm_msbar * drbar_conversion;

   const double m_susy_drbar = m_sm_drbar + self_energy_1 + m_sm_drbar *
      (self_energy_PL + self_energy_PR);

   return m_susy_drbar;
}

double CSE6SSM_mass_eigenstates::calculate_MFv_DRbar(double, int) const
{
   return 0.0;
}

double CSE6SSM_mass_eigenstates::calculate_MVP_DRbar(double)
{
   return 0.0;
}

double CSE6SSM_mass_eigenstates::calculate_MVZ_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VZ(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(VZ);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}

double CSE6SSM_mass_eigenstates::calculate_MVWm_DRbar(double m_pole)
{
   const double p = m_pole;
   const double self_energy = Re(self_energy_VWm(p));
   const double mass_sqr = Sqr(m_pole) + self_energy;

   if (mass_sqr < 0.) {
      problems.flag_tachyon(VWm);
      return m_pole;
   }

   return AbsSqrt(mass_sqr);
}


double CSE6SSM_mass_eigenstates::ThetaW() const
{
   return ArcTan((0.7745966692414834*g1)/g2);
}

double CSE6SSM_mass_eigenstates::v() const
{
   return 2*Sqrt(Sqr(MVWm)/Sqr(g2));
}

double CSE6SSM_mass_eigenstates::ThetaWp() const
{
   return 0.5*ArcTan((2*g1p*Sqrt(6*Sqr(g1) + 10*Sqr(g2))*(3*Sqr(vd) - 2*
      Sqr(vu)))/(6*Sqr(g1)*(Sqr(vd) + Sqr(vu)) + 10*Sqr(g2)*(Sqr(vd) + Sqr(vu))
                 - Sqr(g1p)*(9*Sqr(vd) + Sqr(QS)*Sqr(vs) + Sqr(QS)*Sqr(vsb) + 4*Sqr(vu))));
}


std::ostream& operator<<(std::ostream& ostr, const CSE6SSM_mass_eigenstates& model)
{
   model.print(ostr);
   return ostr;
}

} // namespace flexiblesusy
